if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}

define(function () {
    return function(Module) {

var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(Module) {
  Module = Module || {};

// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'fc-solve', true, true);
Module['FS_createPath']('/fc-solve', 'share', true, true);
Module['FS_createPath']('/fc-solve/share', 'freecell-solver', true, true);
Module['FS_createPath']('/fc-solve/share/freecell-solver', 'presets', true, true);
var fileData0 = [];
fileData0.push.apply(fileData0, [100, 105, 114, 61, 47, 102, 99, 45, 115, 111, 108, 118, 101, 47, 115, 104, 97, 114, 101, 47, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 47, 112, 114, 101, 115, 101, 116, 115, 47, 10, 110, 97, 109, 101, 61, 97, 98, 114, 97, 45, 107, 97, 100, 97, 98, 114, 97, 10, 110, 97, 109, 101, 61, 97, 107, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 97, 98, 114, 97, 45, 107, 97, 100, 97, 98, 114, 97, 46, 115, 104, 10, 110, 97, 109, 101, 61, 97, 109, 97, 116, 101, 117, 114, 45, 115, 116, 97, 114, 10, 110, 97, 109, 101, 61, 97, 115, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 97, 109, 97, 116, 101, 117, 114, 45, 115, 116, 97, 114, 46, 115, 104, 10, 110, 97, 109, 101, 61, 98, 108, 117, 101, 45, 121, 111, 110, 100, 101, 114, 10, 110, 97, 109, 101, 61, 98, 121, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 98, 108, 117, 101, 45, 121, 111, 110, 100, 101, 114, 46, 115, 104, 10, 110, 97, 109, 101, 61, 99, 104, 105, 108, 100, 114, 101, 110, 45, 112, 108, 97, 121, 105, 110, 103, 45, 98, 97, 108, 108, 10, 110, 97, 109, 101, 61, 99, 112, 98, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 99, 104, 105, 108, 100, 114, 101, 110, 45, 112, 108, 97, 121, 105, 110, 103, 45, 98, 97, 108, 108, 46, 115, 104, 10, 110, 97, 109, 101, 61, 99, 111, 110, 115, 112, 105, 114, 97, 99, 121, 45, 116, 104, 101, 111, 114, 121, 10, 110, 97, 109, 101, 61, 99, 116, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 99, 111, 110, 115, 112, 105, 114, 97, 99, 121, 45, 116, 104, 101, 111, 114, 121, 46, 115, 104, 10, 110, 97, 109, 101, 61, 99, 111, 111, 107, 105, 101, 45, 109, 111, 110, 115, 116, 101, 114, 10, 110, 97, 109, 101, 61, 99, 109, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 99, 111, 111, 107, 105, 101, 45, 109, 111, 110, 115, 116, 101, 114, 46, 115, 104, 10, 110, 97, 109, 101, 61, 99, 111, 111, 108, 45, 106, 105, 118, 101, 115, 10, 110, 97, 109, 101, 61, 99, 106, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 99, 111, 111, 108, 45, 106, 105, 118, 101, 115, 46, 115, 104, 10, 110, 97, 109, 101, 61, 99, 114, 111, 111, 107, 101, 100, 45, 110, 111, 115, 101, 10, 110, 97, 109, 101, 61, 99, 110, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 99, 114, 111, 111, 107, 101, 100, 45, 110, 111, 115, 101, 46, 115, 104, 10, 110, 97, 109, 101, 61, 101, 110, 108, 105, 103, 104, 116, 101, 110, 101, 100, 45, 111, 115, 116, 114, 105, 99, 104, 10, 110, 97, 109, 101, 61, 101, 111, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 101, 110, 108, 105, 103, 104, 116, 101, 110, 101, 100, 45, 111, 115, 116, 114, 105, 99, 104, 46, 115, 104, 10, 110, 97, 109, 101, 61, 102, 111, 111, 108, 115, 45, 103, 111, 108, 100, 10, 110, 97, 109, 101, 61, 102, 103, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 102, 111, 111, 108, 115, 45, 103, 111, 108, 100, 46, 115, 104, 10, 110, 97, 109, 101, 61, 102, 111, 115, 115, 45, 110, 101, 115, 115, 121, 10, 110, 97, 109, 101, 61, 102, 110, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 102, 111, 115, 115, 45, 110, 101, 115, 115, 121, 46, 115, 104, 10, 110, 97, 109, 101, 61, 103, 111, 111, 100, 45, 105, 110, 116, 101, 110, 116, 105, 111, 110, 115, 10, 110, 97, 109, 101, 61, 103, 105, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 108, 32, 99, 111, 111, 108, 45, 106, 105, 118, 101, 115, 32, 45, 110, 105, 32, 45, 108, 32, 102, 111, 111, 108, 115, 45, 103, 111, 108, 100, 10, 110, 97, 109, 101, 61, 103, 111, 111, 101, 121, 45, 117, 110, 107, 110, 111, 119, 110, 45, 116, 104, 105, 110, 103, 10, 110, 97, 109, 101, 61, 103, 117, 116, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 103, 111, 111, 101, 121, 45, 117, 110, 107, 110, 111, 119, 110, 45, 116, 104, 105, 110, 103, 46, 115, 104, 10, 110, 97, 109, 101, 61, 104, 101, 108, 108, 111, 45, 119, 111, 114, 108, 100, 10, 110, 97, 109, 101, 61, 104, 119, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 104, 101, 108, 108, 111, 45, 119, 111, 114, 108, 100, 46, 115, 104, 10, 110, 97, 109, 101, 61, 106, 111, 104, 110, 45, 103, 97, 108, 116, 45, 108, 105, 110, 101, 10, 110, 97, 109, 101, 61, 106, 103, 108, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 54, 44, 106, 111, 104, 110, 95, 103, 97, 108, 116, 95, 108, 105, 110, 101, 45, 53, 48, 48, 46, 115, 104, 10, 110, 97, 109, 101, 61, 108, 111, 111, 107, 105, 110, 103, 45, 103, 108, 97, 115, 115, 10, 110, 97, 109, 101, 61, 108, 103, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 108, 111, 111, 107, 105, 110, 103, 45, 103, 108, 97, 115, 115, 46, 115, 104, 10, 110, 97, 109, 101, 61, 109, 97, 108, 105, 99, 105, 111, 117, 115, 108, 121, 45, 111, 98, 115, 99, 117, 114, 101, 10, 110, 97, 109, 101, 61, 109, 111, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 109, 97, 108, 105, 99, 105, 111, 117, 115, 108, 121, 45, 111, 98, 115, 99, 117, 114, 101, 46, 115, 104, 10, 110, 97, 109, 101, 61, 109, 105, 99, 114, 111, 45, 102, 105, 110, 97, 110, 99, 101, 10, 110, 97, 109, 101, 61, 109, 102, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 109, 105, 99, 114, 111, 45, 102, 105, 110, 97, 110, 99, 101, 46, 115, 104, 10, 110, 97, 109, 101, 61, 109, 105, 99, 114, 111, 45, 102, 105, 110, 97, 110, 99, 101, 45, 105, 109, 112, 114, 111, 118, 101, 100, 10, 110, 97, 109, 101, 61, 109, 102, 105, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 109, 105, 99, 114, 111, 45, 102, 105, 110, 97, 110, 99, 101, 45, 105, 109, 112, 114, 111, 118, 101, 100, 46, 115, 104, 10, 110, 97, 109, 101, 61, 111, 110, 101, 45, 98, 105, 103, 45, 102, 97, 109, 105, 108, 121, 10, 110, 97, 109, 101, 61, 111, 98, 102, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 111, 110, 101, 45, 98, 105, 103, 45, 102, 97, 109, 105, 108, 121, 46, 115, 104, 10, 110, 97, 109, 101, 61, 113, 117, 97, 108, 105, 102, 105, 101, 100, 45, 115, 101, 101, 100, 10, 110, 97, 109, 101, 61, 113, 115, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 113, 117, 97, 108, 105, 102, 105, 101, 100, 45, 115, 101, 101, 100, 46, 115, 104, 10, 110, 97, 109, 101, 61, 113, 117, 97, 108, 105, 102, 105, 101, 100, 45, 115, 101, 101, 100, 45, 105, 109, 112, 114, 111, 118, 101, 100, 10, 110, 97, 109, 101, 61, 113, 115, 105, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 108, 32, 113, 117, 97, 108, 105, 102, 105, 101, 100, 45, 115, 101, 101, 100, 32, 45, 102, 105, 102, 32, 53, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 99, 104, 111, 105, 99, 101, 32, 102, 99, 112, 114, 111, 10, 110, 97, 109, 101, 61, 114, 105, 110, 45, 116, 105, 110, 45, 116, 105, 110, 10, 110, 97, 109, 101, 61, 114, 116, 116, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 114, 105, 110, 45, 116, 105, 110, 45, 116, 105, 110, 46, 115, 104, 10, 110, 97, 109, 101, 61, 115, 101, 110, 116, 105, 101, 110, 116, 45, 112, 101, 97, 114, 108, 115, 10, 110, 97, 109, 101, 61, 115, 112, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 115, 101, 110, 116, 105, 101, 110, 116, 45, 112, 101, 97, 114, 108, 115, 46, 115, 104, 10, 110, 97, 109, 101, 61, 115, 97, 110, 100, 45, 115, 116, 111, 110, 101, 10, 110, 97, 109, 101, 61, 115, 115, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 115, 97, 110, 100, 45, 115, 116, 111, 110, 101, 46, 115, 104, 10, 110, 97, 109, 101, 61, 115, 108, 105, 99, 107, 45, 114, 111, 99, 107, 10, 110, 97, 109, 101, 61, 115, 114, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 108, 32, 103, 111, 111, 101, 121, 45, 117, 110, 107, 110, 111, 119, 110, 45, 116, 104, 105, 110, 103, 32, 45, 110, 105, 32, 45, 108, 32, 115, 97, 110, 100, 45, 115, 116, 111, 110, 101, 10, 110, 97, 109, 101, 61, 116, 101, 97, 45, 102, 111, 114, 45, 116, 119, 111, 10, 110, 97, 109, 101, 61, 116, 102, 116, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 116, 101, 97, 45, 102, 111, 114, 45, 116, 119, 111, 46, 115, 104, 10, 110, 97, 109, 101, 61, 116, 104, 101, 45, 108, 97, 115, 116, 45, 109, 111, 104, 105, 99, 97, 110, 10, 110, 97, 109, 101, 61, 116, 108, 109, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 103, 32, 115, 105, 109, 112, 108, 101, 95, 115, 105, 109, 111, 110, 32, 45, 116, 111, 32, 97, 98, 99, 100, 101, 102, 103, 104, 32, 45, 110, 105, 32, 45, 116, 111, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 10, 110, 97, 109, 101, 61, 116, 104, 114, 101, 101, 45, 101, 105, 103, 104, 116, 121, 10, 110, 97, 109, 101, 61, 116, 101, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 116, 104, 114, 101, 101, 45, 101, 105, 103, 104, 116, 121, 46, 115, 104, 10, 110, 97, 109, 101, 61, 116, 111, 111, 110, 115, 45, 102, 111, 114, 45, 116, 119, 101, 110, 116, 121, 45, 115, 111, 109, 101, 116, 104, 105, 110, 103, 115, 10, 110, 97, 109, 101, 61, 116, 102, 116, 115, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 116, 111, 111, 110, 115, 45, 102, 111, 114, 45, 116, 119, 101, 110, 116, 121, 45, 115, 111, 109, 101, 116, 104, 105, 110, 103, 115, 46, 115, 104, 10, 110, 97, 109, 101, 61, 116, 104, 101, 45, 105, 103, 108, 117, 45, 99, 97, 98, 97, 108, 10, 110, 97, 109, 101, 61, 116, 105, 99, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 116, 104, 101, 45, 105, 103, 108, 117, 45, 99, 97, 98, 97, 108, 46, 115, 104, 10, 110, 97, 109, 101, 61, 118, 105, 100, 101, 111, 45, 101, 100, 105, 116, 105, 110, 103, 10, 110, 97, 109, 101, 61, 118, 101, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 118, 105, 100, 101, 111, 45, 101, 100, 105, 116, 105, 110, 103, 46, 115, 104, 10, 110, 97, 109, 101, 61, 121, 101, 108, 108, 111, 119, 45, 98, 114, 105, 99, 107, 45, 114, 111, 97, 100, 10, 110, 97, 109, 101, 61, 121, 98, 114, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 121, 101, 108, 108, 111, 119, 45, 98, 114, 105, 99, 107, 45, 114, 111, 97, 100, 46, 115, 104, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver', 'presetrc', fileData0, true, true, false);
var fileData1 = [];
fileData1.push.apply(fileData1, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 35, 32, 65, 98, 114, 97, 32, 75, 97, 100, 97, 98, 114, 97, 10, 35, 32, 84, 104, 105, 115, 32, 112, 114, 101, 115, 101, 116, 32, 119, 97, 115, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 67, 83, 32, 80, 114, 101, 115, 101, 116, 32, 71, 101, 110, 101, 114, 97, 116, 105, 111, 110, 32, 83, 121, 115, 116, 101, 109, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 48, 48, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 50, 44, 55, 48, 48, 64, 53, 44, 51, 53, 48, 64, 49, 50, 44, 49, 48, 53, 48, 64, 57, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 48, 44, 49, 48, 53, 48, 64, 53, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 49, 50, 44, 55, 48, 48, 64, 50, 44, 55, 48, 48, 64, 49, 44, 55, 48, 48, 64, 52, 44, 55, 48, 48, 64, 49, 50, 44, 49, 52, 48, 48, 64, 50, 44, 55, 48, 48, 64, 57, 44, 51, 53, 48, 64, 49, 48, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 52, 44, 55, 48, 48, 64, 50, 44, 53, 50, 53, 48, 64, 53, 44, 49, 48, 53, 48, 64, 49, 48, 44, 49, 55, 53, 48, 64, 51, 44, 49, 52, 48, 48, 64, 49, 44, 49, 52, 48, 48, 64, 49, 48, 44, 53, 54, 48, 48, 64, 49, 44, 52, 57, 48, 48, 64, 49, 50, 44, 50, 51, 52, 53, 48, 64, 50, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'abra-kadabra.sh', fileData1, true, true, false);
var fileData2 = [];
fileData2.push.apply(fileData2, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 34, 48, 91, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 51, 44, 91, 48, 49, 56, 55, 52, 54, 53, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 32, 34, 50, 54, 44, 91, 48, 49, 51, 52, 53, 56, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 57, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 51, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 56, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 48, 44, 51, 56, 48, 64, 50, 50, 44, 55, 54, 48, 64, 50, 51, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 49, 50, 44, 55, 54, 48, 64, 49, 56, 44, 49, 53, 50, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 50, 52, 44, 50, 50, 56, 48, 64, 49, 48, 44, 50, 50, 56, 48, 64, 50, 52, 44, 52, 53, 54, 48, 64, 49, 50, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'amateur-star.sh', fileData2, true, true, false);
var fileData3 = [];
fileData3.push.apply(fileData3, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 50, 56, 48, 64, 50, 44, 51, 57, 52, 64, 57, 44, 49, 48, 49, 64, 50, 44, 51, 57, 52, 64, 53, 44, 49, 56, 54, 64, 50, 44, 51, 57, 54, 64, 49, 48, 44, 51, 52, 53, 64, 49, 50, 44, 50, 53, 55, 64, 57, 44, 49, 54, 51, 64, 50, 44, 53, 49, 54, 64, 49, 53, 44, 51, 53, 55, 64, 51, 44, 51, 52, 54, 64, 50, 44, 51, 52, 50, 64, 49, 56, 44, 54, 57, 49, 64, 53, 44, 51, 55, 52, 64, 50, 48, 44, 51, 50, 56, 64, 49, 49, 44, 51, 53, 48, 64, 50, 48, 44, 51, 48, 53, 64, 49, 50, 44, 51, 53, 50, 64, 57, 44, 50, 54, 53, 64, 52, 44, 51, 52, 57, 64, 49, 48, 44, 51, 48, 54, 64, 49, 56, 44, 51, 52, 50, 64, 52, 44, 51, 53, 48, 64, 57, 44, 56, 54, 51, 64, 49, 49, 44, 51, 53, 48, 64, 57, 44, 49, 49, 52, 64, 52, 44, 49, 55, 55, 64, 50, 48, 44, 54, 57, 55, 64, 49, 56, 44, 55, 56, 51, 64, 49, 54, 44, 51, 53, 48, 64, 49, 56, 44, 53, 56, 55, 64, 49, 48, 44, 49, 53, 56, 53, 64, 49, 50, 44, 49, 55, 53, 48, 64, 49, 56, 44, 51, 55, 54, 64, 50, 48, 44, 56, 48, 49, 64, 49, 55, 44, 54, 56, 48, 64, 50, 48, 44, 49, 53, 49, 51, 64, 49, 48, 44, 49, 51, 50, 56, 64, 49, 49, 44, 52, 51, 52, 57, 64, 49, 50, 44, 52, 53, 53, 48, 64, 50, 48, 44, 52, 57, 48, 48, 64, 49, 55, 44, 54, 51, 48, 48, 64, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'blue-yonder.sh', fileData3, true, true, false);
var fileData4 = [];
fileData4.push.apply(fileData4, [35, 33, 47, 98, 105, 110, 47, 98, 97, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 102, 99, 45, 112, 114, 111, 45, 114, 97, 110, 103, 101, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'children-playing-ball.sh', fileData4, true, true, false);
var fileData5 = [];
fileData5.push.apply(fileData5, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 35, 32, 84, 104, 105, 115, 32, 115, 99, 97, 110, 32, 105, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 97, 115, 45, 109, 111, 100, 105, 102, 105, 101, 100, 45, 49, 54, 46, 115, 104, 32, 105, 110, 32, 115, 99, 114, 105, 112, 116, 115, 47, 84, 69, 83, 84, 95, 79, 80, 84, 73, 77, 73, 90, 65, 84, 73, 79, 78, 83, 46, 10, 35, 32, 87, 104, 97, 116, 32, 104, 97, 112, 112, 101, 110, 115, 32, 105, 115, 32, 116, 104, 97, 116, 32, 119, 101, 32, 115, 101, 97, 114, 99, 104, 101, 100, 32, 102, 111, 114, 32, 115, 99, 97, 110, 115, 32, 116, 111, 32, 113, 117, 105, 99, 107, 108, 121, 32, 115, 111, 108, 118, 101, 32, 98, 111, 97, 114, 100, 115, 32, 119, 105, 116, 104, 32, 97, 10, 35, 32, 108, 97, 114, 103, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 105, 116, 101, 114, 97, 116, 105, 111, 110, 115, 46, 10, 35, 10, 35, 32, 73, 116, 32, 105, 115, 32, 110, 97, 109, 101, 100, 32, 34, 67, 111, 110, 115, 112, 105, 114, 97, 99, 121, 32, 84, 104, 101, 111, 114, 121, 34, 32, 116, 111, 32, 99, 111, 109, 109, 101, 109, 111, 114, 97, 116, 101, 32, 116, 104, 101, 32, 74, 101, 119, 105, 115, 104, 32, 104, 111, 108, 105, 100, 97, 121, 32, 111, 102, 10, 35, 32, 80, 117, 114, 105, 109, 32, 116, 104, 97, 116, 32, 99, 111, 105, 110, 99, 105, 100, 101, 100, 32, 119, 105, 116, 104, 32, 105, 116, 115, 32, 109, 105, 110, 116, 105, 110, 103, 44, 32, 98, 121, 32, 105, 110, 115, 112, 105, 114, 97, 116, 105, 111, 110, 32, 102, 114, 111, 109, 10, 35, 32, 104, 116, 116, 112, 58, 47, 47, 115, 104, 108, 111, 109, 105, 102, 46, 108, 105, 118, 101, 106, 111, 117, 114, 110, 97, 108, 46, 99, 111, 109, 47, 54, 50, 50, 52, 51, 46, 104, 116, 109, 108, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 34, 48, 91, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 51, 44, 91, 48, 49, 56, 55, 52, 54, 53, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 32, 34, 50, 54, 44, 91, 48, 49, 51, 52, 53, 56, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 51, 34, 32, 45, 100, 116, 111, 50, 32, 34, 54, 44, 48, 49, 91, 50, 52, 51, 53, 93, 61, 97, 115, 119, 40, 51, 44, 50, 48, 44, 49, 48, 44, 48, 44, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 110, 101, 119, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 54, 56, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 53, 52, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 54, 56, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 55, 48, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 52, 57, 56, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 50, 51, 52, 53, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 52, 49, 55, 57, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 65, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 56, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 56, 54, 57, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 66, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 51, 48, 56, 48, 54, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 67, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 57, 56, 51, 54, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 68, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 49, 53, 50, 51, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 69, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 52, 52, 50, 53, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 70, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 57, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 51, 54, 54, 64, 115, 70, 44, 51, 56, 48, 64, 53, 44, 50, 48, 48, 64, 115, 49, 44, 49, 50, 48, 64, 115, 50, 44, 50, 48, 48, 64, 110, 101, 119, 44, 50, 50, 50, 64, 115, 69, 44, 50, 50, 53, 64, 115, 68, 44, 49, 51, 56, 64, 115, 65, 44, 50, 54, 54, 64, 115, 66, 44, 49, 55, 52, 64, 115, 67, 44, 57, 53, 64, 115, 57, 44, 51, 56, 48, 64, 51, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 56, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 48, 44, 51, 56, 48, 64, 50, 50, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 49, 50, 44, 55, 54, 48, 64, 49, 56, 44, 49, 53, 50, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 50, 52, 44, 50, 50, 56, 48, 64, 49, 48, 44, 50, 50, 56, 48, 64, 50, 52, 44, 52, 53, 54, 48, 64, 49, 50, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'conspiracy-theory.sh', fileData5, true, true, false);
var fileData6 = [];
fileData6.push.apply(fileData6, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 35, 32, 84, 104, 105, 115, 32, 115, 99, 97, 110, 32, 105, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 111, 98, 102, 32, 115, 99, 97, 110, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 34, 48, 91, 49, 50, 52, 93, 61, 97, 115, 119, 40, 49, 41, 106, 91, 51, 54, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 54, 32, 45, 116, 111, 32, 48, 106, 50, 54, 91, 51, 52, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 106, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 53, 54, 106, 56, 57, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 106, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 106, 50, 51, 52, 32, 45, 100, 116, 111, 50, 32, 34, 50, 49, 44, 48, 49, 54, 91, 50, 51, 52, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 106, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 48, 49, 91, 56, 106, 52, 54, 53, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 50, 32, 34, 50, 54, 44, 50, 54, 91, 48, 49, 51, 52, 53, 56, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 51, 34, 32, 45, 100, 116, 111, 50, 32, 34, 54, 44, 48, 49, 91, 50, 52, 51, 53, 93, 61, 97, 115, 119, 40, 51, 44, 50, 48, 44, 49, 48, 44, 48, 44, 49, 41, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 110, 101, 119, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 56, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 56, 54, 57, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 66, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 57, 56, 51, 54, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 68, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 57, 44, 48, 49, 50, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 52, 52, 50, 53, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 70, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 51, 51, 54, 50, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 71, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 49, 56, 50, 57, 54, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 72, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 106, 91, 51, 53, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 57, 44, 91, 48, 49, 50, 93, 106, 91, 52, 54, 56, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 53, 44, 91, 48, 49, 50, 51, 52, 54, 106, 56, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 49, 48, 52, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 73, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 50, 57, 53, 64, 50, 52, 44, 50, 51, 48, 64, 53, 44, 50, 56, 48, 64, 57, 44, 52, 49, 50, 64, 115, 73, 44, 52, 48, 48, 64, 115, 70, 44, 52, 57, 48, 64, 115, 72, 44, 52, 50, 56, 64, 115, 71, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 50, 56, 49, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 55, 54, 64, 53, 44, 50, 48, 48, 64, 110, 101, 119, 44, 50, 50, 53, 64, 115, 68, 44, 50, 54, 54, 64, 115, 66, 44, 51, 56, 48, 64, 50, 52, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'cookie-monster.sh', fileData6, true, true, false);
var fileData7 = [];
fileData7.push.apply(fileData7, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 35, 32, 84, 104, 101, 32, 34, 67, 111, 111, 108, 32, 74, 105, 118, 101, 115, 34, 32, 80, 114, 101, 115, 101, 116, 10, 35, 32, 65, 110, 32, 97, 117, 116, 111, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 112, 114, 101, 115, 101, 116, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 57, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 49, 56, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 50, 44, 49, 48, 53, 48, 64, 57, 44, 55, 48, 48, 64, 49, 56, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 48, 44, 49, 48, 53, 48, 64, 49, 54, 44, 51, 53, 48, 64, 50, 44, 55, 48, 48, 64, 52, 44, 51, 53, 48, 64, 49, 48, 44, 49, 48, 53, 48, 64, 50, 44, 49, 52, 48, 48, 64, 51, 44, 51, 53, 48, 64, 49, 56, 44, 49, 55, 53, 48, 64, 53, 44, 51, 53, 48, 64, 49, 54, 44, 51, 53, 48, 64, 49, 56, 44, 55, 48, 48, 64, 52, 44, 49, 48, 53, 48, 64, 49, 50, 44, 50, 52, 53, 48, 64, 53, 44, 49, 52, 48, 48, 64, 49, 56, 44, 49, 48, 53, 48, 64, 50, 44, 49, 52, 48, 48, 64, 49, 48, 44, 54, 51, 48, 48, 64, 49, 44, 52, 57, 48, 48, 64, 49, 50, 44, 56, 48, 53, 48, 64, 49, 56, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'cool-jives.sh', fileData7, true, true, false);
var fileData8 = [];
fileData8.push.apply(fileData8, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 35, 32, 34, 67, 114, 111, 111, 107, 101, 100, 32, 78, 111, 115, 101, 34, 10, 35, 32, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 97, 116, 111, 109, 105, 99, 32, 109, 111, 118, 101, 115, 32, 112, 114, 101, 115, 101, 116, 32, 116, 104, 97, 116, 32, 119, 97, 115, 32, 114, 101, 99, 111, 114, 100, 101, 100, 46, 10, 35, 32, 73, 116, 32, 99, 97, 110, 32, 115, 111, 108, 118, 101, 32, 116, 104, 101, 32, 77, 83, 32, 51, 50, 48, 48, 48, 32, 105, 110, 32, 50, 55, 53, 44, 54, 54, 50, 44, 50, 57, 54, 32, 105, 116, 101, 114, 97, 116, 105, 111, 110, 115, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 55, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 48, 48, 48, 64, 48, 44, 51, 48, 48, 48, 64, 49, 49, 44, 51, 48, 48, 48, 64, 50, 44, 51, 48, 48, 48, 64, 57, 44, 51, 48, 48, 48, 64, 49, 48, 44, 51, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 52, 44, 51, 48, 48, 48, 64, 48, 44, 51, 48, 48, 48, 64, 49, 44, 51, 48, 48, 48, 64, 49, 48, 44, 51, 48, 48, 48, 64, 49, 49, 44, 51, 48, 48, 48, 64, 50, 44, 51, 48, 48, 48, 64, 48, 44, 51, 48, 48, 48, 64, 49, 44, 51, 48, 48, 48, 64, 54, 44, 51, 48, 48, 48, 64, 49, 44, 51, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 57, 44, 51, 48, 48, 48, 64, 50, 44, 51, 48, 48, 48, 64, 52, 44, 51, 48, 48, 48, 64, 48, 44, 51, 48, 48, 48, 64, 52, 44, 51, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 54, 44, 51, 48, 48, 48, 64, 57, 44, 51, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 52, 44, 54, 48, 48, 48, 64, 57, 44, 49, 50, 48, 48, 48, 64, 49, 48, 44, 54, 48, 48, 48, 64, 49, 44, 51, 48, 48, 48, 64, 54, 44, 54, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 54, 44, 51, 48, 48, 48, 64, 57, 44, 54, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 54, 44, 57, 48, 48, 48, 64, 49, 49, 44, 54, 48, 48, 48, 64, 49, 44, 49, 50, 48, 48, 48, 64, 48, 44, 49, 50, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 52, 44, 54, 48, 48, 48, 64, 57, 44, 54, 48, 48, 48, 64, 49, 44, 51, 51, 48, 48, 48, 64, 50, 44, 49, 50, 48, 48, 48, 64, 57, 44, 57, 48, 48, 48, 64, 49, 49, 44, 54, 48, 48, 48, 64, 48, 44, 54, 48, 48, 48, 64, 52, 44, 54, 48, 48, 48, 64, 50, 44, 50, 52, 48, 48, 48, 64, 52, 44, 57, 48, 48, 48, 64, 54, 44, 52, 53, 48, 48, 48, 64, 48, 44, 57, 48, 48, 48, 64, 49, 44, 50, 49, 48, 48, 48, 64, 51, 44, 57, 48, 48, 48, 64, 52, 44, 50, 49, 48, 48, 48, 64, 53, 44, 51, 51, 48, 48, 48, 64, 54, 44, 49, 56, 48, 48, 48, 64, 51, 44, 50, 49, 48, 48, 48, 64, 57, 44, 52, 50, 48, 48, 48, 64, 49, 48, 44, 52, 50, 48, 48, 48, 64, 48, 44, 52, 50, 48, 48, 48, 64, 51, 44, 54, 54, 48, 48, 48, 64, 50, 44, 49, 50, 51, 48, 48, 48, 64, 51, 44, 49, 50, 57, 48, 48, 48, 64, 54, 44, 56, 49, 48, 48, 48, 64, 52, 44, 49, 51, 50, 48, 48, 48, 64, 53, 44, 49, 54, 53, 48, 48, 48, 64, 49, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'crooked-nose.sh', fileData8, true, true, false);
var fileData9 = [];
fileData9.push.apply(fileData9, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 53, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 55, 64, 50, 52, 44, 51, 54, 55, 64, 53, 44, 52, 51, 49, 64, 57, 44, 51, 53, 55, 64, 49, 48, 44, 51, 52, 52, 64, 50, 52, 44, 51, 53, 49, 64, 51, 44, 51, 52, 53, 64, 53, 44, 51, 52, 53, 64, 49, 50, 44, 51, 53, 48, 64, 57, 44, 51, 51, 54, 64, 49, 56, 44, 54, 48, 55, 64, 52, 44, 51, 52, 56, 64, 50, 52, 44, 56, 53, 51, 64, 49, 55, 44, 52, 51, 55, 64, 53, 44, 51, 53, 56, 64, 50, 48, 44, 51, 48, 48, 64, 49, 49, 44, 51, 53, 48, 64, 50, 48, 44, 51, 52, 55, 64, 49, 53, 44, 52, 53, 51, 64, 49, 48, 44, 53, 54, 57, 64, 50, 48, 44, 50, 49, 57, 64, 50, 50, 44, 50, 50, 54, 64, 50, 49, 44, 49, 50, 51, 64, 49, 50, 44, 55, 48, 48, 64, 50, 52, 44, 51, 50, 56, 64, 57, 44, 54, 51, 53, 64, 49, 48, 44, 57, 51, 51, 64, 49, 56, 44, 54, 50, 57, 64, 50, 49, 44, 50, 55, 49, 64, 49, 56, 44, 50, 52, 51, 64, 57, 44, 49, 54, 54, 64, 49, 50, 44, 51, 53, 48, 64, 53, 44, 50, 55, 48, 64, 50, 53, 44, 51, 48, 49, 64, 49, 49, 44, 49, 52, 57, 55, 64, 49, 50, 44, 57, 50, 48, 64, 49, 53, 44, 51, 53, 48, 64, 50, 52, 44, 49, 52, 48, 48, 64, 49, 48, 44, 51, 56, 49, 51, 64, 50, 52, 44, 52, 52, 53, 51, 64, 49, 50, 44, 52, 55, 49, 50, 64, 49, 55, 44, 53, 54, 54, 55, 64, 50, 53, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'enlightened-ostrich.sh', fileData9, true, true, false);
var fileData10 = [];
fileData10.push.apply(fileData10, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 35, 32, 70, 111, 111, 108, 39, 115, 32, 71, 111, 108, 100, 32, 45, 32, 97, 32, 99, 111, 109, 112, 117, 116, 101, 114, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 115, 99, 97, 110, 32, 111, 102, 32, 97, 116, 111, 109, 105, 99, 32, 109, 111, 118, 101, 115, 46, 10, 35, 32, 84, 97, 107, 101, 115, 32, 50, 53, 54, 44, 52, 52, 50, 44, 57, 49, 54, 32, 73, 116, 101, 114, 97, 116, 105, 111, 110, 115, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 68, 93, 91, 67, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 48, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 55, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 68, 67, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 65, 66, 67, 48, 49, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 69, 65, 66, 67, 68, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 66, 68, 65, 69, 67, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 49, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 51, 44, 49, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 57, 44, 49, 48, 48, 48, 64, 52, 44, 49, 48, 48, 48, 64, 57, 44, 49, 48, 48, 48, 64, 51, 44, 49, 48, 48, 48, 64, 52, 44, 50, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 48, 44, 50, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 49, 52, 44, 50, 48, 48, 48, 64, 49, 49, 44, 49, 48, 48, 48, 64, 49, 52, 44, 49, 48, 48, 48, 64, 51, 44, 49, 48, 48, 48, 64, 49, 49, 44, 49, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 48, 44, 50, 48, 48, 48, 64, 52, 44, 50, 48, 48, 48, 64, 49, 48, 44, 49, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 50, 44, 50, 48, 48, 48, 64, 49, 48, 44, 49, 48, 48, 48, 64, 48, 44, 50, 48, 48, 48, 64, 49, 49, 44, 50, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 49, 48, 44, 49, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 49, 48, 44, 50, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 57, 44, 49, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 49, 52, 44, 51, 48, 48, 48, 64, 56, 44, 49, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 49, 52, 44, 49, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 49, 48, 44, 51, 48, 48, 48, 64, 54, 44, 50, 48, 48, 48, 64, 52, 44, 49, 48, 48, 48, 64, 50, 44, 50, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 49, 49, 44, 50, 48, 48, 48, 64, 54, 44, 49, 48, 48, 48, 64, 48, 44, 53, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 48, 44, 50, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 50, 44, 51, 48, 48, 48, 64, 51, 44, 49, 48, 48, 48, 64, 49, 48, 44, 49, 48, 48, 48, 64, 49, 52, 44, 50, 48, 48, 48, 64, 54, 44, 49, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 50, 44, 50, 48, 48, 48, 64, 49, 49, 44, 54, 48, 48, 48, 64, 56, 44, 56, 48, 48, 48, 64, 57, 44, 51, 48, 48, 48, 64, 49, 44, 50, 48, 48, 48, 64, 49, 48, 44, 50, 48, 48, 48, 64, 49, 52, 44, 51, 48, 48, 48, 64, 49, 53, 44, 52, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 56, 44, 49, 48, 48, 48, 64, 49, 48, 44, 49, 48, 48, 48, 64, 49, 52, 44, 55, 48, 48, 48, 64, 48, 44, 49, 52, 48, 48, 48, 64, 50, 44, 54, 48, 48, 48, 64, 51, 44, 55, 48, 48, 48, 64, 52, 44, 49, 48, 48, 48, 64, 56, 44, 52, 48, 48, 48, 64, 57, 44, 50, 48, 48, 48, 64, 49, 53, 44, 50, 48, 48, 48, 64, 54, 44, 52, 48, 48, 48, 64, 51, 44, 50, 48, 48, 48, 64, 52, 44, 51, 48, 48, 48, 64, 49, 53, 44, 50, 48, 48, 48, 64, 48, 44, 54, 48, 48, 48, 64, 49, 44, 50, 48, 48, 48, 64, 52, 44, 52, 48, 48, 48, 64, 54, 44, 52, 48, 48, 48, 64, 57, 44, 52, 48, 48, 48, 64, 49, 52, 44, 55, 48, 48, 48, 64, 56, 44, 51, 48, 48, 48, 64, 48, 44, 51, 48, 48, 48, 64, 49, 44, 53, 48, 48, 48, 64, 50, 44, 51, 48, 48, 48, 64, 51, 44, 52, 48, 48, 48, 64, 57, 44, 56, 48, 48, 48, 64, 49, 48, 44, 57, 48, 48, 48, 64, 51, 44, 53, 48, 48, 48, 64, 56, 44, 55, 48, 48, 48, 64, 49, 49, 44, 49, 49, 48, 48, 48, 64, 49, 50, 44, 49, 50, 48, 48, 48, 64, 48, 44, 56, 48, 48, 48, 64, 51, 44, 49, 49, 48, 48, 48, 64, 57, 44, 57, 48, 48, 48, 64, 49, 53, 44, 55, 48, 48, 48, 64, 50, 44, 49, 50, 48, 48, 48, 64, 56, 44, 49, 54, 48, 48, 48, 64, 53, 44, 56, 48, 48, 48, 64, 49, 51, 44, 49, 56, 48, 48, 48, 64, 48, 44, 57, 48, 48, 48, 64, 49, 53, 44, 49, 50, 48, 48, 48, 64, 49, 48, 44, 49, 54, 48, 48, 48, 64, 48, 44, 49, 52, 48, 48, 48, 64, 51, 44, 49, 54, 48, 48, 48, 64, 57, 44, 50, 54, 48, 48, 48, 64, 52, 44, 50, 51, 48, 48, 48, 64, 51, 44, 52, 50, 48, 48, 48, 64, 54, 44, 50, 50, 48, 48, 48, 64, 56, 44, 50, 55, 48, 48, 48, 64, 49, 48, 44, 51, 56, 48, 48, 48, 64, 55, 44, 52, 49, 48, 48, 48, 64, 48, 44, 52, 50, 48, 48, 48, 64, 51, 44, 56, 52, 48, 48, 48, 64, 49, 51, 44, 54, 49, 48, 48, 48, 64, 49, 53, 44, 49, 53, 57, 48, 48, 48, 64, 53, 44, 57, 48, 48, 48, 48, 64, 57, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'fools-gold.sh', fileData10, true, true, false);
var fileData11 = [];
fileData11.push.apply(fileData11, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 53, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 55, 64, 50, 52, 44, 51, 54, 55, 64, 53, 44, 52, 51, 49, 64, 57, 44, 51, 53, 55, 64, 49, 48, 44, 51, 52, 52, 64, 50, 52, 44, 51, 53, 49, 64, 51, 44, 51, 52, 53, 64, 53, 44, 51, 52, 53, 64, 49, 50, 44, 51, 53, 48, 64, 57, 44, 51, 51, 54, 64, 49, 56, 44, 54, 48, 55, 64, 52, 44, 51, 52, 56, 64, 50, 52, 44, 56, 53, 51, 64, 49, 55, 44, 52, 51, 55, 64, 53, 44, 51, 53, 56, 64, 50, 48, 44, 51, 48, 48, 64, 49, 49, 44, 51, 53, 48, 64, 50, 48, 44, 51, 52, 55, 64, 49, 53, 44, 52, 53, 51, 64, 49, 48, 44, 53, 54, 57, 64, 50, 48, 44, 50, 49, 57, 64, 50, 50, 44, 50, 50, 54, 64, 50, 49, 44, 49, 50, 51, 64, 49, 50, 44, 55, 48, 48, 64, 50, 52, 44, 51, 50, 56, 64, 57, 44, 54, 51, 53, 64, 49, 48, 44, 57, 51, 51, 64, 49, 56, 44, 54, 50, 57, 64, 50, 49, 44, 50, 55, 49, 64, 49, 56, 44, 50, 52, 51, 64, 57, 44, 49, 54, 54, 64, 49, 50, 44, 51, 53, 48, 64, 53, 44, 50, 55, 48, 64, 50, 53, 44, 51, 48, 49, 64, 49, 49, 44, 49, 52, 57, 55, 64, 49, 50, 44, 57, 50, 48, 64, 49, 53, 44, 51, 53, 48, 64, 50, 52, 44, 49, 52, 48, 48, 64, 49, 48, 44, 51, 56, 49, 51, 64, 50, 52, 44, 52, 52, 53, 51, 64, 49, 50, 44, 52, 55, 49, 50, 64, 49, 55, 44, 53, 54, 54, 55, 64, 50, 53, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'foss-nessy.sh', fileData11, true, true, false);
var fileData12 = [];
fileData12.push.apply(fileData12, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 53, 48, 64, 49, 56, 44, 51, 53, 48, 64, 49, 54, 44, 49, 49, 50, 48, 48, 64, 49, 56, 44, 51, 53, 48, 64, 49, 49, 44, 49, 48, 53, 48, 64, 49, 54, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 53, 44, 50, 56, 48, 48, 64, 49, 56, 44, 49, 48, 53, 48, 64, 49, 54, 44, 51, 53, 48, 64, 49, 56, 44, 49, 52, 48, 48, 64, 49, 54, 44, 51, 53, 48, 64, 57, 44, 49, 52, 48, 48, 64, 49, 49, 44, 55, 48, 48, 64, 57, 44, 49, 48, 53, 48, 64, 53, 44, 51, 53, 48, 64, 50, 44, 49, 52, 48, 48, 64, 53, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 50, 44, 55, 48, 48, 64, 57, 44, 55, 48, 48, 64, 50, 44, 50, 56, 48, 48, 64, 57, 44, 55, 48, 48, 64, 52, 44, 55, 48, 48, 64, 49, 55, 44, 55, 48, 48, 64, 49, 44, 49, 48, 53, 48, 64, 49, 49, 44, 49, 55, 53, 48, 64, 53, 44, 50, 52, 49, 53, 48, 64, 49, 44, 51, 53, 48, 48, 48, 64, 49, 56, 44, 51, 54, 55, 53, 48, 64, 49, 54, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'gooey-unknown-thing.sh', fileData12, true, true, false);
var fileData13 = [];
fileData13.push.apply(fileData13, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 54, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'hello-world.sh', fileData13, true, true, false);
var fileData14 = [];
fileData14.push.apply(fileData14, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 32, 32, 32, 32, 45, 45, 116, 111, 116, 97, 108, 45, 105, 116, 101, 114, 97, 116, 105, 111, 110, 115, 45, 108, 105, 109, 105, 116, 32, 51, 48, 48, 48, 48, 48, 48, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'john_galt_line-500.sh', fileData14, true, true, false);
var fileData15 = [];
fileData15.push.apply(fileData15, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 35, 32, 84, 104, 105, 115, 32, 115, 99, 97, 110, 32, 105, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 99, 109, 32, 115, 99, 97, 110, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 106, 50, 51, 52, 32, 45, 100, 116, 111, 50, 32, 34, 51, 51, 44, 48, 49, 54, 91, 50, 51, 52, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 91, 49, 50, 52, 93, 61, 97, 115, 119, 40, 49, 41, 106, 91, 51, 54, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 53, 44, 48, 49, 54, 91, 50, 51, 52, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 54, 32, 45, 116, 111, 32, 48, 106, 50, 54, 91, 51, 52, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 106, 91, 51, 53, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 57, 44, 91, 48, 49, 50, 93, 106, 91, 52, 54, 56, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 53, 44, 91, 48, 49, 50, 51, 52, 54, 106, 56, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 49, 48, 52, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 73, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 57, 44, 48, 49, 50, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 52, 52, 50, 53, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 70, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 49, 56, 50, 57, 54, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 72, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 51, 51, 54, 50, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 71, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 106, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 48, 49, 91, 56, 106, 52, 54, 53, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 50, 32, 34, 50, 54, 44, 50, 54, 91, 48, 49, 51, 52, 53, 56, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 53, 54, 106, 56, 57, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 51, 34, 32, 45, 100, 116, 111, 50, 32, 34, 54, 44, 48, 49, 91, 50, 52, 51, 53, 93, 61, 97, 115, 119, 40, 51, 44, 50, 48, 44, 49, 48, 44, 48, 44, 49, 41, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 110, 101, 119, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 57, 56, 51, 54, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 68, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 106, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 106, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 56, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 56, 54, 57, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 66, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 50, 52, 53, 64, 50, 52, 44, 50, 51, 48, 64, 53, 44, 50, 56, 48, 64, 57, 44, 52, 49, 50, 64, 115, 73, 44, 52, 48, 48, 64, 115, 70, 44, 52, 57, 48, 64, 115, 72, 44, 52, 50, 56, 64, 115, 71, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 50, 56, 49, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 55, 54, 64, 53, 44, 50, 48, 48, 64, 110, 101, 119, 44, 50, 50, 53, 64, 115, 68, 44, 50, 54, 54, 64, 115, 66, 44, 51, 56, 48, 64, 50, 52, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'looking-glass.sh', fileData15, true, true, false);
var fileData16 = [];
fileData16.push.apply(fileData16, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 53, 44, 52, 44, 48, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 55, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 48, 44, 91, 51, 52, 50, 93, 48, 49, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 52, 48, 44, 50, 44, 52, 48, 44, 48, 44, 52, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 53, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 54, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 57, 57, 44, 50, 44, 54, 53, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 102, 111, 111, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 55, 48, 44, 48, 44, 48, 44, 50, 44, 57, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 44, 82, 117, 110, 58, 56, 56, 52, 56, 64, 50, 49, 44, 82, 117, 110, 58, 54, 50, 56, 50, 64, 50, 50, 44, 82, 117, 110, 58, 53, 48, 50, 48, 64, 50, 51, 44, 82, 117, 110, 58, 50, 49, 50, 56, 64, 50, 52, 44, 82, 117, 110, 58, 54, 56, 51, 51, 64, 50, 53, 44, 82, 117, 110, 58, 55, 50, 57, 48, 64, 50, 54, 44, 82, 117, 110, 58, 54, 54, 49, 57, 64, 50, 55, 44, 82, 117, 110, 58, 51, 55, 57, 55, 64, 50, 56, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 50, 57, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 51, 48, 44, 82, 117, 110, 58, 51, 49, 56, 52, 64, 51, 49, 44, 82, 117, 110, 58, 51, 48, 48, 48, 64, 102, 111, 111, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'maliciously-obscure.sh', fileData16, true, true, false);
var fileData17 = [];
fileData17.push.apply(fileData17, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 53, 44, 52, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 55, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 48, 44, 91, 51, 52, 50, 93, 48, 49, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 52, 48, 44, 50, 44, 52, 48, 44, 48, 44, 52, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 53, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 54, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 57, 57, 44, 50, 44, 54, 53, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 102, 111, 111, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 55, 48, 44, 48, 44, 48, 44, 50, 44, 57, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 53, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 50, 53, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 50, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 44, 82, 117, 110, 58, 56, 56, 52, 56, 64, 50, 49, 44, 82, 117, 110, 58, 54, 50, 56, 50, 64, 50, 50, 44, 82, 117, 110, 58, 53, 48, 50, 48, 64, 50, 51, 44, 82, 117, 110, 58, 50, 49, 50, 56, 64, 50, 52, 44, 82, 117, 110, 58, 54, 56, 51, 51, 64, 50, 53, 44, 82, 117, 110, 58, 55, 50, 57, 48, 64, 50, 54, 44, 82, 117, 110, 58, 54, 54, 49, 57, 64, 50, 55, 44, 82, 117, 110, 58, 51, 55, 57, 55, 64, 50, 56, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 50, 57, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 51, 48, 44, 82, 117, 110, 58, 51, 49, 56, 52, 64, 51, 49, 44, 82, 117, 110, 58, 51, 48, 48, 48, 64, 102, 111, 111, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 49, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'micro-finance-improved.sh', fileData17, true, true, false);
var fileData18 = [];
fileData18.push.apply(fileData18, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 53, 44, 52, 44, 48, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 55, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 48, 44, 91, 51, 52, 50, 93, 48, 49, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 52, 48, 44, 50, 44, 52, 48, 44, 48, 44, 52, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 53, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 54, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 57, 57, 44, 50, 44, 54, 53, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 102, 111, 111, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 55, 48, 44, 48, 44, 48, 44, 50, 44, 57, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 53, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 50, 53, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 50, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 92, 10, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 44, 82, 117, 110, 58, 56, 56, 52, 56, 64, 50, 49, 44, 82, 117, 110, 58, 54, 50, 56, 50, 64, 50, 50, 44, 82, 117, 110, 58, 53, 48, 50, 48, 64, 50, 51, 44, 82, 117, 110, 58, 50, 49, 50, 56, 64, 50, 52, 44, 82, 117, 110, 58, 54, 56, 51, 51, 64, 50, 53, 44, 82, 117, 110, 58, 55, 50, 57, 48, 64, 50, 54, 44, 82, 117, 110, 58, 54, 54, 49, 57, 64, 50, 55, 44, 82, 117, 110, 58, 51, 55, 57, 55, 64, 50, 56, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 50, 57, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 51, 48, 44, 82, 117, 110, 58, 51, 49, 56, 52, 64, 51, 49, 44, 82, 117, 110, 58, 51, 48, 48, 48, 64, 102, 111, 111, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 49, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'micro-finance.sh', fileData18, true, true, false);
var fileData19 = [];
fileData19.push.apply(fileData19, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 35, 32, 84, 104, 105, 115, 32, 115, 99, 97, 110, 32, 105, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 99, 116, 45, 109, 111, 100, 49, 51, 46, 115, 104, 32, 105, 110, 32, 115, 99, 114, 105, 112, 116, 115, 47, 84, 69, 83, 84, 95, 79, 80, 84, 73, 77, 73, 90, 65, 84, 73, 79, 78, 83, 32, 46, 10, 35, 32, 73, 116, 115, 32, 110, 97, 109, 101, 32, 105, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 47, 119, 97, 116, 99, 104, 63, 118, 61, 68, 78, 113, 49, 98, 107, 114, 87, 106, 98, 107, 32, 105, 110, 10, 35, 32, 109, 101, 109, 111, 114, 121, 32, 111, 102, 32, 67, 104, 114, 105, 115, 116, 105, 110, 97, 32, 71, 114, 105, 109, 109, 105, 101, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 34, 48, 91, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 51, 44, 91, 48, 49, 56, 55, 52, 54, 53, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 32, 34, 50, 54, 44, 91, 48, 49, 51, 52, 53, 56, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 51, 34, 32, 45, 100, 116, 111, 50, 32, 34, 54, 44, 48, 49, 91, 50, 52, 51, 53, 93, 61, 97, 115, 119, 40, 51, 44, 50, 48, 44, 49, 48, 44, 48, 44, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 110, 101, 119, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 54, 56, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 53, 52, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 56, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 56, 54, 57, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 66, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 57, 56, 51, 54, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 68, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 49, 53, 50, 51, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 69, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 52, 52, 50, 53, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 70, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 32, 45, 115, 101, 101, 100, 32, 51, 51, 54, 50, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 71, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 56, 50, 57, 54, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 72, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 48, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 48, 52, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 73, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 57, 44, 52, 49, 52, 64, 115, 73, 44, 51, 54, 54, 64, 115, 70, 44, 52, 57, 48, 64, 115, 72, 44, 52, 50, 56, 64, 115, 71, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 53, 44, 50, 48, 48, 64, 115, 49, 44, 50, 48, 48, 64, 110, 101, 119, 44, 50, 50, 50, 64, 115, 69, 44, 50, 50, 53, 64, 115, 68, 44, 50, 54, 54, 64, 115, 66, 44, 51, 56, 48, 64, 51, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 56, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'one-big-family.sh', fileData19, true, true, false);
var fileData20 = [];
fileData20.push.apply(fileData20, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 53, 44, 52, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 55, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 48, 44, 91, 51, 52, 50, 93, 48, 49, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 52, 48, 44, 50, 44, 52, 48, 44, 48, 44, 52, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 53, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 54, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 57, 57, 44, 50, 44, 54, 53, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 102, 111, 111, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 55, 48, 44, 48, 44, 48, 44, 50, 44, 57, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 53, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 50, 53, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 50, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 113, 117, 105, 99, 107, 95, 115, 97, 110, 100, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 114, 97, 110, 100, 40, 41, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 61, 114, 97, 110, 100, 40, 41, 34, 32, 45, 100, 116, 111, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 101, 110, 99, 114, 117, 115, 116, 101, 100, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 34, 49, 44, 48, 44, 48, 44, 48, 44, 49, 34, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 55, 54, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 32, 92, 10, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 44, 82, 117, 110, 58, 56, 56, 52, 56, 64, 50, 49, 44, 82, 117, 110, 58, 54, 50, 56, 50, 64, 50, 50, 44, 82, 117, 110, 58, 53, 48, 50, 48, 64, 50, 51, 44, 82, 117, 110, 58, 50, 49, 50, 56, 64, 50, 52, 44, 82, 117, 110, 58, 54, 56, 51, 51, 64, 50, 53, 44, 82, 117, 110, 58, 55, 50, 57, 48, 64, 50, 54, 44, 82, 117, 110, 58, 54, 54, 49, 57, 64, 50, 55, 44, 82, 117, 110, 58, 51, 55, 57, 55, 64, 50, 56, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 50, 57, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 51, 48, 44, 82, 117, 110, 58, 51, 49, 56, 52, 64, 51, 49, 44, 82, 117, 110, 58, 51, 48, 48, 48, 64, 102, 111, 111, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 49, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 113, 117, 105, 99, 107, 95, 115, 97, 110, 100, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 101, 110, 99, 114, 117, 115, 116, 101, 100, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'qualified-seed.sh', fileData20, true, true, false);
var fileData21 = [];
fileData21.push.apply(fileData21, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'rin-tin-tin.sh', fileData21, true, true, false);
var fileData22 = [];
fileData22.push.apply(fileData22, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 55, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 68, 67, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 65, 66, 67, 48, 49, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 69, 65, 66, 67, 68, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 66, 68, 65, 69, 67, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 49, 48, 53, 48, 64, 53, 44, 51, 53, 48, 64, 54, 44, 50, 53, 50, 48, 48, 64, 53, 44, 51, 53, 48, 64, 54, 44, 51, 57, 53, 53, 48, 64, 53, 44, 51, 53, 48, 64, 54, 44, 50, 49, 48, 48, 48, 64, 53, 44, 51, 53, 48, 64, 48, 44, 49, 55, 53, 48, 64, 53, 44, 51, 53, 48, 64, 54, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 54, 44, 49, 49, 53, 53, 48, 64, 53, 44, 51, 53, 48, 64, 49, 52, 44, 49, 52, 48, 48, 64, 54, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 54, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 54, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 49, 44, 51, 53, 48, 64, 50, 44, 55, 48, 48, 64, 54, 44, 51, 53, 48, 64, 57, 44, 55, 48, 48, 64, 54, 44, 51, 53, 48, 64, 49, 49, 44, 55, 48, 48, 64, 54, 44, 51, 53, 48, 64, 49, 48, 44, 52, 53, 53, 48, 64, 54, 44, 51, 53, 48, 64, 48, 44, 51, 53, 48, 48, 64, 54, 44, 51, 53, 48, 64, 49, 52, 44, 49, 52, 48, 48, 64, 54, 44, 51, 53, 48, 64, 49, 53, 44, 49, 48, 53, 48, 64, 54, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 48, 44, 51, 53, 48, 64, 49, 50, 44, 57, 52, 53, 48, 64, 54, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 49, 52, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 49, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 48, 44, 55, 48, 48, 64, 49, 53, 44, 55, 48, 48, 64, 49, 52, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 49, 52, 44, 49, 52, 48, 48, 64, 54, 44, 51, 53, 48, 64, 48, 44, 51, 53, 48, 64, 49, 44, 51, 53, 48, 64, 49, 52, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 57, 44, 49, 48, 53, 48, 64, 49, 53, 44, 55, 48, 48, 64, 49, 50, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 49, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 49, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 50, 44, 49, 48, 53, 48, 64, 49, 52, 44, 51, 53, 48, 64, 51, 44, 55, 48, 48, 64, 50, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 48, 44, 55, 48, 48, 64, 49, 53, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 50, 44, 49, 48, 53, 48, 64, 48, 44, 55, 48, 48, 64, 49, 52, 44, 55, 48, 48, 64, 48, 44, 51, 53, 48, 64, 51, 44, 55, 48, 48, 64, 49, 48, 44, 51, 53, 48, 64, 49, 49, 44, 53, 57, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 49, 52, 44, 51, 53, 48, 64, 49, 53, 44, 49, 48, 53, 48, 64, 49, 52, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 57, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 52, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 49, 53, 44, 50, 52, 53, 48, 64, 49, 52, 44, 55, 48, 48, 64, 50, 44, 55, 48, 48, 64, 52, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 52, 44, 55, 48, 48, 64, 49, 44, 49, 48, 53, 48, 64, 49, 49, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 49, 44, 49, 52, 48, 48, 64, 50, 44, 51, 53, 48, 64, 49, 49, 44, 55, 48, 48, 64, 52, 44, 50, 56, 48, 48, 64, 57, 44, 50, 49, 48, 48, 64, 50, 44, 49, 48, 53, 48, 64, 57, 44, 49, 52, 48, 48, 64, 50, 44, 55, 48, 48, 64, 48, 44, 55, 48, 48, 64, 49, 52, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 49, 52, 44, 49, 48, 53, 48, 64, 48, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 52, 44, 49, 52, 48, 48, 64, 51, 44, 51, 53, 48, 64, 49, 48, 44, 49, 48, 53, 48, 64, 50, 44, 49, 52, 48, 48, 64, 49, 48, 44, 51, 53, 48, 64, 50, 44, 49, 55, 53, 48, 64, 51, 44, 50, 49, 48, 48, 64, 50, 44, 50, 56, 48, 48, 64, 49, 48, 44, 55, 48, 48, 64, 49, 49, 44, 49, 52, 48, 48, 64, 49, 44, 55, 48, 48, 64, 48, 44, 49, 48, 53, 48, 64, 49, 51, 44, 49, 48, 53, 48, 64, 51, 44, 49, 48, 53, 48, 64, 48, 44, 55, 48, 48, 64, 49, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 50, 44, 49, 52, 48, 48, 64, 49, 49, 44, 55, 48, 48, 64, 49, 44, 49, 52, 48, 48, 64, 49, 50, 44, 49, 52, 48, 48, 64, 48, 44, 51, 53, 48, 64, 49, 44, 51, 53, 48, 64, 48, 44, 50, 56, 48, 48, 64, 54, 44, 50, 56, 48, 48, 64, 51, 44, 56, 52, 48, 48, 64, 49, 51, 44, 50, 56, 48, 48, 64, 49, 49, 44, 53, 54, 48, 48, 64, 49, 51, 44, 50, 56, 48, 48, 64, 49, 52, 44, 50, 56, 48, 48, 64, 49, 51, 44, 50, 56, 48, 48, 64, 49, 52, 44, 49, 48, 53, 48, 48, 64, 54, 44, 51, 53, 48, 48, 64, 57, 44, 56, 48, 53, 48, 64, 48, 44, 49, 48, 53, 48, 64, 49, 52, 44, 51, 49, 53, 48, 64, 51, 44, 49, 48, 53, 48, 64, 49, 50, 44, 55, 51, 53, 48, 64, 52, 44, 49, 48, 53, 48, 64, 49, 51, 44, 49, 49, 53, 53, 48, 64, 49, 52, 44, 51, 56, 53, 48, 64, 52, 44, 51, 56, 53, 48, 64, 50, 44, 51, 56, 53, 48, 64, 49, 50, 44, 55, 55, 48, 48, 64, 49, 53, 44, 53, 50, 53, 48, 64, 48, 44, 54, 54, 53, 48, 64, 51, 44, 54, 54, 53, 48, 64, 50, 44, 49, 51, 51, 48, 48, 64, 49, 52, 44, 54, 54, 53, 48, 64, 57, 44, 54, 54, 53, 48, 64, 52, 44, 49, 51, 51, 48, 48, 64, 49, 48, 44, 54, 54, 53, 48, 64, 52, 44, 54, 54, 53, 48, 64, 49, 44, 54, 54, 53, 48, 64, 49, 49, 44, 54, 54, 53, 48, 64, 52, 44, 54, 54, 53, 48, 64, 49, 44, 54, 54, 53, 48, 64, 49, 52, 44, 54, 54, 53, 48, 64, 49, 53, 44, 49, 51, 51, 48, 48, 64, 49, 44, 54, 54, 53, 48, 64, 50, 44, 54, 54, 53, 48, 64, 48, 44, 52, 52, 56, 48, 48, 64, 54, 44, 49, 49, 50, 48, 48, 64, 52, 44, 50, 50, 52, 48, 48, 64, 50, 44, 49, 49, 50, 48, 48, 64, 48, 44, 49, 56, 50, 48, 48, 64, 49, 51, 44, 49, 56, 50, 48, 48, 64, 57, 44, 49, 56, 50, 48, 48, 64, 48, 44, 51, 50, 57, 48, 48, 64, 57, 44, 49, 54, 52, 53, 48, 64, 49, 48, 44, 49, 54, 52, 53, 48, 64, 48, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'sand-stone.sh', fileData22, true, true, false);
var fileData23 = [];
fileData23.push.apply(fileData23, [35, 33, 47, 98, 105, 110, 47, 98, 97, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 102, 99, 45, 112, 114, 111, 45, 114, 97, 110, 103, 101, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'sentient-pearls.sh', fileData23, true, true, false);
var fileData24 = [];
fileData24.push.apply(fileData24, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 35, 32, 84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 109, 101, 116, 97, 45, 109, 111, 118, 101, 115, 32, 112, 114, 101, 115, 101, 116, 32, 111, 112, 116, 105, 109, 105, 115, 101, 100, 32, 102, 111, 114, 32, 50, 45, 102, 114, 101, 101, 99, 101, 108, 108, 115, 32, 100, 101, 97, 108, 115, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 100, 116, 111, 32, 50, 55, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 51, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 56, 56, 53, 64, 50, 49, 44, 55, 52, 54, 64, 49, 48, 44, 49, 48, 56, 64, 50, 49, 44, 51, 49, 57, 64, 49, 48, 44, 51, 49, 53, 64, 50, 49, 44, 49, 48, 53, 57, 64, 49, 48, 44, 51, 55, 53, 64, 50, 49, 44, 49, 57, 53, 64, 49, 48, 44, 55, 48, 57, 64, 50, 49, 44, 57, 49, 53, 64, 49, 48, 44, 53, 55, 55, 64, 50, 49, 44, 49, 50, 48, 64, 49, 48, 44, 49, 49, 54, 64, 50, 49, 44, 49, 50, 50, 57, 64, 49, 48, 44, 54, 57, 50, 64, 50, 49, 44, 50, 50, 54, 55, 64, 51, 44, 53, 57, 56, 64, 49, 48, 44, 54, 57, 57, 64, 50, 49, 44, 49, 52, 57, 64, 51, 44, 50, 56, 49, 64, 50, 49, 44, 52, 54, 48, 64, 51, 44, 56, 50, 48, 64, 56, 44, 53, 57, 49, 64, 50, 49, 44, 51, 52, 48, 64, 51, 44, 50, 50, 52, 64, 56, 44, 56, 55, 57, 64, 50, 49, 44, 50, 56, 49, 64, 51, 44, 49, 51, 57, 52, 64, 49, 48, 44, 49, 49, 57, 64, 50, 49, 44, 49, 53, 57, 54, 64, 49, 48, 44, 51, 51, 50, 64, 56, 44, 49, 55, 53, 48, 64, 49, 48, 44, 49, 55, 53, 48, 64, 52, 44, 49, 52, 48, 48, 64, 49, 48, 44, 51, 53, 48, 64, 56, 44, 49, 52, 48, 48, 64, 49, 55, 44, 49, 52, 48, 48, 64, 50, 49, 44, 51, 56, 53, 48, 64, 49, 55, 44, 55, 48, 48, 64, 49, 52, 44, 49, 52, 48, 48, 64, 52, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 52, 44, 49, 48, 53, 48, 64, 49, 48, 44, 49, 52, 48, 48, 64, 52, 44, 49, 52, 48, 48, 64, 53, 44, 57, 52, 53, 48, 64, 49, 48, 44, 55, 48, 48, 64, 49, 52, 44, 51, 53, 48, 64, 49, 48, 44, 55, 48, 48, 64, 50, 51, 44, 52, 53, 53, 48, 64, 51, 44, 51, 53, 48, 64, 52, 44, 49, 52, 48, 48, 64, 49, 52, 44, 50, 52, 53, 48, 64, 50, 49, 44, 49, 52, 48, 48, 64, 51, 44, 49, 55, 53, 48, 64, 52, 44, 51, 53, 48, 64, 56, 44, 51, 53, 48, 64, 49, 54, 44, 49, 52, 48, 48, 64, 50, 49, 44, 51, 53, 48, 48, 64, 52, 44, 49, 48, 53, 48, 64, 54, 44, 51, 53, 48, 64, 56, 44, 51, 53, 48, 64, 57, 44, 49, 55, 53, 48, 64, 49, 49, 44, 51, 53, 48, 64, 50, 44, 49, 52, 48, 48, 64, 51, 44, 53, 50, 53, 48, 64, 53, 44, 51, 53, 48, 64, 54, 44, 55, 48, 48, 64, 57, 44, 49, 55, 53, 48, 64, 49, 48, 44, 50, 52, 53, 48, 64, 49, 51, 44, 52, 50, 48, 48, 64, 49, 52, 44, 51, 53, 48, 64, 49, 55, 44, 51, 53, 48, 64, 50, 48, 44, 49, 52, 48, 48, 64, 49, 48, 44, 53, 50, 53, 48, 64, 50, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'tea-for-two.sh', fileData24, true, true, false);
var fileData25 = [];
fileData25.push.apply(fileData25, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 50, 54, 51, 64, 50, 44, 51, 50, 51, 64, 57, 44, 51, 56, 57, 64, 53, 44, 51, 52, 51, 64, 50, 44, 51, 52, 53, 64, 49, 50, 44, 51, 57, 56, 64, 49, 48, 44, 51, 51, 52, 64, 57, 44, 51, 52, 57, 64, 51, 44, 51, 52, 54, 64, 53, 44, 51, 51, 54, 64, 49, 56, 44, 51, 53, 48, 64, 53, 44, 51, 49, 51, 64, 50, 48, 44, 51, 53, 48, 64, 50, 44, 54, 52, 57, 64, 52, 44, 51, 50, 56, 64, 49, 50, 44, 51, 50, 57, 64, 49, 49, 44, 49, 56, 49, 64, 50, 48, 44, 55, 56, 56, 64, 49, 56, 44, 52, 57, 51, 64, 49, 53, 44, 51, 52, 55, 64, 49, 48, 44, 51, 52, 54, 64, 57, 44, 51, 52, 57, 64, 49, 49, 44, 55, 48, 48, 64, 57, 44, 53, 55, 54, 64, 50, 49, 44, 49, 57, 54, 64, 49, 50, 44, 56, 48, 49, 64, 49, 55, 44, 57, 49, 55, 64, 53, 44, 52, 51, 51, 64, 50, 48, 44, 50, 49, 57, 64, 50, 50, 44, 52, 49, 54, 64, 49, 56, 44, 53, 54, 50, 64, 49, 50, 44, 53, 51, 48, 64, 49, 44, 52, 52, 50, 64, 52, 44, 51, 53, 48, 64, 49, 50, 44, 50, 55, 57, 64, 50, 49, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 50, 48, 44, 57, 51, 55, 64, 50, 44, 50, 49, 48, 48, 64, 49, 48, 44, 49, 55, 53, 48, 64, 50, 44, 52, 52, 53, 51, 64, 49, 50, 44, 52, 55, 54, 52, 64, 49, 55, 44, 53, 49, 52, 52, 64, 50, 48, 44, 53, 52, 54, 48, 64, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'the-iglu-cabal.sh', fileData25, true, true, false);
var fileData26 = [];
fileData26.push.apply(fileData26, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 32, 45, 100, 116, 111, 32, 49, 51, 44, 48, 49, 56, 55, 52, 54, 53, 32, 45, 100, 116, 111, 32, 50, 54, 44, 48, 49, 51, 52, 53, 56, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 57, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 51, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 56, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 48, 44, 51, 56, 48, 64, 50, 50, 44, 55, 54, 48, 64, 50, 51, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 49, 50, 44, 55, 54, 48, 64, 49, 56, 44, 49, 53, 50, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 50, 52, 44, 50, 50, 56, 48, 64, 49, 48, 44, 50, 50, 56, 48, 64, 50, 52, 44, 52, 53, 54, 48, 64, 49, 50, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'three-eighty.sh', fileData26, true, true, false);
var fileData27 = [];
fileData27.push.apply(fileData27, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 68, 93, 91, 67, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 48, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 55, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 69, 65, 66, 67, 68, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 66, 68, 65, 69, 67, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 68, 93, 91, 67, 69, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 68, 69, 67, 65, 66, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 55, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 57, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 50, 56, 48, 48, 64, 48, 44, 50, 56, 48, 48, 64, 51, 44, 49, 55, 53, 48, 64, 48, 44, 51, 49, 53, 48, 64, 49, 54, 44, 51, 53, 48, 64, 51, 44, 55, 48, 48, 64, 48, 44, 49, 52, 48, 48, 64, 51, 44, 50, 52, 53, 48, 64, 52, 44, 51, 53, 48, 64, 48, 44, 49, 52, 48, 48, 64, 52, 44, 55, 48, 48, 64, 49, 54, 44, 50, 49, 48, 48, 64, 48, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 51, 44, 49, 52, 48, 48, 64, 49, 54, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 52, 44, 55, 48, 48, 64, 48, 44, 55, 48, 48, 64, 51, 44, 49, 52, 48, 48, 64, 48, 44, 49, 48, 53, 48, 64, 52, 44, 55, 48, 48, 64, 48, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 48, 44, 52, 53, 53, 48, 64, 49, 56, 44, 53, 54, 48, 48, 64, 55, 44, 55, 48, 48, 64, 52, 44, 50, 52, 53, 48, 64, 49, 56, 44, 52, 57, 48, 48, 64, 49, 57, 44, 49, 52, 48, 48, 64, 49, 56, 44, 49, 48, 53, 48, 64, 51, 44, 50, 52, 53, 48, 64, 49, 57, 44, 49, 55, 53, 48, 64, 48, 44, 52, 53, 53, 48, 64, 49, 44, 51, 53, 48, 64, 49, 56, 44, 49, 48, 53, 48, 64, 48, 44, 51, 53, 48, 64, 49, 44, 55, 48, 48, 64, 49, 53, 44, 51, 53, 48, 64, 55, 44, 49, 48, 53, 48, 64, 48, 44, 56, 48, 53, 48, 64, 49, 44, 50, 52, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 56, 44, 49, 55, 53, 48, 64, 49, 57, 44, 49, 55, 53, 48, 64, 48, 44, 49, 50, 50, 53, 48, 64, 50, 44, 55, 48, 48, 64, 52, 44, 50, 52, 53, 48, 64, 49, 56, 44, 51, 53, 48, 48, 64, 49, 49, 44, 50, 56, 48, 48, 64, 57, 44, 49, 55, 53, 48, 64, 55, 44, 51, 49, 53, 48, 64, 56, 44, 50, 49, 48, 48, 64, 49, 48, 44, 55, 48, 48, 64, 49, 53, 44, 52, 50, 48, 48, 64, 49, 48, 44, 55, 48, 48, 64, 50, 44, 49, 48, 53, 48, 64, 52, 44, 55, 48, 48, 64, 53, 44, 55, 48, 48, 64, 55, 44, 52, 53, 53, 48, 64, 57, 44, 50, 56, 48, 48, 64, 49, 48, 44, 51, 53, 48, 48, 64, 49, 52, 44, 49, 48, 53, 48, 64, 52, 44, 49, 48, 53, 48, 64, 49, 55, 44, 51, 49, 53, 48, 64, 49, 44, 51, 53, 48, 48, 64, 51, 44, 50, 49, 48, 48, 64, 49, 52, 44, 49, 48, 53, 48, 64, 49, 53, 44, 49, 55, 53, 48, 64, 49, 56, 44, 50, 49, 48, 48, 64, 48, 44, 52, 57, 48, 48, 64, 49, 53, 44, 52, 50, 48, 48, 64, 51, 44, 49, 55, 53, 48, 64, 55, 44, 50, 52, 53, 48, 64, 57, 44, 49, 55, 53, 48, 64, 49, 55, 44, 49, 55, 53, 48, 64, 49, 57, 44, 50, 49, 48, 48, 64, 49, 54, 44, 50, 56, 48, 48, 64, 52, 44, 55, 55, 48, 48, 64, 56, 44, 53, 54, 48, 48, 64, 49, 54, 44, 50, 56, 48, 48, 64, 49, 57, 44, 52, 53, 53, 48, 64, 49, 56, 44, 52, 57, 48, 48, 64, 49, 44, 53, 57, 53, 48, 64, 52, 44, 50, 52, 53, 48, 64, 49, 52, 44, 50, 52, 53, 48, 64, 49, 54, 44, 50, 56, 48, 48, 64, 50, 44, 50, 56, 48, 48, 64, 51, 44, 50, 56, 48, 48, 64, 57, 44, 53, 54, 48, 48, 64, 49, 57, 44, 51, 49, 53, 48, 64, 51, 44, 51, 49, 53, 48, 64, 49, 52, 44, 51, 56, 53, 48, 64, 50, 44, 51, 56, 53, 48, 64, 49, 57, 44, 52, 53, 53, 48, 64, 55, 44, 52, 57, 48, 48, 64, 52, 44, 54, 54, 53, 48, 64, 49, 56, 44, 54, 54, 53, 48, 64, 49, 54, 44, 49, 51, 54, 53, 48, 64, 49, 57, 44, 54, 51, 48, 48, 64, 52, 44, 49, 52, 55, 48, 48, 64, 49, 53, 44, 49, 49, 57, 48, 48, 64, 53, 44, 49, 49, 57, 48, 48, 64, 49, 55, 44, 57, 56, 48, 48, 64, 50, 44, 49, 48, 49, 53, 48, 64, 49, 57, 44, 49, 48, 53, 48, 48, 64, 52, 44, 50, 55, 54, 53, 48, 64, 51, 44, 50, 51, 52, 53, 48, 64, 56, 44, 51, 53, 55, 48, 48, 64, 57, 44, 53, 48, 55, 53, 48, 64, 49, 49, 44, 56, 50, 54, 48, 48, 64, 49, 52, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'toons-for-twenty-somethings.sh', fileData27, true, true, false);
var fileData28 = [];
fileData28.push.apply(fileData28, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 53, 44, 52, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 55, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 48, 44, 91, 51, 52, 50, 93, 48, 49, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 52, 48, 44, 50, 44, 52, 48, 44, 48, 44, 52, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 53, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 54, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 57, 57, 44, 50, 44, 54, 53, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 102, 111, 111, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 55, 48, 44, 48, 44, 48, 44, 50, 44, 57, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 53, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 50, 53, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 50, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 113, 117, 105, 99, 107, 95, 115, 97, 110, 100, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 114, 97, 110, 100, 40, 41, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 61, 114, 97, 110, 100, 40, 41, 34, 32, 45, 100, 116, 111, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 101, 110, 99, 114, 117, 115, 116, 101, 100, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 34, 49, 44, 48, 44, 48, 44, 48, 44, 49, 34, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 55, 54, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 108, 101, 116, 95, 114, 111, 108, 108, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 34, 49, 34, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 32, 92, 10, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 44, 82, 117, 110, 58, 56, 56, 52, 56, 64, 50, 49, 44, 82, 117, 110, 58, 54, 50, 56, 50, 64, 50, 50, 44, 82, 117, 110, 58, 53, 48, 50, 48, 64, 50, 51, 44, 82, 117, 110, 58, 50, 49, 50, 56, 64, 50, 52, 44, 82, 117, 110, 58, 54, 56, 51, 51, 64, 50, 53, 44, 82, 117, 110, 58, 55, 50, 57, 48, 64, 50, 54, 44, 82, 117, 110, 58, 54, 54, 49, 57, 64, 50, 55, 44, 82, 117, 110, 58, 51, 55, 57, 55, 64, 50, 56, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 50, 57, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 51, 48, 44, 82, 117, 110, 58, 51, 49, 56, 52, 64, 51, 49, 44, 82, 117, 110, 58, 51, 48, 48, 48, 64, 102, 111, 111, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 49, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 113, 117, 105, 99, 107, 95, 115, 97, 110, 100, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 101, 110, 99, 114, 117, 115, 116, 101, 100, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 108, 101, 116, 95, 114, 111, 108, 108, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'video-editing.sh', fileData28, true, true, false);
var fileData29 = [];
fileData29.push.apply(fileData29, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'yellow-brick-road.sh', fileData29, true, true, false);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": []});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is currently only used for LLVM backend under certain
// circumstance: RESERVED_FUNCTION_POINTERS=1, EMULATED_FUNCTION_POINTERS=0.
function addFunction(func, sig) {

  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, stackAlloc, dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 15504,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5258384,
    DYNAMIC_BASE = 5258384,
    DYNAMICTOP_PTR = 15248;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) Math.imul = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};


if (!Math.clz32) Math.clz32 = function(x) {
  var n = 32;
  var y = x >> 16; if (y) { n -= 16; x = y; }
  y = x >> 8; if (y) { n -= 8; x = y; }
  y = x >> 4; if (y) { n -= 4; x = y; }
  y = x >> 2; if (y) { n -= 2; x = y; }
  y = x >> 1; if (y) return n - 2;
  return n - x;
};

if (!Math.trunc) Math.trunc = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

// STATICTOP = STATIC_BASE + 15496;
/* global initializers */  __ATINIT__.push({ func: function() { ___emscripten_environ_constructor() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 15488
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }


  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;

      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }

      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }

      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___lock() {}







  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }

  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};

  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;

              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion

              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }

              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }

              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }

            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};

  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }

        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {

          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();

          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }

          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }

          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};

  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);

          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);

            var src = populate ? remote : local;
            var dst = populate ? local : remote;

            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }

        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;

          var fileStore;

          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }

          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;

          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};

        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };

        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));

        while (check.length) {
          var path = check.pop();
          var stat;

          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }

          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }

          entries[path] = { timestamp: stat.mtime };
        }

        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};

        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);

          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };

            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');

            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;

              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }

              entries[cursor.primaryKey] = { timestamp: cursor.key };

              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;

        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }

        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }

          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }

        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);

          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }

        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;

        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });

        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });

        if (!total) {
          return callback(null);
        }

        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };

        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };

        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });

        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};

  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }

        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }

          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }

          return position;
        }}};

  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};

  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};

  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};

  var _stdin=15264;

  var _stdout=15280;

  var _stderr=15296;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};

        if (!path) return { path: '', node: null };

        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }

        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }

        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);

        // start at the root
        var current = FS.root;
        var current_path = '/';

        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }

          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);

          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }

          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);

              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;

              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }

        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;


        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };

          FS.FSNode.prototype = {};

          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;

          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }

        var node = new FS.FSNode(parent, name, mode, rdev);

        FS.hashAddNode(node);

        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];

        while (check.length) {
          var m = check.pop();

          mounts.push(m);

          check.push.apply(check, m.mounts);
        }

        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }

        FS.syncFSRequests++;

        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }

        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }

        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };

        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;

        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;

          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }

          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }

        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };

        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;

        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;

          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }

        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }

        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);

        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];

          while (current) {
            var next = current.name_next;

            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }

            current = next;
          }
        });

        // no longer a mountpoint
        node.mounted = null;

        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);

        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see kripken/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops

        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }

        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');

        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');

        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();

        FS.nameTable = new Array(4096);

        FS.mount(MEMFS, {}, '/');

        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();

        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;

        FS.ensureErrnoError();

        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];

        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";

          var chunkSize = 1024*1024; // Chunk size in bytes

          if (!hasByteServing) chunkSize = datalength;

          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");

            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }

            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });

          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }

          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });

          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }

        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);

        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;

        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }









  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }





  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;

      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }





  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }


  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }







FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiiiii": nullFunc_viiiiii, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_getenv": _getenv, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _getenv=env._getenv;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var STACKTOP = 15504;
  var STACK_MAX = 5258384;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function _fc_solve_find_deal_in_range($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$02130 = 0, $$031 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = ($1|0)>($3|0);
 $7 = ($0>>>0)>($2>>>0);
 $8 = ($1|0)==($3|0);
 $9 = $8 & $7;
 $10 = $6 | $9;
 if ($10) {
  $33 = -1;$34 = -1;
  setTempRet0(($33) | 0);
  STACKTOP = sp;return ($34|0);
 }
 $11 = $0;$12 = $1;
 L4: while(1) {
  $13 = (_microsoft_rand__calc_init_seedx($11,$12)|0);
  $14 = (getTempRet0() | 0);
  $15 = $5;
  $16 = $15;
  HEAP32[$16>>2] = $13;
  $17 = (($15) + 4)|0;
  $18 = $17;
  HEAP32[$18>>2] = $14;
  $$02130 = $4;$$031 = 52;
  while(1) {
   $19 = (_microsoft_rand__game_num_rand($5,$11,$12)|0);
   $20 = (($19>>>0) % ($$031>>>0))&-1;
   $21 = HEAP32[$$02130>>2]|0;
   $22 = ($20|0)==($21|0);
   if (!($22)) {
    break;
   }
   $23 = (($$031) + -1)|0;
   $24 = ((($$02130)) + 4|0);
   $25 = ($23>>>0)>(1);
   if ($25) {
    $$02130 = $24;$$031 = $23;
   } else {
    break L4;
   }
  }
  $26 = (_i64Add(($11|0),($12|0),1,0)|0);
  $27 = (getTempRet0() | 0);
  $28 = ($12|0)<($3|0);
  $29 = ($11>>>0)<($2>>>0);
  $30 = ($12|0)==($3|0);
  $31 = $30 & $29;
  $32 = $28 | $31;
  if ($32) {
   $11 = $26;$12 = $27;
  } else {
   $33 = -1;$34 = -1;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  setTempRet0(($33) | 0);
  STACKTOP = sp;return ($34|0);
 }
 $33 = $12;$34 = $11;
 setTempRet0(($33) | 0);
 STACKTOP = sp;return ($34|0);
}
function _microsoft_rand__calc_init_seedx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return ($0|0);
}
function _microsoft_rand__game_num_rand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)<(1);
 $4 = ($1>>>0)<(0);
 $5 = ($2|0)==(1);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $8 = (_microsoft_rand_rand($0)|0);
  $9 = ($2|0)<(0);
  $10 = ($1>>>0)<(2147483648);
  $11 = ($2|0)==(0);
  $12 = $11 & $10;
  $13 = $9 | $12;
  $14 = $8 | 32768;
  $15 = $13 ? $8 : $14;
  $$0 = $15;
  return ($$0|0);
 } else {
  $16 = (_microsoft_rand_randp($0)|0);
  $17 = (($16) + 1)|0;
  $$0 = $17;
  return ($$0|0);
 }
 return (0)|0;
}
function _fc_solve_user__find_deal__alloc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(332)|0);
 return ($0|0);
}
function _fc_solve_user__find_deal__free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _fc_solve_user__find_deal__fill($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = ($2|0)==(510);
 if (!($3)) {
  return;
 }
 $$012 = 0;
 while(1) {
  $4 = ($$012*10)|0;
  $5 = (($1) + ($4)|0);
  $6 = (_atol($5)|0);
  $7 = (($0) + ($$012<<2)|0);
  HEAP32[$7>>2] = $6;
  $8 = (($$012) + 1)|0;
  $exitcond = ($8|0)==(51);
  if ($exitcond) {
   break;
  } else {
   $$012 = $8;
  }
 }
 return;
}
function _fc_solve_user__find_deal__run($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = ((($0)) + 204|0);
 $4 = (_atoll($1)|0);
 $5 = (getTempRet0() | 0);
 $6 = (_atoll($2)|0);
 $7 = (getTempRet0() | 0);
 $8 = (_fc_solve_find_deal_in_range($4,$5,$6,$7,$0)|0);
 $9 = (getTempRet0() | 0);
 $10 = $vararg_buffer;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 (_sprintf($3,9456,$vararg_buffer)|0);
 STACKTOP = sp;return ($3|0);
}
function _microsoft_rand_rand($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (___muldi3(($3|0),($6|0),214013,0)|0);
 $8 = (getTempRet0() | 0);
 $9 = (_i64Add(($7|0),($8|0),2531011,0)|0);
 $10 = (getTempRet0() | 0);
 $11 = $0;
 $12 = $11;
 HEAP32[$12>>2] = $9;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = (_bitshift64Lshr(($9|0),($10|0),16)|0);
 $16 = (getTempRet0() | 0);
 $17 = $15 & 32767;
 return ($17|0);
}
function _microsoft_rand_randp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (___muldi3(($3|0),($6|0),214013,0)|0);
 $8 = (getTempRet0() | 0);
 $9 = (_i64Add(($7|0),($8|0),2531011,0)|0);
 $10 = (getTempRet0() | 0);
 $11 = $0;
 $12 = $11;
 HEAP32[$12>>2] = $9;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = (_bitshift64Lshr(($9|0),($10|0),16)|0);
 $16 = (getTempRet0() | 0);
 $17 = $15 & 65535;
 return ($17|0);
}
function _fc_solve_card_stringify($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $strchr = 0, $strlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0&255;
 $4 = (2)?($3 >>> 2):($3);
 _rank2str($4,$1,$2);
 $5 = $3 & 3;
 $strlen = (_strlen($1)|0);
 $strchr = (($1) + ($strlen)|0);
 _suit2str($5,$strchr);
 return;
}
function _rank2str($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 ? 16 : 80;
 $4 = (($3) + ($0<<2)|0);
 (_strcpy($1,$4)|0);
 return;
}
function _suit2str($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (9461 + ($0)|0);
 $3 = HEAP8[$2>>0]|0;
 HEAP8[$1>>0] = $3;
 $4 = ((($1)) + 1|0);
 HEAP8[$4>>0] = 0;
 return;
}
function _fc_solve_check_and_add_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 _fc_solve_cache_stacks($0,$1);
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP8[$3>>0]|0;
 $6 = $5&255;
 $7 = ((($3)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 _fc_solve_canonize_state($4,$6,$9);
 $10 = ((($3)) + 32|0);
 $11 = (_FCS_STATE_kv_to_collectible($1)|0);
 $12 = HEAP32[$1>>2]|0;
 $13 = (_XXH64($12,56)|0);
 $14 = (getTempRet0() | 0);
 $15 = (_fc_solve_hash_insert($10,$11,$13)|0);
 $16 = (_handle_existing_void($3,$0,$1,$2,$15)|0);
 return ($16|0);
}
function _fc_solve_cache_stacks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$05354 = 0, $$055 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($2)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($0)) + 20|0);
 $5 = $$sroa$3$0$copyload&255;
 $6 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($6) {
  return;
 }
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = ((($2)) + 80|0);
 $$05354 = 0;$$055 = $3;
 while(1) {
  $11 = HEAP32[$9>>2]|0;
  $12 = 1 << $$05354;
  $13 = $11 & $12;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = (($3) + ($$05354<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = (($18) + 1)|0;
   $20 = (_fcs_compact_alloc_ptr($4,$19)|0);
   _memcpy(($20|0),($16|0),($19|0))|0;
   HEAP32[$$055>>2] = $20;
   $21 = HEAP32[$15>>2]|0;
   $22 = (_XXH64($20,$19)|0);
   $23 = (getTempRet0() | 0);
   $24 = (_fc_solve_hash_insert($10,$21,$22)|0);
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    _fcs_compact_alloc_release($4);
    HEAP32[$$055>>2] = $24;
   }
  }
  $26 = (($$05354) + 1)|0;
  $27 = ((($$055)) + 4|0);
  $exitcond = ($26|0)==($5|0);
  if ($exitcond) {
   break;
  } else {
   $$05354 = $26;$$055 = $27;
  }
 }
 return;
}
function _FCS_STATE_kv_to_collectible($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _XXH64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i5 = 0, $$1$i = 0, $$1$i7 = 0, $$2$lcssa$i = 0, $$2$lcssa$i12 = 0, $$217$i = 0, $$217$i$phi = 0, $$217$i9 = 0, $$217$i9$phi = 0, $$3$i = 0, $$3$i15 = 0, $$415$i = 0, $$415$i17 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0;
 $3 = $2 & 7;
 $4 = ($3|0)==(0);
 $5 = (($0) + ($1)|0);
 $6 = ($1>>>0)>(31);
 if ($4) {
  if ($6) {
   $7 = ((($5)) + -32|0);
   $$0$i = $0;$14 = -1379879466;$15 = 1625958382;$25 = 668265295;$26 = -1028477379;$36 = 0;$37 = 0;$47 = 2048144761;$48 = 1640531534;
   while(1) {
    $8 = $$0$i;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $16 = (_XXH64_round($14,$15,$10,$13)|0);
    $17 = (getTempRet0() | 0);
    $18 = ((($$0$i)) + 8|0);
    $19 = $18;
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = (($19) + 4)|0;
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $27 = (_XXH64_round($25,$26,$21,$24)|0);
    $28 = (getTempRet0() | 0);
    $29 = ((($$0$i)) + 16|0);
    $30 = $29;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30) + 4)|0;
    $34 = $33;
    $35 = HEAP32[$34>>2]|0;
    $38 = (_XXH64_round($36,$37,$32,$35)|0);
    $39 = (getTempRet0() | 0);
    $40 = ((($$0$i)) + 24|0);
    $41 = $40;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $49 = (_XXH64_round($47,$48,$43,$46)|0);
    $50 = (getTempRet0() | 0);
    $51 = ((($$0$i)) + 32|0);
    $52 = ($51>>>0)>($7>>>0);
    if ($52) {
     break;
    } else {
     $$0$i = $51;$14 = $16;$15 = $17;$25 = $27;$26 = $28;$36 = $38;$37 = $39;$47 = $49;$48 = $50;
    }
   }
   $53 = (_bitshift64Shl(($16|0),($17|0),1)|0);
   $54 = (getTempRet0() | 0);
   $55 = (_bitshift64Lshr(($16|0),($17|0),63)|0);
   $56 = (getTempRet0() | 0);
   $57 = $53 | $55;
   $58 = $54 | $56;
   $59 = (_bitshift64Shl(($27|0),($28|0),7)|0);
   $60 = (getTempRet0() | 0);
   $61 = (_bitshift64Lshr(($27|0),($28|0),57)|0);
   $62 = (getTempRet0() | 0);
   $63 = $59 | $61;
   $64 = $60 | $62;
   $65 = (_bitshift64Shl(($38|0),($39|0),12)|0);
   $66 = (getTempRet0() | 0);
   $67 = (_bitshift64Lshr(($38|0),($39|0),52)|0);
   $68 = (getTempRet0() | 0);
   $69 = $65 | $67;
   $70 = $66 | $68;
   $71 = (_bitshift64Shl(($49|0),($50|0),18)|0);
   $72 = (getTempRet0() | 0);
   $73 = (_bitshift64Lshr(($49|0),($50|0),46)|0);
   $74 = (getTempRet0() | 0);
   $75 = $71 | $73;
   $76 = $72 | $74;
   $77 = (_i64Add(($63|0),($64|0),($57|0),($58|0))|0);
   $78 = (getTempRet0() | 0);
   $79 = (_i64Add(($77|0),($78|0),($69|0),($70|0))|0);
   $80 = (getTempRet0() | 0);
   $81 = (_i64Add(($79|0),($80|0),($75|0),($76|0))|0);
   $82 = (getTempRet0() | 0);
   $83 = (_XXH64_mergeRound($81,$82,$16,$17)|0);
   $84 = (getTempRet0() | 0);
   $85 = (_XXH64_mergeRound($83,$84,$27,$28)|0);
   $86 = (getTempRet0() | 0);
   $87 = (_XXH64_mergeRound($85,$86,$38,$39)|0);
   $88 = (getTempRet0() | 0);
   $89 = (_XXH64_mergeRound($87,$88,$49,$50)|0);
   $90 = (getTempRet0() | 0);
   $$1$i = $51;$91 = $89;$92 = $90;
  } else {
   $$1$i = $0;$91 = 374761413;$92 = 668265263;
  }
  $93 = (_i64Add(($91|0),($92|0),($1|0),0)|0);
  $94 = (getTempRet0() | 0);
  $95 = ((($$1$i)) + 8|0);
  $96 = ($95>>>0)>($5>>>0);
  if ($96) {
   $$2$lcssa$i = $$1$i;$128 = $93;$130 = $94;
  } else {
   $$217$i = $$1$i;$106 = $93;$108 = $94;$120 = $95;
   while(1) {
    $97 = $$217$i;
    $98 = $97;
    $99 = HEAP32[$98>>2]|0;
    $100 = (($97) + 4)|0;
    $101 = $100;
    $102 = HEAP32[$101>>2]|0;
    $103 = (_XXH64_round(0,0,$99,$102)|0);
    $104 = (getTempRet0() | 0);
    $105 = $103 ^ $106;
    $107 = $104 ^ $108;
    $109 = (_bitshift64Shl(($105|0),($107|0),27)|0);
    $110 = (getTempRet0() | 0);
    $111 = (_bitshift64Lshr(($105|0),($107|0),37)|0);
    $112 = (getTempRet0() | 0);
    $113 = $109 | $111;
    $114 = $110 | $112;
    $115 = (___muldi3(($113|0),($114|0),-2048144761,-1640531535)|0);
    $116 = (getTempRet0() | 0);
    $117 = (_i64Add(($115|0),($116|0),-1028477341,-2048144777)|0);
    $118 = (getTempRet0() | 0);
    $119 = ((($120)) + 8|0);
    $121 = ($119>>>0)>($5>>>0);
    if ($121) {
     $$2$lcssa$i = $120;$128 = $117;$130 = $118;
     break;
    } else {
     $$217$i$phi = $120;$106 = $117;$108 = $118;$120 = $119;$$217$i = $$217$i$phi;
    }
   }
  }
  $122 = ((($$2$lcssa$i)) + 4|0);
  $123 = ($122>>>0)>($5>>>0);
  if ($123) {
   $$3$i = $$2$lcssa$i;$306 = $128;$307 = $130;
  } else {
   $124 = HEAP32[$$2$lcssa$i>>2]|0;
   $125 = (___muldi3(($124|0),0,-2048144761,-1640531535)|0);
   $126 = (getTempRet0() | 0);
   $127 = $125 ^ $128;
   $129 = $126 ^ $130;
   $131 = (_bitshift64Shl(($127|0),($129|0),23)|0);
   $132 = (getTempRet0() | 0);
   $133 = (_bitshift64Lshr(($127|0),($129|0),41)|0);
   $134 = (getTempRet0() | 0);
   $135 = $131 | $133;
   $136 = $132 | $134;
   $137 = (___muldi3(($135|0),($136|0),668265295,-1028477379)|0);
   $138 = (getTempRet0() | 0);
   $139 = (_i64Add(($137|0),($138|0),-1640531463,374761393)|0);
   $140 = (getTempRet0() | 0);
   $$3$i = $122;$306 = $139;$307 = $140;
  }
  $141 = ($$3$i>>>0)<($5>>>0);
  if (!($141)) {
   $291 = $306;$292 = $307;
   $293 = (_bitshift64Lshr(($291|0),($292|0),33)|0);
   $294 = (getTempRet0() | 0);
   $295 = $293 ^ $291;
   $296 = $294 ^ $292;
   $297 = (___muldi3(($295|0),($296|0),668265295,-1028477379)|0);
   $298 = (getTempRet0() | 0);
   $299 = (_bitshift64Lshr(($297|0),($298|0),29)|0);
   $300 = (getTempRet0() | 0);
   $301 = $299 ^ $297;
   $302 = $300 ^ $298;
   $303 = (___muldi3(($301|0),($302|0),-1640531463,374761393)|0);
   $304 = (getTempRet0() | 0);
   $305 = $304 ^ $303;
   setTempRet0(($304) | 0);
   return ($305|0);
  }
  $$415$i = $$3$i;$147 = $306;$149 = $307;
  while(1) {
   $142 = HEAP8[$$415$i>>0]|0;
   $143 = $142&255;
   $144 = (___muldi3(($143|0),0,374761413,668265263)|0);
   $145 = (getTempRet0() | 0);
   $146 = $144 ^ $147;
   $148 = $145 ^ $149;
   $150 = (_bitshift64Shl(($146|0),($148|0),11)|0);
   $151 = (getTempRet0() | 0);
   $152 = (_bitshift64Lshr(($146|0),($148|0),53)|0);
   $153 = (getTempRet0() | 0);
   $154 = $150 | $152;
   $155 = $151 | $153;
   $156 = (___muldi3(($154|0),($155|0),-2048144761,-1640531535)|0);
   $157 = (getTempRet0() | 0);
   $158 = ((($$415$i)) + 1|0);
   $exitcond$i = ($158|0)==($5|0);
   if ($exitcond$i) {
    $291 = $156;$292 = $157;
    break;
   } else {
    $$415$i = $158;$147 = $156;$149 = $157;
   }
  }
  $293 = (_bitshift64Lshr(($291|0),($292|0),33)|0);
  $294 = (getTempRet0() | 0);
  $295 = $293 ^ $291;
  $296 = $294 ^ $292;
  $297 = (___muldi3(($295|0),($296|0),668265295,-1028477379)|0);
  $298 = (getTempRet0() | 0);
  $299 = (_bitshift64Lshr(($297|0),($298|0),29)|0);
  $300 = (getTempRet0() | 0);
  $301 = $299 ^ $297;
  $302 = $300 ^ $298;
  $303 = (___muldi3(($301|0),($302|0),-1640531463,374761393)|0);
  $304 = (getTempRet0() | 0);
  $305 = $304 ^ $303;
  setTempRet0(($304) | 0);
  return ($305|0);
 } else {
  if ($6) {
   $159 = ((($5)) + -32|0);
   $$0$i5 = $0;$162 = -1379879466;$163 = 1625958382;$169 = 668265295;$170 = -1028477379;$176 = 0;$177 = 0;$183 = 2048144761;$184 = 1640531534;
   while(1) {
    $160 = (_XXH_read64($$0$i5)|0);
    $161 = (getTempRet0() | 0);
    $164 = (_XXH64_round($162,$163,$160,$161)|0);
    $165 = (getTempRet0() | 0);
    $166 = ((($$0$i5)) + 8|0);
    $167 = (_XXH_read64($166)|0);
    $168 = (getTempRet0() | 0);
    $171 = (_XXH64_round($169,$170,$167,$168)|0);
    $172 = (getTempRet0() | 0);
    $173 = ((($$0$i5)) + 16|0);
    $174 = (_XXH_read64($173)|0);
    $175 = (getTempRet0() | 0);
    $178 = (_XXH64_round($176,$177,$174,$175)|0);
    $179 = (getTempRet0() | 0);
    $180 = ((($$0$i5)) + 24|0);
    $181 = (_XXH_read64($180)|0);
    $182 = (getTempRet0() | 0);
    $185 = (_XXH64_round($183,$184,$181,$182)|0);
    $186 = (getTempRet0() | 0);
    $187 = ((($$0$i5)) + 32|0);
    $188 = ($187>>>0)>($159>>>0);
    if ($188) {
     break;
    } else {
     $$0$i5 = $187;$162 = $164;$163 = $165;$169 = $171;$170 = $172;$176 = $178;$177 = $179;$183 = $185;$184 = $186;
    }
   }
   $189 = (_bitshift64Shl(($164|0),($165|0),1)|0);
   $190 = (getTempRet0() | 0);
   $191 = (_bitshift64Lshr(($164|0),($165|0),63)|0);
   $192 = (getTempRet0() | 0);
   $193 = $189 | $191;
   $194 = $190 | $192;
   $195 = (_bitshift64Shl(($171|0),($172|0),7)|0);
   $196 = (getTempRet0() | 0);
   $197 = (_bitshift64Lshr(($171|0),($172|0),57)|0);
   $198 = (getTempRet0() | 0);
   $199 = $195 | $197;
   $200 = $196 | $198;
   $201 = (_bitshift64Shl(($178|0),($179|0),12)|0);
   $202 = (getTempRet0() | 0);
   $203 = (_bitshift64Lshr(($178|0),($179|0),52)|0);
   $204 = (getTempRet0() | 0);
   $205 = $201 | $203;
   $206 = $202 | $204;
   $207 = (_bitshift64Shl(($185|0),($186|0),18)|0);
   $208 = (getTempRet0() | 0);
   $209 = (_bitshift64Lshr(($185|0),($186|0),46)|0);
   $210 = (getTempRet0() | 0);
   $211 = $207 | $209;
   $212 = $208 | $210;
   $213 = (_i64Add(($199|0),($200|0),($193|0),($194|0))|0);
   $214 = (getTempRet0() | 0);
   $215 = (_i64Add(($213|0),($214|0),($205|0),($206|0))|0);
   $216 = (getTempRet0() | 0);
   $217 = (_i64Add(($215|0),($216|0),($211|0),($212|0))|0);
   $218 = (getTempRet0() | 0);
   $219 = (_XXH64_mergeRound($217,$218,$164,$165)|0);
   $220 = (getTempRet0() | 0);
   $221 = (_XXH64_mergeRound($219,$220,$171,$172)|0);
   $222 = (getTempRet0() | 0);
   $223 = (_XXH64_mergeRound($221,$222,$178,$179)|0);
   $224 = (getTempRet0() | 0);
   $225 = (_XXH64_mergeRound($223,$224,$185,$186)|0);
   $226 = (getTempRet0() | 0);
   $$1$i7 = $187;$227 = $225;$228 = $226;
  } else {
   $$1$i7 = $0;$227 = 374761413;$228 = 668265263;
  }
  $229 = (_i64Add(($227|0),($228|0),($1|0),0)|0);
  $230 = (getTempRet0() | 0);
  $231 = ((($$1$i7)) + 8|0);
  $232 = ($231>>>0)>($5>>>0);
  if ($232) {
   $$2$lcssa$i12 = $$1$i7;$260 = $229;$262 = $230;
  } else {
   $$217$i9 = $$1$i7;$238 = $229;$240 = $230;$252 = $231;
   while(1) {
    $233 = (_XXH_read64($$217$i9)|0);
    $234 = (getTempRet0() | 0);
    $235 = (_XXH64_round(0,0,$233,$234)|0);
    $236 = (getTempRet0() | 0);
    $237 = $235 ^ $238;
    $239 = $236 ^ $240;
    $241 = (_bitshift64Shl(($237|0),($239|0),27)|0);
    $242 = (getTempRet0() | 0);
    $243 = (_bitshift64Lshr(($237|0),($239|0),37)|0);
    $244 = (getTempRet0() | 0);
    $245 = $241 | $243;
    $246 = $242 | $244;
    $247 = (___muldi3(($245|0),($246|0),-2048144761,-1640531535)|0);
    $248 = (getTempRet0() | 0);
    $249 = (_i64Add(($247|0),($248|0),-1028477341,-2048144777)|0);
    $250 = (getTempRet0() | 0);
    $251 = ((($252)) + 8|0);
    $253 = ($251>>>0)>($5>>>0);
    if ($253) {
     $$2$lcssa$i12 = $252;$260 = $249;$262 = $250;
     break;
    } else {
     $$217$i9$phi = $252;$238 = $249;$240 = $250;$252 = $251;$$217$i9 = $$217$i9$phi;
    }
   }
  }
  $254 = ((($$2$lcssa$i12)) + 4|0);
  $255 = ($254>>>0)>($5>>>0);
  if ($255) {
   $$3$i15 = $$2$lcssa$i12;$308 = $260;$309 = $262;
  } else {
   $256 = (_XXH_read32($$2$lcssa$i12)|0);
   $257 = (___muldi3(($256|0),0,-2048144761,-1640531535)|0);
   $258 = (getTempRet0() | 0);
   $259 = $257 ^ $260;
   $261 = $258 ^ $262;
   $263 = (_bitshift64Shl(($259|0),($261|0),23)|0);
   $264 = (getTempRet0() | 0);
   $265 = (_bitshift64Lshr(($259|0),($261|0),41)|0);
   $266 = (getTempRet0() | 0);
   $267 = $263 | $265;
   $268 = $264 | $266;
   $269 = (___muldi3(($267|0),($268|0),668265295,-1028477379)|0);
   $270 = (getTempRet0() | 0);
   $271 = (_i64Add(($269|0),($270|0),-1640531463,374761393)|0);
   $272 = (getTempRet0() | 0);
   $$3$i15 = $254;$308 = $271;$309 = $272;
  }
  $273 = ($$3$i15>>>0)<($5>>>0);
  if (!($273)) {
   $291 = $308;$292 = $309;
   $293 = (_bitshift64Lshr(($291|0),($292|0),33)|0);
   $294 = (getTempRet0() | 0);
   $295 = $293 ^ $291;
   $296 = $294 ^ $292;
   $297 = (___muldi3(($295|0),($296|0),668265295,-1028477379)|0);
   $298 = (getTempRet0() | 0);
   $299 = (_bitshift64Lshr(($297|0),($298|0),29)|0);
   $300 = (getTempRet0() | 0);
   $301 = $299 ^ $297;
   $302 = $300 ^ $298;
   $303 = (___muldi3(($301|0),($302|0),-1640531463,374761393)|0);
   $304 = (getTempRet0() | 0);
   $305 = $304 ^ $303;
   setTempRet0(($304) | 0);
   return ($305|0);
  }
  $$415$i17 = $$3$i15;$279 = $308;$281 = $309;
  while(1) {
   $274 = HEAP8[$$415$i17>>0]|0;
   $275 = $274&255;
   $276 = (___muldi3(($275|0),0,374761413,668265263)|0);
   $277 = (getTempRet0() | 0);
   $278 = $276 ^ $279;
   $280 = $277 ^ $281;
   $282 = (_bitshift64Shl(($278|0),($280|0),11)|0);
   $283 = (getTempRet0() | 0);
   $284 = (_bitshift64Lshr(($278|0),($280|0),53)|0);
   $285 = (getTempRet0() | 0);
   $286 = $282 | $284;
   $287 = $283 | $285;
   $288 = (___muldi3(($286|0),($287|0),-2048144761,-1640531535)|0);
   $289 = (getTempRet0() | 0);
   $290 = ((($$415$i17)) + 1|0);
   $exitcond$i19 = ($290|0)==($5|0);
   if ($exitcond$i19) {
    $291 = $288;$292 = $289;
    break;
   } else {
    $$415$i17 = $290;$279 = $288;$281 = $289;
   }
  }
  $293 = (_bitshift64Lshr(($291|0),($292|0),33)|0);
  $294 = (getTempRet0() | 0);
  $295 = $293 ^ $291;
  $296 = $294 ^ $292;
  $297 = (___muldi3(($295|0),($296|0),668265295,-1028477379)|0);
  $298 = (getTempRet0() | 0);
  $299 = (_bitshift64Lshr(($297|0),($298|0),29)|0);
  $300 = (getTempRet0() | 0);
  $301 = $299 ^ $297;
  $302 = $300 ^ $298;
  $303 = (___muldi3(($301|0),($302|0),-1640531463,374761393)|0);
  $304 = (getTempRet0() | 0);
  $305 = $304 ^ $303;
  setTempRet0(($304) | 0);
  return ($305|0);
 }
 return (0)|0;
}
function _fc_solve_hash_insert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$04449 = 0, $$045 = 0, $$1 = 0, $$143 = 0, $$sroa$2$0$$sroa_idx1 = 0, $$sroa$3$0$$sroa_idx2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & $2;
 $7 = (($3) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   $$143 = $7;
  } else {
   $10 = ((($0)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   $$04449 = $8;
   L3: while(1) {
    $13 = ((($$04449)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    do {
     if ($15) {
      $16 = HEAP32[$$04449>>2]|0;
      if ($12) {
       $17 = (_fc_solve_stack_compare_for_comparison($16,$1)|0);
       $18 = ($17|0)==(0);
       if ($18) {
        $$1 = $16;
        label = 14;
        break L3;
       } else {
        break;
       }
      } else {
       $19 = (_fc_solve_state_compare($16,$1)|0);
       $20 = ($19|0)==(0);
       if ($20) {
        $$1 = $16;
        label = 14;
        break L3;
       } else {
        break;
       }
      }
     }
    } while(0);
    $21 = ((($$04449)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==(0|0);
    if ($23) {
     label = 8;
     break;
    } else {
     $$04449 = $22;
    }
   }
   if ((label|0) == 8) {
    $24 = ((($$04449)) + 8|0);
    $$143 = $24;
    break;
   }
   else if ((label|0) == 14) {
    return ($$1|0);
   }
  }
 } while(0);
 $25 = ((($0)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $30 = ((($0)) + 28|0);
  $31 = (_fcs_compact_alloc_ptr($30,12)|0);
  $$045 = $31;
 } else {
  $28 = ((($26)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$25>>2] = $29;
  $$045 = $26;
 }
 HEAP32[$$143>>2] = $$045;
 HEAP32[$$045>>2] = $1;
 $$sroa$2$0$$sroa_idx1 = ((($$045)) + 4|0);
 HEAP32[$$sroa$2$0$$sroa_idx1>>2] = $2;
 $$sroa$3$0$$sroa_idx2 = ((($$045)) + 8|0);
 HEAP32[$$sroa$3$0$$sroa_idx2>>2] = 0;
 $32 = ((($0)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 1)|0;
 HEAP32[$32>>2] = $34;
 $35 = ((($0)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($33|0)<($36|0);
 if ($37) {
  $$1 = 0;
  return ($$1|0);
 }
 _fc_solve_hash_rehash($0);
 $$1 = 0;
 return ($$1|0);
}
function _handle_existing_void($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = ((($2)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  _upon_new_state($0,$1,$7);
  $$0 = 1;
  return ($$0|0);
 } else {
  _FCS_STATE_collectible_to_kv($3,$4);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _FCS_STATE_collectible_to_kv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 _FCS_STATE_keyval_pair_to_kv($2,$1);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 STACKTOP = sp;return;
}
function _upon_new_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($3)) + 72|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = (($6) + 1)<<16>>16;
  HEAP16[$5>>1] = $7;
  $8 = ((($2)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_fc_solve_move_stack_compact_allocate($1,$9)|0);
  HEAP32[$8>>2] = $10;
 }
 $11 = ((($0)) + 140|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$11>>2] = $13;
 $14 = ((($0)) + 144|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$14>>2] = $16;
 return;
}
function _fc_solve_move_stack_compact_allocate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 2;
 $6 = (($5) + 8)|0;
 $7 = (_fcs_compact_alloc_ptr($2,$6)|0);
 $8 = ((($7)) + 8|0);
 HEAP32[$7>>2] = $8;
 $9 = HEAP32[$3>>2]|0;
 $10 = ((($7)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 $13 = $12 << 2;
 _memcpy(($8|0),($11|0),($13|0))|0;
 return ($7|0);
}
function _fcs_compact_alloc_ptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (0 - ($1))|0;
 $3 = $2 & 3;
 $4 = (($3) + ($1))|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = (($6) - ($9))|0;
 $11 = ($10>>>0)<($4>>>0);
 if ($11) {
  _fc_solve_compact_allocator_extend($0);
 } else {
  $12 = ((($0)) + 12|0);
  HEAP32[$12>>2] = $8;
 }
 $13 = HEAP32[$7>>2]|0;
 $14 = (($13) + ($4)|0);
 HEAP32[$7>>2] = $14;
 $15 = ((($0)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 return ($16|0);
}
function _FCS_STATE_keyval_pair_to_kv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 $3 = ((($1)) + 56|0);
 HEAP32[$2>>2] = $3;
 return;
}
function _fc_solve_stack_compare_for_comparison($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03642 = 0, $$37 = 0, $$v = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2&255)<($3&255);
 $$v = $4 ? $2 : $3;
 $5 = $$v&255;
 $6 = ($$v<<24>>24)==(0);
 L1: do {
  if (!($6)) {
   $$03642 = 1;
   while(1) {
    $9 = (($0) + ($$03642)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = (($1) + ($$03642)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = (_fc_solve_card_compare($10,$12)|0);
    $14 = ($13|0)==(0);
    if (!($14)) {
     break;
    }
    $7 = (($$03642) + 1)|0;
    $8 = ($$03642>>>0)<($5>>>0);
    if ($8) {
     $$03642 = $7;
    } else {
     break L1;
    }
   }
   return ($13|0);
  }
 } while(0);
 $15 = ($2&255)>($3&255);
 $$37 = $15&1;
 $spec$select = $4 ? -1 : $$37;
 return ($spec$select|0);
}
function _fc_solve_state_compare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_memcmp($0,$1,56)|0);
 return ($2|0);
}
function _fc_solve_hash_rehash($0) {
 $0 = $0|0;
 var $$04950 = 0, $$051 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 1;
 $4 = ($3|0)<($2|0);
 if ($4) {
  $5 = ((($0)) + 24|0);
  HEAP32[$5>>2] = 2147483647;
  return;
 }
 $6 = (($3) + -1)|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_calloc($3,4)|0);
 $9 = ($2|0)>(0);
 if ($9) {
  $$051 = 0;
  while(1) {
   $12 = (($7) + ($$051<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    $$04950 = $13;
    while(1) {
     $15 = ((($$04950)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = $16 & $6;
     $18 = ((($$04950)) + 8|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (($8) + ($17<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     HEAP32[$18>>2] = $21;
     HEAP32[$20>>2] = $$04950;
     $22 = ($19|0)==(0|0);
     if ($22) {
      break;
     } else {
      $$04950 = $19;
     }
    }
   }
   $23 = (($$051) + 1)|0;
   $exitcond = ($23|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $$051 = $23;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 _free($10);
 HEAP32[$0>>2] = $8;
 HEAP32[$1>>2] = $3;
 $11 = ((($0)) + 16|0);
 HEAP32[$11>>2] = $6;
 _fcs_hash_set_max_num_elems($0,$3);
 return;
}
function _fcs_hash_set_max_num_elems($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 1;
 $3 = ((($0)) + 24|0);
 HEAP32[$3>>2] = $2;
 return;
}
function _fc_solve_card_compare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0&255;
 $3 = $1&255;
 $4 = (($2) - ($3))|0;
 return ($4|0);
}
function _XXH64_round($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (___muldi3(($2|0),($3|0),668265295,-1028477379)|0);
 $5 = (getTempRet0() | 0);
 $6 = (_i64Add(($4|0),($5|0),($0|0),($1|0))|0);
 $7 = (getTempRet0() | 0);
 $8 = (_bitshift64Shl(($6|0),($7|0),31)|0);
 $9 = (getTempRet0() | 0);
 $10 = (_bitshift64Lshr(($6|0),($7|0),33)|0);
 $11 = (getTempRet0() | 0);
 $12 = $8 | $10;
 $13 = $9 | $11;
 $14 = (___muldi3(($12|0),($13|0),-2048144761,-1640531535)|0);
 $15 = (getTempRet0() | 0);
 setTempRet0(($15) | 0);
 return ($14|0);
}
function _XXH64_mergeRound($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_XXH64_round(0,0,$2,$3)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4 ^ $0;
 $7 = $5 ^ $1;
 $8 = (___muldi3(($6|0),($7|0),-2048144761,-1640531535)|0);
 $9 = (getTempRet0() | 0);
 $10 = (_i64Add(($8|0),($9|0),-1028477341,-2048144777)|0);
 $11 = (getTempRet0() | 0);
 setTempRet0(($11) | 0);
 return ($10|0);
}
function _XXH_read64($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAPU8[$5>>0]|(HEAPU8[$5+1>>0]<<8)|(HEAPU8[$5+2>>0]<<16)|(HEAPU8[$5+3>>0]<<24);
 setTempRet0(($6) | 0);
 return ($3|0);
}
function _XXH_read32($0) {
 $0 = $0|0;
 var $$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$copyload = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 return ($$0$copyload|0);
}
function _fcs_compact_alloc_release($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $2;
 return;
}
function _freecell_solver_user_cmd_line_parse_args($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $9 = (_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count($0,$1,$2,$3,$4,$5,$6,$7,$8,-1,0)|0);
 return ($9|0);
}
function _freecell_solver_user_cmd_line_parse_args_with_file_nesting_count($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$0497 = 0, $$0500$lcssa = 0, $$0500681 = 0, $$0506679 = 0, $$0521 = 0, $$0522 = 0, $$0524 = 0, $$0527 = 0, $$1 = 0, $$1523 = 0, $$1526542 = 0, $$19 = 0, $$5505 = 0, $$alloca_mul = 0, $$lobit = 0, $$lobit$not = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0.0, $231 = 0.0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $isdigit = 0, $isdigit530 = 0;
 var $isdigittmp = 0, $isdigittmp529 = 0, $spec$select = 0, $storemerge = 0, $storemerge558 = 0, $strchr = 0, $strlen = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_ptr37 = 0, $vararg_ptr59 = 0, $vararg_ptr69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $vararg_buffer73 = sp + 248|0;
 $vararg_buffer70 = sp + 240|0;
 $vararg_buffer66 = sp + 232|0;
 $vararg_buffer63 = sp + 224|0;
 $vararg_buffer60 = sp + 216|0;
 $vararg_buffer56 = sp + 208|0;
 $vararg_buffer53 = sp + 200|0;
 $vararg_buffer50 = sp + 192|0;
 $vararg_buffer47 = sp + 184|0;
 $vararg_buffer44 = sp + 176|0;
 $vararg_buffer41 = sp + 168|0;
 $vararg_buffer38 = sp + 160|0;
 $vararg_buffer34 = sp + 152|0;
 $vararg_buffer31 = sp + 144|0;
 $vararg_buffer28 = sp + 136|0;
 $vararg_buffer25 = sp + 128|0;
 $vararg_buffer22 = sp + 120|0;
 $vararg_buffer19 = sp + 112|0;
 $vararg_buffer16 = sp + 104|0;
 $vararg_buffer13 = sp + 96|0;
 $vararg_buffer10 = sp + 88|0;
 $vararg_buffer7 = sp + 80|0;
 $vararg_buffer4 = sp + 72|0;
 $vararg_buffer1 = sp + 64|0;
 $vararg_buffer = sp + 56|0;
 $11 = sp + 252|0;
 $12 = sp;
 $13 = sp + 48|0;
 HEAP32[$7>>2] = 0;
 $14 = (($2) + ($1<<2)|0);
 $15 = (($2) + ($3<<2)|0);
 $16 = ($3|0)<($1|0);
 L1: do {
  if ($16) {
   $17 = ($4|0)==(0|0);
   $18 = ($9|0)==(0);
   $19 = $2;
   $20 = ($10|0)==(0|0);
   $21 = ((($12)) + 4|0);
   $$lobit = (31)?($9 >> 31):($9);
   $$lobit$not = $$lobit ^ -1;
   $22 = (($$lobit$not) + ($9))|0;
   $23 = ((($12)) + 8|0);
   $24 = ((($12)) + 16|0);
   $25 = ((($12)) + 24|0);
   $26 = ((($12)) + 32|0);
   $27 = ((($12)) + 40|0);
   $$0500681 = $15;
   L3: while(1) {
    L5: do {
     if ($17) {
      label = 12;
     } else {
      $28 = HEAP32[$4>>2]|0;
      $29 = ($28|0)==(0|0);
      if ($29) {
       label = 12;
      } else {
       $30 = HEAP32[$$0500681>>2]|0;
       $$0506679 = $4;$34 = $28;
       while(1) {
        $35 = (_strcmp($34,$30)|0);
        $36 = ($35|0)==(0);
        $32 = ((($$0506679)) + 4|0);
        if ($36) {
         break;
        }
        $31 = HEAP32[$32>>2]|0;
        $33 = ($31|0)==(0|0);
        if ($33) {
         label = 12;
         break L5;
        } else {
         $$0506679 = $32;$34 = $31;
        }
       }
       $37 = $$0500681;
       $38 = (($37) - ($19))|0;
       $39 = (2)?($38 >> 2):($38);
       $40 = (FUNCTION_TABLE_iiiiiiii[$5 & 0]($0,$1,$2,$39,$13,$12,$6)|0);
       switch ($40|0) {
       case 2:  {
        label = 9;
        break L3;
        break;
       }
       case 1:  {
        $42 = HEAP32[$13>>2]|0;
        $43 = (($42) + -1)|0;
        $44 = (($$0500681) + ($43<<2)|0);
        $$5505 = $44;
        break L5;
        break;
       }
       default: {
        label = 12;
        break L5;
       }
       }
      }
     }
    } while(0);
    L15: do {
     if ((label|0) == 12) {
      label = 0;
      $45 = HEAP32[$$0500681>>2]|0;
      $46 = (_strlen($45)|0);
      $47 = (_in_word_set($45,$46)|0);
      $48 = ($47|0)==(0|0);
      if ($48) {
       label = 14;
       break L3;
      }
      $49 = ((($47)) + 4|0);
      $50 = HEAP32[$49>>2]|0;
      do {
       switch ($50|0) {
       case 0:  {
        label = 14;
        break L3;
        break;
       }
       case 1:  {
        $55 = ((($$0500681)) + 4|0);
        $56 = ($55|0)==($14|0);
        if ($56) {
         label = 16;
         break L3;
        } else {
         $$5505 = $55;
         break L15;
        }
        break;
       }
       case 2:  {
        $61 = ((($$0500681)) + 4|0);
        $62 = ($61|0)==($14|0);
        if ($62) {
         label = 18;
         break L3;
        }
        $67 = HEAP32[$61>>2]|0;
        $68 = (_atol($67)|0);
        _freecell_solver_user_limit_iterations_long($0,$68);
        $$5505 = $61;
        break L15;
        break;
       }
       case 3:  {
        $69 = ((($$0500681)) + 4|0);
        $70 = ($69|0)==($14|0);
        if ($70) {
         label = 21;
         break L3;
        }
        $75 = HEAP32[$69>>2]|0;
        $76 = (_freecell_solver_user_set_depth_tests_order($0,0,$75,$11)|0);
        $77 = ($76|0)==(0);
        if ($77) {
         $$5505 = $69;
         break L15;
        } else {
         label = 23;
         break L3;
        }
        break;
       }
       case 4:  {
        $85 = ((($$0500681)) + 4|0);
        $86 = ($85|0)==($14|0);
        if ($86) {
         label = 25;
         break L3;
        }
        $91 = HEAP32[$85>>2]|0;
        $92 = (_atoi($91)|0);
        $93 = (_freecell_solver_user_set_num_freecells($0,$92)|0);
        $94 = ($93|0)==(0);
        if ($94) {
         $$5505 = $85;
         break L15;
        } else {
         label = 27;
         break L3;
        }
        break;
       }
       case 5:  {
        $101 = ((($$0500681)) + 4|0);
        $102 = ($101|0)==($14|0);
        if ($102) {
         label = 29;
         break L3;
        }
        $107 = HEAP32[$101>>2]|0;
        $108 = (_atoi($107)|0);
        $109 = (_freecell_solver_user_set_num_stacks($0,$108)|0);
        $110 = ($109|0)==(0);
        if ($110) {
         $$5505 = $101;
         break L15;
        } else {
         label = 31;
         break L3;
        }
        break;
       }
       case 6:  {
        $117 = ((($$0500681)) + 4|0);
        $118 = ($117|0)==($14|0);
        if ($118) {
         label = 33;
         break L3;
        }
        $123 = HEAP32[$117>>2]|0;
        $124 = (_atoi($123)|0);
        $125 = (_freecell_solver_user_set_num_decks($0,$124)|0);
        $126 = ($125|0)==(0);
        if ($126) {
         $$5505 = $117;
         break L15;
        } else {
         label = 35;
         break L3;
        }
        break;
       }
       case 7:  {
        $133 = ((($$0500681)) + 4|0);
        $134 = ($133|0)==($14|0);
        if ($134) {
         label = 37;
         break L3;
        }
        $139 = HEAP32[$133>>2]|0;
        $140 = (_strcmp($139,9950)|0);
        $141 = ($140|0)==(0);
        if ($141) {
         $145 = 1;
        } else {
         $142 = (_strcmp($139,9955)|0);
         $143 = ($142|0)==(0);
         $144 = $143 ? 2 : 0;
         $145 = $144;
        }
        (_freecell_solver_user_set_sequences_are_built_by_type($0,$145)|0);
        $$5505 = $133;
        break L15;
        break;
       }
       case 8:  {
        $146 = ((($$0500681)) + 4|0);
        $147 = ($146|0)==($14|0);
        if ($147) {
         label = 42;
         break L3;
        }
        $152 = HEAP32[$146>>2]|0;
        $153 = (_strcmp($152,9960)|0);
        $154 = ($153|0)==(0);
        $155 = $154&1;
        (_freecell_solver_user_set_sequence_move($0,$155)|0);
        $$5505 = $146;
        break L15;
        break;
       }
       case 9:  {
        $156 = ((($$0500681)) + 4|0);
        $157 = ($156|0)==($14|0);
        if ($157) {
         label = 45;
         break L3;
        }
        $162 = HEAP32[$156>>2]|0;
        $163 = (_strcmp($162,9970)|0);
        $164 = ($163|0)==(0);
        if ($164) {
         $168 = 1;
        } else {
         $165 = (_strcmp($162,9976)|0);
         $166 = ($165|0)==(0);
         $167 = $166 ? 2 : 0;
         $168 = $167;
        }
        (_freecell_solver_user_set_empty_stacks_filled_by($0,$168)|0);
        $$5505 = $156;
        break L15;
        break;
       }
       case 10:  {
        $169 = ((($$0500681)) + 4|0);
        $170 = ($169|0)==($14|0);
        if ($170) {
         label = 50;
         break L3;
        }
        $175 = HEAP32[$169>>2]|0;
        $176 = (_freecell_solver_user_apply_preset($0,$175)|0);
        switch ($176|0) {
        case 1:  {
         label = 52;
         break L3;
         break;
        }
        case 2:  {
         label = 53;
         break L3;
         break;
        }
        case 3:  {
         label = 54;
         break L3;
         break;
        }
        case 0:  {
         $$5505 = $169;
         break L15;
         break;
        }
        default: {
         label = 55;
         break L3;
        }
        }
        break;
       }
       case 11:  {
        $197 = ((($$0500681)) + 4|0);
        $198 = ($197|0)==($14|0);
        if ($198) {
         label = 57;
         break L3;
        }
        $203 = HEAP32[$197>>2]|0;
        $204 = (_strcmp($203,10437)|0);
        $205 = ($204|0)==(0);
        if ($205) {
         $$0521 = 1;
        } else {
         $206 = (_strcmp($203,10446)|0);
         $207 = ($206|0)==(0);
         if ($207) {
          $$0521 = 1;
         } else {
          $208 = (_strcmp($203,10450)|0);
          $209 = ($208|0)==(0);
          if ($209) {
           $$0521 = 2;
          } else {
           $210 = (_strcmp($203,10454)|0);
           $211 = ($210|0)==(0);
           if ($211) {
            $$0521 = 3;
           } else {
            $212 = (_strcmp($203,10461)|0);
            $213 = ($212|0)==(0);
            if ($213) {
             $$0521 = 5;
            } else {
             $214 = (_strcmp($203,10472)|0);
             $215 = ($214|0)==(0);
             if ($215) {
              $$0521 = 6;
             } else {
              label = 64;
              break L3;
             }
            }
           }
          }
         }
        }
        _freecell_solver_user_set_solving_method($0,$$0521);
        $$5505 = $197;
        break L15;
        break;
       }
       case 12:  {
        $221 = ((($$0500681)) + 4|0);
        $222 = ($221|0)==($14|0);
        if ($222) {
         label = 67;
         break L3;
        }
        $227 = HEAP32[$221>>2]|0;
        $strlen = (_strlen($227)|0);
        $strchr = (($227) + ($strlen)|0);
        _fc_solve_set_weights($227,$strchr,$12);
        $228 = +HEAPF64[$12>>3];
        (_freecell_solver_user_set_a_star_weight($0,0,$228)|0);
        $229 = +HEAPF64[$23>>3];
        (_freecell_solver_user_set_a_star_weight($0,1,$229)|0);
        $230 = +HEAPF64[$24>>3];
        (_freecell_solver_user_set_a_star_weight($0,2,$230)|0);
        $231 = +HEAPF64[$25>>3];
        (_freecell_solver_user_set_a_star_weight($0,3,$231)|0);
        $232 = +HEAPF64[$26>>3];
        (_freecell_solver_user_set_a_star_weight($0,4,$232)|0);
        $233 = +HEAPF64[$27>>3];
        (_freecell_solver_user_set_a_star_weight($0,5,$233)|0);
        $$5505 = $221;
        break L15;
        break;
       }
       case 13:  {
        _freecell_solver_user_set_solution_optimization($0,1);
        $$5505 = $$0500681;
        break L15;
        break;
       }
       case 14:  {
        $234 = ((($$0500681)) + 4|0);
        $235 = ($234|0)==($14|0);
        if ($235) {
         label = 71;
         break L3;
        }
        $240 = HEAP32[$234>>2]|0;
        $241 = (_atoi($240)|0);
        _freecell_solver_user_set_random_seed($0,$241);
        $$5505 = $234;
        break L15;
        break;
       }
       case 15:  {
        $242 = ((($$0500681)) + 4|0);
        $243 = ($242|0)==($14|0);
        if ($243) {
         label = 74;
         break L3;
        }
        $248 = HEAP32[$242>>2]|0;
        $249 = (_atol($248)|0);
        _freecell_solver_user_limit_num_states_in_collection_long($0,$249);
        $$5505 = $242;
        break L15;
        break;
       }
       case 16:  {
        $250 = ((($$0500681)) + 4|0);
        $251 = ($250|0)==($14|0);
        if ($251) {
         label = 77;
         break L3;
        }
        $256 = HEAP32[$250>>2]|0;
        $257 = (_atol($256)|0);
        _freecell_solver_set_stored_states_trimming_limit($0,$257);
        $$5505 = $250;
        break L15;
        break;
       }
       case 17:  {
        (_freecell_solver_user_next_instance($0)|0);
        $$5505 = $$0500681;
        break L15;
        break;
       }
       case 18:  {
        (_freecell_solver_user_next_flare($0)|0);
        $$5505 = $$0500681;
        break L15;
        break;
       }
       case 40:  {
        $486 = ((($$0500681)) + 4|0);
        $487 = ($486|0)==($14|0);
        if ($487) {
         label = 163;
         break L3;
        }
        $492 = HEAP32[$486>>2]|0;
        HEAP32[$vararg_buffer66>>2] = $12;
        $vararg_ptr69 = ((($vararg_buffer66)) + 4|0);
        HEAP32[$vararg_ptr69>>2] = $13;
        $493 = (_sscanf($492,11009,$vararg_buffer66)|0);
        $494 = ($493|0)==(2);
        if (!($494)) {
         label = 165;
         break L3;
        }
        $496 = HEAP32[$12>>2]|0;
        $497 = +HEAPF64[$13>>3];
        $498 = (_freecell_solver_user_set_patsolve_y_param($0,$496,$497,$11)|0);
        $499 = ($498|0)==(0);
        if (!($499)) {
         label = 167;
         break L3;
        }
        $$5505 = $486;
        break L15;
        break;
       }
       case 39:  {
        $466 = ((($$0500681)) + 4|0);
        $467 = ($466|0)==($14|0);
        if ($467) {
         label = 155;
         break L3;
        }
        $472 = HEAP32[$466>>2]|0;
        HEAP32[$vararg_buffer56>>2] = $12;
        $vararg_ptr59 = ((($vararg_buffer56)) + 4|0);
        HEAP32[$vararg_ptr59>>2] = $13;
        $473 = (_sscanf($472,10928,$vararg_buffer56)|0);
        $474 = ($473|0)==(2);
        if (!($474)) {
         label = 157;
         break L3;
        }
        $476 = HEAP32[$12>>2]|0;
        $477 = HEAP32[$13>>2]|0;
        $478 = (_freecell_solver_user_set_patsolve_x_param($0,$476,$477,$11)|0);
        $479 = ($478|0)==(0);
        if (!($479)) {
         label = 159;
         break L3;
        }
        $$5505 = $466;
        break L15;
        break;
       }
       case 21:  {
        $267 = ((($$0500681)) + 4|0);
        $268 = ($267|0)==($14|0);
        if ($268) {
         label = 85;
         break L3;
        }
        $273 = HEAP32[$267>>2]|0;
        $274 = (_atoi($273)|0);
        _freecell_solver_user_set_soft_thread_step($0,$274);
        $$5505 = $267;
        break L15;
        break;
       }
       case 22:  {
        _freecell_solver_user_set_reparent_states($0,1);
        $$5505 = $$0500681;
        break L15;
        break;
       }
       case 23:  {
        _freecell_solver_user_set_calc_real_depth($0,1);
        $$5505 = $$0500681;
        break L15;
        break;
       }
       case 24:  {
        $275 = ((($$0500681)) + 4|0);
        $276 = ($275|0)==($14|0);
        if ($276) {
         label = 90;
         break L3;
        }
        $281 = HEAP32[$275>>2]|0;
        _freecell_solver_user_set_soft_thread_name($0,$281);
        $$5505 = $275;
        break L15;
        break;
       }
       case 25:  {
        $282 = ((($$0500681)) + 4|0);
        $283 = ($282|0)==($14|0);
        if ($283) {
         label = 93;
         break L3;
        }
        $288 = HEAP32[$282>>2]|0;
        _freecell_solver_user_set_flare_name($0,$288);
        $$5505 = $282;
        break L15;
        break;
       }
       case 26:  {
        $289 = ((($$0500681)) + 4|0);
        $290 = ($289|0)==($14|0);
        if ($290) {
         label = 96;
         break L3;
        }
        $295 = HEAP32[$289>>2]|0;
        (_freecell_solver_user_set_hard_thread_prelude($0,$295)|0);
        $$5505 = $289;
        break L15;
        break;
       }
       case 27:  {
        $296 = ((($$0500681)) + 4|0);
        $297 = ($296|0)==($14|0);
        if ($297) {
         label = 99;
         break L3;
        }
        $302 = HEAP32[$296>>2]|0;
        (_freecell_solver_user_set_flares_plan($0,$302)|0);
        $$5505 = $296;
        break L15;
        break;
       }
       case 28:  {
        $303 = ((($$0500681)) + 4|0);
        $304 = ($303|0)==($14|0);
        if ($304) {
         label = 102;
         break L3;
        }
        $309 = HEAP32[$303>>2]|0;
        $310 = (+_atof($309));
        _freecell_solver_user_set_flares_iters_factor($0,$310);
        $$5505 = $303;
        break L15;
        break;
       }
       case 29:  {
        $311 = ((($$0500681)) + 4|0);
        $312 = ($311|0)==($14|0);
        if ($312) {
         label = 105;
         break L3;
        }
        $317 = HEAP32[$311>>2]|0;
        $318 = (_freecell_solver_user_set_optimization_scan_tests_order($0,$317,$11)|0);
        $319 = ($318|0)==(0);
        if ($319) {
         $$5505 = $311;
         break L15;
        } else {
         label = 107;
         break L3;
        }
        break;
       }
       case 30:  {
        $327 = ((($$0500681)) + 4|0);
        $328 = ($327|0)==($14|0);
        if ($328) {
         label = 109;
         break L3;
        }
        $333 = HEAP32[$327>>2]|0;
        $334 = (_strcmp($333,9976)|0);
        $335 = ($334|0)==(0);
        if ($335) {
         $$0527 = 0;
        } else {
         $336 = (_strcmp($333,10616)|0);
         $337 = ($336|0)==(0);
         if ($337) {
          $$0527 = 1;
         } else {
          label = 113;
          break L3;
         }
        }
        _freecell_solver_user_set_scans_synergy($0,$$0527);
        $$5505 = $327;
        break L15;
        break;
       }
       case 31:  {
        (_freecell_solver_user_reset($0)|0);
        $$5505 = $$0500681;
        break L15;
        break;
       }
       case 32:  {
        $343 = ((($$0500681)) + 4|0);
        $344 = ($343|0)==($14|0);
        if ($344) {
         label = 116;
         break L3;
        }
        if ($18) {
         $$5505 = $343;
         break L15;
        }
        $349 = HEAP32[$343>>2]|0;
        $$0522 = $349;
        while(1) {
         $350 = HEAP8[$$0522>>0]|0;
         $351 = $350 << 24 >> 24;
         $isdigittmp529 = (($351) + -48)|0;
         $isdigit530 = ($isdigittmp529>>>0)<(10);
         $352 = ((($$0522)) + 1|0);
         if ($isdigit530) {
          $$0522 = $352;
         } else {
          break;
         }
        }
        $353 = ($350<<24>>24)==(44);
        if ($353) {
         $354 = (_atoi($349)|0);
         $355 = ((($$0522)) + 1|0);
         $$0524 = $354;$$1523 = $355;
        } else {
         $$0524 = 0;$$1523 = $$0522;
        }
        if ($20) {
         label = 124;
        } else {
         $356 = (_strlen($10)|0);
         $357 = (_strlen($$1523)|0);
         $358 = (($356) + 1)|0;
         $359 = (($358) + ($357))|0;
         $360 = (_llvm_stacksave()|0);
         $$alloca_mul = $359;
         $361 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
         HEAP32[$vararg_buffer34>>2] = $10;
         $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
         HEAP32[$vararg_ptr37>>2] = $$1523;
         (_sprintf($361,10666,$vararg_buffer34)|0);
         $362 = (_fopen($361,9592)|0);
         _llvm_stackrestore(($360|0));
         $363 = ($362|0)==(0|0);
         if ($363) {
          label = 124;
         } else {
          $$1526542 = $362;
         }
        }
        if ((label|0) == 124) {
         label = 0;
         $364 = (_fopen($$1523,9592)|0);
         $365 = ($364|0)==(0|0);
         if ($365) {
          label = 125;
          break L3;
         } else {
          $$1526542 = $364;
         }
        }
        (_fseek($$1526542,0,2)|0);
        $371 = (_ftell($$1526542)|0);
        $372 = (($371) + 1)|0;
        $373 = (_malloc($372)|0);
        $374 = ($373|0)==(0|0);
        if ($374) {
         label = 127;
         break L3;
        }
        (_fseek($$1526542,0,0)|0);
        $380 = (_fread($373,1,$371,$$1526542)|0);
        $381 = (($373) + ($380)|0);
        HEAP8[$381>>0] = 0;
        (_fclose($$1526542)|0);
        _fc_solve_args_man_chop($12,$373);
        _free($373);
        $382 = HEAP32[$12>>2]|0;
        $383 = ($382|0)>($$0524|0);
        if ($383) {
         $384 = (($382) - ($$0524))|0;
         $385 = HEAP32[$21>>2]|0;
         $386 = (($385) + ($$0524<<2)|0);
         $387 = (_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count($0,$384,$386,0,$4,$5,$6,$7,$8,$22,$10)|0);
         switch ($387|0) {
         case 0: case 3:  {
          break;
         }
         default: {
          label = 131;
          break L3;
         }
         }
        }
        _fc_solve_args_man_free($12);
        $$5505 = $343;
        break L15;
        break;
       }
       case 33:  {
        $392 = ((($$0500681)) + 4|0);
        $393 = ($392|0)==($14|0);
        if ($393) {
         label = 133;
         break L3;
        }
        $398 = HEAP32[$392>>2]|0;
        $399 = (_freecell_solver_user_cmd_line_read_cmd_line_preset($0,$398,$4,$7,$9,$10)|0);
        switch ($399|0) {
        case 5:  {
         label = 135;
         break L3;
         break;
        }
        case 0: case 3:  {
         $$5505 = $392;
         break L15;
         break;
        }
        default: {
         $$19 = $399;
         label = 172;
         break L3;
        }
        }
        break;
       }
       case 35: case 34:  {
        $406 = ((($$0500681)) + 4|0);
        $407 = ($406|0)==($14|0);
        if ($407) {
         label = 137;
         break L3;
        }
        $412 = HEAP32[$406>>2]|0;
        $$0 = $412;
        while(1) {
         $413 = HEAP8[$$0>>0]|0;
         $414 = $413 << 24 >> 24;
         $isdigittmp = (($414) + -48)|0;
         $isdigit = ($isdigittmp>>>0)<(10);
         $415 = ((($$0)) + 1|0);
         if ($isdigit) {
          $$0 = $415;
         } else {
          break;
         }
        }
        $416 = ($413<<24>>24)==(44);
        if ($416) {
         $417 = (_atoi($412)|0);
         $418 = ((($$0)) + 1|0);
         $$0497 = $417;$$1 = $418;
        } else {
         $$0497 = 0;$$1 = $412;
        }
        $419 = ($50|0)==(35);
        $spec$select = $419 ? $$1 : $412;
        $420 = (_freecell_solver_user_set_depth_tests_order($0,$$0497,$spec$select,$11)|0);
        $421 = ($420|0)==(0);
        if ($421) {
         $$5505 = $406;
         break L15;
        } else {
         label = 143;
         break L3;
        }
        break;
       }
       case 36:  {
        $429 = ((($$0500681)) + 4|0);
        $430 = ($429|0)==($14|0);
        if ($430) {
         label = 145;
         break L3;
        }
        $435 = HEAP32[$429>>2]|0;
        $436 = (_freecell_solver_user_set_pruning($0,$435,$11)|0);
        $437 = ($436|0)==(0);
        if ($437) {
         $$5505 = $429;
         break L15;
        } else {
         label = 147;
         break L3;
        }
        break;
       }
       case 37:  {
        $445 = ((($$0500681)) + 4|0);
        $446 = ($445|0)==($14|0);
        if ($446) {
         label = 149;
         break L3;
        } else {
         $$5505 = $445;
         break L15;
        }
        break;
       }
       case 38:  {
        $451 = ((($$0500681)) + 4|0);
        $452 = ($451|0)==($14|0);
        if ($452) {
         label = 151;
         break L3;
        }
        $457 = HEAP32[$451>>2]|0;
        $458 = (_freecell_solver_user_set_flares_choice($0,$457)|0);
        $459 = ($458|0)==(0);
        if ($459) {
         $$5505 = $451;
         break L15;
        } else {
         label = 153;
         break L3;
        }
        break;
       }
       case 19:  {
        $258 = (_freecell_solver_user_next_soft_thread($0)|0);
        $259 = ($258|0)==(0);
        if ($259) {
         $$5505 = $$0500681;
         break L15;
        } else {
         label = 83;
         break L3;
        }
        break;
       }
       case 20:  {
        $260 = (_freecell_solver_user_next_hard_thread($0)|0);
        $261 = ($260|0)==(0);
        if ($261) {
         $$5505 = $$0500681;
         break L15;
        } else {
         label = 83;
         break L3;
        }
        break;
       }
       default: {
        $$5505 = $$0500681;
        break L15;
       }
       }
      } while(0);
     }
    } while(0);
    $506 = ((($$5505)) + 4|0);
    $507 = ($506>>>0)<($14>>>0);
    if ($507) {
     $$0500681 = $506;
    } else {
     $$0500$lcssa = $506;
     break L1;
    }
   }
   switch (label|0) {
    case 9: {
     HEAP32[$8>>2] = $39;
     $41 = HEAP32[$12>>2]|0;
     $$19 = $41;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 14: {
     $51 = $$0500681;
     $52 = $2;
     $53 = (($51) - ($52))|0;
     $54 = (2)?($53 >> 2):($53);
     HEAP32[$8>>2] = $54;
     $$19 = 3;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 16: {
     $57 = $$0500681;
     $58 = $2;
     $59 = (($57) - ($58))|0;
     $60 = (2)?($59 >> 2):($59);
     HEAP32[$8>>2] = $60;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 18: {
     $63 = $$0500681;
     $64 = $2;
     $65 = (($63) - ($64))|0;
     $66 = (2)?($65 >> 2):($65);
     HEAP32[$8>>2] = $66;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 21: {
     $71 = $$0500681;
     $72 = $2;
     $73 = (($71) - ($72))|0;
     $74 = (2)?($73 >> 2):($73);
     HEAP32[$8>>2] = $74;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 23: {
     $78 = HEAP32[$11>>2]|0;
     HEAP32[$vararg_buffer>>2] = $78;
     $79 = (_calc_errstr_s(9615,$vararg_buffer)|0);
     HEAP32[$7>>2] = $79;
     $80 = HEAP32[$11>>2]|0;
     _free($80);
     $81 = $69;
     $82 = $2;
     $83 = (($81) - ($82))|0;
     $84 = (2)?($83 >> 2):($83);
     HEAP32[$8>>2] = $84;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 25: {
     $87 = $$0500681;
     $88 = $2;
     $89 = (($87) - ($88))|0;
     $90 = (2)?($89 >> 2):($89);
     HEAP32[$8>>2] = $90;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 27: {
     $95 = (_freecell_solver_user_get_max_num_freecells()|0);
     HEAP32[$vararg_buffer1>>2] = $95;
     $96 = (_calc_errstr_s(9642,$vararg_buffer1)|0);
     HEAP32[$7>>2] = $96;
     $97 = $85;
     $98 = $2;
     $99 = (($97) - ($98))|0;
     $100 = (2)?($99 >> 2):($99);
     HEAP32[$8>>2] = $100;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 29: {
     $103 = $$0500681;
     $104 = $2;
     $105 = (($103) - ($104))|0;
     $106 = (2)?($105 >> 2):($105);
     HEAP32[$8>>2] = $106;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 31: {
     $111 = (_freecell_solver_user_get_max_num_stacks()|0);
     HEAP32[$vararg_buffer4>>2] = $111;
     $112 = (_calc_errstr_s(9747,$vararg_buffer4)|0);
     HEAP32[$7>>2] = $112;
     $113 = $101;
     $114 = $2;
     $115 = (($113) - ($114))|0;
     $116 = (2)?($115 >> 2):($115);
     HEAP32[$8>>2] = $116;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 33: {
     $119 = $$0500681;
     $120 = $2;
     $121 = (($119) - ($120))|0;
     $122 = (2)?($121 >> 2):($121);
     HEAP32[$8>>2] = $122;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 35: {
     $127 = (_freecell_solver_user_get_max_num_decks()|0);
     HEAP32[$vararg_buffer7>>2] = $127;
     $128 = (_calc_errstr_s(9849,$vararg_buffer7)|0);
     HEAP32[$7>>2] = $128;
     $129 = $117;
     $130 = $2;
     $131 = (($129) - ($130))|0;
     $132 = (2)?($131 >> 2):($131);
     HEAP32[$8>>2] = $132;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 37: {
     $135 = $$0500681;
     $136 = $2;
     $137 = (($135) - ($136))|0;
     $138 = (2)?($137 >> 2):($137);
     HEAP32[$8>>2] = $138;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 42: {
     $148 = $$0500681;
     $149 = $2;
     $150 = (($148) - ($149))|0;
     $151 = (2)?($150 >> 2):($150);
     HEAP32[$8>>2] = $151;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 45: {
     $158 = $$0500681;
     $159 = $2;
     $160 = (($158) - ($159))|0;
     $161 = (2)?($160 >> 2):($160);
     HEAP32[$8>>2] = $161;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 50: {
     $171 = $$0500681;
     $172 = $2;
     $173 = (($171) - ($172))|0;
     $174 = (2)?($173 >> 2):($173);
     HEAP32[$8>>2] = $174;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 52: {
     HEAP32[$vararg_buffer10>>2] = $175;
     $177 = (_calc_errstr_s(9981,$vararg_buffer10)|0);
     HEAP32[$7>>2] = $177;
     $178 = $169;
     $179 = $2;
     $180 = (($178) - ($179))|0;
     $181 = (2)?($180 >> 2):($180);
     HEAP32[$8>>2] = $181;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 53: {
     HEAP32[$vararg_buffer13>>2] = $175;
     $182 = (_calc_errstr_s(10002,$vararg_buffer13)|0);
     HEAP32[$7>>2] = $182;
     $183 = $169;
     $184 = $2;
     $185 = (($183) - ($184))|0;
     $186 = (2)?($185 >> 2):($185);
     HEAP32[$8>>2] = $186;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 54: {
     HEAP32[$vararg_buffer16>>2] = $175;
     $187 = (_calc_errstr_s(10155,$vararg_buffer16)|0);
     HEAP32[$7>>2] = $187;
     $188 = $169;
     $189 = $2;
     $190 = (($188) - ($189))|0;
     $191 = (2)?($190 >> 2):($190);
     HEAP32[$8>>2] = $191;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 55: {
     HEAP32[$vararg_buffer19>>2] = $175;
     $192 = (_calc_errstr_s(10305,$vararg_buffer19)|0);
     HEAP32[$7>>2] = $192;
     $193 = $169;
     $194 = $2;
     $195 = (($193) - ($194))|0;
     $196 = (2)?($195 >> 2):($195);
     HEAP32[$8>>2] = $196;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 57: {
     $199 = $$0500681;
     $200 = $2;
     $201 = (($199) - ($200))|0;
     $202 = (2)?($201 >> 2):($201);
     HEAP32[$8>>2] = $202;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 64: {
     HEAP32[$vararg_buffer22>>2] = $203;
     $216 = (_calc_errstr_s(10481,$vararg_buffer22)|0);
     HEAP32[$7>>2] = $216;
     $217 = $197;
     $218 = $2;
     $219 = (($217) - ($218))|0;
     $220 = (2)?($219 >> 2):($219);
     HEAP32[$8>>2] = $220;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 67: {
     $223 = $$0500681;
     $224 = $2;
     $225 = (($223) - ($224))|0;
     $226 = (2)?($225 >> 2):($225);
     HEAP32[$8>>2] = $226;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 71: {
     $236 = $$0500681;
     $237 = $2;
     $238 = (($236) - ($237))|0;
     $239 = (2)?($238 >> 2):($238);
     HEAP32[$8>>2] = $239;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 74: {
     $244 = $$0500681;
     $245 = $2;
     $246 = (($244) - ($245))|0;
     $247 = (2)?($246 >> 2):($246);
     HEAP32[$8>>2] = $247;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 77: {
     $252 = $$0500681;
     $253 = $2;
     $254 = (($252) - ($253))|0;
     $255 = (2)?($254 >> 2):($254);
     HEAP32[$8>>2] = $255;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 83: {
     HEAP32[$vararg_buffer25>>2] = 10511;
     $262 = (_calc_errstr_s(9466,$vararg_buffer25)|0);
     HEAP32[$7>>2] = $262;
     $263 = $$0500681;
     $264 = $2;
     $265 = (($263) - ($264))|0;
     $266 = (2)?($265 >> 2):($265);
     HEAP32[$8>>2] = $266;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 85: {
     $269 = $$0500681;
     $270 = $2;
     $271 = (($269) - ($270))|0;
     $272 = (2)?($271 >> 2):($271);
     HEAP32[$8>>2] = $272;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 90: {
     $277 = $$0500681;
     $278 = $2;
     $279 = (($277) - ($278))|0;
     $280 = (2)?($279 >> 2):($279);
     HEAP32[$8>>2] = $280;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 93: {
     $284 = $$0500681;
     $285 = $2;
     $286 = (($284) - ($285))|0;
     $287 = (2)?($286 >> 2):($286);
     HEAP32[$8>>2] = $287;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 96: {
     $291 = $$0500681;
     $292 = $2;
     $293 = (($291) - ($292))|0;
     $294 = (2)?($293 >> 2):($293);
     HEAP32[$8>>2] = $294;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 99: {
     $298 = $$0500681;
     $299 = $2;
     $300 = (($298) - ($299))|0;
     $301 = (2)?($300 >> 2):($300);
     HEAP32[$8>>2] = $301;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 102: {
     $305 = $$0500681;
     $306 = $2;
     $307 = (($305) - ($306))|0;
     $308 = (2)?($307 >> 2):($307);
     HEAP32[$8>>2] = $308;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 105: {
     $313 = $$0500681;
     $314 = $2;
     $315 = (($313) - ($314))|0;
     $316 = (2)?($315 >> 2):($315);
     HEAP32[$8>>2] = $316;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 107: {
     $320 = HEAP32[$11>>2]|0;
     HEAP32[$vararg_buffer28>>2] = $320;
     $321 = (_calc_errstr_s(10565,$vararg_buffer28)|0);
     HEAP32[$7>>2] = $321;
     $322 = HEAP32[$11>>2]|0;
     _free($322);
     $323 = $311;
     $324 = $2;
     $325 = (($323) - ($324))|0;
     $326 = (2)?($325 >> 2):($325);
     HEAP32[$8>>2] = $326;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 109: {
     $329 = $$0500681;
     $330 = $2;
     $331 = (($329) - ($330))|0;
     $332 = (2)?($331 >> 2):($331);
     HEAP32[$8>>2] = $332;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 113: {
     HEAP32[$vararg_buffer31>>2] = $333;
     $338 = (_calc_errstr_s(10631,$vararg_buffer31)|0);
     HEAP32[$7>>2] = $338;
     $339 = $327;
     $340 = $2;
     $341 = (($339) - ($340))|0;
     $342 = (2)?($341 >> 2):($341);
     HEAP32[$8>>2] = $342;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 116: {
     $345 = $$0500681;
     $346 = $2;
     $347 = (($345) - ($346))|0;
     $348 = (2)?($347 >> 2):($347);
     HEAP32[$8>>2] = $348;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 125: {
     HEAP32[$vararg_buffer38>>2] = $$1523;
     $366 = (_calc_errstr_s(10671,$vararg_buffer38)|0);
     HEAP32[$7>>2] = $366;
     $367 = $343;
     $368 = $2;
     $369 = (($367) - ($368))|0;
     $370 = (2)?($369 >> 2):($369);
     HEAP32[$8>>2] = $370;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 127: {
     (_fclose($$1526542)|0);
     HEAP32[$vararg_buffer41>>2] = 10708;
     $375 = (_calc_errstr_s(9466,$vararg_buffer41)|0);
     HEAP32[$7>>2] = $375;
     $376 = $343;
     $377 = $2;
     $378 = (($376) - ($377))|0;
     $379 = (2)?($378 >> 2):($378);
     HEAP32[$8>>2] = $379;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 131: {
     $388 = $343;
     $389 = $2;
     $390 = (($388) - ($389))|0;
     $391 = (2)?($390 >> 2):($390);
     HEAP32[$8>>2] = $391;
     _fc_solve_args_man_free($12);
     $$19 = $387;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 133: {
     $394 = $$0500681;
     $395 = $2;
     $396 = (($394) - ($395))|0;
     $397 = (2)?($396 >> 2):($396);
     HEAP32[$8>>2] = $397;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 135: {
     $400 = HEAP32[$392>>2]|0;
     HEAP32[$vararg_buffer44>>2] = $400;
     $401 = (_calc_errstr_s(10771,$vararg_buffer44)|0);
     HEAP32[$7>>2] = $401;
     $402 = $392;
     $403 = $2;
     $404 = (($402) - ($403))|0;
     $405 = (2)?($404 >> 2):($404);
     HEAP32[$8>>2] = $405;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 137: {
     $408 = $$0500681;
     $409 = $2;
     $410 = (($408) - ($409))|0;
     $411 = (2)?($410 >> 2):($410);
     HEAP32[$8>>2] = $411;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 143: {
     $422 = HEAP32[$11>>2]|0;
     HEAP32[$vararg_buffer47>>2] = $422;
     $423 = (_calc_errstr_s(10811,$vararg_buffer47)|0);
     HEAP32[$7>>2] = $423;
     $424 = HEAP32[$11>>2]|0;
     _free($424);
     $425 = $406;
     $426 = $2;
     $427 = (($425) - ($426))|0;
     $428 = (2)?($427 >> 2):($427);
     HEAP32[$8>>2] = $428;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 145: {
     $431 = $$0500681;
     $432 = $2;
     $433 = (($431) - ($432))|0;
     $434 = (2)?($433 >> 2):($433);
     HEAP32[$8>>2] = $434;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 147: {
     $438 = HEAP32[$11>>2]|0;
     HEAP32[$vararg_buffer50>>2] = $438;
     $439 = (_calc_errstr_s(10844,$vararg_buffer50)|0);
     HEAP32[$7>>2] = $439;
     $440 = HEAP32[$11>>2]|0;
     _free($440);
     $441 = $429;
     $442 = $2;
     $443 = (($441) - ($442))|0;
     $444 = (2)?($443 >> 2):($443);
     HEAP32[$8>>2] = $444;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 149: {
     $447 = $$0500681;
     $448 = $2;
     $449 = (($447) - ($448))|0;
     $450 = (2)?($449 >> 2):($449);
     HEAP32[$8>>2] = $450;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 151: {
     $453 = $$0500681;
     $454 = $2;
     $455 = (($453) - ($454))|0;
     $456 = (2)?($455 >> 2):($455);
     HEAP32[$8>>2] = $456;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 153: {
     $460 = HEAP32[$451>>2]|0;
     HEAP32[$vararg_buffer53>>2] = $460;
     $461 = (_calc_errstr_s(10890,$vararg_buffer53)|0);
     HEAP32[$7>>2] = $461;
     $462 = $451;
     $463 = $2;
     $464 = (($462) - ($463))|0;
     $465 = (2)?($464 >> 2):($464);
     HEAP32[$8>>2] = $465;
     $$19 = 5;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 155: {
     $468 = $$0500681;
     $469 = $2;
     $470 = (($468) - ($469))|0;
     $471 = (2)?($470 >> 2):($470);
     HEAP32[$8>>2] = $471;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 157: {
     HEAP32[$vararg_buffer60>>2] = 10934;
     $475 = (_calc_errstr_s(9466,$vararg_buffer60)|0);
     HEAP32[$7>>2] = $475;
     label = 160;
     break;
    }
    case 159: {
     $480 = HEAP32[$11>>2]|0;
     HEAP32[$vararg_buffer63>>2] = $480;
     $481 = (_calc_errstr_s(10970,$vararg_buffer63)|0);
     HEAP32[$7>>2] = $481;
     $482 = HEAP32[$11>>2]|0;
     _free($482);
     label = 160;
     break;
    }
    case 163: {
     $488 = $$0500681;
     $489 = $2;
     $490 = (($488) - ($489))|0;
     $491 = (2)?($490 >> 2):($490);
     HEAP32[$8>>2] = $491;
     $$19 = 4;
     STACKTOP = sp;return ($$19|0);
     break;
    }
    case 165: {
     HEAP32[$vararg_buffer70>>2] = 11016;
     $495 = (_calc_errstr_s(9466,$vararg_buffer70)|0);
     HEAP32[$7>>2] = $495;
     label = 168;
     break;
    }
    case 167: {
     $500 = HEAP32[$11>>2]|0;
     HEAP32[$vararg_buffer73>>2] = $500;
     $501 = (_calc_errstr_s(11052,$vararg_buffer73)|0);
     HEAP32[$7>>2] = $501;
     $502 = HEAP32[$11>>2]|0;
     _free($502);
     label = 168;
     break;
    }
    case 172: {
     STACKTOP = sp;return ($$19|0);
     break;
    }
   }
   if ((label|0) == 160) {
    $483 = $466;
    $484 = $2;
    $485 = (($483) - ($484))|0;
    $storemerge = (2)?($485 >> 2):($485);
    HEAP32[$8>>2] = $storemerge;
    $$19 = 5;
    STACKTOP = sp;return ($$19|0);
   }
   else if ((label|0) == 168) {
    $503 = $486;
    $504 = $2;
    $505 = (($503) - ($504))|0;
    $storemerge558 = (2)?($505 >> 2):($505);
    HEAP32[$8>>2] = $storemerge558;
    $$19 = 5;
    STACKTOP = sp;return ($$19|0);
   }
  } else {
   $$0500$lcssa = $15;
  }
 } while(0);
 $508 = $$0500$lcssa;
 $509 = $2;
 $510 = (($508) - ($509))|0;
 $511 = (2)?($510 >> 2):($510);
 HEAP32[$8>>2] = $511;
 $$19 = 0;
 STACKTOP = sp;return ($$19|0);
}
function _freecell_solver_user_cmd_line_read_cmd_line_preset($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$lobit = 0, $$lobit$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4032|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4032|0);
 $vararg_buffer = sp + 4008|0;
 $6 = sp + 4016|0;
 $7 = sp;
 $8 = sp + 4012|0;
 HEAP8[$7>>0] = 0;
 $9 = (_read_preset($1,$6,$7)|0);
 if ($9) {
  HEAP32[$vararg_buffer>>2] = 9469;
  $10 = (_calc_errstr_s(9466,$vararg_buffer)|0);
  HEAP32[$3>>2] = $10;
  $$0 = 5;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$8>>2] = 0;
  $11 = HEAP32[$6>>2]|0;
  $12 = ((($6)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$lobit = (31)?($4 >> 31):($4);
  $$lobit$not = $$lobit ^ -1;
  $14 = (($$lobit$not) + ($4))|0;
  $15 = HEAP8[$7>>0]|0;
  $16 = ($15<<24>>24)==(0);
  $17 = $16 ? $5 : $7;
  $18 = (_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count($0,$11,$13,0,$2,0,0,$3,$8,$14,$17)|0);
  _fc_solve_args_man_free($6);
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _read_preset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$036$off028 = 0, $$04827 = 0, $$137$off0$lcssa = 0, $$137$off0$not = 0, $$137$off025 = 0, $$440$off0$ph = 0, $$642$off0$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $spec$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(12224|0);
 $vararg_buffer = sp + 12216|0;
 $3 = sp + 8208|0;
 $4 = sp + 8192|0;
 $5 = sp;
 $6 = sp + 12208|0;
 $7 = (_getenv((9492|0))|0);
 $8 = ($7|0)!=(0|0);
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $7;
  (_snprintf($3,4000,9497,$vararg_buffer)|0);
 }
 $9 = (_getenv((9567|0))|0);
 HEAP32[$4>>2] = $9;
 $10 = ((($4)) + 4|0);
 $11 = $8 ? $3 : 0;
 HEAP32[$10>>2] = $11;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = 9526;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($2)) + 3999|0);
 $$036$off028 = 0;$$04827 = 0;
 L4: while(1) {
  $15 = (($4) + ($$04827<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$642$off0$ph = $$036$off028;
  } else {
   $18 = (_fopen($16,9592)|0);
   $19 = ($18|0)==(0|0);
   if ($19) {
    $$642$off0$ph = $$036$off028;
   } else {
    $20 = (_fgets($5,8192,$18)|0);
    $21 = ($20|0)==(0|0);
    if ($21) {
     $$137$off0$lcssa = $$036$off028;
    } else {
     $$137$off025 = $$036$off028;
     while(1) {
      $22 = (_try_str_prefix($5,9595)|0);
      $23 = ($22|0)==(0|0);
      do {
       if ($23) {
        $24 = (_try_str_prefix($5,9600)|0);
        $25 = ($24|0)==(0|0);
        if ($25) {
         $28 = (_try_str_prefix($5,9606)|0);
         $29 = ($28|0)==(0|0);
         $$137$off0$not = $$137$off025 ^ 1;
         $brmerge = $29 | $$137$off0$not;
         if ($brmerge) {
          $$440$off0$ph = $$137$off025;
          break;
         } else {
          break L4;
         }
        } else {
         _nullify_newline($5);
         $26 = (_strcmp($24,$0)|0);
         $27 = ($26|0)==(0);
         $spec$select = $$137$off025 | $27;
         $$440$off0$ph = $spec$select;
         break;
        }
       } else {
        _nullify_newline($5);
        (_strncpy($2,$22,4000)|0);
        HEAP8[$14>>0] = 0;
        $$440$off0$ph = $$137$off025;
       }
      } while(0);
      $30 = (_fgets($5,8192,$18)|0);
      $31 = ($30|0)==(0|0);
      if ($31) {
       $$137$off0$lcssa = $$440$off0$ph;
       break;
      } else {
       $$137$off025 = $$440$off0$ph;
      }
     }
    }
    (_fclose($18)|0);
    $$642$off0$ph = $$137$off0$lcssa;
   }
  }
  $32 = (($$04827) + 1)|0;
  $33 = ($32>>>0)<(4);
  if ($33) {
   $$036$off028 = $$642$off0$ph;$$04827 = $32;
  } else {
   $44 = 1;
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return ($44|0);
 }
 _fc_solve_args_man_chop($6,$28);
 $34 = $6;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $1;
 $41 = $40;
 HEAP32[$41>>2] = $36;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $39;
 (_fclose($18)|0);
 $44 = 0;
 STACKTOP = sp;return ($44|0);
}
function _calc_errstr_s($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 $2 = sp + 16|0;
 HEAP32[$1>>2] = $varargs;
 (_vasprintf($2,$0,$1)|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _try_str_prefix($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (_strncmp($0,$1,$2)|0);
 $4 = ($3|0)==(0);
 $5 = (($0) + ($2)|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function _nullify_newline($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,10)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 HEAP8[$1>>0] = 0;
 return;
}
function _in_word_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$3 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($1) + -2)|0;
 $2 = ($$off>>>0)<(25);
 if (!($2)) {
  $$3 = 0;
  return ($$3|0);
 }
 $3 = (_hash($0,$1)|0);
 $4 = ($3>>>0)<(148);
 if ($4) {
  $5 = (144 + ($3<<3)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP8[$0>>0]|0;
  $8 = HEAP8[$6>>0]|0;
  $9 = ($7<<24>>24)==($8<<24>>24);
  if ($9) {
   $10 = ((($0)) + 1|0);
   $11 = ((($6)) + 1|0);
   $12 = (_strcmp($10,$11)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $$3 = $5;
    return ($$3|0);
   }
  }
 }
 $$3 = 0;
 return ($$3|0);
}
function _fc_solve_set_weights($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01519$lcssa = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $$1$5 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0;
 var $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $scevgep = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $$1 = $0;
 while(1) {
  $4 = HEAP8[$$1>>0]|0;
  $5 = ($4<<24>>24)==(44);
  $6 = ((($$1)) + 1|0);
  if ($5) {
   $$1 = $6;
  } else {
   break;
  }
 }
 $7 = ($$1>>>0)<($1>>>0);
 if ($7) {
  $8 = (+_strtod($$1,$3));
  $9 = $8 > 0.0;
  $10 = $9 ? $8 : 0.0;
  HEAPF64[$2>>3] = $10;
  $11 = HEAP32[$3>>2]|0;
  $$1$1 = $11;
  while(1) {
   $16 = HEAP8[$$1$1>>0]|0;
   $17 = ($16<<24>>24)==(44);
   $18 = ((($$1$1)) + 1|0);
   if ($17) {
    $$1$1 = $18;
   } else {
    break;
   }
  }
  $19 = ($$1$1>>>0)<($1>>>0);
  if ($19) {
   $20 = (+_strtod($$1$1,$3));
   $21 = $20 > 0.0;
   $22 = $21 ? $20 : 0.0;
   $23 = ((($2)) + 8|0);
   HEAPF64[$23>>3] = $22;
   $24 = HEAP32[$3>>2]|0;
   $$1$2 = $24;
   while(1) {
    $25 = HEAP8[$$1$2>>0]|0;
    $26 = ($25<<24>>24)==(44);
    $27 = ((($$1$2)) + 1|0);
    if ($26) {
     $$1$2 = $27;
    } else {
     break;
    }
   }
   $28 = ($$1$2>>>0)<($1>>>0);
   if ($28) {
    $29 = (+_strtod($$1$2,$3));
    $30 = $29 > 0.0;
    $31 = $30 ? $29 : 0.0;
    $32 = ((($2)) + 16|0);
    HEAPF64[$32>>3] = $31;
    $33 = HEAP32[$3>>2]|0;
    $$1$3 = $33;
    while(1) {
     $34 = HEAP8[$$1$3>>0]|0;
     $35 = ($34<<24>>24)==(44);
     $36 = ((($$1$3)) + 1|0);
     if ($35) {
      $$1$3 = $36;
     } else {
      break;
     }
    }
    $37 = ($$1$3>>>0)<($1>>>0);
    if ($37) {
     $38 = (+_strtod($$1$3,$3));
     $39 = $38 > 0.0;
     $40 = $39 ? $38 : 0.0;
     $41 = ((($2)) + 24|0);
     HEAPF64[$41>>3] = $40;
     $42 = HEAP32[$3>>2]|0;
     $$1$4 = $42;
     while(1) {
      $43 = HEAP8[$$1$4>>0]|0;
      $44 = ($43<<24>>24)==(44);
      $45 = ((($$1$4)) + 1|0);
      if ($44) {
       $$1$4 = $45;
      } else {
       break;
      }
     }
     $46 = ($$1$4>>>0)<($1>>>0);
     if ($46) {
      $47 = (+_strtod($$1$4,$3));
      $48 = $47 > 0.0;
      $49 = $48 ? $47 : 0.0;
      $50 = ((($2)) + 32|0);
      HEAPF64[$50>>3] = $49;
      $51 = HEAP32[$3>>2]|0;
      $$1$5 = $51;
      while(1) {
       $52 = HEAP8[$$1$5>>0]|0;
       $53 = ($52<<24>>24)==(44);
       $54 = ((($$1$5)) + 1|0);
       if ($53) {
        $$1$5 = $54;
       } else {
        break;
       }
      }
      $55 = ($$1$5>>>0)<($1>>>0);
      if ($55) {
       $56 = (+_strtod($$1$5,$3));
       $57 = $56 > 0.0;
       $58 = $57 ? $56 : 0.0;
       $59 = ((($2)) + 40|0);
       HEAPF64[$59>>3] = $58;
       STACKTOP = sp;return;
      } else {
       $$01519$lcssa = 5;
      }
     } else {
      $$01519$lcssa = 4;
     }
    } else {
     $$01519$lcssa = 3;
    }
   } else {
    $$01519$lcssa = 2;
   }
  } else {
   $$01519$lcssa = 1;
  }
 } else {
  $$01519$lcssa = 0;
 }
 $scevgep = (($2) + ($$01519$lcssa<<3)|0);
 $12 = (($$01519$lcssa) + 1)|0;
 $13 = ($12>>>0)>(6);
 $umax = $13 ? $12 : 6;
 $14 = (($umax) - ($$01519$lcssa))|0;
 $15 = $14 << 3;
 _memset(($scevgep|0),0,($15|0))|0;
 STACKTOP = sp;return;
}
function _hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 8: case 9: case 10: case 11:  {
  $$0 = $1;
  label = 3;
  break;
 }
 case 3: case 4: case 5: case 6: case 7:  {
  $$1 = $1;
  label = 4;
  break;
 }
 case 2:  {
  $$2 = $1;
  break;
 }
 default: {
  $2 = ((($0)) + 11|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = (1328 + ($4)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (($7) + ($1))|0;
  $$0 = $8;
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $9 = ((($0)) + 7|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (1328 + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = (($$0) + ($14))|0;
  $$1 = $15;
  label = 4;
 }
 if ((label|0) == 4) {
  $16 = ((($0)) + 2|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (1328 + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (($$1) + ($21))|0;
  $$2 = $22;
 }
 $23 = ((($0)) + 1|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = (1328 + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = (($$2) + ($28))|0;
 return ($29|0);
}
function _fc_solve_moves_processed_gen($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0193209 = 0, $$0195208 = 0, $$0198206 = 0, $$0199 = 0, $$byval_copy4 = 0, $$lcssa = 0, $$sink = 0, $$sroa$086$0$$sroa_idx = 0, $$sroa$086$0$copyload = 0, $$sroa$11$0$$sroa_idx = 0, $$sroa$11$0$$sroa_idx108 = 0, $$sroa$11$0$$sroa_idx110 = 0, $$sroa$11$0$$sroa_idx112 = 0, $$sroa$11$0$$sroa_idx114 = 0, $$sroa$11$0$copyload = 0, $$sroa$14$0$$sroa_idx = 0, $$sroa$14$0$$sroa_idx118 = 0, $$sroa$14$0$$sroa_idx120 = 0, $$sroa$14$0$$sroa_idx122 = 0;
 var $$sroa$14$0$$sroa_idx124 = 0, $$sroa$14$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$695$0$$sroa_idx = 0, $$sroa$695$0$$sroa_idx100 = 0, $$sroa$695$0$$sroa_idx102 = 0, $$sroa$695$0$$sroa_idx96 = 0, $$sroa$695$0$$sroa_idx98 = 0, $$sroa$695$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1440|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1440|0);
 $$byval_copy4 = sp + 1421|0;
 $4 = sp + 1312|0;
 $5 = sp + 32|0;
 $6 = sp;
 $7 = sp + 1416|0;
 $8 = sp + 1411|0;
 $9 = sp + 1406|0;
 $10 = sp + 1401|0;
 $11 = sp + 1396|0;
 dest=$4; src=$1; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $12 = ((($4)) + 80|0);
 HEAP32[$12>>2] = 1;
 $13 = HEAP32[$4>>2]|0;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (($15) + 1)|0;
 _memcpy(($5|0),($13|0),($16|0))|0;
 HEAP32[$4>>2] = $5;
 $17 = HEAP32[$12>>2]|0;
 $18 = $17 & 2;
 $19 = ($18|0)==(0);
 if ($19) {
  $239 = $17 | 2;
  HEAP32[$12>>2] = $239;
  $240 = ((($4)) + 4|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = ((($5)) + 128|0);
  $243 = HEAP8[$241>>0]|0;
  $244 = $243&255;
  $245 = (($244) + 1)|0;
  _memcpy(($242|0),($241|0),($245|0))|0;
  HEAP32[$240>>2] = $242;
 }
 $246 = HEAP32[$12>>2]|0;
 $247 = $246 & 4;
 $248 = ($247|0)==(0);
 if ($248) {
  $249 = $246 | 4;
  HEAP32[$12>>2] = $249;
  $250 = ((($4)) + 8|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = ((($5)) + 256|0);
  $253 = HEAP8[$251>>0]|0;
  $254 = $253&255;
  $255 = (($254) + 1)|0;
  _memcpy(($252|0),($251|0),($255|0))|0;
  HEAP32[$250>>2] = $252;
 }
 $256 = HEAP32[$12>>2]|0;
 $257 = $256 & 8;
 $258 = ($257|0)==(0);
 if ($258) {
  $259 = $256 | 8;
  HEAP32[$12>>2] = $259;
  $260 = ((($4)) + 12|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = ((($5)) + 384|0);
  $263 = HEAP8[$261>>0]|0;
  $264 = $263&255;
  $265 = (($264) + 1)|0;
  _memcpy(($262|0),($261|0),($265|0))|0;
  HEAP32[$260>>2] = $262;
 }
 $266 = HEAP32[$12>>2]|0;
 $267 = $266 & 16;
 $268 = ($267|0)==(0);
 if ($268) {
  $269 = $266 | 16;
  HEAP32[$12>>2] = $269;
  $270 = ((($4)) + 16|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = ((($5)) + 512|0);
  $273 = HEAP8[$271>>0]|0;
  $274 = $273&255;
  $275 = (($274) + 1)|0;
  _memcpy(($272|0),($271|0),($275|0))|0;
  HEAP32[$270>>2] = $272;
 }
 $276 = HEAP32[$12>>2]|0;
 $277 = $276 & 32;
 $278 = ($277|0)==(0);
 if ($278) {
  $279 = $276 | 32;
  HEAP32[$12>>2] = $279;
  $280 = ((($4)) + 20|0);
  $281 = HEAP32[$280>>2]|0;
  $282 = ((($5)) + 640|0);
  $283 = HEAP8[$281>>0]|0;
  $284 = $283&255;
  $285 = (($284) + 1)|0;
  _memcpy(($282|0),($281|0),($285|0))|0;
  HEAP32[$280>>2] = $282;
 }
 $286 = HEAP32[$12>>2]|0;
 $287 = $286 & 64;
 $288 = ($287|0)==(0);
 if ($288) {
  $289 = $286 | 64;
  HEAP32[$12>>2] = $289;
  $290 = ((($4)) + 24|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = ((($5)) + 768|0);
  $293 = HEAP8[$291>>0]|0;
  $294 = $293&255;
  $295 = (($294) + 1)|0;
  _memcpy(($292|0),($291|0),($295|0))|0;
  HEAP32[$290>>2] = $292;
 }
 $296 = HEAP32[$12>>2]|0;
 $297 = $296 & 128;
 $298 = ($297|0)==(0);
 if ($298) {
  $299 = $296 | 128;
  HEAP32[$12>>2] = $299;
  $300 = ((($4)) + 28|0);
  $301 = HEAP32[$300>>2]|0;
  $302 = ((($5)) + 896|0);
  $303 = HEAP8[$301>>0]|0;
  $304 = $303&255;
  $305 = (($304) + 1)|0;
  _memcpy(($302|0),($301|0),($305|0))|0;
  HEAP32[$300>>2] = $302;
 }
 $35 = HEAP32[$3>>2]|0;
 $36 = ((($3)) + 4|0);
 $21 = HEAP32[$36>>2]|0;
 $37 = ((($0)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = (_malloc(160)|0);
 $39 = ((($0)) + 8|0);
 HEAP32[$39>>2] = $38;
 HEAP32[$0>>2] = 0;
 $40 = HEAP32[$4>>2]|0;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 HEAP32[$6>>2] = $42;
 $43 = ((($4)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = ((($6)) + 4|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($4)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = ((($6)) + 8|0);
 HEAP32[$52>>2] = $51;
 $53 = ((($4)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = ((($6)) + 12|0);
 HEAP32[$57>>2] = $56;
 $58 = ((($4)) + 16|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = ((($6)) + 16|0);
 HEAP32[$62>>2] = $61;
 $63 = ((($4)) + 20|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = ((($6)) + 20|0);
 HEAP32[$67>>2] = $66;
 $68 = ((($4)) + 24|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = ((($6)) + 24|0);
 HEAP32[$72>>2] = $71;
 $73 = ((($4)) + 28|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = ((($6)) + 28|0);
 HEAP32[$77>>2] = $76;
 $78 = ($35|0)>(0);
 if (!($78)) {
  STACKTOP = sp;return;
 }
 $20 = ((($21)) + -4|0);
 $22 = ($2|0)>(0);
 $$sroa$695$0$$sroa_idx98 = ((($8)) + 1|0);
 $$sroa$11$0$$sroa_idx110 = ((($8)) + 2|0);
 $$sroa$14$0$$sroa_idx120 = ((($8)) + 3|0);
 $23 = ((($8)) + 4|0);
 $$sroa$695$0$$sroa_idx100 = ((($9)) + 1|0);
 $$sroa$11$0$$sroa_idx112 = ((($9)) + 2|0);
 $$sroa$14$0$$sroa_idx122 = ((($9)) + 3|0);
 $24 = ((($9)) + 4|0);
 $$sroa$695$0$$sroa_idx96 = ((($7)) + 1|0);
 $$sroa$11$0$$sroa_idx108 = ((($7)) + 2|0);
 $$sroa$14$0$$sroa_idx118 = ((($7)) + 3|0);
 $25 = ((($7)) + 4|0);
 $$sroa$695$0$$sroa_idx102 = ((($10)) + 1|0);
 $$sroa$11$0$$sroa_idx114 = ((($10)) + 2|0);
 $$sroa$14$0$$sroa_idx124 = ((($10)) + 3|0);
 $26 = ((($10)) + 4|0);
 $$sroa$4$0$$sroa_idx = ((($11)) + 1|0);
 $$sroa$5$0$$sroa_idx = ((($11)) + 2|0);
 $$sroa$6$0$$sroa_idx = ((($11)) + 3|0);
 $27 = ((($11)) + 4|0);
 $28 = ((($4)) + 4|0);
 $29 = ((($4)) + 8|0);
 $30 = ((($4)) + 12|0);
 $31 = ((($4)) + 16|0);
 $32 = ((($4)) + 20|0);
 $33 = ((($4)) + 24|0);
 $34 = ((($4)) + 28|0);
 $$0193209 = $20;$$0195208 = 0;
 L25: while(1) {
  L27: while(1) {
   $79 = HEAP32[$4>>2]|0;
   $80 = HEAP8[$79>>0]|0;
   $81 = ($80<<24>>24)==(0);
   if ($81) {
    label = 8;
   } else {
    $82 = $80&255;
    $83 = (($79) + ($82)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = (_fc_solve_fc_pro__can_be_moved($4,$84)|0);
    if ($85) {
     $$lcssa = $79;
     label = 9;
    } else {
     label = 8;
    }
   }
   L31: do {
    if ((label|0) == 8) {
     label = 0;
     $86 = HEAP32[$28>>2]|0;
     $87 = HEAP8[$86>>0]|0;
     $88 = ($87<<24>>24)==(0);
     if (!($88)) {
      $193 = $87&255;
      $194 = (($86) + ($193)|0);
      $195 = HEAP8[$194>>0]|0;
      $196 = (_fc_solve_fc_pro__can_be_moved($4,$195)|0);
      if ($196) {
       $$lcssa = $86;
       label = 9;
       break;
      }
     }
     $197 = HEAP32[$29>>2]|0;
     $198 = HEAP8[$197>>0]|0;
     $199 = ($198<<24>>24)==(0);
     if (!($199)) {
      $200 = $198&255;
      $201 = (($197) + ($200)|0);
      $202 = HEAP8[$201>>0]|0;
      $203 = (_fc_solve_fc_pro__can_be_moved($4,$202)|0);
      if ($203) {
       $$lcssa = $197;
       label = 9;
       break;
      }
     }
     $204 = HEAP32[$30>>2]|0;
     $205 = HEAP8[$204>>0]|0;
     $206 = ($205<<24>>24)==(0);
     if (!($206)) {
      $207 = $205&255;
      $208 = (($204) + ($207)|0);
      $209 = HEAP8[$208>>0]|0;
      $210 = (_fc_solve_fc_pro__can_be_moved($4,$209)|0);
      if ($210) {
       $$lcssa = $204;
       label = 9;
       break;
      }
     }
     $211 = HEAP32[$31>>2]|0;
     $212 = HEAP8[$211>>0]|0;
     $213 = ($212<<24>>24)==(0);
     if (!($213)) {
      $214 = $212&255;
      $215 = (($211) + ($214)|0);
      $216 = HEAP8[$215>>0]|0;
      $217 = (_fc_solve_fc_pro__can_be_moved($4,$216)|0);
      if ($217) {
       $$lcssa = $211;
       label = 9;
       break;
      }
     }
     $218 = HEAP32[$32>>2]|0;
     $219 = HEAP8[$218>>0]|0;
     $220 = ($219<<24>>24)==(0);
     if (!($220)) {
      $221 = $219&255;
      $222 = (($218) + ($221)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = (_fc_solve_fc_pro__can_be_moved($4,$223)|0);
      if ($224) {
       $$lcssa = $218;
       label = 9;
       break;
      }
     }
     $225 = HEAP32[$33>>2]|0;
     $226 = HEAP8[$225>>0]|0;
     $227 = ($226<<24>>24)==(0);
     if (!($227)) {
      $228 = $226&255;
      $229 = (($225) + ($228)|0);
      $230 = HEAP8[$229>>0]|0;
      $231 = (_fc_solve_fc_pro__can_be_moved($4,$230)|0);
      if ($231) {
       $$lcssa = $225;
       label = 9;
       break;
      }
     }
     $232 = HEAP32[$34>>2]|0;
     $233 = HEAP8[$232>>0]|0;
     $234 = ($233<<24>>24)==(0);
     if (!($234)) {
      $235 = $233&255;
      $236 = (($232) + ($235)|0);
      $237 = HEAP8[$236>>0]|0;
      $238 = (_fc_solve_fc_pro__can_be_moved($4,$237)|0);
      if ($238) {
       $$lcssa = $232;
       label = 9;
       break;
      }
     }
     if (!($22)) {
      break L27;
     }
     $$0198206 = 0;
     while(1) {
      $94 = (((($4)) + 40|0) + ($$0198206)|0);
      $95 = HEAP8[$94>>0]|0;
      $96 = ($95<<24>>24)==(0);
      if (!($96)) {
       $97 = (_fc_solve_fc_pro__can_be_moved($4,$95)|0);
       if ($97) {
        $$sink = $94;
        break L31;
       }
      }
      $98 = (($$0198206) + 1)|0;
      $99 = ($98|0)<($2|0);
      if ($99) {
       $$0198206 = $98;
      } else {
       break L27;
      }
     }
    }
   } while(0);
   if ((label|0) == 9) {
    label = 0;
    $89 = HEAP8[$$lcssa>>0]|0;
    $90 = (($89) + -1)<<24>>24;
    HEAP8[$$lcssa>>0] = $90;
    $91 = $90&255;
    $92 = (($91) + 1)|0;
    $93 = (($$lcssa) + ($92)|0);
    $$sink = $93;
   }
   HEAP8[$$sink>>0] = 0;
  }
  $100 = ((($$0193209)) + 4|0);
  $$sroa$086$0$$sroa_idx = ((($$0193209)) + 4|0);
  $$sroa$086$0$copyload = HEAP8[$$sroa$086$0$$sroa_idx>>0]|0;
  $$sroa$695$0$$sroa_idx = ((($$0193209)) + 5|0);
  $$sroa$695$0$copyload = HEAP8[$$sroa$695$0$$sroa_idx>>0]|0;
  $$sroa$11$0$$sroa_idx = ((($$0193209)) + 6|0);
  $$sroa$11$0$copyload = HEAP8[$$sroa$11$0$$sroa_idx>>0]|0;
  $$sroa$14$0$$sroa_idx = ((($$0193209)) + 7|0);
  $$sroa$14$0$copyload = HEAP8[$$sroa$14$0$$sroa_idx>>0]|0;
  switch ($$sroa$086$0$copyload<<24>>24) {
  case 4:  {
   $101 = $$sroa$695$0$copyload&255;
   $102 = (($4) + ($101<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($6) + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = HEAP8[$103>>0]|0;
   $107 = $106&255;
   $108 = ($105|0)<($107|0);
   if ($108) {
    label = 16;
    break L25;
   }
   $109 = ($105|0)==($107|0);
   if ($109) {
    $110 = (($103) + ($107)|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = (($106) + -1)<<24>>24;
    HEAP8[$103>>0] = $112;
    $113 = $112&255;
    $114 = (($113) + 1)|0;
    $115 = (($103) + ($114)|0);
    HEAP8[$115>>0] = 0;
    $116 = $111 & 3;
    $117 = $116&255;
    $118 = (((($4)) + 48|0) + ($117)|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = (($119) + 1)<<24>>24;
    HEAP8[$118>>0] = $120;
    HEAP8[$7>>0] = $$sroa$086$0$copyload;
    HEAP8[$$sroa$695$0$$sroa_idx96>>0] = $$sroa$695$0$copyload;
    HEAP8[$$sroa$11$0$$sroa_idx108>>0] = $$sroa$11$0$copyload;
    HEAP8[$$sroa$14$0$$sroa_idx118>>0] = $$sroa$14$0$copyload;
    HEAP8[$25>>0] = 0;
    ;HEAP8[$$byval_copy4>>0]=HEAP8[$7>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$7+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$7+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$7+3>>0]|0;HEAP8[$$byval_copy4+4>>0]=HEAP8[$7+4>>0]|0;
    _moves_processed_add_new_move($0,$$byval_copy4);
   }
   $121 = (($105) + -1)|0;
   HEAP32[$104>>2] = $121;
   break;
  }
  case 5:  {
   $122 = $$sroa$695$0$copyload&255;
   $123 = (((($4)) + 40|0) + ($122)|0);
   $124 = HEAP8[$123>>0]|0;
   $125 = ($124<<24>>24)==(0);
   if (!($125)) {
    HEAP8[$8>>0] = $$sroa$086$0$copyload;
    HEAP8[$$sroa$695$0$$sroa_idx98>>0] = $$sroa$695$0$copyload;
    HEAP8[$$sroa$11$0$$sroa_idx110>>0] = $$sroa$11$0$copyload;
    HEAP8[$$sroa$14$0$$sroa_idx120>>0] = $$sroa$14$0$copyload;
    HEAP8[$23>>0] = 0;
    ;HEAP8[$$byval_copy4>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$8+3>>0]|0;HEAP8[$$byval_copy4+4>>0]=HEAP8[$8+4>>0]|0;
    _moves_processed_add_new_move($0,$$byval_copy4);
   }
   $126 = $124 & 3;
   $127 = $126&255;
   $128 = (((($4)) + 48|0) + ($127)|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = (($129) + 1)<<24>>24;
   HEAP8[$128>>0] = $130;
   HEAP8[$123>>0] = 0;
   break;
  }
  case 2:  {
   $131 = $$sroa$695$0$copyload&255;
   $132 = (((($4)) + 40|0) + ($131)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = ($133<<24>>24)==(0);
   if (!($134)) {
    HEAP8[$9>>0] = $$sroa$086$0$copyload;
    HEAP8[$$sroa$695$0$$sroa_idx100>>0] = $$sroa$695$0$copyload;
    HEAP8[$$sroa$11$0$$sroa_idx112>>0] = $$sroa$11$0$copyload;
    HEAP8[$$sroa$14$0$$sroa_idx122>>0] = $$sroa$14$0$copyload;
    HEAP8[$24>>0] = 0;
    ;HEAP8[$$byval_copy4>>0]=HEAP8[$9>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$9+3>>0]|0;HEAP8[$$byval_copy4+4>>0]=HEAP8[$9+4>>0]|0;
    _moves_processed_add_new_move($0,$$byval_copy4);
    $135 = $$sroa$11$0$copyload&255;
    _fcs_state_push($4,$135,$133);
    HEAP8[$132>>0] = 0;
   }
   $136 = $$sroa$11$0$copyload&255;
   $137 = (($6) + ($136<<2)|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (($138) + 1)|0;
   HEAP32[$137>>2] = $139;
   break;
  }
  case 1:  {
   $140 = $$sroa$695$0$copyload&255;
   $141 = $$sroa$11$0$copyload&255;
   $142 = (($6) + ($140<<2)|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = ($143|0)>(0);
   if (!($144)) {
    label = 27;
    break L25;
   }
   $145 = (($4) + ($140<<2)|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = HEAP8[$146>>0]|0;
   $148 = $147&255;
   $149 = ($143|0)<($148|0);
   if ($149) {
    label = 29;
    break L25;
   }
   $150 = ($143|0)>($148|0);
   if (!($150)) {
    HEAP8[$10>>0] = $$sroa$086$0$copyload;
    HEAP8[$$sroa$695$0$$sroa_idx102>>0] = $$sroa$695$0$copyload;
    HEAP8[$$sroa$11$0$$sroa_idx114>>0] = $$sroa$11$0$copyload;
    HEAP8[$$sroa$14$0$$sroa_idx124>>0] = $$sroa$14$0$copyload;
    HEAP8[$26>>0] = 0;
    ;HEAP8[$$byval_copy4>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$10+3>>0]|0;HEAP8[$$byval_copy4+4>>0]=HEAP8[$10+4>>0]|0;
    _moves_processed_add_new_move($0,$$byval_copy4);
    $151 = HEAP8[$146>>0]|0;
    $152 = $151&255;
    $153 = (($146) + ($152)|0);
    $154 = HEAP8[$153>>0]|0;
    $155 = (($151) + -1)<<24>>24;
    HEAP8[$146>>0] = $155;
    $156 = $155&255;
    $157 = (($156) + 1)|0;
    $158 = (($146) + ($157)|0);
    HEAP8[$158>>0] = 0;
    $159 = (((($4)) + 40|0) + ($141)|0);
    HEAP8[$159>>0] = $154;
   }
   $160 = (($143) + -1)|0;
   HEAP32[$142>>2] = $160;
   break;
  }
  case 0:  {
   $161 = $$sroa$14$0$copyload&255;
   $162 = $$sroa$695$0$copyload&255;
   $163 = (($4) + ($162<<2)|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $$sroa$11$0$copyload&255;
   $166 = (($4) + ($165<<2)|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = HEAP8[$164>>0]|0;
   $169 = $168&255;
   $170 = (($6) + ($162<<2)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($171|0)<($169|0);
   if ($172) {
    label = 34;
    break L25;
   }
   $173 = ($171|0)>($169|0);
   $174 = (($171) - ($169))|0;
   $175 = ($174|0)<($161|0);
   $$ = $175 ? $174 : $161;
   $176 = (($6) + ($165<<2)|0);
   if ($173) {
    $177 = (($161) - ($$))|0;
    $178 = (($171) - ($$))|0;
    HEAP32[$170>>2] = $178;
    $179 = HEAP32[$176>>2]|0;
    $180 = (($179) + ($$))|0;
    HEAP32[$176>>2] = $180;
    $$0199 = $177;
   } else {
    $$0199 = $161;
   }
   $181 = ($$0199|0)>(0);
   if ($181) {
    $182 = $$0199&255;
    HEAP8[$11>>0] = 0;
    HEAP8[$$sroa$4$0$$sroa_idx>>0] = $$sroa$695$0$copyload;
    HEAP8[$$sroa$5$0$$sroa_idx>>0] = $$sroa$11$0$copyload;
    HEAP8[$$sroa$6$0$$sroa_idx>>0] = $182;
    $183 = HEAP8[$167>>0]|0;
    $184 = ($183<<24>>24)==(0);
    $185 = $184&1;
    HEAP8[$27>>0] = $185;
    ;HEAP8[$$byval_copy4>>0]=HEAP8[$11>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$11+3>>0]|0;HEAP8[$$byval_copy4+4>>0]=HEAP8[$11+4>>0]|0;
    _moves_processed_add_new_move($0,$$byval_copy4);
    _fcs_col_transfer_cards($167,$164,$$0199);
    $186 = (($6) + ($165<<2)|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = (($187) + ($$0199))|0;
    HEAP32[$186>>2] = $188;
    $189 = HEAP32[$170>>2]|0;
    $190 = (($189) - ($$0199))|0;
    HEAP32[$170>>2] = $190;
   }
   break;
  }
  default: {
  }
  }
  $191 = (($$0195208) + 1)|0;
  $192 = ($191|0)<($35|0);
  if ($192) {
   $$0193209 = $100;$$0195208 = $191;
  } else {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  ___assert_fail((11840|0),(11883|0),102,(11971|0));
  // unreachable;
 }
 else if ((label|0) == 27) {
  ___assert_fail((12000|0),(11883|0),151,(11971|0));
  // unreachable;
 }
 else if ((label|0) == 29) {
  ___assert_fail((12027|0),(11883|0),153,(11971|0));
  // unreachable;
 }
 else if ((label|0) == 34) {
  ___assert_fail((12070|0),(11883|0),175,(11971|0));
  // unreachable;
 }
}
function _fc_solve_fc_pro__can_be_moved($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&255;
 $3 = (2)?($2 >>> 2):($2);
 $4 = $2 & 3;
 $5 = $4 ^ 1;
 $6 = (((($0)) + 48|0) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($3) + -2)|0;
 $10 = ($9|0)>($8|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = $4 ^ 3;
 $12 = (((($0)) + 48|0) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($9|0)>($14|0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = $4 ^ 2;
 $17 = (((($0)) + 48|0) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = (($3) + -3)|0;
 $21 = ($20|0)>($19|0);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 }
 $22 = (((($0)) + 48|0) + ($4)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = (($3) + -1)|0;
 $26 = ($25|0)==($24|0);
 if (!($26)) {
  $$0 = 0;
  return ($$0|0);
 }
 $27 = (($23) + 1)<<24>>24;
 HEAP8[$22>>0] = $27;
 $$0 = 1;
 return ($$0|0);
}
function _moves_processed_add_new_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $4 & 31;
 $6 = ($5|0)==(0);
 $7 = ((($0)) + 8|0);
 if ($6) {
  $8 = ($3*5)|0;
  $9 = (($8) + 165)|0;
  $10 = HEAP32[$7>>2]|0;
  $11 = (_realloc($10,$9)|0);
  HEAP32[$7>>2] = $11;
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$2>>2]|0;
 $15 = (($14) + -1)|0;
 $16 = (($13) + (($15*5)|0)|0);
 ;HEAP8[$16>>0]=HEAP8[$1>>0]|0;HEAP8[$16+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$1+3>>0]|0;HEAP8[$16+4>>0]=HEAP8[$1+4>>0]|0;
 return;
}
function _fcs_state_push($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($0) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = (($5) + 1)<<24>>24;
 HEAP8[$4>>0] = $6;
 $7 = $5&255;
 $8 = (($7) + 1)|0;
 $9 = (($4) + ($8)|0);
 HEAP8[$9>>0] = $2;
 return;
}
function _fcs_col_transfer_cards($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $5 = (($4) - ($2))|0;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = $5 & 255;
 $8 = (($7) + 1)|0;
 $9 = (($1) + ($8)|0);
 $10 = HEAP8[$0>>0]|0;
 $11 = $10&255;
 $12 = (($11) + 1)|0;
 $13 = (($0) + ($12)|0);
 _memcpy(($13|0),($9|0),($2|0))|0;
 $14 = (($11) + ($2))|0;
 $15 = $14&255;
 HEAP8[$0>>0] = $15;
 _memset(($9|0),0,($2|0))|0;
 return;
}
function _fc_solve_sfs_move_top_stack_cards_to_founds($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$06466 = 0, $$067 = 0, $$byval_copy1 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $7 = $$sroa$3$0$copyload&255;
 $8 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ((($6)) + 2|0);
 $10 = ((($3)) + 4|0);
 $$067 = 0;
 while(1) {
  $11 = HEAP32[$1>>2]|0;
  $12 = (($11) + ($$067<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  L6: do {
   if (!($15)) {
    $16 = HEAP8[$9>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     $18 = $14&255;
     $19 = (($13) + ($18)|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = $20&255;
     $22 = $21 & 3;
     $23 = (2)?($21 >>> 2):($21);
     $24 = (($23) + -1)|0;
     $$06466 = 0;
     while(1) {
      $29 = $$06466 << 2;
      $30 = $29 | $22;
      $31 = (((($11)) + 48|0) + ($30)|0);
      $32 = HEAP8[$31>>0]|0;
      $33 = $32&255;
      $34 = ($24|0)==($33|0);
      $27 = (($$06466) + 1)|0;
      if ($34) {
       break;
      }
      $25 = HEAP8[$9>>0]|0;
      $26 = $25&255;
      $28 = ($27>>>0)<($26>>>0);
      if ($28) {
       $$06466 = $27;
      } else {
       break L6;
      }
     }
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
     (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
     $35 = HEAP32[$10>>2]|0;
     $36 = ((($35)) + 24|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = 1 << $$067;
     $39 = $37 & $38;
     $40 = ($39|0)==(0);
     if ($40) {
      $41 = $37 | $38;
      HEAP32[$36>>2] = $41;
      $42 = HEAP32[$3>>2]|0;
      $43 = (($42) + ($$067<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = $$067 << 7;
      $46 = (((($4)) + 48|0) + ($45)|0);
      $47 = HEAP8[$44>>0]|0;
      $48 = $47&255;
      $49 = (($48) + 1)|0;
      _memcpy(($46|0),($44|0),($49|0))|0;
      HEAP32[$43>>2] = $46;
     }
     $50 = HEAP32[$3>>2]|0;
     _fcs_state_pop_col_top($50,$$067);
     $51 = HEAP32[$3>>2]|0;
     $52 = (((($51)) + 48|0) + ($30)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = (($53) + 1)<<24>>24;
     HEAP8[$52>>0] = $54;
     _fcs_move_stack_non_seq_push($5,4,$$067,$30);
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
     $55 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
     _fc_solve_derived_states_list_add_state($2,$55,0);
    }
   }
  } while(0);
  $56 = (($$067) + 1)|0;
  $exitcond = ($56|0)==($7|0);
  if ($exitcond) {
   break;
  } else {
   $$067 = $56;
  }
 }
 STACKTOP = sp;return;
}
function _fcs_state_pop_col_top($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = (($4) + -1)<<24>>24;
 HEAP8[$3>>0] = $5;
 $6 = $5&255;
 $7 = (($6) + 1)|0;
 $8 = (($3) + ($7)|0);
 HEAP8[$8>>0] = 0;
 return;
}
function _fcs_move_stack_non_seq_push($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _fcs_move_stack_params_push($0,$1,$2,$3,1);
 return;
}
function _fcs_move_stack_params_push($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $5 = sp;
 $6 = $1&255;
 HEAP8[$5>>0] = $6;
 $7 = $2&255;
 $8 = ((($5)) + 1|0);
 HEAP8[$8>>0] = $7;
 $9 = $3&255;
 $10 = ((($5)) + 2|0);
 HEAP8[$10>>0] = $9;
 $11 = $4&255;
 $12 = ((($5)) + 3|0);
 HEAP8[$12>>0] = $11;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$5+3>>0]|0;
 _fcs_move_stack_push($0,$$byval_copy);
 STACKTOP = sp;return;
}
function _fcs_move_stack_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $4 & 15;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $3 << 2;
  $8 = (($7) + 68)|0;
  $9 = HEAP32[$0>>2]|0;
  $10 = (_realloc($9,$8)|0);
  HEAP32[$0>>2] = $10;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($3<<2)|0);
 $13 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
 HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=($13>>8)&255;HEAP8[$12+2>>0]=($13>>16)&255;HEAP8[$12+3>>0]=$13>>24;
 return;
}
function _fc_solve_sfs_move_freecell_cards_to_founds($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$04245 = 0, $$044 = 0, $$byval_copy1 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $$sroa$0$0$copyload = HEAP8[$6>>0]|0;
 $7 = $$sroa$0$0$copyload&255;
 $8 = ($$sroa$0$0$copyload<<24>>24)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ((($6)) + 2|0);
 $$04245 = 0;
 while(1) {
  $10 = HEAP32[$1>>2]|0;
  $11 = (((($10)) + 40|0) + ($$04245)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = ($12<<24>>24)==(0);
  L6: do {
   if (!($14)) {
    $15 = HEAP8[$9>>0]|0;
    $16 = ($15<<24>>24)==(0);
    if (!($16)) {
     $17 = $13 & 3;
     $18 = (2)?($13 >>> 2):($13);
     $19 = (($18) + -1)|0;
     $$044 = 0;
     while(1) {
      $24 = $$044 << 2;
      $25 = $24 | $17;
      $26 = (((($10)) + 48|0) + ($25)|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = $27&255;
      $29 = ($19|0)==($28|0);
      $22 = (($$044) + 1)|0;
      if ($29) {
       break;
      }
      $20 = HEAP8[$9>>0]|0;
      $21 = $20&255;
      $23 = ($22>>>0)<($21>>>0);
      if ($23) {
       $$044 = $22;
      } else {
       break L6;
      }
     }
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
     (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
     $30 = HEAP32[$3>>2]|0;
     $31 = (((($30)) + 40|0) + ($$04245)|0);
     HEAP8[$31>>0] = 0;
     $32 = (((($30)) + 48|0) + ($25)|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = (($33) + 1)<<24>>24;
     HEAP8[$32>>0] = $34;
     _fcs_move_stack_non_seq_push($5,5,$$04245,$25);
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
     $35 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
     _fc_solve_derived_states_list_add_state($2,$35,0);
    }
   }
  } while(0);
  $36 = (($$04245) + 1)|0;
  $exitcond = ($36|0)==($7|0);
  if ($exitcond) {
   break;
  } else {
   $$04245 = $36;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_move_freecell_cards_on_top_of_stacks($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0114$add = 0, $$0114$idx117 = 0, $$0114$ptr118 = 0, $$0119 = 0, $$byval_copy1 = 0, $$op = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 & 3;
 $$sroa$0$0$copyload = HEAP8[$7>>0]|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = (_fc_solve_calc_positions_by_rank_location($0)|0);
 $14 = ($11|0)==(2);
 $15 = ($11|0)==(1);
 $16 = $15 ? 8 : 4;
 $17 = $14 ? 2 : $16;
 $18 = $$sroa$0$0$copyload&255;
 $19 = ($$sroa$0$0$copyload<<24>>24)==(0);
 if ($19) {
  _sort_derived_states($2,$12);
  STACKTOP = sp;return;
 }
 $20 = $10 & 12;
 $21 = ($20|0)==(0);
 $22 = (_calc_num_vacant_slots($0,$21)|0);
 $23 = $22&255;
 $24 = (($23) + 1)|0;
 $25 = ((($3)) + 4|0);
 $26 = ((($4)) + 4|0);
 $27 = ((($4)) + 8|0);
 $$0119 = 0;
 while(1) {
  $28 = HEAP32[$1>>2]|0;
  $29 = (((($28)) + 40|0) + ($$0119)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = ($30<<24>>24)==(0);
  if (!($32)) {
   $33 = (_fcs_card_is_king($30)|0);
   if (!($33)) {
    $34 = (2)?($31 >>> 2):($31);
    $35 = $34 << 4;
    $36 = (($13) + ($35)|0);
    $37 = $31 & 3;
    $38 = $31 & 1;
    $39 = $38 ^ 1;
    $40 = $15 ? $37 : $39;
    $$op = $40 << 1;
    $41 = $14 ? 0 : $$op;
    $$0114$idx117 = $41;
    while(1) {
     $$0114$ptr118 = (($36) + ($$0114$idx117)|0);
     $42 = HEAP8[$$0114$ptr118>>0]|0;
     $43 = $42 << 24 >> 24;
     $44 = ($42<<24>>24)==(-1);
     if (!($44)) {
      $45 = ((($$0114$ptr118)) + 1|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = $46 << 24 >> 24;
      $48 = HEAP32[$1>>2]|0;
      $49 = (($48) + ($43<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = HEAP8[$50>>0]|0;
      $52 = $51&255;
      $53 = (($24) + ($47))|0;
      $54 = ($53|0)<($52|0);
      if (!($54)) {
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
       (_fc_solve_sfs_check_state_begin($5,$3,$$byval_copy1,$6)|0);
       $55 = HEAP32[$25>>2]|0;
       $56 = ((($55)) + 24|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = 1 << $43;
       $59 = $57 & $58;
       $60 = ($59|0)==(0);
       if ($60) {
        $61 = $57 | $58;
        HEAP32[$56>>2] = $61;
        $62 = HEAP32[$3>>2]|0;
        $63 = (($62) + ($43<<2)|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = $43 << 7;
        $66 = (((($5)) + 48|0) + ($65)|0);
        $67 = HEAP8[$64>>0]|0;
        $68 = $67&255;
        $69 = (($68) + 1)|0;
        _memcpy(($66|0),($64|0),($69|0))|0;
        HEAP32[$63>>2] = $66;
       }
       HEAP32[$4>>2] = $43;
       HEAP32[$26>>2] = -1;
       HEAP32[$27>>2] = -1;
       $70 = $47 ^ -1;
       $71 = (($70) + ($52))|0;
       _empty_two_cols_from_new_state($$byval_copy1,$0,$3,$6,$4,$71,0);
       $72 = HEAP32[$3>>2]|0;
       _fcs_state_push_114($72,$43,$30);
       $73 = HEAP32[$3>>2]|0;
       $74 = (((($73)) + 40|0) + ($$0119)|0);
       HEAP8[$74>>0] = 0;
       _fcs_move_stack_non_seq_push($6,2,$$0119,$43);
       $75 = $43 << 16;
       $76 = $47 << 8;
       $77 = (65280 - ($76))|0;
       $78 = $75 | $$0119;
       $79 = $78 | $77;
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
       $80 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$6)|0);
       _fc_solve_derived_states_list_add_state($2,$80,$79);
      }
     }
     $$0114$add = (($$0114$idx117) + ($17))|0;
     $81 = ($$0114$add>>>0)<(16);
     if ($81) {
      $$0114$idx117 = $$0114$add;
     } else {
      break;
     }
    }
   }
  }
  $82 = (($$0119) + 1)|0;
  $exitcond = ($82|0)==($18|0);
  if ($exitcond) {
   break;
  } else {
   $$0119 = $82;
  }
 }
 _sort_derived_states($2,$12);
 STACKTOP = sp;return;
}
function _fc_solve_calc_positions_by_rank_location($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (((($5) + (($7*244)|0)|0)) + 32|0);
  $$0 = $8;
  return ($$0|0);
 } else {
  $9 = ((($0)) + 56|0);
  $$0 = $9;
  return ($$0|0);
 }
 return (0)|0;
}
function _calc_num_vacant_slots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 524|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 if ($1) {
  $5 = ((($0)) + 523|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $9 = 0;
 }
 $8 = (($9) + ($4))|0;
 $10 = $8&255;
 return ($10|0);
}
function _sort_derived_states($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$026 = 0, $$02631 = 0, $$02632 = 0, $$029 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1<<3)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = (($3) + ($5<<3)|0);
 $$02631 = ((($4)) + 8|0);
 $7 = ($$02631>>>0)<($6>>>0);
 if (!($7)) {
  return;
 }
 $$02632 = $$02631;
 while(1) {
  $8 = ($$02632>>>0)>($4>>>0);
  L6: do {
   if ($8) {
    $$029 = $$02632;
    while(1) {
     $9 = ((($$029)) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = ((($$029)) + -8|0);
     $12 = ((($$029)) + -4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($10|0)<($13|0);
     if (!($14)) {
      break L6;
     }
     $16 = $11;
     $17 = $16;
     $18 = HEAP32[$17>>2]|0;
     $19 = (($16) + 4)|0;
     $20 = $19;
     $21 = HEAP32[$20>>2]|0;
     $22 = $$029;
     $23 = $22;
     $24 = HEAP32[$23>>2]|0;
     $25 = (($22) + 4)|0;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $28 = $11;
     $29 = $28;
     HEAP32[$29>>2] = $24;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = $27;
     $32 = $$029;
     $33 = $32;
     HEAP32[$33>>2] = $18;
     $34 = (($32) + 4)|0;
     $35 = $34;
     HEAP32[$35>>2] = $21;
     $36 = ($11>>>0)>($4>>>0);
     if ($36) {
      $$029 = $11;
     } else {
      break;
     }
    }
   }
  } while(0);
  $$026 = ((($$02632)) + 8|0);
  $15 = ($$026>>>0)<($6>>>0);
  if ($15) {
   $$02632 = $$026;
  } else {
   break;
  }
 }
 return;
}
function _fcs_card_is_king($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 $2 = (4128 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 return ($4|0);
}
function _empty_two_cols_from_new_state($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0107 = 0, $$0113 = 0, $$0115 = 0, $$1$lcssa = 0, $$1108$lcssa = 0, $$1108137 = 0, $$1114$lcssa = 0, $$1114144 = 0, $$1138 = 0, $$3$lcssa = 0, $$3110$lcssa = 0, $$3110130 = 0, $$3131 = 0, $$4 = 0, $$4111 = 0, $$5$lcssa = 0, $$5112$lcssa = 0, $$5112127 = 0, $$5128 = 0;
 var $$byval_copy = 0, $$pr = 0, $$pr160 = 0, $$sroa$048$0$copyload = 0, $$sroa$072$0 = 0, $$sroa$072$1 = 0, $$sroa$10 = 0, $$sroa$10$0$$sroa_raw_idx = 0, $$sroa$10$0$$sroa_raw_idx87 = 0, $$sroa$10$0$$sroa_raw_idx90 = 0, $$sroa$3 = 0, $$sroa$322 = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$5$0$copyload = 0, $$sroa$8$0$$sroa_idx = 0, $$sroa$8$0$$sroa_idx80 = 0, $$sroa$8$0$$sroa_idx82 = 0, $$sroa$8$1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 16|0;
 $$sroa$10 = sp + 30|0;
 $7 = sp;
 $$sroa$322 = sp + 27|0;
 $$sroa$3 = sp + 24|0;
 ;HEAP8[$$sroa$10>>0]=HEAP8[(8949)>>0]|0;HEAP8[$$sroa$10+1>>0]=HEAP8[(8949)+1>>0]|0;HEAP8[$$sroa$10+2>>0]=HEAP8[(8949)+2>>0]|0;
 HEAP32[$7>>2] = $5;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = ((($7)) + 8|0);
 HEAP32[$9>>2] = -1;
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $$sroa$048$0$copyload = HEAP8[$11>>0]|0;
 $$sroa$5$0$$sroa_idx = ((($11)) + 1|0);
 $$sroa$5$0$copyload = HEAP8[$$sroa$5$0$$sroa_idx>>0]|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = $$sroa$048$0$copyload&255;
 $$pr = HEAP32[$7>>2]|0;
 $$0 = $4;$$0107 = $7;$$0113 = 0;$$sroa$072$0 = -1;$14 = $$pr;
 L1: while(1) {
  $15 = ($14|0)==(0);
  if ($15) {
   $$1108137 = $$0107;$$1138 = $$0;
   while(1) {
    $16 = ((($$1138)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(-1);
    if ($18) {
     label = 12;
     break L1;
    }
    $19 = ((($$1108137)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0);
    if ($21) {
     $$1108137 = $19;$$1138 = $16;
    } else {
     $$1$lcssa = $16;$$1108$lcssa = $19;
     break;
    }
   }
  } else {
   $$1$lcssa = $$0;$$1108$lcssa = $$0107;
  }
  $22 = ($$0113|0)<($13|0);
  L9: do {
   if ($22) {
    $$1114144 = $$0113;
    while(1) {
     $23 = (((($12)) + 40|0) + ($$1114144)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $$1114$lcssa = $$1114144;
      break L9;
     }
     $26 = (($$1114144) + 1)|0;
     $27 = ($26|0)<($13|0);
     if ($27) {
      $$1114144 = $26;
     } else {
      $$1114$lcssa = $26;
      break;
     }
    }
   } else {
    $$1114$lcssa = $$0113;
   }
  } while(0);
  $28 = ($$1114$lcssa|0)==($13|0);
  if ($28) {
   break;
  }
  $29 = HEAP32[$$1$lcssa>>2]|0;
  $30 = (_fcs_state_pop_col_card($12,$29)|0);
  $31 = (((($12)) + 40|0) + ($$1114$lcssa)|0);
  HEAP8[$31>>0] = $30;
  $32 = HEAP32[$$1$lcssa>>2]|0;
  _fcs_move_stack_non_seq_push($3,1,$32,$$1114$lcssa);
  ;HEAP8[$$sroa$10>>0]=HEAP8[$$sroa$322>>0]|0;HEAP8[$$sroa$10+1>>0]=HEAP8[$$sroa$322+1>>0]|0;HEAP8[$$sroa$10+2>>0]=HEAP8[$$sroa$322+2>>0]|0;
  $33 = HEAP32[$$1108$lcssa>>2]|0;
  $34 = (($33) + -1)|0;
  HEAP32[$$1108$lcssa>>2] = $34;
  $35 = (($$1114$lcssa) + 1)|0;
  $$0 = $$1$lcssa;$$0107 = $$1108$lcssa;$$0113 = $35;$$sroa$072$0 = $$1114$lcssa;$14 = $34;
 }
 if ((label|0) == 12) {
  HEAP32[$0>>2] = $$sroa$072$0;
  $$sroa$8$0$$sroa_idx = ((($0)) + 4|0);
  HEAP8[$$sroa$8$0$$sroa_idx>>0] = 0;
  $$sroa$10$0$$sroa_raw_idx = ((($0)) + 5|0);
  ;HEAP8[$$sroa$10$0$$sroa_raw_idx>>0]=HEAP8[$$sroa$10>>0]|0;HEAP8[$$sroa$10$0$$sroa_raw_idx+1>>0]=HEAP8[$$sroa$10+1>>0]|0;HEAP8[$$sroa$10$0$$sroa_raw_idx+2>>0]=HEAP8[$$sroa$10+2>>0]|0;
  STACKTOP = sp;return;
 }
 $36 = HEAP32[$$1108$lcssa>>2]|0;
 $37 = ($36|0)==(0);
 L20: do {
  if ($37) {
   $$3110130 = $$1108$lcssa;$$3131 = $$1$lcssa;
   while(1) {
    $38 = ((($$3131)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(-1);
    if ($40) {
     break;
    }
    $41 = ((($$3110130)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($42|0)==(0);
    if ($43) {
     $$3110130 = $41;$$3131 = $38;
    } else {
     $$3$lcssa = $38;$$3110$lcssa = $41;
     break L20;
    }
   }
   HEAP32[$0>>2] = $$sroa$072$0;
   $$sroa$8$0$$sroa_idx80 = ((($0)) + 4|0);
   HEAP8[$$sroa$8$0$$sroa_idx80>>0] = 0;
   $$sroa$10$0$$sroa_raw_idx87 = ((($0)) + 5|0);
   ;HEAP8[$$sroa$10$0$$sroa_raw_idx87>>0]=HEAP8[$$sroa$10>>0]|0;HEAP8[$$sroa$10$0$$sroa_raw_idx87+1>>0]=HEAP8[$$sroa$10+1>>0]|0;HEAP8[$$sroa$10$0$$sroa_raw_idx87+2>>0]=HEAP8[$$sroa$10+2>>0]|0;
   STACKTOP = sp;return;
  } else {
   $$3$lcssa = $$1$lcssa;$$3110$lcssa = $$1108$lcssa;
  }
 } while(0);
 $44 = $$sroa$5$0$copyload&255;
 $45 = ((($2)) + 4|0);
 $$pr160 = HEAP32[$$3110$lcssa>>2]|0;
 $$0115 = 0;$$4 = $$3$lcssa;$$4111 = $$3110$lcssa;$$sroa$072$1 = $$sroa$072$0;$$sroa$8$1 = 0;$46 = $$pr160;
 L28: while(1) {
  $47 = ($46|0)==(0);
  if ($47) {
   $$5112127 = $$4111;$$5128 = $$4;
   while(1) {
    $48 = ((($$5128)) + 4|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(-1);
    if ($50) {
     break L28;
    }
    $51 = ((($$5112127)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(0);
    if ($53) {
     $$5112127 = $51;$$5128 = $48;
    } else {
     $$5$lcssa = $48;$$5112$lcssa = $51;
     break;
    }
   }
  } else {
   $$5$lcssa = $$4;$$5112$lcssa = $$4111;
  }
  ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$2+4>>2]|0;
  $54 = (_find_empty_stack($$byval_copy,$$0115,$44)|0);
  $55 = HEAP32[$45>>2]|0;
  $56 = ((($55)) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = 1 << $54;
  $59 = $57 & $58;
  $60 = ($59|0)==(0);
  if ($60) {
   $61 = $57 | $58;
   HEAP32[$56>>2] = $61;
   $62 = (($12) + ($54<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $54 << 7;
   $65 = (((($10)) + 48|0) + ($64)|0);
   $66 = HEAP8[$63>>0]|0;
   $67 = $66&255;
   $68 = (($67) + 1)|0;
   _memcpy(($65|0),($63|0),($68|0))|0;
   HEAP32[$62>>2] = $65;
  }
  $69 = HEAP32[$$5$lcssa>>2]|0;
  $70 = (_fcs_state_pop_col_card($12,$69)|0);
  _fcs_state_push_114($12,$54,$70);
  _fcs_push_1card_seq($3,$69,$54);
  ;HEAP8[$$sroa$10>>0]=HEAP8[$$sroa$3>>0]|0;HEAP8[$$sroa$10+1>>0]=HEAP8[$$sroa$3+1>>0]|0;HEAP8[$$sroa$10+2>>0]=HEAP8[$$sroa$3+2>>0]|0;
  $71 = HEAP32[$$5112$lcssa>>2]|0;
  $72 = (($71) + -1)|0;
  HEAP32[$$5112$lcssa>>2] = $72;
  $73 = (($54) + 1)|0;
  $$0115 = $73;$$4 = $$5$lcssa;$$4111 = $$5112$lcssa;$$sroa$072$1 = $54;$$sroa$8$1 = 1;$46 = $72;
 }
 HEAP32[$0>>2] = $$sroa$072$1;
 $$sroa$8$0$$sroa_idx82 = ((($0)) + 4|0);
 HEAP8[$$sroa$8$0$$sroa_idx82>>0] = $$sroa$8$1;
 $$sroa$10$0$$sroa_raw_idx90 = ((($0)) + 5|0);
 ;HEAP8[$$sroa$10$0$$sroa_raw_idx90>>0]=HEAP8[$$sroa$10>>0]|0;HEAP8[$$sroa$10$0$$sroa_raw_idx90+1>>0]=HEAP8[$$sroa$10+1>>0]|0;HEAP8[$$sroa$10$0$$sroa_raw_idx90+2>>0]=HEAP8[$$sroa$10+2>>0]|0;
 STACKTOP = sp;return;
}
function _fcs_state_push_114($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($0) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = (($5) + 1)<<24>>24;
 HEAP8[$4>>0] = $6;
 $7 = $5&255;
 $8 = (($7) + 1)|0;
 $9 = (($4) + ($8)|0);
 HEAP8[$9>>0] = $2;
 return;
}
function _fcs_state_pop_col_card($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($3) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($4) + -1)<<24>>24;
 HEAP8[$3>>0] = $8;
 $9 = $8&255;
 $10 = (($9) + 1)|0;
 $11 = (($3) + ($10)|0);
 HEAP8[$11>>0] = 0;
 return ($7|0);
}
function _find_empty_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0810 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)<($2|0);
 if (!($3)) {
  $11 = -1;
  return ($11|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $$0810 = $1;
 while(1) {
  $5 = (($4) + ($$0810<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $11 = $$0810;
   label = 5;
   break;
  }
  $9 = (($$0810) + 1)|0;
  $10 = ($9|0)<($2|0);
  if ($10) {
   $$0810 = $9;
  } else {
   $11 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($11|0);
 }
 return (0)|0;
}
function _fcs_push_1card_seq($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _fcs_move_stack_params_push($0,0,$1,$2,1);
 return;
}
function _fc_solve_sfs_move_non_top_stack_cards_to_founds($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$08891 = 0, $$08992 = 0, $$094 = 0, $$byval_copy1 = 0, $$neg90 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$5>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($7)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $8 = $$sroa$3$0$copyload&255;
 $9 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ((($7)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 & 12;
 $13 = ($12<<24>>24)==(0);
 $14 = (_calc_num_vacant_slots($0,$13)|0);
 $15 = $14&255;
 $$neg90 = $15 ^ -1;
 $16 = ((($7)) + 2|0);
 $17 = ((($3)) + 4|0);
 $18 = ((($4)) + 4|0);
 $19 = ((($4)) + 8|0);
 $$094 = 0;
 while(1) {
  $20 = HEAP32[$1>>2]|0;
  $21 = (($20) + ($$094<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = (($$neg90) + ($24))|0;
  $26 = (_max0($25)|0);
  $27 = (($24) + -2)|0;
  $28 = ($27|0)<($26|0);
  if (!($28)) {
   $29 = 1 << $$094;
   $30 = $$094 << 7;
   $31 = (((($5)) + 48|0) + ($30)|0);
   $$08992 = $27;
   while(1) {
    $33 = (($$08992) + 1)|0;
    $34 = HEAP8[$16>>0]|0;
    $35 = ($34<<24>>24)==(0);
    L10: do {
     if (!($35)) {
      $36 = (($22) + ($33)|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37&255;
      $39 = $38 & 3;
      $40 = HEAP32[$1>>2]|0;
      $41 = (2)?($38 >>> 2):($38);
      $42 = (($41) + -1)|0;
      $$08891 = 0;
      while(1) {
       $47 = $$08891 << 2;
       $48 = $47 | $39;
       $49 = (((($40)) + 48|0) + ($48)|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = $50&255;
       $52 = ($42|0)==($51|0);
       $45 = (($$08891) + 1)|0;
       if ($52) {
        break;
       }
       $43 = HEAP8[$16>>0]|0;
       $44 = $43&255;
       $46 = ($45>>>0)<($44>>>0);
       if ($46) {
        $$08891 = $45;
       } else {
        break L10;
       }
      }
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
      (_fc_solve_sfs_check_state_begin($5,$3,$$byval_copy1,$6)|0);
      $53 = HEAP32[$17>>2]|0;
      $54 = ((($53)) + 24|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = $55 & $29;
      $57 = ($56|0)==(0);
      if ($57) {
       $58 = $55 | $29;
       HEAP32[$54>>2] = $58;
       $59 = HEAP32[$3>>2]|0;
       $60 = (($59) + ($$094<<2)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = HEAP8[$61>>0]|0;
       $63 = $62&255;
       $64 = (($63) + 1)|0;
       _memcpy(($31|0),($61|0),($64|0))|0;
       HEAP32[$60>>2] = $31;
      }
      HEAP32[$4>>2] = $$094;
      HEAP32[$18>>2] = -1;
      HEAP32[$19>>2] = -1;
      $65 = (($24) - ($33))|0;
      _empty_two_cols_from_new_state($$byval_copy1,$0,$3,$6,$4,$65,0);
      $66 = HEAP32[$3>>2]|0;
      _fcs_state_pop_col_top($66,$$094);
      $67 = HEAP32[$3>>2]|0;
      $68 = (((($67)) + 48|0) + ($48)|0);
      $69 = HEAP8[$68>>0]|0;
      $70 = (($69) + 1)<<24>>24;
      HEAP8[$68>>0] = $70;
      _fcs_move_stack_non_seq_push($6,4,$$094,$48);
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
      $71 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$6)|0);
      _fc_solve_derived_states_list_add_state($2,$71,0);
     }
    } while(0);
    $72 = (($$08992) + -1)|0;
    $73 = ($$08992|0)>($26|0);
    if ($73) {
     $$08992 = $72;
    } else {
     break;
    }
   }
  }
  $32 = (($$094) + 1)|0;
  $exitcond = ($32|0)==($8|0);
  if ($exitcond) {
   break;
  } else {
   $$094 = $32;
  }
 }
 STACKTOP = sp;return;
}
function _max0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)>(0);
 $2 = $1 ? $0 : 0;
 return ($2|0);
}
function _fc_solve_sfs_move_stack_cards_to_a_parent_on_the_same_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0114 = 0, $$0116119 = 0, $$0117118 = 0, $$0121 = 0, $$byval_copy1 = 0, $$not = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $exitcond = 0, $exitcond126 = 0, $exitcond127 = 0, $indvars$iv = 0, $indvars$iv$in = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy1 = sp + 32|0;
 $3 = sp + 24|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & 3;
 $$sroa$3$0$$sroa_idx = ((($8)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $13 = $$sroa$3$0$copyload&255;
 $14 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $11 & 12;
 $16 = ($15|0)==(0);
 $17 = (_calc_num_vacant_slots($0,$16)|0);
 $18 = (($17) + 1)<<24>>24;
 $19 = $18&255;
 $20 = ((($3)) + 4|0);
 $21 = ((($4)) + 4|0);
 $22 = ((($4)) + 8|0);
 $23 = ((($5)) + 4|0);
 $$0121 = 0;
 while(1) {
  $24 = HEAP32[$1>>2]|0;
  $25 = (($24) + ($$0121<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($28) - ($19))|0;
  $30 = (_max0($29)|0);
  $31 = (($30) + 2)|0;
  $32 = ($31|0)<($28|0);
  if ($32) {
   $33 = 1 << $$0121;
   $34 = $$0121 << 7;
   $35 = (((($6)) + 48|0) + ($34)|0);
   $$0116119 = $31;$indvars$iv$in = $30;
   while(1) {
    $indvars$iv = (($indvars$iv$in) + 1)|0;
    $37 = (($$0116119) + 1)|0;
    $38 = (($26) + ($37)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = (($$0116119) + -1)|0;
    $41 = (($26) + ($$0116119)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = (_fcs_is_parent_card__helper($39,$42,$12)|0);
    $$not = $43 ^ 1;
    $44 = ($40|0)>($30|0);
    $or$cond = $44 & $$not;
    if ($or$cond) {
     $45 = (($28) - ($$0116119))|0;
     $$0117118 = $30;
     while(1) {
      $46 = (($$0117118) + 1)|0;
      $47 = (($26) + ($46)|0);
      $48 = HEAP8[$47>>0]|0;
      $49 = (_fcs_is_parent_card__helper($39,$48,$12)|0);
      if ($49) {
       $50 = (($$0117118) + 2)|0;
       $51 = (($26) + ($50)|0);
       $52 = HEAP8[$51>>0]|0;
       $53 = (_fcs_is_parent_card__helper($52,$48,$12)|0);
       if (!($53)) {
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($6,$3,$$byval_copy1,$7)|0);
        $54 = HEAP32[$20>>2]|0;
        $55 = ((($54)) + 24|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = $56 & $33;
        $58 = ($57|0)==(0);
        if ($58) {
         $59 = $56 | $33;
         HEAP32[$55>>2] = $59;
         $60 = HEAP32[$3>>2]|0;
         $61 = (($60) + ($$0121<<2)|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = HEAP8[$62>>0]|0;
         $64 = $63&255;
         $65 = (($64) + 1)|0;
         _memcpy(($35|0),($62|0),($65|0))|0;
         HEAP32[$61>>2] = $35;
        }
        HEAP32[$4>>2] = $$0121;
        HEAP32[$21>>2] = -1;
        HEAP32[$22>>2] = -1;
        _empty_two_cols_from_new_state($5,$0,$3,$7,$4,$45,0);
        $66 = (($40) - ($$0117118))|0;
        _empty_two_cols_from_new_state($$byval_copy1,$0,$3,$7,$4,$66,0);
        $67 = HEAP8[$23>>0]|0;
        $68 = ($67<<24>>24)==(0);
        $69 = HEAP32[$3>>2]|0;
        $70 = HEAP32[$5>>2]|0;
        if ($68) {
         $81 = (((($69)) + 40|0) + ($70)|0);
         $82 = HEAP8[$81>>0]|0;
         HEAP8[$81>>0] = 0;
         _fcs_move_stack_non_seq_push($7,2,$70,$$0121);
         $$0114 = $82;
        } else {
         $71 = (($69) + ($70<<2)|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = HEAP8[$72>>0]|0;
         $74 = $73&255;
         $75 = (($72) + ($74)|0);
         $76 = HEAP8[$75>>0]|0;
         $77 = (($73) + -1)<<24>>24;
         HEAP8[$72>>0] = $77;
         $78 = $77&255;
         $79 = (($78) + 1)|0;
         $80 = (($72) + ($79)|0);
         HEAP8[$80>>0] = 0;
         _fcs_push_1card_seq($7,$70,$$0121);
         $$0114 = $76;
        }
        $83 = HEAP32[$3>>2]|0;
        _fcs_state_push_114($83,$$0121,$$0114);
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        $84 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$7)|0);
        _fc_solve_derived_states_list_add_state($2,$84,0);
       }
      }
      $exitcond = ($46|0)==($indvars$iv|0);
      if ($exitcond) {
       break;
      } else {
       $$0117118 = $46;
      }
     }
    }
    $exitcond126 = ($37|0)==($28|0);
    if ($exitcond126) {
     break;
    } else {
     $$0116119 = $37;$indvars$iv$in = $indvars$iv;
    }
   }
  }
  $36 = (($$0121) + 1)|0;
  $exitcond127 = ($36|0)==($13|0);
  if ($exitcond127) {
   break;
  } else {
   $$0121 = $36;
  }
 }
 STACKTOP = sp;return;
}
function _fcs_is_parent_card__helper($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0&255;
 $4 = (2)?($3 >>> 2):($3);
 $5 = (($4) + 1)|0;
 $6 = $1&255;
 $7 = (2)?($6 >>> 2):($6);
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $18 = 0;
  return ($18|0);
 }
 switch ($2|0) {
 case 2:  {
  $16 = 1;
  break;
 }
 case 1:  {
  $9 = $1 ^ $0;
  $10 = $9 & 3;
  $11 = ($10<<24>>24)==(0);
  $12 = $11&1;
  $16 = $12;
  break;
 }
 default: {
  $13 = $1 ^ $0;
  $14 = $13 & 1;
  $15 = $14&255;
  $16 = $15;
 }
 }
 $17 = ($16|0)!=(0);
 $18 = $17;
 return ($18|0);
}
function _fc_solve_sfs_move_stack_cards_to_different_stacks($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0127$add = 0, $$0127$idx131 = 0, $$0127$ptr132 = 0, $$0134 = 0, $$byval_copy1 = 0, $$op = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $or$cond129 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy1 = sp + 48|0;
 $3 = sp + 40|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & 3;
 $13 = (2)?($11 >>> 2):($11);
 $14 = $13 & 3;
 $$sroa$3$0$$sroa_idx = ((($8)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $15 = ((($0)) + 524|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ((($0)) + 523|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ($14|0)==(0);
 $20 = $19 ? $18 : 0;
 $21 = HEAP32[$2>>2]|0;
 $22 = (_fc_solve_calc_positions_by_rank_location($0)|0);
 $23 = ($12|0)==(2);
 $24 = ($12|0)==(1);
 $25 = $24 ? 8 : 4;
 $26 = $23 ? 2 : $25;
 $27 = $$sroa$3$0$copyload&255;
 $28 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($28) {
  _sort_derived_states($2,$21);
  STACKTOP = sp;return;
 }
 $29 = ((($4)) + 12|0);
 $30 = ((($4)) + 4|0);
 $31 = ($14|0)==(2);
 $32 = ((($4)) + 8|0);
 $33 = ((($4)) + 16|0);
 $34 = ((($3)) + 4|0);
 $35 = ((($5)) + 4|0);
 $36 = ((($5)) + 8|0);
 $$0134 = 0;
 while(1) {
  $37 = HEAP32[$1>>2]|0;
  _col_seqs_iter__create($4,$37,$$0134,$12);
  $38 = HEAP32[$29>>2]|0;
  $39 = HEAP32[$30>>2]|0;
  $40 = ($38|0)<($39|0);
  if ($40) {
   $41 = 1 << $$0134;
   $42 = $$0134 << 7;
   $43 = (((($6)) + 48|0) + ($42)|0);
   $44 = $$0134 << 8;
   $45 = $38;
   while(1) {
    $46 = ($45|0)==(0);
    $or$cond = $31 & $46;
    if (!($or$cond)) {
     $47 = HEAP32[$32>>2]|0;
     $48 = HEAP32[$33>>2]|0;
     $49 = (($47) - ($48))|0;
     $50 = HEAP32[$4>>2]|0;
     $51 = (($45) + 1)|0;
     $52 = (($50) + ($51)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = (_fcs_card_is_king($53)|0);
     if (!($54)) {
      $55 = $53&255;
      $56 = (2)?($55 >>> 2):($55);
      $57 = $56 << 4;
      $58 = (($22) + ($57)|0);
      $59 = $55 & 3;
      $60 = $55 & 1;
      $61 = $60 ^ 1;
      $62 = $24 ? $59 : $61;
      $$op = $62 << 1;
      $63 = $23 ? 0 : $$op;
      $64 = (1 - ($45))|0;
      $65 = (($64) + ($48))|0;
      $66 = $45 | $44;
      $67 = $66 << 8;
      $$0127$idx131 = $63;
      while(1) {
       $$0127$ptr132 = (($58) + ($$0127$idx131)|0);
       $68 = HEAP8[$$0127$ptr132>>0]|0;
       $69 = $68 << 24 >> 24;
       $70 = ($68<<24>>24)<(0);
       $71 = ($$0134|0)==($69|0);
       $or$cond129 = $70 | $71;
       if (!($or$cond129)) {
        $72 = ((($$0127$ptr132)) + 1|0);
        $73 = HEAP8[$72>>0]|0;
        $74 = $73 << 24 >> 24;
        $75 = HEAP32[$1>>2]|0;
        $76 = (($75) + ($69<<2)|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = HEAP8[$77>>0]|0;
        $79 = $78&255;
        $80 = (($79) - ($74))|0;
        $81 = (($80) + -1)|0;
        $82 = (($81) + ($49))|0;
        $83 = $82&255;
        $84 = (_check_if_can_relocate($83,$16,$20,$4,$8)|0);
        if ($84) {
         ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
         (_fc_solve_sfs_check_state_begin($6,$3,$$byval_copy1,$7)|0);
         $85 = HEAP32[$34>>2]|0;
         $86 = ((($85)) + 24|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = $87 & $41;
         $89 = ($88|0)==(0);
         if ($89) {
          $90 = $87 | $41;
          HEAP32[$86>>2] = $90;
          $91 = HEAP32[$3>>2]|0;
          $92 = (($91) + ($$0134<<2)|0);
          $93 = HEAP32[$92>>2]|0;
          $94 = HEAP8[$93>>0]|0;
          $95 = $94&255;
          $96 = (($95) + 1)|0;
          _memcpy(($43|0),($93|0),($96|0))|0;
          HEAP32[$92>>2] = $43;
         }
         $97 = HEAP32[$34>>2]|0;
         $98 = ((($97)) + 24|0);
         $99 = HEAP32[$98>>2]|0;
         $100 = 1 << $69;
         $101 = $99 & $100;
         $102 = ($101|0)==(0);
         if ($102) {
          $103 = $99 | $100;
          HEAP32[$98>>2] = $103;
          $104 = HEAP32[$3>>2]|0;
          $105 = (($104) + ($69<<2)|0);
          $106 = HEAP32[$105>>2]|0;
          $107 = $69 << 7;
          $108 = (((($6)) + 48|0) + ($107)|0);
          $109 = HEAP8[$106>>0]|0;
          $110 = $109&255;
          $111 = (($110) + 1)|0;
          _memcpy(($108|0),($106|0),($111|0))|0;
          HEAP32[$105>>2] = $108;
         }
         HEAP32[$5>>2] = $69;
         HEAP32[$35>>2] = $$0134;
         HEAP32[$36>>2] = -1;
         _empty_two_cols_from_new_state($$byval_copy1,$0,$3,$7,$5,$81,$49);
         $112 = HEAP32[$3>>2]|0;
         _fc_solve_move_sequence_function($112,$7,$69,$$0134,$65);
         $113 = $67 | $69;
         $114 = $113 << 8;
         $115 = $114 | $74;
         ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
         $116 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$7)|0);
         _fc_solve_derived_states_list_add_state($2,$116,$115);
        }
       }
       $$0127$add = (($$0127$idx131) + ($26))|0;
       $117 = ($$0127$add>>>0)<(16);
       if ($117) {
        $$0127$idx131 = $$0127$add;
       } else {
        break;
       }
      }
     }
    }
    _col_seqs_iter__advance($4);
    $118 = HEAP32[$29>>2]|0;
    $119 = HEAP32[$30>>2]|0;
    $120 = ($118|0)<($119|0);
    if ($120) {
     $45 = $118;
    } else {
     break;
    }
   }
  }
  $121 = (($$0134) + 1)|0;
  $exitcond = ($121|0)==($27|0);
  if ($exitcond) {
   break;
  } else {
   $$0134 = $121;
  }
 }
 _sort_derived_states($2,$21);
 STACKTOP = sp;return;
}
function _col_seqs_iter__create($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $5 = ((($4)) + 20|0);
 HEAP32[$5>>2] = $3;
 $6 = (($1) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$4>>2] = $7;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ((($4)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($9) + -1)|0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = 0;
 _col_seqs_iter__calc_end($4);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
 STACKTOP = sp;return;
}
function _check_if_can_relocate($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 & 12;
 $9 = $0&255;
 $10 = $1&255;
 $11 = ($9>>>0)<($10>>>0);
 $12 = $11 ? $9 : $10;
 $13 = (($9) - ($12))|0;
 $14 = $13 & 255;
 $15 = $2&255;
 $16 = ($14>>>0)<($15>>>0);
 $17 = $16 ? $14 : $15;
 $18 = (($13) - ($17))|0;
 $19 = $18 & 255;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $35 = 0;
  return ($35|0);
 }
 $21 = $7 & 16;
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = ($8|0)==(0);
  $24 = (($10) + 1)|0;
  $25 = (($24) - ($12))|0;
  $26 = (($15) - ($17))|0;
  $27 = $23 ? $26 : 0;
  $spec$select = $25 << $27;
  $33 = $spec$select;
 } else {
  $33 = 2147483647;
 }
 $28 = ((($3)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($3)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($29) - ($31))|0;
 $34 = ($33|0)>($32|0);
 $35 = $34;
 return ($35|0);
}
function _fc_solve_move_sequence_function($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (($0) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + ($3<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 _fcs_col_transfer_cards_115($6,$8,$4);
 _fcs_move_stack_params_push($1,0,$3,$2,$4);
 return;
}
function _col_seqs_iter__advance($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = $3;
 _col_seqs_iter__calc_end($0);
 return;
}
function _col_seqs_iter__calc_end($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge14 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5|0)<($8|0);
 if (!($9)) {
  return;
 }
 $storemerge14 = $5;
 while(1) {
  $10 = (($storemerge14) + 1)|0;
  $13 = (($storemerge14) + 2)|0;
  $14 = (($3) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = (($3) + ($10)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = (_fcs_is_parent_card__helper($15,$17,$2)|0);
  if (!($18)) {
   label = 5;
   break;
  }
  HEAP32[$6>>2] = $10;
  $11 = HEAP32[$7>>2]|0;
  $12 = ($10|0)<($11|0);
  if ($12) {
   $storemerge14 = $10;
  } else {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return;
 }
}
function _fcs_col_transfer_cards_115($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $5 = (($4) - ($2))|0;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = $5 & 255;
 $8 = (($7) + 1)|0;
 $9 = (($1) + ($8)|0);
 $10 = HEAP8[$0>>0]|0;
 $11 = $10&255;
 $12 = (($11) + 1)|0;
 $13 = (($0) + ($12)|0);
 _memcpy(($13|0),($9|0),($2|0))|0;
 $14 = (($11) + ($2))|0;
 $15 = $14&255;
 HEAP8[$0>>0] = $15;
 _memset(($9|0),0,($2|0))|0;
 return;
}
function _fc_solve_sfs_move_sequences_to_free_stacks($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0170 = 0, $$0175 = 0, $$byval_copy5 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $spec$select = 0, $spec$select171 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy5 = sp + 56|0;
 $3 = sp + 48|0;
 $4 = sp + 24|0;
 $5 = sp + 8|0;
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$7>>2]|0;
 $10 = ((($9)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 & 3;
 $14 = (2)?($12 >>> 2):($12);
 $15 = $14 & 3;
 $16 = ($15|0)==(2);
 if ($16) {
  STACKTOP = sp;return;
 }
 $$sroa$3$0$$sroa_idx = ((($9)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $17 = ((($0)) + 523|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $21 = ((($0)) + 524|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($15|0)==(0);
 $24 = $11 & 16;
 $25 = ($24<<24>>24)==(0);
 if ($25) {
  $26 = $22&255;
  $27 = (($26) + 1)|0;
  $28 = (($19) + -1)|0;
  $29 = $23 ? $28 : 0;
  $spec$select = $27 << $29;
  $67 = $spec$select;
 } else {
  $67 = 2147483647;
 }
 $30 = $$sroa$3$0$copyload&255;
 ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
 $31 = (_find_empty_stack($$byval_copy5,0,$30)|0);
 $32 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = ((($4)) + 12|0);
 $34 = ((($4)) + 4|0);
 $35 = ($15|0)==(1);
 $36 = ((($4)) + 16|0);
 $37 = ((($4)) + 8|0);
 $38 = $22&255;
 $39 = $23 ? $19 : 0;
 $40 = (($38) + 1)|0;
 $41 = ((($3)) + 4|0);
 $42 = 1 << $31;
 $43 = ((($3)) + 4|0);
 $44 = $31 << 7;
 $45 = (((($7)) + 48|0) + ($44)|0);
 $46 = ((($5)) + 4|0);
 $47 = ((($5)) + 8|0);
 $48 = ((($6)) + 4|0);
 $$0175 = 0;
 while(1) {
  $49 = HEAP32[$1>>2]|0;
  _col_seqs_iter__create($4,$49,$$0175,$13);
  $50 = HEAP32[$33>>2]|0;
  $51 = HEAP32[$34>>2]|0;
  $52 = ($50|0)<($51|0);
  if ($52) {
   $53 = 1 << $$0175;
   $54 = $$0175 << 7;
   $55 = (((($7)) + 48|0) + ($54)|0);
   $56 = 1 << $$0175;
   $57 = $$0175 << 7;
   $58 = (((($7)) + 48|0) + ($57)|0);
   $60 = $50;$66 = $51;
   while(1) {
    if ($35) {
     $59 = HEAP32[$4>>2]|0;
     $61 = (_fcs_col_is_king($59,$60)|0);
     if ($61) {
      label = 11;
     }
    } else {
     label = 11;
    }
    do {
     if ((label|0) == 11) {
      label = 0;
      $62 = HEAP32[$36>>2]|0;
      $63 = HEAP32[$37>>2]|0;
      $64 = ($63|0)==($62|0);
      if ($64) {
       $$0170 = $60;
       while(1) {
        $65 = (($66) - ($$0170))|0;
        $68 = ($67|0)<($65|0);
        $69 = ($$0170|0)>(0);
        $70 = $69 & $68;
        $71 = (($$0170) + -1)|0;
        if ($70) {
         $$0170 = $71;
        } else {
         break;
        }
       }
       if (!($69)) {
        break;
       }
       if ($35) {
        $72 = HEAP32[$4>>2]|0;
        $73 = (_fcs_col_is_king($72,$$0170)|0);
        if (!($73)) {
         break;
        }
       }
       ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
       (_fc_solve_sfs_check_state_begin($7,$3,$$byval_copy5,$8)|0);
       $74 = HEAP32[$41>>2]|0;
       $75 = ((($74)) + 24|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $76 & $53;
       $78 = ($77|0)==(0);
       if ($78) {
        $79 = $76 | $53;
        HEAP32[$75>>2] = $79;
        $80 = HEAP32[$3>>2]|0;
        $81 = (($80) + ($$0175<<2)|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $85 = (($84) + 1)|0;
        _memcpy(($55|0),($82|0),($85|0))|0;
        HEAP32[$81>>2] = $55;
       }
       $86 = HEAP32[$41>>2]|0;
       $87 = ((($86)) + 24|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = $88 & $42;
       $90 = ($89|0)==(0);
       if ($90) {
        $91 = $88 | $42;
        HEAP32[$87>>2] = $91;
        $92 = HEAP32[$3>>2]|0;
        $93 = (($92) + ($31<<2)|0);
        $94 = HEAP32[$93>>2]|0;
        $95 = HEAP8[$94>>0]|0;
        $96 = $95&255;
        $97 = (($96) + 1)|0;
        _memcpy(($45|0),($94|0),($97|0))|0;
        HEAP32[$93>>2] = $45;
       }
       $98 = HEAP32[$3>>2]|0;
       _fc_solve_move_sequence_function($98,$8,$31,$$0175,$65);
       ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
       $99 = (_fc_solve_sfs_check_state_end($0,$$byval_copy5,$3,$8)|0);
       _fc_solve_derived_states_list_add_state($2,$99,0);
       break;
      }
      $100 = (($63) - ($62))|0;
      $101 = ($100|0)<($38|0);
      $102 = $101 ? $100 : $38;
      $103 = (($100) - ($102))|0;
      $104 = ($103|0)<($39|0);
      $105 = $104 ? $103 : $39;
      $106 = ($103|0)>($39|0);
      if (!($106)) {
       $107 = (($19) - ($105))|0;
       $108 = ($107|0)>(0);
       if ($108) {
        $109 = HEAP8[$10>>0]|0;
        $110 = $109 & 16;
        $111 = ($110<<24>>24)==(0);
        if ($111) {
         $112 = (($40) - ($102))|0;
         $113 = (($107) + -1)|0;
         $114 = $23 ? $113 : 0;
         $spec$select171 = $112 << $114;
         $117 = $spec$select171;
        } else {
         $117 = 2147483647;
        }
        $115 = (($62) + 1)|0;
        $116 = (($115) - ($117))|0;
        $118 = ($116|0)>($60|0);
        $119 = $118 ? $116 : $60;
        $120 = ($62|0)<($119|0);
        if (!($120)) {
         if ($35) {
          $121 = HEAP32[$4>>2]|0;
          $122 = (_fcs_col_is_king($121,$119)|0);
          if (!($122)) {
           break;
          }
         }
         ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
         (_fc_solve_sfs_check_state_begin($7,$3,$$byval_copy5,$8)|0);
         $123 = HEAP32[$43>>2]|0;
         $124 = ((($123)) + 24|0);
         $125 = HEAP32[$124>>2]|0;
         $126 = $125 & $56;
         $127 = ($126|0)==(0);
         if ($127) {
          $128 = $125 | $56;
          HEAP32[$124>>2] = $128;
          $129 = HEAP32[$3>>2]|0;
          $130 = (($129) + ($$0175<<2)|0);
          $131 = HEAP32[$130>>2]|0;
          $132 = HEAP8[$131>>0]|0;
          $133 = $132&255;
          $134 = (($133) + 1)|0;
          _memcpy(($58|0),($131|0),($134|0))|0;
          HEAP32[$130>>2] = $58;
         }
         HEAP32[$5>>2] = $$0175;
         HEAP32[$46>>2] = -1;
         HEAP32[$47>>2] = -1;
         $135 = (($105) + ($102))|0;
         _empty_two_cols_from_new_state($6,$0,$3,$8,$5,$135,0);
         $136 = HEAP8[$48>>0]|0;
         $137 = ($136<<24>>24)==(0);
         $138 = HEAP32[$6>>2]|0;
         $139 = (($138) + 1)|0;
         $140 = $137 ? 0 : $139;
         ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
         $141 = (_find_empty_stack($$byval_copy5,$140,$30)|0);
         $142 = HEAP32[$43>>2]|0;
         $143 = ((($142)) + 24|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = 1 << $141;
         $146 = $144 & $145;
         $147 = ($146|0)==(0);
         if ($147) {
          $148 = $144 | $145;
          HEAP32[$143>>2] = $148;
          $149 = HEAP32[$3>>2]|0;
          $150 = (($149) + ($141<<2)|0);
          $151 = HEAP32[$150>>2]|0;
          $152 = $141 << 7;
          $153 = (((($7)) + 48|0) + ($152)|0);
          $154 = HEAP8[$151>>0]|0;
          $155 = $154&255;
          $156 = (($155) + 1)|0;
          _memcpy(($153|0),($151|0),($156|0))|0;
          HEAP32[$150>>2] = $153;
         }
         $157 = HEAP32[$3>>2]|0;
         $158 = (($62) + 1)|0;
         $159 = (($158) - ($119))|0;
         _fc_solve_move_sequence_function($157,$8,$141,$$0175,$159);
         ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
         $160 = (_fc_solve_sfs_check_state_end($0,$$byval_copy5,$3,$8)|0);
         _fc_solve_derived_states_list_add_state($2,$160,0);
        }
       }
      }
     }
    } while(0);
    _col_seqs_iter__advance($4);
    $161 = HEAP32[$33>>2]|0;
    $162 = HEAP32[$34>>2]|0;
    $163 = ($161|0)<($162|0);
    if ($163) {
     $60 = $161;$66 = $162;
    } else {
     break;
    }
   }
  }
  $164 = (($$0175) + 1)|0;
  $exitcond = ($164|0)==($30|0);
  if ($exitcond) {
   break;
  } else {
   $$0175 = $164;
  }
 }
 STACKTOP = sp;return;
}
function _fcs_col_is_king($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + 1)|0;
 $3 = (($0) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (_fcs_card_is_king($4)|0);
 return ($5|0);
}
function _fc_solve_sfs_move_freecell_cards_to_empty_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$060$lcssa = 0, $$06064 = 0, $$06162 = 0, $$byval_copy1 = 0, $$sroa$0$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (2)?($9 >>> 2):($9);
 $11 = $10 & 3;
 $12 = ($11|0)==(2);
 if ($12) {
  STACKTOP = sp;return;
 }
 $$sroa$0$0$copyload = HEAP8[$6>>0]|0;
 $13 = ((($0)) + 523|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $$sroa$4$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
 $16 = $$sroa$4$0$copyload&255;
 $17 = ($$sroa$4$0$copyload<<24>>24)==(0);
 L7: do {
  if ($17) {
   $$060$lcssa = 0;
  } else {
   $18 = HEAP32[$1>>2]|0;
   $$06064 = 0;
   while(1) {
    $19 = (($18) + ($$06064<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $$060$lcssa = $$06064;
     break L7;
    }
    $23 = (($$06064) + 1)|0;
    $24 = ($23>>>0)<($16>>>0);
    if ($24) {
     $$06064 = $23;
    } else {
     $$060$lcssa = $23;
     break;
    }
   }
  }
 } while(0);
 $25 = $$sroa$0$0$copyload&255;
 $26 = ($$sroa$0$0$copyload<<24>>24)==(0);
 if ($26) {
  STACKTOP = sp;return;
 }
 $27 = ($11|0)==(1);
 $28 = ((($3)) + 4|0);
 $29 = 1 << $$060$lcssa;
 $30 = $$060$lcssa << 7;
 $31 = (((($4)) + 48|0) + ($30)|0);
 $$06162 = 0;
 while(1) {
  $32 = HEAP32[$1>>2]|0;
  $33 = (((($32)) + 40|0) + ($$06162)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34<<24>>24)==(0);
  do {
   if (!($35)) {
    if ($27) {
     $36 = (_fcs_card_is_king($34)|0);
     if (!($36)) {
      break;
     }
    }
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
    $37 = HEAP32[$28>>2]|0;
    $38 = ((($37)) + 24|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $39 & $29;
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = $39 | $29;
     HEAP32[$38>>2] = $42;
     $43 = HEAP32[$3>>2]|0;
     $44 = (($43) + ($$060$lcssa<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = (($47) + 1)|0;
     _memcpy(($31|0),($45|0),($48|0))|0;
     HEAP32[$44>>2] = $31;
    }
    $49 = HEAP32[$3>>2]|0;
    _fcs_state_push_114($49,$$060$lcssa,$34);
    $50 = HEAP32[$3>>2]|0;
    $51 = (((($50)) + 40|0) + ($$06162)|0);
    HEAP8[$51>>0] = 0;
    _fcs_move_stack_non_seq_push($5,2,$$06162,$$060$lcssa);
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    $52 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
    _fc_solve_derived_states_list_add_state($2,$52,0);
   }
  } while(0);
  $53 = (($$06162) + 1)|0;
  $exitcond = ($53|0)==($25|0);
  if ($exitcond) {
   break;
  } else {
   $$06162 = $53;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_move_fc_to_empty_and_put_on_top($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0147$lcssa = 0, $$0147167 = 0, $$0148161 = 0, $$0149152 = 0, $$0150157 = 0, $$byval_copy3 = 0, $$sroa$0$0$copyload = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$5$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond175 = 0, $exitcond176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy3 = sp + 48|0;
 $3 = sp + 40|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & 3;
 $13 = (2)?($11 >>> 2):($11);
 $14 = $13 & 3;
 $15 = ($14|0)==(2);
 if ($15) {
  STACKTOP = sp;return;
 }
 $$sroa$0$0$copyload = HEAP8[$8>>0]|0;
 $16 = ((($0)) + 524|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (($18) + 1)|0;
 $20 = $19&255;
 $21 = ((($0)) + 523|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = (($23) + 255)|0;
 $25 = $24&255;
 $26 = ($22<<24>>24)==(0);
 if ($26) {
  STACKTOP = sp;return;
 }
 $$sroa$5$0$$sroa_idx = ((($8)) + 1|0);
 $$sroa$5$0$copyload = HEAP8[$$sroa$5$0$$sroa_idx>>0]|0;
 $27 = $$sroa$5$0$copyload&255;
 $28 = ($$sroa$5$0$copyload<<24>>24)==(0);
 L7: do {
  if ($28) {
   $$0147$lcssa = 0;
  } else {
   $29 = HEAP32[$1>>2]|0;
   $$0147167 = 0;
   while(1) {
    $30 = (($29) + ($$0147167<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP8[$31>>0]|0;
    $33 = ($32<<24>>24)==(0);
    if ($33) {
     $$0147$lcssa = $$0147167;
     break L7;
    }
    $34 = (($$0147167) + 1)|0;
    $35 = ($34>>>0)<($27>>>0);
    if ($35) {
     $$0147167 = $34;
    } else {
     $$0147$lcssa = $34;
     break;
    }
   }
  }
 } while(0);
 $36 = $$sroa$0$0$copyload&255;
 $37 = ($$sroa$0$0$copyload<<24>>24)==(0);
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = ($14|0)==(1);
 $39 = ($$sroa$5$0$copyload<<24>>24)==(0);
 $40 = ((($3)) + 4|0);
 $41 = 1 << $$0147$lcssa;
 $42 = $$0147$lcssa << 7;
 $43 = (((($6)) + 48|0) + ($42)|0);
 $44 = ((($4)) + 12|0);
 $45 = ((($4)) + 4|0);
 $46 = ((($4)) + 8|0);
 $47 = ((($4)) + 16|0);
 $48 = ((($3)) + 4|0);
 $49 = 1 << $$0147$lcssa;
 $50 = $$0147$lcssa << 7;
 $51 = (((($6)) + 48|0) + ($50)|0);
 $52 = ((($5)) + 4|0);
 $53 = ((($5)) + 8|0);
 $$0148161 = 0;
 while(1) {
  $54 = HEAP32[$1>>2]|0;
  $55 = (((($54)) + 40|0) + ($$0148161)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = ($56<<24>>24)==(0);
  do {
   if (!($57)) {
    if ($38) {
     $58 = (_fcs_card_is_king($56)|0);
     if (!($58)) {
      break;
     }
    }
    $$0149152 = 0;
    while(1) {
     $59 = ($$0149152|0)==($$0148161|0);
     if (!($59)) {
      $60 = HEAP32[$1>>2]|0;
      $61 = (((($60)) + 40|0) + ($$0149152)|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = ($62<<24>>24)==(0);
      if (!($63)) {
       $64 = (_fcs_is_parent_card__helper($62,$56,$12)|0);
       if ($64) {
        ;HEAP32[$$byval_copy3>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($6,$3,$$byval_copy3,$7)|0);
        $65 = HEAP32[$40>>2]|0;
        $66 = ((($65)) + 24|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = $67 & $41;
        $69 = ($68|0)==(0);
        if ($69) {
         $70 = $67 | $41;
         HEAP32[$66>>2] = $70;
         $71 = HEAP32[$3>>2]|0;
         $72 = (($71) + ($$0147$lcssa<<2)|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = HEAP8[$73>>0]|0;
         $75 = $74&255;
         $76 = (($75) + 1)|0;
         _memcpy(($43|0),($73|0),($76|0))|0;
         HEAP32[$72>>2] = $43;
        }
        $77 = HEAP32[$3>>2]|0;
        _fcs_state_push_114($77,$$0147$lcssa,$56);
        $78 = HEAP32[$3>>2]|0;
        _fcs_state_push_114($78,$$0147$lcssa,$62);
        $79 = HEAP32[$3>>2]|0;
        $80 = (((($79)) + 40|0) + ($$0148161)|0);
        HEAP8[$80>>0] = 0;
        $81 = (((($79)) + 40|0) + ($$0149152)|0);
        HEAP8[$81>>0] = 0;
        _fcs_move_stack_non_seq_push($7,2,$$0148161,$$0147$lcssa);
        _fcs_move_stack_non_seq_push($7,2,$$0149152,$$0147$lcssa);
        ;HEAP32[$$byval_copy3>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$1+4>>2]|0;
        $82 = (_fc_solve_sfs_check_state_end($0,$$byval_copy3,$3,$7)|0);
        _fc_solve_derived_states_list_add_state($2,$82,0);
       }
      }
     }
     $83 = (($$0149152) + 1)|0;
     $exitcond = ($83|0)==($36|0);
     if ($exitcond) {
      break;
     } else {
      $$0149152 = $83;
     }
    }
    if (!($39)) {
     $$0150157 = 0;
     while(1) {
      $84 = HEAP32[$1>>2]|0;
      _col_seqs_iter__create($4,$84,$$0150157,$12);
      $85 = HEAP32[$44>>2]|0;
      $86 = HEAP32[$45>>2]|0;
      $87 = ($85|0)<($86|0);
      if ($87) {
       $88 = 1 << $$0150157;
       $89 = $$0150157 << 7;
       $90 = (((($6)) + 48|0) + ($89)|0);
       $96 = $85;
       while(1) {
        $91 = HEAP32[$46>>2]|0;
        $92 = HEAP32[$47>>2]|0;
        $93 = (($91) - ($92))|0;
        $94 = HEAP32[$4>>2]|0;
        $95 = (($96) + 1)|0;
        $97 = (($94) + ($95)|0);
        $98 = HEAP8[$97>>0]|0;
        $99 = (_fcs_is_parent_card__helper($98,$56,$12)|0);
        if ($99) {
         $100 = $93&255;
         $101 = (_check_if_can_relocate($100,$20,$25,$4,$8)|0);
         if ($101) {
          ;HEAP32[$$byval_copy3>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$1+4>>2]|0;
          (_fc_solve_sfs_check_state_begin($6,$3,$$byval_copy3,$7)|0);
          $102 = HEAP32[$48>>2]|0;
          $103 = ((($102)) + 24|0);
          $104 = HEAP32[$103>>2]|0;
          $105 = $104 & $88;
          $106 = ($105|0)==(0);
          if ($106) {
           $107 = $104 | $88;
           HEAP32[$103>>2] = $107;
           $108 = HEAP32[$3>>2]|0;
           $109 = (($108) + ($$0150157<<2)|0);
           $110 = HEAP32[$109>>2]|0;
           $111 = HEAP8[$110>>0]|0;
           $112 = $111&255;
           $113 = (($112) + 1)|0;
           _memcpy(($90|0),($110|0),($113|0))|0;
           HEAP32[$109>>2] = $90;
          }
          $114 = HEAP32[$48>>2]|0;
          $115 = ((($114)) + 24|0);
          $116 = HEAP32[$115>>2]|0;
          $117 = $116 & $49;
          $118 = ($117|0)==(0);
          if ($118) {
           $119 = $116 | $49;
           HEAP32[$115>>2] = $119;
           $120 = HEAP32[$3>>2]|0;
           $121 = (($120) + ($$0147$lcssa<<2)|0);
           $122 = HEAP32[$121>>2]|0;
           $123 = HEAP8[$122>>0]|0;
           $124 = $123&255;
           $125 = (($124) + 1)|0;
           _memcpy(($51|0),($122|0),($125|0))|0;
           HEAP32[$121>>2] = $51;
          }
          $126 = HEAP32[$3>>2]|0;
          _fcs_state_push_114($126,$$0147$lcssa,$56);
          $127 = HEAP32[$3>>2]|0;
          $128 = (((($127)) + 40|0) + ($$0148161)|0);
          HEAP8[$128>>0] = 0;
          _fcs_move_stack_non_seq_push($7,2,$$0148161,$$0147$lcssa);
          HEAP32[$5>>2] = $$0150157;
          HEAP32[$52>>2] = -1;
          HEAP32[$53>>2] = -1;
          _empty_two_cols_from_new_state($$byval_copy3,$0,$3,$7,$5,$93,0);
          $129 = HEAP32[$3>>2]|0;
          $130 = (1 - ($96))|0;
          $131 = (($130) + ($92))|0;
          _fc_solve_move_sequence_function($129,$7,$$0147$lcssa,$$0150157,$131);
          ;HEAP32[$$byval_copy3>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$1+4>>2]|0;
          $132 = (_fc_solve_sfs_check_state_end($0,$$byval_copy3,$3,$7)|0);
          _fc_solve_derived_states_list_add_state($2,$132,0);
         }
        }
        _col_seqs_iter__advance($4);
        $133 = HEAP32[$44>>2]|0;
        $134 = HEAP32[$45>>2]|0;
        $135 = ($133|0)<($134|0);
        if ($135) {
         $96 = $133;
        } else {
         break;
        }
       }
      }
      $136 = (($$0150157) + 1)|0;
      $exitcond175 = ($136|0)==($27|0);
      if ($exitcond175) {
       break;
      } else {
       $$0150157 = $136;
      }
     }
    }
   }
  } while(0);
  $137 = (($$0148161) + 1)|0;
  $exitcond176 = ($137|0)==($36|0);
  if ($exitcond176) {
   break;
  } else {
   $$0148161 = $137;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_move_cards_to_a_different_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0170177 = 0, $$0171$lcssa$ph = 0, $$0171176 = 0, $$0172186 = 0, $$0173$add = 0, $$0173$idx181 = 0, $$0173$ptr182 = 0, $$0189 = 0, $$byval_copy1 = 0, $$op = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond195 = 0, $or$cond = 0, $spec$select175 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 24|0;
 $3 = sp + 16|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 & 3;
 $12 = $10 & 12;
 $$sroa$3$0$$sroa_idx = ((($7)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $13 = ((($0)) + 523|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($12|0)==(0);
 $16 = $14&255;
 $17 = (_fc_solve_calc_positions_by_rank_location($0)|0);
 $18 = ($11|0)==(2);
 $19 = ($11|0)==(1);
 $20 = $19 ? 8 : 4;
 $21 = $18 ? 2 : $20;
 $22 = $$sroa$3$0$copyload&255;
 $23 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = ((($0)) + 524|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $15 ? $16 : 0;
 $28 = (($26) + 1)|0;
 $29 = ((($3)) + 4|0);
 $30 = ((($4)) + 4|0);
 $31 = ((($4)) + 8|0);
 $$0189 = 0;
 while(1) {
  $32 = HEAP32[$1>>2]|0;
  $33 = (($32) + ($$0189<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($35&255)<(2);
  if (!($37)) {
   $38 = (($36) + -2)|0;
   $39 = (($34) + ($36)|0);
   $40 = HEAP8[$39>>0]|0;
   $$0170177 = $40;$$0171176 = $38;
   while(1) {
    $41 = (($$0171176) + 1)|0;
    $42 = (($34) + ($41)|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = (_fcs_is_parent_card__helper($$0170177,$43,$11)|0);
    if (!($44)) {
     $$0171$lcssa$ph = $$0171176;
     break;
    }
    $45 = (($$0171176) + -1)|0;
    $46 = ($$0171176|0)>(0);
    if ($46) {
     $$0170177 = $43;$$0171176 = $45;
    } else {
     $$0171$lcssa$ph = $45;
     break;
    }
   }
   $47 = (($$0171$lcssa$ph) + 2)|0;
   $48 = ($47|0)<($36|0);
   if ($48) {
    $49 = 1 << $$0189;
    $50 = $$0189 << 7;
    $51 = (((($5)) + 48|0) + ($50)|0);
    $$0172186 = $47;
    while(1) {
     $52 = (($$0172186) + 1)|0;
     $53 = (($34) + ($52)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54&255;
     $56 = (2)?($55 >>> 2):($55);
     $57 = $56 << 4;
     $58 = (($17) + ($57)|0);
     $59 = $55 & 3;
     $60 = $55 & 1;
     $61 = $60 ^ 1;
     $62 = $19 ? $59 : $61;
     $$op = $62 << 1;
     $63 = $18 ? 0 : $$op;
     $64 = (($36) - ($$0172186))|0;
     $65 = (($36) - ($$0172186))|0;
     $$0173$idx181 = $63;
     while(1) {
      $$0173$ptr182 = (($58) + ($$0173$idx181)|0);
      $66 = HEAP8[$$0173$ptr182>>0]|0;
      $67 = $66 << 24 >> 24;
      $68 = ($66<<24>>24)==(-1);
      $69 = ($$0189|0)==($67|0);
      $or$cond = $68 | $69;
      do {
       if (!($or$cond)) {
        $70 = ((($$0173$ptr182)) + 1|0);
        $71 = HEAP8[$70>>0]|0;
        $72 = $71 << 24 >> 24;
        $73 = HEAP32[$1>>2]|0;
        $74 = (($73) + ($67<<2)|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = HEAP8[$75>>0]|0;
        $77 = $76&255;
        $78 = (($77) - ($72))|0;
        $79 = (($78) + -1)|0;
        $80 = ($79|0)<($26|0);
        $81 = $80 ? $79 : $26;
        $82 = (($79) - ($81))|0;
        $83 = ($82|0)<($27|0);
        $84 = $83 ? $82 : $27;
        $85 = ($82|0)>($27|0);
        if (!($85)) {
         $86 = HEAP8[$8>>0]|0;
         $87 = $86 & 16;
         $88 = ($87<<24>>24)==(0);
         if ($88) {
          $89 = (($28) - ($81))|0;
          $90 = (($16) - ($84))|0;
          $91 = $15 ? $90 : 0;
          $spec$select175 = $89 << $91;
          $92 = ($spec$select175|0)<($64|0);
          if ($92) {
           break;
          } else {
           $122 = $64;
          }
         } else {
          $122 = $65;
         }
         ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
         (_fc_solve_sfs_check_state_begin($5,$3,$$byval_copy1,$6)|0);
         $93 = HEAP32[$29>>2]|0;
         $94 = ((($93)) + 24|0);
         $95 = HEAP32[$94>>2]|0;
         $96 = $95 & $49;
         $97 = ($96|0)==(0);
         if ($97) {
          $98 = $95 | $49;
          HEAP32[$94>>2] = $98;
          $99 = HEAP32[$3>>2]|0;
          $100 = (($99) + ($$0189<<2)|0);
          $101 = HEAP32[$100>>2]|0;
          $102 = HEAP8[$101>>0]|0;
          $103 = $102&255;
          $104 = (($103) + 1)|0;
          _memcpy(($51|0),($101|0),($104|0))|0;
          HEAP32[$100>>2] = $51;
         }
         $105 = HEAP32[$29>>2]|0;
         $106 = ((($105)) + 24|0);
         $107 = HEAP32[$106>>2]|0;
         $108 = 1 << $67;
         $109 = $107 & $108;
         $110 = ($109|0)==(0);
         if ($110) {
          $111 = $107 | $108;
          HEAP32[$106>>2] = $111;
          $112 = HEAP32[$3>>2]|0;
          $113 = (($112) + ($67<<2)|0);
          $114 = HEAP32[$113>>2]|0;
          $115 = $67 << 7;
          $116 = (((($5)) + 48|0) + ($115)|0);
          $117 = HEAP8[$114>>0]|0;
          $118 = $117&255;
          $119 = (($118) + 1)|0;
          _memcpy(($116|0),($114|0),($119|0))|0;
          HEAP32[$113>>2] = $116;
         }
         HEAP32[$4>>2] = $67;
         HEAP32[$30>>2] = -1;
         HEAP32[$31>>2] = -1;
         $120 = (($84) + ($81))|0;
         _empty_two_cols_from_new_state($$byval_copy1,$0,$3,$6,$4,$120,0);
         $121 = HEAP32[$3>>2]|0;
         _fc_solve_move_sequence_function($121,$6,$67,$$0189,$122);
         ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
         $123 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$6)|0);
         _fc_solve_derived_states_list_add_state($2,$123,0);
        }
       }
      } while(0);
      $$0173$add = (($$0173$idx181) + ($21))|0;
      $124 = ($$0173$add>>>0)<(16);
      if ($124) {
       $$0173$idx181 = $$0173$add;
      } else {
       break;
      }
     }
     $exitcond = ($52|0)==($36|0);
     if ($exitcond) {
      break;
     } else {
      $$0172186 = $52;
     }
    }
   }
  }
  $125 = (($$0189) + 1)|0;
  $exitcond195 = ($125|0)==($22|0);
  if ($exitcond195) {
   break;
  } else {
   $$0189 = $125;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_empty_stack_into_freecells($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$07986 = 0, $$08085 = 0, $$08190 = 0, $$1$lcssa = 0, $$182 = 0, $$byval_copy1 = 0, $$sroa$0$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 12;
 $10 = ($9<<24>>24)==(8);
 if ($10) {
  STACKTOP = sp;return;
 }
 $$sroa$0$0$copyload = HEAP8[$6>>0]|0;
 $$sroa$4$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
 $11 = ((($0)) + 524|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = ((($0)) + 523|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $$sroa$4$0$copyload&255;
 $18 = ($$sroa$4$0$copyload<<24>>24)==(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $19 = ((($3)) + 4|0);
 $20 = $$sroa$0$0$copyload&255;
 $$08190 = 0;
 while(1) {
  $21 = HEAP32[$1>>2]|0;
  $22 = (($21) + ($$08190<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($24) + -1)<<24>>24;
  $27 = ($26&255)<($12&255);
  if ($27) {
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
   (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
   $28 = HEAP32[$19>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = 1 << $$08190;
   $32 = $30 & $31;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = $30 | $31;
    HEAP32[$29>>2] = $34;
    $35 = HEAP32[$3>>2]|0;
    $36 = (($35) + ($$08190<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $$08190 << 7;
    $39 = (((($4)) + 48|0) + ($38)|0);
    $40 = HEAP8[$37>>0]|0;
    $41 = $40&255;
    $42 = (($41) + 1)|0;
    _memcpy(($39|0),($37|0),($42|0))|0;
    HEAP32[$36>>2] = $39;
   }
   $43 = HEAP32[$3>>2]|0;
   $44 = (($43) + ($$08190<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $$07986 = 0;$$08085 = 0;
   while(1) {
    $47 = ($$08085|0)<($20|0);
    L22: do {
     if ($47) {
      $48 = HEAP32[$3>>2]|0;
      $$182 = $$08085;
      while(1) {
       $49 = (((($48)) + 40|0) + ($$182)|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = ($50<<24>>24)==(0);
       if ($51) {
        $$1$lcssa = $$182;
        break L22;
       }
       $52 = (($$182) + 1)|0;
       $53 = ($52|0)<($20|0);
       if ($53) {
        $$182 = $52;
       } else {
        $$1$lcssa = $52;
        break;
       }
      }
     } else {
      $$1$lcssa = $$08085;
     }
    } while(0);
    $54 = HEAP8[$45>>0]|0;
    $55 = $54&255;
    $56 = (($45) + ($55)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = (($54) + -1)<<24>>24;
    HEAP8[$45>>0] = $58;
    $59 = $58&255;
    $60 = (($59) + 1)|0;
    $61 = (($45) + ($60)|0);
    HEAP8[$61>>0] = 0;
    $62 = HEAP32[$3>>2]|0;
    $63 = (((($62)) + 40|0) + ($$1$lcssa)|0);
    HEAP8[$63>>0] = $57;
    _fcs_move_stack_non_seq_push($5,1,$$08190,$$1$lcssa);
    $64 = (($$07986) + 1)|0;
    $65 = (($$1$lcssa) + 1)|0;
    $exitcond = ($64|0)==($25|0);
    if ($exitcond) {
     break;
    } else {
     $$07986 = $64;$$08085 = $65;
    }
   }
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
   $46 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
   _fc_solve_derived_states_list_add_state($2,$46,0);
  }
  $66 = (($$08190) + 1)|0;
  $exitcond95 = ($66|0)==($17|0);
  if ($exitcond95) {
   break;
  } else {
   $$08190 = $66;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_atomic_move_card_to_empty_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$080$lcssa = 0, $$08084 = 0, $$08182 = 0, $$byval_copy1 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (2)?($9 >>> 2):($9);
 $11 = $10 & 3;
 $12 = ($11|0)==(2);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = ((($0)) + 523|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $$sroa$3$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $16 = $$sroa$3$0$copyload&255;
 $17 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$1>>2]|0;
 $$08084 = 0;
 while(1) {
  $19 = (($18) + ($$08084<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $$080$lcssa = $$08084;
   break;
  }
  $23 = (($$08084) + 1)|0;
  $24 = ($23>>>0)<($16>>>0);
  if ($24) {
   $$08084 = $23;
  } else {
   $$080$lcssa = $23;
   break;
  }
 }
 $25 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = ($11|0)==(1);
 $27 = ((($3)) + 4|0);
 $28 = 1 << $$080$lcssa;
 $29 = $$080$lcssa << 7;
 $30 = (((($4)) + 48|0) + ($29)|0);
 $$08182 = 0;
 while(1) {
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + ($$08182<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34&255)<(2);
  do {
   if (!($35)) {
    $36 = $34&255;
    $37 = (($33) + ($36)|0);
    $38 = HEAP8[$37>>0]|0;
    if ($26) {
     $39 = (_fcs_card_is_king($38)|0);
     if (!($39)) {
      break;
     }
    }
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
    $40 = HEAP32[$27>>2]|0;
    $41 = ((($40)) + 24|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = 1 << $$08182;
    $44 = $42 & $43;
    $45 = ($44|0)==(0);
    if ($45) {
     $46 = $42 | $43;
     HEAP32[$41>>2] = $46;
     $47 = HEAP32[$3>>2]|0;
     $48 = (($47) + ($$08182<<2)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = $$08182 << 7;
     $51 = (((($4)) + 48|0) + ($50)|0);
     $52 = HEAP8[$49>>0]|0;
     $53 = $52&255;
     $54 = (($53) + 1)|0;
     _memcpy(($51|0),($49|0),($54|0))|0;
     HEAP32[$48>>2] = $51;
    }
    $55 = HEAP32[$27>>2]|0;
    $56 = ((($55)) + 24|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $57 & $28;
    $59 = ($58|0)==(0);
    if ($59) {
     $60 = $57 | $28;
     HEAP32[$56>>2] = $60;
     $61 = HEAP32[$3>>2]|0;
     $62 = (($61) + ($$080$lcssa<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = HEAP8[$63>>0]|0;
     $65 = $64&255;
     $66 = (($65) + 1)|0;
     _memcpy(($30|0),($63|0),($66|0))|0;
     HEAP32[$62>>2] = $30;
    }
    $67 = HEAP32[$3>>2]|0;
    _fcs_state_pop_col_top($67,$$08182);
    $68 = HEAP32[$3>>2]|0;
    _fcs_state_push_114($68,$$080$lcssa,$38);
    _fcs_push_1card_seq($5,$$08182,$$080$lcssa);
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    $69 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
    _fc_solve_derived_states_list_add_state($2,$69,0);
   }
  } while(0);
  $70 = (($$08182) + 1)|0;
  $exitcond = ($70|0)==($16|0);
  if ($exitcond) {
   break;
  } else {
   $$08182 = $70;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_atomic_move_card_to_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0101 = 0, $$09899 = 0, $$byval_copy1 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond105 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 3;
 $11 = $9 & 12;
 $$sroa$3$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $12 = ($11|0)==(8);
 $13 = $12&1;
 $14 = $$sroa$3$0$copyload&255;
 $15 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = ((($3)) + 4|0);
 $$0101 = 0;
 while(1) {
  $17 = HEAP32[$1>>2]|0;
  $18 = (($17) + ($$0101<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($21>>>0)>($13>>>0);
  if ($22) {
   $23 = (($19) + ($21)|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = 1 << $$0101;
   $26 = $$0101 << 7;
   $27 = (((($4)) + 48|0) + ($26)|0);
   $$09899 = 0;
   while(1) {
    $28 = ($$09899|0)==($$0101|0);
    if (!($28)) {
     $29 = HEAP32[$1>>2]|0;
     $30 = (($29) + ($$09899<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(0);
     if (!($33)) {
      $34 = $32&255;
      $35 = (($31) + ($34)|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = (_fcs_is_parent_card__helper($24,$36,$10)|0);
      if ($37) {
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
       (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
       $38 = HEAP32[$16>>2]|0;
       $39 = ((($38)) + 24|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = $40 & $25;
       $42 = ($41|0)==(0);
       if ($42) {
        $43 = $40 | $25;
        HEAP32[$39>>2] = $43;
        $44 = HEAP32[$3>>2]|0;
        $45 = (($44) + ($$0101<<2)|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = HEAP8[$46>>0]|0;
        $48 = $47&255;
        $49 = (($48) + 1)|0;
        _memcpy(($27|0),($46|0),($49|0))|0;
        HEAP32[$45>>2] = $27;
       }
       $50 = HEAP32[$16>>2]|0;
       $51 = ((($50)) + 24|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = 1 << $$09899;
       $54 = $52 & $53;
       $55 = ($54|0)==(0);
       if ($55) {
        $56 = $52 | $53;
        HEAP32[$51>>2] = $56;
        $57 = HEAP32[$3>>2]|0;
        $58 = (($57) + ($$09899<<2)|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = $$09899 << 7;
        $61 = (((($4)) + 48|0) + ($60)|0);
        $62 = HEAP8[$59>>0]|0;
        $63 = $62&255;
        $64 = (($63) + 1)|0;
        _memcpy(($61|0),($59|0),($64|0))|0;
        HEAP32[$58>>2] = $61;
       }
       $65 = HEAP32[$3>>2]|0;
       _fcs_state_pop_col_top($65,$$0101);
       $66 = HEAP32[$3>>2]|0;
       _fcs_state_push_114($66,$$09899,$24);
       _fcs_push_1card_seq($5,$$0101,$$09899);
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
       $67 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
       _fc_solve_derived_states_list_add_state($2,$67,0);
      }
     }
    }
    $68 = (($$09899) + 1)|0;
    $exitcond = ($68|0)==($14|0);
    if ($exitcond) {
     break;
    } else {
     $$09899 = $68;
    }
   }
  }
  $69 = (($$0101) + 1)|0;
  $exitcond105 = ($69|0)==($14|0);
  if ($exitcond105) {
   break;
  } else {
   $$0101 = $69;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_atomic_move_card_to_freecell($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$069$lcssa = 0, $$06973 = 0, $$07071 = 0, $$byval_copy1 = 0, $$sroa$0$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $$sroa$4$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
 $7 = ((($0)) + 524|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $$sroa$0$0$copyload = HEAP8[$6>>0]|0;
 $10 = ((($6)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 & 12;
 $13 = ($12<<24>>24)==(8);
 $14 = $13&1;
 $15 = $$sroa$0$0$copyload&255;
 $16 = ($$sroa$0$0$copyload<<24>>24)==(0);
 L4: do {
  if ($16) {
   $$069$lcssa = 0;
  } else {
   $17 = HEAP32[$1>>2]|0;
   $$06973 = 0;
   while(1) {
    $18 = (((($17)) + 40|0) + ($$06973)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)==(0);
    if ($20) {
     $$069$lcssa = $$06973;
     break L4;
    }
    $21 = (($$06973) + 1)|0;
    $22 = ($21>>>0)<($15>>>0);
    if ($22) {
     $$06973 = $21;
    } else {
     $$069$lcssa = $21;
     break;
    }
   }
  }
 } while(0);
 $23 = $$sroa$4$0$copyload&255;
 $24 = ($$sroa$4$0$copyload<<24>>24)==(0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = ((($3)) + 4|0);
 $$07071 = 0;
 while(1) {
  $26 = HEAP32[$1>>2]|0;
  $27 = (($26) + ($$07071<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($30>>>0)>($14>>>0);
  if ($31) {
   $32 = (($28) + ($30)|0);
   $33 = HEAP8[$32>>0]|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
   (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
   $34 = HEAP32[$25>>2]|0;
   $35 = ((($34)) + 24|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = 1 << $$07071;
   $38 = $36 & $37;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = $36 | $37;
    HEAP32[$35>>2] = $40;
    $41 = HEAP32[$3>>2]|0;
    $42 = (($41) + ($$07071<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $$07071 << 7;
    $45 = (((($4)) + 48|0) + ($44)|0);
    $46 = HEAP8[$43>>0]|0;
    $47 = $46&255;
    $48 = (($47) + 1)|0;
    _memcpy(($45|0),($43|0),($48|0))|0;
    HEAP32[$42>>2] = $45;
   }
   $49 = HEAP32[$3>>2]|0;
   _fcs_state_pop_col_top($49,$$07071);
   $50 = HEAP32[$3>>2]|0;
   $51 = (((($50)) + 40|0) + ($$069$lcssa)|0);
   HEAP8[$51>>0] = $33;
   _fcs_move_stack_non_seq_push($5,1,$$07071,$$069$lcssa);
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
   $52 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
   _fc_solve_derived_states_list_add_state($2,$52,0);
  }
  $53 = (($$07071) + 1)|0;
  $exitcond = ($53|0)==($23|0);
  if ($exitcond) {
   break;
  } else {
   $$07071 = $53;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_atomic_move_freecell_card_to_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$06869 = 0, $$070 = 0, $$byval_copy1 = 0, $$sroa$0$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, $exitcond = 0, $exitcond74 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 3;
 $10 = $9&255;
 $$sroa$0$0$copyload = HEAP8[$6>>0]|0;
 $11 = $$sroa$0$0$copyload&255;
 $12 = ($$sroa$0$0$copyload<<24>>24)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $$sroa$4$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
 $13 = $$sroa$4$0$copyload&255;
 $14 = ($$sroa$4$0$copyload<<24>>24)==(0);
 $15 = ((($3)) + 4|0);
 $$070 = 0;
 while(1) {
  $16 = HEAP32[$1>>2]|0;
  $17 = (((($16)) + 40|0) + ($$070)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==(0);
  $brmerge = $19 | $14;
  if (!($brmerge)) {
   $$06869 = 0;
   while(1) {
    $20 = HEAP32[$1>>2]|0;
    $21 = (($20) + ($$06869<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP8[$22>>0]|0;
    $24 = ($23<<24>>24)==(0);
    if (!($24)) {
     $25 = $23&255;
     $26 = (($22) + ($25)|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = (_fcs_is_parent_card__helper($18,$27,$10)|0);
     if ($28) {
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
      (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
      $29 = HEAP32[$15>>2]|0;
      $30 = ((($29)) + 24|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = 1 << $$06869;
      $33 = $31 & $32;
      $34 = ($33|0)==(0);
      if ($34) {
       $35 = $31 | $32;
       HEAP32[$30>>2] = $35;
       $36 = HEAP32[$3>>2]|0;
       $37 = (($36) + ($$06869<<2)|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = $$06869 << 7;
       $40 = (((($4)) + 48|0) + ($39)|0);
       $41 = HEAP8[$38>>0]|0;
       $42 = $41&255;
       $43 = (($42) + 1)|0;
       _memcpy(($40|0),($38|0),($43|0))|0;
       HEAP32[$37>>2] = $40;
      }
      $44 = HEAP32[$3>>2]|0;
      $45 = (((($44)) + 40|0) + ($$070)|0);
      HEAP8[$45>>0] = 0;
      _fcs_state_push_114($44,$$06869,$18);
      _fcs_move_stack_non_seq_push($5,2,$$070,$$06869);
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
      $46 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
      _fc_solve_derived_states_list_add_state($2,$46,0);
     }
    }
    $47 = (($$06869) + 1)|0;
    $exitcond = ($47|0)==($13|0);
    if ($exitcond) {
     break;
    } else {
     $$06869 = $47;
    }
   }
  }
  $48 = (($$070) + 1)|0;
  $exitcond74 = ($48|0)==($11|0);
  if ($exitcond74) {
   break;
  } else {
   $$070 = $48;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_atomic_move_freecell_card_to_empty_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$05758 = 0, $$byval_copy2 = 0, $$sroa$0$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy2 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (2)?($9 >>> 2):($9);
 $11 = $10 & 3;
 $$sroa$0$0$copyload = HEAP8[$6>>0]|0;
 $$sroa$4$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
 $12 = ($11|0)==(2);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = ((($0)) + 523|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $$sroa$4$0$copyload&255;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
 $17 = (_find_empty_stack($$byval_copy2,0,$16)|0);
 $18 = $$sroa$0$0$copyload&255;
 $19 = ($$sroa$0$0$copyload<<24>>24)==(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = ($11|0)==(1);
 $21 = ((($3)) + 4|0);
 $22 = 1 << $17;
 $23 = $17 << 7;
 $24 = (((($4)) + 48|0) + ($23)|0);
 $$05758 = 0;
 while(1) {
  $25 = HEAP32[$1>>2]|0;
  $26 = (((($25)) + 40|0) + ($$05758)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ($27<<24>>24)==(0);
  do {
   if (!($28)) {
    if ($20) {
     $29 = (_fcs_card_is_king($27)|0);
     if (!($29)) {
      break;
     }
    }
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy2,$5)|0);
    $30 = HEAP32[$21>>2]|0;
    $31 = ((($30)) + 24|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 & $22;
    $34 = ($33|0)==(0);
    if ($34) {
     $35 = $32 | $22;
     HEAP32[$31>>2] = $35;
     $36 = HEAP32[$3>>2]|0;
     $37 = (($36) + ($17<<2)|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = HEAP8[$38>>0]|0;
     $40 = $39&255;
     $41 = (($40) + 1)|0;
     _memcpy(($24|0),($38|0),($41|0))|0;
     HEAP32[$37>>2] = $24;
    }
    $42 = HEAP32[$3>>2]|0;
    $43 = (((($42)) + 40|0) + ($$05758)|0);
    HEAP8[$43>>0] = 0;
    _fcs_state_push_114($42,$17,$27);
    _fcs_move_stack_non_seq_push($5,2,$$05758,$17);
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
    $44 = (_fc_solve_sfs_check_state_end($0,$$byval_copy2,$3,$5)|0);
    _fc_solve_derived_states_list_add_state($2,$44,0);
   }
  } while(0);
  $45 = (($$05758) + 1)|0;
  $exitcond = ($45|0)==($18|0);
  if ($exitcond) {
   break;
  } else {
   $$05758 = $45;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_raymond_prune($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$081$off0 = 0, $$082$off0$lcssa = 0, $$082$off0101 = 0, $$084102 = 0, $$08599 = 0, $$2$off0 = 0, $$3$off0$lcssa = 0, $$3$off0103 = 0, $$5$off0 = 0, $$byval_copy1 = 0, $$sroa$0$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond108 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$3>>2]|0;
 $$sroa$0$0$copyload = HEAP8[$5>>0]|0;
 $$sroa$4$0$$sroa_idx = ((($5)) + 1|0);
 $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
 (_fc_solve_sfs_check_state_begin($3,$2,$$byval_copy1,$4)|0);
 $6 = $$sroa$4$0$copyload&255;
 $7 = ($$sroa$4$0$copyload<<24>>24)==(0);
 $8 = $$sroa$0$0$copyload&255;
 $9 = ($$sroa$0$0$copyload<<24>>24)==(0);
 $10 = ((($2)) + 4|0);
 $$081$off0 = 0;
 while(1) {
  if ($7) {
   $$082$off0$lcssa = 0;
  } else {
   $$082$off0101 = 0;$$08599 = 0;
   while(1) {
    $11 = HEAP32[$2>>2]|0;
    $12 = (($11) + ($$08599<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(0);
    if ($15) {
     $$2$off0 = $$082$off0101;
    } else {
     $16 = $14&255;
     $17 = (($13) + ($16)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = (_calc_foundation_to_put_card_on($0,$11,$18)|0);
     $20 = ($19|0)<(0);
     if ($20) {
      $$2$off0 = $$082$off0101;
     } else {
      $21 = HEAP32[$10>>2]|0;
      $22 = ((($21)) + 24|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = 1 << $$08599;
      $25 = $23 & $24;
      $26 = ($25|0)==(0);
      if ($26) {
       $27 = $23 | $24;
       HEAP32[$22>>2] = $27;
       $28 = $$08599 << 7;
       $29 = (((($3)) + 48|0) + ($28)|0);
       $30 = HEAP8[$13>>0]|0;
       $31 = $30&255;
       $32 = (($31) + 1)|0;
       _memcpy(($29|0),($13|0),($32|0))|0;
       HEAP32[$12>>2] = $29;
      }
      $33 = HEAP32[$2>>2]|0;
      _fcs_state_pop_col_top($33,$$08599);
      $34 = HEAP32[$2>>2]|0;
      $35 = (((($34)) + 48|0) + ($19)|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = (($36) + 1)<<24>>24;
      HEAP8[$35>>0] = $37;
      _fcs_move_stack_non_seq_push($4,4,$$08599,$19);
      $$2$off0 = 1;
     }
    }
    $38 = (($$08599) + 1)|0;
    $exitcond = ($38|0)==($6|0);
    if ($exitcond) {
     $$082$off0$lcssa = $$2$off0;
     break;
    } else {
     $$082$off0101 = $$2$off0;$$08599 = $38;
    }
   }
  }
  if ($9) {
   $$3$off0$lcssa = $$082$off0$lcssa;
  } else {
   $$084102 = 0;$$3$off0103 = $$082$off0$lcssa;
   while(1) {
    $39 = HEAP32[$2>>2]|0;
    $40 = (((($39)) + 40|0) + ($$084102)|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = ($41<<24>>24)==(0);
    if ($42) {
     $$5$off0 = $$3$off0103;
    } else {
     $43 = (_calc_foundation_to_put_card_on($0,$39,$41)|0);
     $44 = ($43|0)<(0);
     if ($44) {
      $$5$off0 = $$3$off0103;
     } else {
      HEAP8[$40>>0] = 0;
      $45 = (((($39)) + 48|0) + ($43)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = (($46) + 1)<<24>>24;
      HEAP8[$45>>0] = $47;
      _fcs_move_stack_non_seq_push($4,5,$$084102,$43);
      $$5$off0 = 1;
     }
    }
    $48 = (($$084102) + 1)|0;
    $exitcond108 = ($48|0)==($8|0);
    if ($exitcond108) {
     $$3$off0$lcssa = $$5$off0;
     break;
    } else {
     $$084102 = $48;$$3$off0103 = $$5$off0;
    }
   }
  }
  if ($$3$off0$lcssa) {
   $$081$off0 = 1;
  } else {
   break;
  }
 }
 $spec$select = $$081$off0 | $$3$off0$lcssa;
 if (!($spec$select)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
 $49 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$2,$4)|0);
 $50 = ((($49)) + 74|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51 | 16;
 HEAP8[$50>>0] = $52;
 $$0 = $49;
 STACKTOP = sp;return ($$0|0);
}
function _calc_foundation_to_put_card_on($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$05370 = 0, $$067 = 0, $$op = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $spec$select$neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 3;
 $8 = $2&255;
 $9 = (2)?($8 >>> 2):($8);
 $10 = $8 & 3;
 $11 = (($9) + -1)|0;
 $12 = (($9) + -2)|0;
 $13 = ((($4)) + 2|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $41 = -1;
  return ($41|0);
 }
 $16 = $14&255;
 $17 = ($7<<24>>24)==(1);
 $18 = ($7<<24>>24)==(2);
 $$05370 = 0;$26 = $16;
 L4: while(1) {
  $19 = $$05370 << 2;
  $20 = $19 | $10;
  $21 = (((($1)) + 48|0) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($11|0)==($23|0);
  L6: do {
   if ($24) {
    if ($17) {
     $41 = $20;
     label = 9;
     break L4;
    }
    $25 = $26 << 2;
    $$067 = 0;
    while(1) {
     $29 = (((($1)) + 48|0) + ($$067)|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = $30&255;
     $32 = $$067 ^ $8;
     $33 = $32 & 1;
     $34 = $33 ^ 1;
     $$op = (0 - ($34))|0;
     $spec$select$neg = $18 ? 0 : $$op;
     $35 = (($12) + ($spec$select$neg))|0;
     $36 = ($35|0)>($31|0);
     $27 = (($$067) + 1)|0;
     if ($36) {
      break L6;
     }
     $28 = ($27>>>0)<($25>>>0);
     if ($28) {
      $$067 = $27;
     } else {
      $41 = $20;
      label = 9;
      break L4;
     }
    }
   }
  } while(0);
  $37 = (($$05370) + 1)|0;
  $38 = HEAP8[$13>>0]|0;
  $39 = $38&255;
  $40 = ($37>>>0)<($39>>>0);
  if ($40) {
   $$05370 = $37;$26 = $39;
  } else {
   $41 = -1;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($41|0);
 }
 return (0)|0;
}
function _fc_solve__hll_ms_rand__get_singleton() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8880|0);
}
function _fc_solve__hll_ms_rand__init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_atoll($1)|0);
 $3 = (getTempRet0() | 0);
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = $2;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = $3;
 $8 = (_microsoft_rand__calc_init_seedx_116($2,$3)|0);
 $9 = (getTempRet0() | 0);
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 return;
}
function _microsoft_rand__calc_init_seedx_116($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return ($0|0);
}
function _fc_solve__hll_ms_rand__mod_rand($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = $0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (_microsoft_rand__game_num_rand_117($2,$5,$8)|0);
 $10 = (($9>>>0) % ($1>>>0))&-1;
 return ($10|0);
}
function _microsoft_rand__game_num_rand_117($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)<(1);
 $4 = ($1>>>0)<(0);
 $5 = ($2|0)==(1);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $8 = (_microsoft_rand_rand_118($0)|0);
  $9 = ($2|0)<(0);
  $10 = ($1>>>0)<(2147483648);
  $11 = ($2|0)==(0);
  $12 = $11 & $10;
  $13 = $9 | $12;
  $14 = $8 | 32768;
  $15 = $13 ? $8 : $14;
  $$0 = $15;
  return ($$0|0);
 } else {
  $16 = (_microsoft_rand_randp_119($0)|0);
  $17 = (($16) + 1)|0;
  $$0 = $17;
  return ($$0|0);
 }
 return (0)|0;
}
function _microsoft_rand_rand_118($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (___muldi3(($3|0),($6|0),214013,0)|0);
 $8 = (getTempRet0() | 0);
 $9 = (_i64Add(($7|0),($8|0),2531011,0)|0);
 $10 = (getTempRet0() | 0);
 $11 = $0;
 $12 = $11;
 HEAP32[$12>>2] = $9;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = (_bitshift64Lshr(($9|0),($10|0),16)|0);
 $16 = (getTempRet0() | 0);
 $17 = $15 & 32767;
 return ($17|0);
}
function _microsoft_rand_randp_119($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (___muldi3(($3|0),($6|0),214013,0)|0);
 $8 = (getTempRet0() | 0);
 $9 = (_i64Add(($7|0),($8|0),2531011,0)|0);
 $10 = (getTempRet0() | 0);
 $11 = $0;
 $12 = $11;
 HEAP32[$12>>2] = $9;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = (_bitshift64Lshr(($9|0),($10|0),16)|0);
 $16 = (getTempRet0() | 0);
 $17 = $15 & 65535;
 return ($17|0);
}
function _freecell_solver_user_stringify_move_ptr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$2+3>>0]|0;
 _freecell_solver_user_stringify_move_w_state($0,$1,$$byval_copy,$3);
 STACKTOP = sp;return;
}
function _fc_solve_free_soft_thread_by_depth_move_array($0) {
 $0 = $0|0;
 var $$014 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$014 = 0;
  while(1) {
   $6 = (((($2) + (($$014*12)|0)|0)) + 4|0);
   _moves_order__free($6);
   $7 = (($$014) + 1)|0;
   $exitcond = ($7|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $$014 = $7;
   }
  }
 }
 HEAP32[$3>>2] = 0;
 _free($2);
 HEAP32[$1>>2] = 0;
 return;
}
function _moves_order__free($0) {
 $0 = $0|0;
 var $$014 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$014 = 0;
  while(1) {
   $5 = (($2) + (($$014*224)|0)|0);
   $6 = HEAP32[$5>>2]|0;
   _free($6);
   $7 = (($$014) + 1)|0;
   $exitcond = ($7|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $$014 = $7;
   }
  }
 }
 _free($2);
 HEAP32[$1>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function _fc_solve_foreach_soft_thread($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02730 = 0, $$029 = 0, $$031 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 160|0);
 $4 = ((($0)) + 148|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 152|0);
 $$031 = 0;$8 = $5;
 while(1) {
  $7 = ($$031>>>0)<($8>>>0);
  if ($7) {
   $9 = HEAP32[$6>>2]|0;
   $10 = (($9) + (($$031*1356)|0)|0);
   $$029 = $10;
  } else {
   $11 = HEAP32[$3>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    label = 9;
    break;
   } else {
    $$029 = $11;
   }
  }
  $13 = ((($$029)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($$029)) + 1344|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) + (($16*552)|0)|0);
  $18 = ($16|0)>(0);
  if ($18) {
   $$02730 = $14;
   while(1) {
    _soft_thread_run_cb($$02730,$1,$2);
    $19 = ((($$02730)) + 552|0);
    $20 = ($19>>>0)<($17>>>0);
    if ($20) {
     $$02730 = $19;
    } else {
     break;
    }
   }
  }
  $21 = (($$031) + 1)|0;
  $22 = HEAP32[$4>>2]|0;
  $23 = ($21>>>0)>($22>>>0);
  if ($23) {
   label = 9;
   break;
  } else {
   $$031 = $21;$8 = $22;
  }
 }
 if ((label|0) == 9) {
  return;
 }
}
function _soft_thread_run_cb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 switch ($1|0) {
 case 0:  {
  _soft_thread_clean_soft_dfs($0);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  _fc_solve_free_instance_soft_thread_callback($0);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $4 = ((($0)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 4|0);
  _accumulate_tests_by_ptr($2,$6);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  HEAP32[$3>>2] = 0;
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 4|0);
  _accumulate_tests_by_ptr($3,$9);
  $10 = HEAP32[$3>>2]|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = ($10|0)==($11|0);
  $13 = ((($0)) + 522|0);
  $14 = $12&1;
  HEAP8[$13>>0] = $14;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _soft_thread_clean_soft_dfs($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$029 = 0, $$128 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + (($5*244)|0)|0);
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($2) + (($8*244)|0)|0);
 $10 = ($5|0)>(0);
 if ($10) {
  $$029 = $2;
  while(1) {
   $11 = ((($$029)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   _free($12);
   $13 = ((($$029)) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   _free($14);
   $15 = ((($$029)) + 244|0);
   $16 = ($15>>>0)<($6>>>0);
   if ($16) {
    $$029 = $15;
   } else {
    $$0$lcssa = $15;
    break;
   }
  }
 } else {
  $$0$lcssa = $2;
 }
 $17 = ($$0$lcssa>>>0)<($9>>>0);
 if ($17) {
  $$128 = $$0$lcssa;
  while(1) {
   $18 = ((($$128)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    _free($19);
    $21 = ((($$128)) + 28|0);
    $22 = HEAP32[$21>>2]|0;
    _free($22);
   }
   $23 = ((($$128)) + 244|0);
   $24 = ($23>>>0)<($9>>>0);
   if ($24) {
    $$128 = $23;
   } else {
    break;
   }
  }
 }
 _free($2);
 HEAP32[$1>>2] = 0;
 HEAP32[$7>>2] = 0;
 return;
}
function _fc_solve_free_instance_soft_thread_callback($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _st_free_pq($0);
 _fcs_free_moves_list($0);
 _fc_solve_free_soft_thread_by_depth_move_array($0);
 $1 = ((($0)) + 544|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 _fc_solve_pats__recycle_soft_thread($2);
 _fc_solve_pats__destroy_soft_thread($2);
 _free($2);
 HEAP32[$1>>2] = 0;
 return;
}
function _accumulate_tests_by_ptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02122 = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) + (($4*224)|0)|0);
 $6 = ($4|0)>(0);
 if (!($6)) {
  return;
 }
 $$023 = $3;
 while(1) {
  $7 = HEAP32[$$023>>2]|0;
  $8 = ((($$023)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7) + ($9<<2)|0);
  $11 = ($9|0)>(0);
  if ($11) {
   $$02122 = $7;
   while(1) {
    $12 = HEAP32[$$02122>>2]|0;
    $13 = 1 << $12;
    $14 = HEAP32[$0>>2]|0;
    $15 = $14 | $13;
    HEAP32[$0>>2] = $15;
    $16 = ((($$02122)) + 4|0);
    $17 = ($16>>>0)<($10>>>0);
    if ($17) {
     $$02122 = $16;
    } else {
     break;
    }
   }
  }
  $18 = ((($$023)) + 224|0);
  $19 = ($18>>>0)<($5>>>0);
  if ($19) {
   $$023 = $18;
  } else {
   break;
  }
 }
 return;
}
function _st_free_pq($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 288|0);
 _fc_solve_PQueueFree($1);
 return;
}
function _fcs_free_moves_list($0) {
 $0 = $0|0;
 var $$03133 = 0, $$032 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, $exitcond37 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 264|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 HEAP32[$1>>2] = 0;
 $3 = ((($0)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = ((($0)) + 48|0);
 if ($5) {
  $7 = HEAP32[$6>>2]|0;
  _free($7);
  HEAP32[$6>>2] = 0;
  return;
 }
 $$03133 = 0;
 while(1) {
  $8 = HEAP32[$6>>2]|0;
  $9 = (((($8) + (($$03133*12)|0)|0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = (((($8) + (($$03133*12)|0)|0)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   if (!($14)) {
    $$032 = 0;
    while(1) {
     $15 = (($10) + (($$032*224)|0)|0);
     $16 = HEAP32[$15>>2]|0;
     _free($16);
     $17 = (($$032) + 1)|0;
     $exitcond = ($17|0)==($13|0);
     if ($exitcond) {
      break;
     } else {
      $$032 = $17;
     }
    }
   }
   _free($10);
  }
  $18 = (($$03133) + 1)|0;
  $exitcond37 = ($18|0)==($4|0);
  if ($exitcond37) {
   break;
  } else {
   $$03133 = $18;
  }
 }
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 HEAP32[$6>>2] = 0;
 return;
}
function _fc_solve_pats__recycle_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fc_solve_pats__free_buckets($0);
 _fc_solve_pats__free_clusters($0);
 _fc_solve_pats__free_blocks($0);
 $1 = ((($0)) + 37668|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _fc_solve_pats__soft_thread_reset_helper($0);
  return;
 }
 _free($2);
 HEAP32[$1>>2] = 0;
 $4 = ((($0)) + 37672|0);
 HEAP32[$4>>2] = 0;
 _fc_solve_pats__soft_thread_reset_helper($0);
 return;
}
function _fc_solve_pats__destroy_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 37684|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 HEAP32[$1>>2] = 0;
 $3 = ((($0)) + 37680|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 37676|0);
 HEAP32[$4>>2] = -1;
 return;
}
function _fc_solve_pats__free_buckets($0) {
 $0 = $0|0;
 var $$021 = 0, $$in1920 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$021 = 0;
 while(1) {
  $1 = (((($0)) + 2876|0) + ($$021<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$in1920 = $2;
   while(1) {
    $4 = ((($$in1920)) + 12|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = HEAP32[$$in1920>>2]|0;
    $7 = (_strlen($6)|0);
    $8 = (($7) + 1)|0;
    _fc_solve_pats__release($0,$6,$8);
    _fc_solve_pats__release($0,$$in1920,16);
    $9 = ($5|0)==(0|0);
    if ($9) {
     break;
    } else {
     $$in1920 = $5;
    }
   }
  }
  HEAP32[$1>>2] = 0;
  $10 = (($$021) + 1)|0;
  $exitcond = ($10|0)==(4093);
  if ($exitcond) {
   break;
  } else {
   $$021 = $10;
  }
 }
 return;
}
function _fc_solve_pats__free_clusters($0) {
 $0 = $0|0;
 var $$018 = 0, $$in1617 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$018 = 0;
 while(1) {
  $1 = (((($0)) + 35660|0) + ($$018<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$in1617 = $2;
   while(1) {
    $4 = ((($$in1617)) + 8|0);
    $5 = HEAP32[$4>>2]|0;
    _fc_solve_pats__release($0,$$in1617,12);
    $6 = ($5|0)==(0|0);
    if ($6) {
     break;
    } else {
     $$in1617 = $5;
    }
   }
  }
  HEAP32[$1>>2] = 0;
  $7 = (($$018) + 1)|0;
  $exitcond = ($7|0)==(499);
  if ($exitcond) {
   break;
  } else {
   $$018 = $7;
  }
 }
 return;
}
function _fc_solve_pats__free_blocks($0) {
 $0 = $0|0;
 var $$in1213 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 37656|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$1>>2] = 0;
  return;
 }
 $$in1213 = $2;
 while(1) {
  $4 = ((($$in1213)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$$in1213>>2]|0;
  _fc_solve_pats__release($0,$6,131072);
  _fc_solve_pats__release($0,$$in1213,16);
  $7 = ($5|0)==(0|0);
  if ($7) {
   break;
  } else {
   $$in1213 = $5;
  }
 }
 HEAP32[$1>>2] = 0;
 return;
}
function _fc_solve_pats__soft_thread_reset_helper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 816|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 2788|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 2796|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 35644|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 35656|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($0)) + 37664|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 37660|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 37676|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 37688|0);
 HEAP32[$9>>2] = 0;
 return;
}
function _fc_solve_pats__release($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 HEAP32[$3>>2] = $5;
 return;
}
function _fc_solve_PQueueFree($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 HEAP32[$1>>2] = 0;
 return;
}
function _fc_solve_instance__init_hard_thread($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$1>>2] = $0;
 $3 = ((($1)) + 1344|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 4|0);
 HEAP32[$4>>2] = 0;
 (_fc_solve_new_soft_thread($1)|0);
 $5 = ((($1)) + 1352|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 1336|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 1328|0);
 HEAP32[$7>>2] = 0;
 _fc_solve_reset_hard_thread($1);
 $8 = ((($1)) + 20|0);
 $9 = ((($0)) + 292|0);
 $10 = HEAP32[$9>>2]|0;
 _fc_solve_compact_allocator_init($8,$10);
 $11 = ((($1)) + 40|0);
 _fcs_move_stack__new($2);
 $12 = $2;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $11;
 $19 = $18;
 HEAP32[$19>>2] = $14;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $17;
 STACKTOP = sp;return;
}
function _fc_solve_new_soft_thread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 192|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(32);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 1344|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8*552)|0;
 $10 = (($9) + 552)|0;
 $11 = (_realloc($6,$10)|0);
 HEAP32[$5>>2] = $11;
 $12 = HEAP32[$7>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$7>>2] = $13;
 $14 = (($11) + (($12*552)|0)|0);
 _fc_solve_init_soft_thread($0,$14);
 $$0 = $14;
 return ($$0|0);
}
function _fc_solve_reset_hard_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 2147483647;
 $3 = ((($0)) + 1348|0);
 HEAP32[$3>>2] = 0;
 return;
}
function _fcs_move_stack__new($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(64)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _fc_solve_init_soft_thread($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$10$0$$sroa_idx13 = 0, $$sroa$11 = 0, $$sroa$11$0$$sroa_idx = 0, $$sroa$11$464$sroa_idx = 0, $$sroa$12$0$$sroa_idx = 0, $$sroa$1216$0$$sroa_idx17 = 0, $$sroa$13$0$$sroa_idx = 0, $$sroa$15$0$$sroa_raw_idx = 0, $$sroa$1520$0$$sroa_idx = 0, $$sroa$16$0$$sroa_idx = 0, $$sroa$17$0$$sroa_idx = 0, $$sroa$18$sroa$0$0$$sroa$18$0$$sroa_raw_idx$sroa_raw_idx = 0, $$sroa$3$0$$sroa_idx1 = 0, $$sroa$4$0$$sroa_idx2 = 0, $$sroa$5$0$$sroa_idx3 = 0, $$sroa$6$0$$sroa_idx4 = 0, $$sroa$7$0$$sroa_idx = 0, $$sroa$75$0$$sroa_idx6 = 0, $$sroa$911$0$$sroa_idx12 = 0, $10 = 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $$sroa$11 = sp;
 $2 = sp + 464|0;
 _memset(($$sroa$11|0),0,464)|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 192|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = (_malloc(12)|0);
 $$sroa$11$464$sroa_idx = ((($$sroa$11)) + 416|0);
 dest=$$sroa$11$464$sroa_idx; src=8896; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$1>>2] = $0;
 $$sroa$3$0$$sroa_idx1 = ((($1)) + 4|0);
 HEAP32[$$sroa$3$0$$sroa_idx1>>2] = $5;
 $$sroa$4$0$$sroa_idx2 = ((($1)) + 8|0);
 HEAP32[$$sroa$4$0$$sroa_idx2>>2] = 1;
 $$sroa$5$0$$sroa_idx3 = ((($1)) + 12|0);
 HEAP32[$$sroa$5$0$$sroa_idx3>>2] = $7;
 $$sroa$6$0$$sroa_idx4 = ((($1)) + 16|0);
 HEAP32[$$sroa$6$0$$sroa_idx4>>2] = 0;
 $$sroa$7$0$$sroa_idx = ((($1)) + 20|0);
 HEAP32[$$sroa$7$0$$sroa_idx>>2] = 0;
 $$sroa$75$0$$sroa_idx6 = ((($1)) + 24|0);
 $$sroa$911$0$$sroa_idx12 = ((($1)) + 40|0);
 ;HEAP32[$$sroa$75$0$$sroa_idx6>>2]=0|0;HEAP32[$$sroa$75$0$$sroa_idx6+4>>2]=0|0;HEAP32[$$sroa$75$0$$sroa_idx6+8>>2]=0|0;HEAP32[$$sroa$75$0$$sroa_idx6+12>>2]=0|0;
 HEAP32[$$sroa$911$0$$sroa_idx12>>2] = 24;
 $$sroa$10$0$$sroa_idx13 = ((($1)) + 44|0);
 HEAP32[$$sroa$10$0$$sroa_idx13>>2] = 0;
 $$sroa$11$0$$sroa_idx = ((($1)) + 48|0);
 _memcpy(($$sroa$11$0$$sroa_idx|0),($$sroa$11|0),464)|0;
 $$sroa$12$0$$sroa_idx = ((($1)) + 512|0);
 ;HEAP32[$$sroa$12$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$12$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$12$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$12$0$$sroa_idx+12>>2]=0|0;
 $$sroa$1216$0$$sroa_idx17 = ((($1)) + 528|0);
 HEAP32[$$sroa$1216$0$$sroa_idx17>>2] = 50;
 $$sroa$13$0$$sroa_idx = ((($1)) + 532|0);
 $$sroa$15$0$$sroa_raw_idx = ((($1)) + 543|0);
 ;HEAP32[$$sroa$13$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$13$0$$sroa_idx+4>>2]=0|0;HEAP16[$$sroa$13$0$$sroa_idx+8>>1]=0|0;HEAP8[$$sroa$13$0$$sroa_idx+10>>0]=0|0;
 ;HEAP8[$$sroa$15$0$$sroa_raw_idx>>0]=0|0;HEAP8[$$sroa$15$0$$sroa_raw_idx+1>>0]=0|0;HEAP8[$$sroa$15$0$$sroa_raw_idx+2>>0]=0|0;HEAP8[$$sroa$15$0$$sroa_raw_idx+3>>0]=0|0;HEAP8[$$sroa$15$0$$sroa_raw_idx+4>>0]=0|0;
 $$sroa$1520$0$$sroa_idx = ((($1)) + 548|0);
 HEAP8[$$sroa$1520$0$$sroa_idx>>0] = 0;
 $$sroa$16$0$$sroa_idx = ((($1)) + 549|0);
 HEAP8[$$sroa$16$0$$sroa_idx>>0] = 0;
 $$sroa$17$0$$sroa_idx = ((($1)) + 550|0);
 HEAP8[$$sroa$17$0$$sroa_idx>>0] = 0;
 $$sroa$18$sroa$0$0$$sroa$18$0$$sroa_raw_idx$sroa_raw_idx = ((($1)) + 551|0);
 HEAP8[$$sroa$18$sroa$0$0$$sroa$18$0$$sroa_raw_idx$sroa_raw_idx>>0] = 0;
 HEAP32[$2>>2] = 2147483647;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 164|0);
 _moves_order_dup($8,$10);
 ;HEAP32[$7>>2]=HEAP32[$2>>2]|0;HEAP32[$7+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$2+8>>2]|0;
 _fc_solve_reset_soft_thread($1);
 STACKTOP = sp;return;
}
function _moves_order_dup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017 = 0, $$sroa$4$0$$sroa_idx7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 16)|0;
 $6 = $5 & -16;
 $7 = ($6*224)|0;
 $8 = (_memdup($4,$7)|0);
 $9 = ($2|0)==(0);
 if ($9) {
  HEAP32[$0>>2] = $2;
  $$sroa$4$0$$sroa_idx7 = ((($0)) + 4|0);
  HEAP32[$$sroa$4$0$$sroa_idx7>>2] = $8;
  return;
 }
 $$017 = 0;
 while(1) {
  $10 = (($8) + (($$017*224)|0)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (((($8) + (($$017*224)|0)|0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 << 2;
  $15 = (($14) + 64)|0;
  $16 = $15 & -64;
  $17 = (_memdup($11,$16)|0);
  HEAP32[$10>>2] = $17;
  $18 = (($$017) + 1)|0;
  $exitcond = ($18|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$017 = $18;
  }
 }
 HEAP32[$0>>2] = $2;
 $$sroa$4$0$$sroa_idx7 = ((($0)) + 4|0);
 HEAP32[$$sroa$4$0$$sroa_idx7>>2] = $8;
 return;
}
function _fc_solve_reset_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 520|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($0)) + 521|0);
 HEAP8[$2>>0] = 0;
 return;
}
function _memdup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($2|0),($0|0),($1|0))|0;
 $$0 = $2;
 return ($$0|0);
}
function _fc_solve_trace_solution($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$0117139 = 0, $$0118135 = 0, $$0119 = 0, $$0119148 = 0, $$0119149 = 0, $$0120134 = 0, $$0121131 = 0, $$0123$lcssa = 0, $$0123128 = 0, $$0143 = 0, $$0144 = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond153 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1424|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1424|0);
 $$byval_copy = sp + 1384|0;
 $1 = sp + 1376|0;
 $2 = sp + 1280|0;
 $3 = sp + 1392|0;
 $4 = sp + 1292|0;
 $5 = sp;
 $6 = sp + 1288|0;
 $7 = HEAPU8[15224>>0]|(HEAPU8[15224+1>>0]<<8)|(HEAPU8[15224+2>>0]<<16)|(HEAPU8[15224+3>>0]<<24);
 HEAP32[$1>>2] = $7;
 HEAP8[$1>>0] = 12;
 _instance_free_solution_moves($0);
 $8 = ((($0)) + 284|0);
 _fcs_move_stack__new($2);
 $9 = $2;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $8;
 $16 = $15;
 HEAP32[$16>>2] = $11;
 $17 = (($15) + 4)|0;
 $18 = $17;
 HEAP32[$18>>2] = $14;
 $19 = ((($0)) + 296|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(2);
 if (!($23)) {
  $110 = ((($0)) + 280|0);
  $$0119148 = HEAP32[$110>>2]|0;
  $111 = ((($$0119148)) + 56|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = ($112|0)==(0|0);
  $114 = ((($$0119148)) + 74|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115 | 1;
  HEAP8[$114>>0] = $116;
  if ($113) {
   STACKTOP = sp;return;
  }
  $$0119149 = $$0119148;$123 = $111;
  while(1) {
   ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
   _fcs_move_stack_push_121($8,$$byval_copy);
   $117 = ((($$0119149)) + 60|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($118)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $$0143 = (($121) + -1)|0;
   $122 = ($$0143|0)>(-1);
   if ($122) {
    $$0144 = $$0143;
    while(1) {
     $130 = (($119) + ($$0144<<2)|0);
     ;HEAP8[$$byval_copy>>0]=HEAP8[$130>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$130+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$130+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$130+3>>0]|0;
     _fcs_move_stack_push_121($8,$$byval_copy);
     $$0 = (($$0144) + -1)|0;
     $131 = ($$0|0)>(-1);
     if ($131) {
      $$0144 = $$0;
     } else {
      break;
     }
    }
   }
   $$0119 = HEAP32[$123>>2]|0;
   $124 = ((($$0119)) + 56|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($125|0)==(0|0);
   $127 = ((($$0119)) + 74|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = $128 | 1;
   HEAP8[$127>>0] = $129;
   if ($126) {
    break;
   } else {
    $$0119149 = $$0119;$123 = $124;
   }
  }
  STACKTOP = sp;return;
 }
 _fc_solve_init_locs($3);
 $24 = ((($20)) + 544|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 37672|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($0)) + 196|0);
 dest=$4; src=$28; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $29 = ((($4)) + 80|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($0)) + 1|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = HEAP8[$0>>0]|0;
 $34 = $33&255;
 $35 = ($31<<24>>24)==(0);
 if (!($35)) {
  $$0117139 = 0;
  while(1) {
   $55 = HEAP32[$29>>2]|0;
   $56 = 1 << $$0117139;
   $57 = $55 & $56;
   $58 = ($57|0)==(0);
   if ($58) {
    $59 = $55 | $56;
    HEAP32[$29>>2] = $59;
    $60 = (($4) + ($$0117139<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $$0117139 << 7;
    $63 = (($5) + ($62)|0);
    $64 = HEAP8[$61>>0]|0;
    $65 = $64&255;
    $66 = (($65) + 1)|0;
    _memcpy(($63|0),($61|0),($66|0))|0;
    HEAP32[$60>>2] = $63;
   }
   $67 = (($$0117139) + 1)|0;
   $exitcond153 = ($67|0)==($32|0);
   if ($exitcond153) {
    break;
   } else {
    $$0117139 = $67;
   }
  }
 }
 $36 = ((($0)) + 288|0);
 HEAP32[$36>>2] = $27;
 $37 = HEAP32[$8>>2]|0;
 $38 = $27 << 2;
 $39 = (_realloc($37,$38)|0);
 HEAP32[$8>>2] = $39;
 $40 = ($27|0)==(0);
 L23: do {
  if (!($40)) {
   $41 = ((($25)) + 37668|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($$byval_copy)) + 4|0);
   $44 = (($27) + -1)|0;
   $45 = ($31<<24>>24)==(0);
   $46 = ((($$byval_copy)) + 4|0);
   $47 = ((($6)) + 1|0);
   $48 = ((($6)) + 2|0);
   $49 = ((($6)) + 1|0);
   $50 = ((($6)) + 3|0);
   $51 = ($33<<24>>24)==(0);
   $52 = ((($6)) + 2|0);
   $53 = ((($6)) + 1|0);
   $54 = ((($6)) + 2|0);
   $$0118135 = $42;$$0120134 = 0;
   while(1) {
    $68 = HEAP8[$$0118135>>0]|0;
    HEAP32[$6>>2] = $7;
    $69 = ((($$0118135)) + 4|0);
    $70 = HEAP8[$69>>0]|0;
    L27: do {
     switch ($70<<24>>24) {
     case 2:  {
      L38: do {
       if ($45) {
        $$0123$lcssa = 0;
       } else {
        $$0123128 = 0;
        while(1) {
         $71 = (($4) + ($$0123128<<2)|0);
         $72 = HEAP32[$71>>2]|0;
         $73 = HEAP8[$72>>0]|0;
         $74 = ($73<<24>>24)==(0);
         if (!($74)) {
          $75 = $73&255;
          $76 = (($72) + ($75)|0);
          $77 = HEAP8[$76>>0]|0;
          $78 = ($68<<24>>24)==($77<<24>>24);
          if ($78) {
           $$0123$lcssa = $$0123128;
           break L38;
          }
         }
         $79 = (($$0123128) + 1)|0;
         $80 = ($79>>>0)<($32>>>0);
         if ($80) {
          $$0123128 = $79;
         } else {
          $$0123$lcssa = $79;
          break;
         }
        }
       }
      } while(0);
      if (!($51)) {
       $$0121131 = 0;
       while(1) {
        $81 = (((($4)) + 40|0) + ($$0121131)|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = ($82<<24>>24)==(0);
        if ($83) {
         break;
        }
        $86 = (($$0121131) + 1)|0;
        $87 = ($86>>>0)<($34>>>0);
        if ($87) {
         $$0121131 = $86;
        } else {
         break L27;
        }
       }
       HEAP8[$6>>0] = 1;
       $84 = $$0123$lcssa&255;
       HEAP8[$53>>0] = $84;
       $85 = $$0121131&255;
       HEAP8[$54>>0] = $85;
      }
      break;
     }
     case 1:  {
      _find_card_src_string($$byval_copy,$4,$68,$34,$32);
      $88 = HEAP32[$46>>2]|0;
      $89 = ($88|0)==(0);
      $$ = $89 ? 5 : 4;
      HEAP8[$6>>0] = $$;
      $90 = HEAP32[$$byval_copy>>2]|0;
      $91 = $90&255;
      HEAP8[$47>>0] = $91;
      $92 = $68 & 3;
      HEAP8[$48>>0] = $92;
      break;
     }
     default: {
      $93 = ((($$0118135)) + 6|0);
      $94 = HEAP8[$93>>0]|0;
      _find_card_src_string($$byval_copy,$4,$68,$34,$32);
      $95 = HEAP32[$43>>2]|0;
      $96 = ($95|0)==(0);
      if ($96) {
       HEAP8[$6>>0] = 2;
      } else {
       HEAP8[$6>>0] = 0;
       HEAP8[$50>>0] = 1;
      }
      $97 = HEAP32[$$byval_copy>>2]|0;
      $98 = $97&255;
      HEAP8[$49>>0] = $98;
      $99 = ($94<<24>>24)==(0);
      if ($99) {
       $100 = (_find_empty_col($4,$32)|0);
       $103 = $100;
      } else {
       $101 = (_find_col_card($4,$94,$32)|0);
       $103 = $101;
      }
      $102 = $103&255;
      HEAP8[$52>>0] = $102;
     }
     }
    } while(0);
    ;HEAP8[$$byval_copy>>0]=HEAP8[$6>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$6+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$6+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$6+3>>0]|0;
    _fc_solve_apply_move($4,$3,$$byval_copy,$34,$32);
    $104 = HEAP32[$8>>2]|0;
    $105 = (($44) - ($$0120134))|0;
    $106 = (($104) + ($105<<2)|0);
    $107 = HEAP32[$6>>2]|0;
    HEAP8[$106>>0]=$107&255;HEAP8[$106+1>>0]=($107>>8)&255;HEAP8[$106+2>>0]=($107>>16)&255;HEAP8[$106+3>>0]=$107>>24;
    $108 = (($$0120134) + 1)|0;
    $109 = ((($$0118135)) + 8|0);
    $exitcond = ($108|0)==($27|0);
    if ($exitcond) {
     break L23;
    } else {
     $$0118135 = $109;$$0120134 = $108;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _instance_free_solution_moves($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 284|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 _free($2);
 HEAP32[$1>>2] = 0;
 return;
}
function _fc_solve_init_locs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $1 = ((($0)) + 1|0);
 HEAP8[$1>>0] = 1;
 $2 = ((($0)) + 2|0);
 HEAP8[$2>>0] = 2;
 $3 = ((($0)) + 3|0);
 HEAP8[$3>>0] = 3;
 $4 = ((($0)) + 4|0);
 HEAP8[$4>>0] = 4;
 $5 = ((($0)) + 5|0);
 HEAP8[$5>>0] = 5;
 $6 = ((($0)) + 6|0);
 HEAP8[$6>>0] = 6;
 $7 = ((($0)) + 7|0);
 HEAP8[$7>>0] = 7;
 $8 = ((($0)) + 8|0);
 HEAP8[$8>>0] = 8;
 $9 = ((($0)) + 9|0);
 HEAP8[$9>>0] = 9;
 $10 = ((($0)) + 10|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($0)) + 11|0);
 HEAP8[$11>>0] = 1;
 $12 = ((($0)) + 12|0);
 HEAP8[$12>>0] = 2;
 $13 = ((($0)) + 13|0);
 HEAP8[$13>>0] = 3;
 $14 = ((($0)) + 14|0);
 HEAP8[$14>>0] = 4;
 $15 = ((($0)) + 15|0);
 HEAP8[$15>>0] = 5;
 $16 = ((($0)) + 16|0);
 HEAP8[$16>>0] = 6;
 $17 = ((($0)) + 17|0);
 HEAP8[$17>>0] = 7;
 return;
}
function _find_card_src_string($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink9 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_find_col_card($1,$2,$4)|0);
 $6 = ($5|0)<(0);
 if ($6) {
  $7 = (_find_fc_card($1,$2,$3)|0);
  $$sink = 0;$$sink9 = $7;
 } else {
  $$sink = 1;$$sink9 = $5;
 }
 HEAP32[$0>>2] = $$sink9;
 $8 = ((($0)) + 4|0);
 HEAP32[$8>>2] = $$sink;
 return;
}
function _find_empty_col($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$079 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $9 = -1;
  return ($9|0);
 }
 $$079 = 0;
 while(1) {
  $3 = (($0) + ($$079<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $9 = $$079;
   label = 5;
   break;
  }
  $7 = (($$079) + 1)|0;
  $8 = ($7>>>0)<($1>>>0);
  if ($8) {
   $$079 = $7;
  } else {
   $9 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($9|0);
 }
 return (0)|0;
}
function _find_col_card($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01824 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $14 = -1;
  return ($14|0);
 }
 $$01824 = 0;
 while(1) {
  $4 = (($0) + ($$01824<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if (!($7)) {
   $8 = $6&255;
   $9 = (($5) + ($8)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==($1<<24>>24);
   if ($11) {
    $14 = $$01824;
    label = 6;
    break;
   }
  }
  $12 = (($$01824) + 1)|0;
  $13 = ($12>>>0)<($2>>>0);
  if ($13) {
   $$01824 = $12;
  } else {
   $14 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($14|0);
 }
 return (0)|0;
}
function _fcs_move_stack_push_121($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $4 & 15;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $3 << 2;
  $8 = (($7) + 68)|0;
  $9 = HEAP32[$0>>2]|0;
  $10 = (_realloc($9,$8)|0);
  HEAP32[$0>>2] = $10;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($3<<2)|0);
 $13 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
 HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=($13>>8)&255;HEAP8[$12+2>>0]=($13>>16)&255;HEAP8[$12+3>>0]=$13>>24;
 return;
}
function _find_fc_card($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0810 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $9 = -1;
  return ($9|0);
 }
 $$0810 = 0;
 while(1) {
  $4 = (((($0)) + 40|0) + ($$0810)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==($1<<24>>24);
  if ($6) {
   $9 = $$0810;
   label = 5;
   break;
  }
  $7 = (($$0810) + 1)|0;
  $8 = ($7>>>0)<($2>>>0);
  if ($8) {
   $$0810 = $7;
  } else {
   $9 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($9|0);
 }
 return (0)|0;
}
function _fc_solve_finish_instance($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 _fc_solve_hash_free($1);
 $2 = ((($0)) + 80|0);
 _fc_solve_hash_free($2);
 $3 = ((($0)) + 144|0);
 HEAP32[$3>>2] = 0;
 _fc_solve_foreach_soft_thread($0,0,0);
 return;
}
function _fc_solve_hash_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 _fc_solve_compact_allocator_finish($1);
 $2 = HEAP32[$0>>2]|0;
 _free($2);
 HEAP32[$0>>2] = 0;
 return;
}
function _freecell_solver_set_stored_states_trimming_limit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(2147483647);
 $3 = $2 ? $1 : 2147483647;
 $4 = (_active_obj($0)|0);
 $5 = ((($4)) + 20|0);
 HEAP32[$5>>2] = $3;
 return;
}
function _freecell_solver_user_alloc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(3928)|0);
 _user_initialize($0);
 return ($0|0);
}
function _freecell_solver_user_apply_preset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$04059 = 0, $$04660 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (_fc_solve_get_preset_by_name($1,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$5 = $3;
  STACKTOP = sp;return ($$5|0);
 }
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)<($6>>>0);
 L4: do {
  if ($9) {
   $$04660 = $8;
   L6: while(1) {
    $10 = ((($$04660)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = HEAP32[$$04660>>2]|0;
    $13 = ($12>>>0)<($11>>>0);
    if ($13) {
     $$04059 = $12;
     while(1) {
      $16 = HEAP32[$2>>2]|0;
      $17 = (_fc_solve_apply_preset_by_ptr($$04059,$16)|0);
      $18 = ($17|0)==(0);
      $14 = ((($$04059)) + 400|0);
      if (!($18)) {
       $$5 = $17;
       break L6;
      }
      $15 = ($14>>>0)<($11>>>0);
      if ($15) {
       $$04059 = $14;
      } else {
       break;
      }
     }
    }
    $19 = ((($$04660)) + 40|0);
    $20 = ($19>>>0)<($6>>>0);
    if ($20) {
     $$04660 = $19;
    } else {
     break L4;
    }
   }
   STACKTOP = sp;return ($$5|0);
  }
 } while(0);
 $21 = ((($0)) + 3704|0);
 $22 = HEAP32[$2>>2]|0;
 dest=$21; src=$22; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $$5 = 0;
 STACKTOP = sp;return ($$5|0);
}
function _freecell_solver_user_current_state_as_string($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_malloc(1000)|0);
 _freecell_solver_user_current_state_stringify($0,$4,$1,$2,$3);
 return ($4|0);
}
function _freecell_solver_user_current_state_stringify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_user_obj($0)|0);
 $6 = ((($0)) + 120|0);
 $7 = ((($0)) + 306|0);
 $8 = HEAP8[$5>>0]|0;
 $9 = $8&255;
 $10 = ((($5)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = ((($5)) + 2|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($2|0)!=(0);
 $17 = ($3|0)!=(0);
 $18 = ($4|0)!=(0);
 _fc_solve_state_as_string($1,$6,$7,$9,$12,$15,$16,$17,$18);
 return;
}
function _freecell_solver_user_free($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _user_free_resources($0);
 _free($0);
 return;
}
function _freecell_solver_user_get_current_depth($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_api_soft_thread($0)|0);
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _freecell_solver_user_get_current_soft_thread_name($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_active_obj($0)|0);
 $2 = ((($1)) + 156|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (((($5) + (($7*552)|0)|0)) + 532|0);
 return ($8|0);
}
function _freecell_solver_user_get_invalid_state_error_into_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $4 = ((($0)) + 332|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 0:  {
  HEAP8[$1>>0] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  dest=$1; src=12976; stop=dest+44|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
  break;
 }
 case 2: case 1:  {
  $6 = ((($0)) + 336|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($2|0)!=(0);
  _fc_solve_card_stringify($7,$3,$8);
  $9 = ($5|0)==(2);
  $10 = $9 ? 13020 : 13044;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  (_sprintf($1,13069,$vararg_buffer)|0);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  dest=$1; src=13075; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _freecell_solver_user_get_invalid_state_error_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_malloc(80)|0);
 _freecell_solver_user_get_invalid_state_error_into_string($0,$2,$1);
 return ($2|0);
}
function _freecell_solver_user_get_last_error_string($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 3800|0);
 return ($1|0);
}
function _freecell_solver_user_get_lib_version($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (12970|0);
}
function _freecell_solver_user_get_limit_iterations($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_active_obj($0)|0);
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _freecell_solver_user_get_max_num_decks() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function _freecell_solver_user_get_max_num_freecells() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 8;
}
function _freecell_solver_user_get_max_num_stacks() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 10;
}
function _freecell_solver_user_get_moves_left($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 324|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_calc_moves_flare($0)|0);
 $5 = ((($4)) + 352|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 348|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) - ($8))|0;
 $$0 = $9;
 return ($$0|0);
}
function _freecell_solver_user_get_moves_sequence($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 324|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = (_SINGLE_FLARE($0)|0);
 $6 = ((($5)) + 356|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 352|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$1>>2] = $9;
 $10 = $9 << 2;
 $11 = (_memdup_246($7,$10)|0);
 $12 = ((($1)) + 4|0);
 HEAP32[$12>>2] = $11;
 $$0 = 0;
 return ($$0|0);
}
function _freecell_solver_user_get_next_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 4|0;
 $2 = sp;
 $3 = ((($0)) + 324|0);
 $4 = HEAP32[$3>>2]|0;
 switch ($4|0) {
 case 5: case 0:  {
  break;
 }
 default: {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 }
 $5 = (_calc_moves_flare($0)|0);
 $6 = ((($5)) + 348|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 352|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)==($9|0);
 if ($10) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $11 = (_user_obj($0)|0);
 $12 = ((($0)) + 120|0);
 $13 = ((($5)) + 356|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($7) + 1)|0;
 HEAP32[$6>>2] = $15;
 $16 = (($14) + ($7<<2)|0);
 $17 = HEAPU8[$16>>0]|(HEAPU8[$16+1>>0]<<8)|(HEAPU8[$16+2>>0]<<16)|(HEAPU8[$16+3>>0]<<24);
 HEAP8[$1>>0]=$17&255;HEAP8[$1+1>>0]=($17>>8)&255;HEAP8[$1+2>>0]=($17>>16)&255;HEAP8[$1+3>>0]=$17>>24;
 HEAP32[$2>>2] = $17;
 $18 = HEAP8[$11>>0]|0;
 $19 = $18&255;
 $20 = ((($11)) + 1|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 ;HEAP8[$tmpcast$byval_copy>>0]=HEAP8[$2>>0]|0;HEAP8[$tmpcast$byval_copy+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$tmpcast$byval_copy+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$tmpcast$byval_copy+3>>0]=HEAP8[$2+3>>0]|0;
 _fc_solve_apply_move($12,0,$tmpcast$byval_copy,$19,$22);
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function _freecell_solver_user_get_num_freecells($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 3716|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 return ($3|0);
}
function _freecell_solver_user_get_num_soft_threads_in_instance($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_active_obj($0)|0);
 $2 = ((($1)) + 192|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _freecell_solver_user_get_num_stacks($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 3717|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 return ($3|0);
}
function _freecell_solver_user_get_num_states_in_collection($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_freecell_solver_user_get_num_states_in_collection_long($0)|0);
 return ($1|0);
}
function _freecell_solver_user_get_num_states_in_collection_long($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 376|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2))|0;
 $8 = ((($0)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 return ($10|0);
}
function _freecell_solver_user_get_num_times($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_freecell_solver_user_get_num_times_long($0)|0);
 return ($1|0);
}
function _freecell_solver_user_get_num_times_long($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 372|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_user_obj($0)|0);
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)>($9|0);
 $11 = $10 ? $6 : $9;
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($2) - ($13))|0;
 $15 = (($14) + ($11))|0;
 return ($15|0);
}
function _freecell_solver_user_iter_state_as_string($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_malloc(1000)|0);
 _freecell_solver_user_iter_state_stringify($0,$5,$1,$2,$3,$4);
 return ($5|0);
}
function _freecell_solver_user_iter_state_stringify($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (_active_obj($0)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($2)) + 4|0);
 $9 = HEAP8[$6>>0]|0;
 $10 = $9&255;
 $11 = ((($6)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((($6)) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ($3|0)!=(0);
 $18 = ($4|0)!=(0);
 $19 = ($5|0)!=(0);
 _fc_solve_state_as_string($1,$7,$8,$10,$13,$16,$17,$18,$19);
 return;
}
function _freecell_solver_user_limit_current_instance_iterations($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_curr_inst($0)|0);
 $3 = ((($2)) + 36|0);
 HEAP32[$3>>2] = $1;
 return;
}
function _freecell_solver_user_limit_depth($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _freecell_solver_user_limit_iterations($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _freecell_solver_user_limit_iterations_long($0,$1);
 return;
}
function _freecell_solver_user_limit_iterations_long($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _freecell_solver_user_limit_num_states_in_collection($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _freecell_solver_user_limit_num_states_in_collection_long($0,$1);
 return;
}
function _freecell_solver_user_limit_num_states_in_collection_long($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(2147483647);
 $3 = $2 ? $1 : 2147483647;
 $4 = (_active_obj($0)|0);
 $5 = ((($4)) + 16|0);
 HEAP32[$5>>2] = $3;
 return;
}
function _freecell_solver_user_move_to_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = (_malloc(256)|0);
 $3 = ($1|0)==(2);
 $4 = $3 ? 1 : $1;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$0+3>>0]|0;
 _fc_solve_move_to_string_w_state($2,0,$$byval_copy,$4);
 STACKTOP = sp;return ($2|0);
}
function _freecell_solver_user_move_to_string_w_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $3 = (_malloc(256)|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
 _freecell_solver_user_stringify_move_w_state($0,$3,$$byval_copy,$2);
 STACKTOP = sp;return ($3|0);
}
function _freecell_solver_user_next_flare($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _user_next_flare($0);
 return 0;
}
function _freecell_solver_user_next_hard_thread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_user_obj($0)|0);
 $2 = (_new_hard_thread($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ((($0)) + 368|0);
 HEAP32[$4>>2] = $2;
 $$0 = 0;
 return ($$0|0);
}
function _freecell_solver_user_next_instance($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _user_next_instance($0);
 return 0;
}
function _freecell_solver_user_next_soft_thread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 368|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_fc_solve_new_soft_thread($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 1;
  return ($$0|0);
 }
 HEAP32[$1>>2] = $4;
 $$0 = 0;
 return ($$0|0);
}
function _freecell_solver_user_recycle($0) {
 $0 = $0|0;
 var $$014 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $$014 = $4;
  while(1) {
   _recycle_instance($0,$$014);
   $11 = ((($$014)) + 40|0);
   $12 = ($11>>>0)<($2>>>0);
   if ($12) {
    $$014 = $11;
   } else {
    break;
   }
  }
 }
 $6 = ((($0)) + 16|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 return;
}
function _freecell_solver_user_reset($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _user_free_resources($0);
 _user_initialize($0);
 return 0;
}
function _freecell_solver_user_resume_solution($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_resume_solution($0)|0);
 return ($1|0);
}
function _freecell_solver_user_set_a_star_weight($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(5);
 if ($3) {
  $$0 = 1;
 } else {
  $4 = $2 < 0.0;
  if ($4) {
   $$0 = 2;
  } else {
   $5 = (_api_soft_thread($0)|0);
   $6 = (((($5)) + 464|0) + ($1<<3)|0);
   HEAPF64[$6>>3] = $2;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _freecell_solver_user_set_calc_real_depth($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)!=(0);
 $3 = (_active_obj($0)|0);
 $4 = ((($3)) + 132|0);
 $5 = $2&1;
 HEAP8[$4>>0] = $5;
 return;
}
function _freecell_solver_user_set_depth_tests_order($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$048 = 0, $$049$lcssa = 0, $$04951 = 0, $$050 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp;
 $5 = (_api_soft_thread($0)|0);
 $6 = ($1|0)<(0);
 if ($6) {
  $7 = (___strdup(12877)|0);
  HEAP32[$3>>2] = $7;
  $$048 = 1;
  STACKTOP = sp;return ($$048|0);
 }
 $8 = ($1|0)==(0);
 if ($8) {
  $$1 = 0;
 } else {
  $9 = ((($5)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(1);
  L7: do {
   if ($11) {
    $$049$lcssa = 0;
   } else {
    $12 = ((($5)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $$04951 = 0;
    while(1) {
     $14 = (($13) + (($$04951*12)|0)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)<($1|0);
     if (!($16)) {
      $$049$lcssa = $$04951;
      break L7;
     }
     $17 = (($$04951) + 1)|0;
     $18 = HEAP32[$9>>2]|0;
     $19 = (($18) + -1)|0;
     $20 = ($17|0)==($19|0);
     if ($20) {
      $$049$lcssa = $17;
      break;
     } else {
      $$04951 = $17;
     }
    }
   }
  } while(0);
  $21 = (($$049$lcssa) + 1)|0;
  $$1 = $21;
 }
 $22 = ((($5)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($$1|0)==($23|0);
 if ($24) {
  $25 = ((($5)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($23) + 1)|0;
  HEAP32[$22>>2] = $27;
  $28 = ($27*12)|0;
  $29 = (_realloc($26,$28)|0);
  HEAP32[$25>>2] = $29;
  $30 = (((($29) + (($$1*12)|0)|0)) + 4|0);
  HEAP32[$30>>2] = 0;
  $31 = HEAP32[$25>>2]|0;
  $32 = (((($31) + (($$1*12)|0)|0)) + 8|0);
  HEAP32[$32>>2] = 0;
 }
 $33 = ($$1|0)==(0);
 if (!($33)) {
  $34 = (($$1) + -1)|0;
  $35 = ((($5)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + (($34*12)|0)|0);
  HEAP32[$37>>2] = $1;
 }
 $38 = ((($5)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + (($$1*12)|0)|0);
 HEAP32[$40>>2] = 2147483647;
 $41 = (((($39) + (($$1*12)|0)|0)) + 4|0);
 $42 = (_fc_solve_apply_moves_order($41,$2,$4)|0);
 $43 = HEAP8[$4>>0]|0;
 $44 = ($43<<24>>24)==(0);
 if ($44) {
  $46 = 0;
 } else {
  $45 = (___strdup($4)|0);
  $46 = $45;
 }
 HEAP32[$3>>2] = $46;
 $47 = (($$1) + 1)|0;
 $48 = HEAP32[$22>>2]|0;
 $49 = ($47>>>0)<($48>>>0);
 if ($49) {
  $$050 = $47;
  while(1) {
   $53 = HEAP32[$38>>2]|0;
   $54 = (((($53) + (($$050*12)|0)|0)) + 4|0);
   _moves_order__free_228($54);
   $55 = (($$050) + 1)|0;
   $56 = HEAP32[$22>>2]|0;
   $57 = ($55>>>0)<($56>>>0);
   if ($57) {
    $$050 = $55;
   } else {
    break;
   }
  }
 }
 $50 = HEAP32[$38>>2]|0;
 HEAP32[$22>>2] = $47;
 $51 = ($47*12)|0;
 $52 = (_realloc($50,$51)|0);
 HEAP32[$38>>2] = $52;
 $$048 = $42;
 STACKTOP = sp;return ($$048|0);
}
function _freecell_solver_user_set_empty_stacks_filled_by($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(2);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ((($0)) + 3719|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & -13;
 $6 = $1 << 2;
 $7 = $5&255;
 $8 = $6 | $7;
 $9 = $8&255;
 HEAP8[$3>>0] = $9;
 _apply_game_params_for_all_instances($0);
 $$0 = 0;
 return ($$0|0);
}
function _freecell_solver_user_set_flare_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_curr_inst($0)|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -83|0);
 (_strncpy($5,$1,30)|0);
 $6 = ((($4)) + -54|0);
 HEAP8[$6>>0] = 0;
 return;
}
function _freecell_solver_user_set_flares_choice($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$sink = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strcmp($1,12862)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$sink = 0;
 } else {
  $4 = (_strcmp($1,12871)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$sink = 1;
  } else {
   $$0 = -1;
   return ($$0|0);
  }
 }
 $6 = ((($0)) + 352|0);
 HEAP32[$6>>2] = $$sink;
 $$0 = 0;
 return ($$0|0);
}
function _freecell_solver_user_set_flares_iters_factor($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 360|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function _freecell_solver_user_set_flares_plan($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_curr_inst($0)|0);
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = ($1|0)==(0|0);
 if ($5) {
  $7 = 0;
 } else {
  $6 = (___strdup($1)|0);
  $7 = $6;
 }
 HEAP32[$3>>2] = $7;
 $8 = ((($2)) + 32|0);
 HEAP8[$8>>0] = 0;
 return 0;
}
function _freecell_solver_user_set_game($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (_freecell_solver_user_set_num_freecells($0,$1)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = 1;
  return ($$0|0);
 }
 $9 = (_freecell_solver_user_set_num_stacks($0,$2)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = 2;
  return ($$0|0);
 }
 $11 = (_freecell_solver_user_set_num_decks($0,$3)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = 3;
  return ($$0|0);
 }
 $13 = (_freecell_solver_user_set_sequences_are_built_by_type($0,$4)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  (_freecell_solver_user_set_sequence_move($0,$5)|0);
  $15 = (_freecell_solver_user_set_empty_stacks_filled_by($0,$6)|0);
  $16 = ($15|0)==(0);
  $spec$select = $16 ? 0 : 6;
  return ($spec$select|0);
 } else {
  $$0 = 4;
  return ($$0|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_hard_thread_prelude($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 368|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 1352|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = (___strdup($1)|0);
 HEAP32[$5>>2] = $7;
 return 0;
}
function _freecell_solver_user_set_iter_handler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _set_any_iter_handler($0,0,$1,$2);
 return;
}
function _freecell_solver_user_set_iter_handler_long($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _set_any_iter_handler($0,$1,0,$2);
 return;
}
function _freecell_solver_user_set_num_decks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(2);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = $1&255;
 $4 = ((($0)) + 3718|0);
 HEAP8[$4>>0] = $3;
 _apply_game_params_for_all_instances($0);
 $$0 = 0;
 return ($$0|0);
}
function _freecell_solver_user_set_num_freecells($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(8);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = $1&255;
 $4 = ((($0)) + 3716|0);
 HEAP8[$4>>0] = $3;
 _apply_game_params_for_all_instances($0);
 $$0 = 0;
 return ($$0|0);
}
function _freecell_solver_user_set_num_stacks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(10);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = $1&255;
 $4 = ((($0)) + 3717|0);
 HEAP8[$4>>0] = $3;
 _apply_game_params_for_all_instances($0);
 $$0 = 0;
 return ($$0|0);
}
function _freecell_solver_user_set_optimization_scan_tests_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 $4 = (_active_obj($0)|0);
 $5 = ((($4)) + 176|0);
 _moves_order__free_228($5);
 $6 = ((($4)) + 138|0);
 HEAP8[$6>>0] = 0;
 $7 = (_fc_solve_apply_moves_order($5,$1,$3)|0);
 $8 = HEAP8[$3>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $11 = 0;
 } else {
  $10 = (___strdup($3)|0);
  $11 = $10;
 }
 HEAP32[$2>>2] = $11;
 $12 = ($7|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return ($7|0);
 }
 HEAP8[$6>>0] = 1;
 STACKTOP = sp;return ($7|0);
}
function _freecell_solver_user_set_patsolve_x_param($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_api_soft_thread($0)|0);
 $5 = ((($4)) + 544|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (___strdup(12808)|0);
  HEAP32[$3>>2] = $8;
  $$0 = 1;
  return ($$0|0);
 }
 $9 = ($1>>>0)>(10);
 if ($9) {
  $10 = (___strdup(12839)|0);
  HEAP32[$3>>2] = $10;
  $$0 = 2;
  return ($$0|0);
 } else {
  $11 = (((($6)) + 2800|0) + ($1<<2)|0);
  HEAP32[$11>>2] = $2;
  _fc_solve_pats__set_cut_off($6);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_patsolve_y_param($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_api_soft_thread($0)|0);
 $5 = ((($4)) + 544|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (___strdup(12808)|0);
  HEAP32[$3>>2] = $8;
  $$0 = 1;
  return ($$0|0);
 }
 $9 = ($1>>>0)>(2);
 if ($9) {
  $10 = (___strdup(12839)|0);
  HEAP32[$3>>2] = $10;
  $$0 = 2;
  return ($$0|0);
 } else {
  $11 = (((($6)) + 2848|0) + ($1<<3)|0);
  HEAPF64[$11>>3] = $2;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_pruning($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_api_soft_thread($0)|0);
 $4 = (_strcmp($1,12754)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($3)) + 542|0);
  HEAP8[$6>>0] = 1;
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP8[$1>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $9 = ((($3)) + 542|0);
  HEAP8[$9>>0] = 0;
  $$0 = 0;
  return ($$0|0);
 } else {
  $10 = (___strdup(12759)|0);
  HEAP32[$2>>2] = $10;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_random_seed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_api_soft_thread($0)|0);
 $3 = ((($2)) + 40|0);
 HEAP32[$3>>2] = $1;
 return;
}
function _freecell_solver_user_set_reparent_states($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)!=(0);
 $3 = (_active_obj($0)|0);
 $4 = ((($3)) + 135|0);
 $5 = $2&1;
 HEAP8[$4>>0] = $5;
 return;
}
function _freecell_solver_user_set_scans_synergy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)!=(0);
 $3 = (_active_obj($0)|0);
 $4 = ((($3)) + 134|0);
 $5 = $2&1;
 HEAP8[$4>>0] = $5;
 return;
}
function _freecell_solver_user_set_sequence_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 3719|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & -17;
 $5 = ($1|0)!=(0);
 $6 = $5&1;
 $7 = $6 << 4;
 $8 = $4&255;
 $9 = $7 | $8;
 $10 = $9&255;
 HEAP8[$2>>0] = $10;
 _apply_game_params_for_all_instances($0);
 return 0;
}
function _freecell_solver_user_set_sequences_are_built_by_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(2);
 if ($2) {
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ((($0)) + 3719|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & -4;
 $6 = $5&255;
 $7 = $6 | $1;
 $8 = $7&255;
 HEAP8[$3>>0] = $8;
 _apply_game_params_for_all_instances($0);
 $$0 = 0;
 return ($$0|0);
}
function _freecell_solver_user_set_soft_thread_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_api_soft_thread($0)|0);
 $3 = ((($2)) + 532|0);
 (_strncpy($3,$1,10)|0);
 $4 = ((($2)) + 541|0);
 HEAP8[$4>>0] = 0;
 return;
}
function _freecell_solver_user_set_soft_thread_step($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_api_soft_thread($0)|0);
 $3 = ((($2)) + 528|0);
 HEAP32[$3>>2] = $1;
 return;
}
function _freecell_solver_user_set_solution_optimization($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)!=(0);
 $3 = (_active_obj($0)|0);
 $4 = ((($3)) + 136|0);
 $5 = $2&1;
 HEAP8[$4>>0] = $5;
 return;
}
function _freecell_solver_user_set_solving_method($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$tr21$lcssa23 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $phitmp24 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 $2 = (_api_soft_thread($0)|0);
 switch ($1|0) {
 case 0:  {
  $$tr21$lcssa23 = 0;
  label = 5;
  break;
 }
 case 2:  {
  $3 = ((($2)) + 549|0);
  HEAP8[$3>>0] = 0;
  $$0 = 1;
  break;
 }
 case 3:  {
  $4 = ((($2)) + 549|0);
  HEAP8[$4>>0] = 1;
  $$0 = 1;
  break;
 }
 case 1: case 5:  {
  $phitmp = ($1|0)==(5);
  $phitmp24 = $phitmp&1;
  $$tr21$lcssa23 = $phitmp24;
  label = 5;
  break;
 }
 case 6:  {
  $6 = ((($2)) + 544|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = (_malloc(37696)|0);
   HEAP32[$6>>2] = $9;
   $10 = HEAP32[$2>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   _fc_solve_pats__init_soft_thread($9,$11);
   $12 = ((($9)) + 35648|0);
   HEAP8[$12>>0] = 1;
   $13 = ((($9)) + 2800|0);
   dest=$13; src=4560; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   _fc_solve_pats__set_cut_off($9);
   $$0 = 2;
  } else {
   $$0 = 2;
  }
  break;
 }
 default: {
  $$0 = 1;
 }
 }
 if ((label|0) == 5) {
  $5 = ((($2)) + 548|0);
  HEAP8[$5>>0] = $$tr21$lcssa23;
  $$0 = 0;
 }
 $14 = ((($2)) + 16|0);
 HEAP32[$14>>2] = $$0;
 return;
}
function _freecell_solver_user_set_tests_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_freecell_solver_user_set_depth_tests_order($0,0,$1,$2)|0);
 return ($3|0);
}
function _freecell_solver_user_solve_board($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$05458 = 0, $$05567 = 0, $$05659 = 0, $$05763 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 1652|0);
 $3 = (_duplicate_string_while_adding_a_trailing_newline($2,$1)|0);
 if (!($3)) {
  $$0 = 4;
  return ($$0|0);
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $$cast = $5;
 $8 = ($7>>>0)>($$cast>>>0);
 if ($8) {
  $9 = ((($0)) + 3704|0);
  $$05567 = $$cast;
  while(1) {
   $12 = ((($$05567)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$$05567>>2]|0;
   $15 = ($14>>>0)<($13>>>0);
   if ($15) {
    $$05763 = $14;
    while(1) {
     (_fc_solve_apply_preset_by_ptr($$05763,$9)|0);
     $18 = ((($$05763)) + 400|0);
     $19 = ($18>>>0)<($13>>>0);
     if ($19) {
      $$05763 = $18;
     } else {
      break;
     }
    }
   }
   $16 = ((($$05567)) + 40|0);
   $17 = ($16>>>0)<($7>>>0);
   if ($17) {
    $$05567 = $16;
   } else {
    break;
   }
  }
 }
 $10 = (_user_compile_all_flares_plans($0)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = 12;
  return ($$0|0);
 }
 $20 = HEAP32[$6>>2]|0;
 $21 = HEAP32[$4>>2]|0;
 $22 = ($21>>>0)<($20>>>0);
 if ($22) {
  $$05659 = $21;
  while(1) {
   $24 = ((($$05659)) + 20|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($$05659)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($25|0)==(0);
   if (!($28)) {
    $$05458 = 0;
    while(1) {
     $31 = (((($27) + (($$05458*20)|0)|0)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (((($27) + (($$05458*20)|0)|0)) + 8|0);
     HEAP32[$33>>2] = $32;
     $34 = (($$05458) + 1)|0;
     $exitcond = ($34|0)==($25|0);
     if ($exitcond) {
      break;
     } else {
      $$05458 = $34;
     }
    }
   }
   $29 = ((($$05659)) + 40|0);
   $30 = ($29>>>0)<($20>>>0);
   if ($30) {
    $$05659 = $29;
   } else {
    break;
   }
  }
 }
 $23 = (_freecell_solver_user_resume_solution($0)|0);
 $$0 = $23;
 return ($$0|0);
}
function _freecell_solver_user_stringify_move_w_state($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $4 = ((($0)) + 120|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$2+3>>0]|0;
 _fc_solve_move_to_string_w_state($1,$4,$$byval_copy,$3);
 STACKTOP = sp;return;
}
function _fc_solve_move_to_string_w_state($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0;
 var $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer51 = sp + 128|0;
 $vararg_buffer48 = sp + 120|0;
 $vararg_buffer45 = sp + 112|0;
 $vararg_buffer42 = sp + 104|0;
 $vararg_buffer39 = sp + 96|0;
 $vararg_buffer36 = sp + 88|0;
 $vararg_buffer32 = sp + 80|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer24 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = HEAP8[$2>>0]|0;
 switch ($4<<24>>24) {
 case 0:  {
  switch ($3|0) {
  case 2:  {
   label = 3;
   break;
  }
  case 0:  {
   $29 = ((($2)) + 3|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = ((($2)) + 1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ((($2)) + 2|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   HEAP32[$vararg_buffer7>>2] = $31;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $34;
   $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
   HEAP32[$vararg_ptr11>>2] = $37;
   (_sprintf($0,12117,$vararg_buffer7)|0);
   STACKTOP = sp;return;
   break;
  }
  default: {
  }
  }
  if ((label|0) == 3) {
   $5 = ((($2)) + 3|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = ($6&255)>(1);
   if ($8) {
    $9 = ((($2)) + 2|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = (($1) + ($11<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==($6<<24>>24);
    if ($15) {
     $16 = ((($2)) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (($18) + 1)|0;
     $20 = (($11) + 1)|0;
     HEAP32[$vararg_buffer>>2] = $19;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $20;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $7;
     (_sprintf($0,12104,$vararg_buffer)|0);
     STACKTOP = sp;return;
    }
   }
  }
  $21 = ((($2)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = (($23) + 1)|0;
  $25 = ((($2)) + 2|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (($27) + 1)|0;
  HEAP32[$vararg_buffer3>>2] = $24;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $28;
  (_sprintf($0,12112,$vararg_buffer3)|0);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $38 = ($3|0)==(0);
  $39 = ((($2)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  if ($38) {
   $48 = ((($2)) + 2|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   HEAP32[$vararg_buffer16>>2] = $41;
   $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
   HEAP32[$vararg_ptr19>>2] = $50;
   (_sprintf($0,12162,$vararg_buffer16)|0);
   STACKTOP = sp;return;
  } else {
   $42 = (_fc_solve__freecell_to_char($41)|0);
   $43 = $42 << 24 >> 24;
   $44 = ((($2)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = (($46) + 1)|0;
   HEAP32[$vararg_buffer12>>2] = $43;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $47;
   (_sprintf($0,12157,$vararg_buffer12)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 3:  {
  $51 = ($3|0)==(0);
  $52 = ((($2)) + 1|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  if ($51) {
   $62 = ((($2)) + 2|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   HEAP32[$vararg_buffer24>>2] = $54;
   $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
   HEAP32[$vararg_ptr27>>2] = $64;
   (_sprintf($0,12208,$vararg_buffer24)|0);
   STACKTOP = sp;return;
  } else {
   $55 = (_fc_solve__freecell_to_char($54)|0);
   $56 = $55 << 24 >> 24;
   $57 = ((($2)) + 2|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (_fc_solve__freecell_to_char($59)|0);
   $61 = $60 << 24 >> 24;
   HEAP32[$vararg_buffer20>>2] = $56;
   $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
   HEAP32[$vararg_ptr23>>2] = $61;
   (_sprintf($0,12203,$vararg_buffer20)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  $65 = ($3|0)==(0);
  $66 = ((($2)) + 1|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  if ($65) {
   $75 = ((($2)) + 2|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   HEAP32[$vararg_buffer32>>2] = $68;
   $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
   HEAP32[$vararg_ptr35>>2] = $77;
   (_sprintf($0,12257,$vararg_buffer32)|0);
   STACKTOP = sp;return;
  } else {
   $69 = (($68) + 1)|0;
   $70 = ((($2)) + 2|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = (_fc_solve__freecell_to_char($72)|0);
   $74 = $73 << 24 >> 24;
   HEAP32[$vararg_buffer28>>2] = $69;
   $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
   HEAP32[$vararg_ptr31>>2] = $74;
   (_sprintf($0,12252,$vararg_buffer28)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $78 = ($3|0)==(0);
  $79 = ((($2)) + 1|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  if ($78) {
   HEAP32[$vararg_buffer39>>2] = $81;
   (_sprintf($0,12302,$vararg_buffer39)|0);
   STACKTOP = sp;return;
  } else {
   $82 = (($81) + 1)|0;
   HEAP32[$vararg_buffer36>>2] = $82;
   (_sprintf($0,12298,$vararg_buffer36)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 5:  {
  $83 = ($3|0)==(0);
  $84 = ((($2)) + 1|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  if ($83) {
   HEAP32[$vararg_buffer45>>2] = $86;
   (_sprintf($0,12351,$vararg_buffer45)|0);
   STACKTOP = sp;return;
  } else {
   $87 = (_fc_solve__freecell_to_char($86)|0);
   $88 = $87 << 24 >> 24;
   HEAP32[$vararg_buffer42>>2] = $88;
   (_sprintf($0,12347,$vararg_buffer42)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 11:  {
  $89 = ($3|0)==(0);
  $90 = ((($2)) + 1|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  if ($89) {
   HEAP32[$vararg_buffer51>>2] = $92;
   (_sprintf($0,12399,$vararg_buffer51)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer48>>2] = $92;
   (_sprintf($0,12298,$vararg_buffer48)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  HEAP8[$0>>0] = 0;
  STACKTOP = sp;return;
 }
 }
}
function _fc_solve__freecell_to_char($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_fc_solve_move__convert_freecell_num($0)|0);
 $2 = (($1) + 97)|0;
 $3 = $2&255;
 return ($3|0);
}
function _fc_solve_move__convert_freecell_num($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)>(6);
 $2 = (($0) + 3)|0;
 $3 = $1 ? $2 : $0;
 return ($3|0);
}
function _duplicate_string_while_adding_a_trailing_newline($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP8[$0>>0] = 10;
  $11 = ((($0)) + 1|0);
  HEAP8[$11>>0] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ($2>>>0)>(2044);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 (_strcpy($0,$1)|0);
 $5 = (($0) + ($2)|0);
 $6 = ((($5)) + -1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(10);
 if ($8) {
  $$0 = 1;
  return ($$0|0);
 }
 $9 = ((($6)) + 1|0);
 HEAP8[$9>>0] = 10;
 $10 = ((($9)) + 1|0);
 HEAP8[$10>>0] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _user_compile_all_flares_plans($0) {
 $0 = $0|0;
 var $$0143185 = 0, $$0144196 = 0, $$0153187 = 0, $$0162 = 0, $$0164191 = 0, $$10 = 0, $$2156 = 0, $$4158 = 0, $$sink = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $exitcond = 0, $isdigit = 0, $isdigittmp = 0, $strchr = 0, $strchr166 = 0, $strlen = 0, $strlen165 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 20|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)<($4>>>0);
 L1: do {
  if ($7) {
   $$0144196 = $6;
   L3: while(1) {
    $8 = ((($$0144196)) + 32|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $11 = HEAP32[$$0144196>>2]|0;
     $12 = ((($$0144196)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($$0144196)) + 28|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     do {
      if ($16) {
       label = 6;
      } else {
       $17 = HEAP8[$15>>0]|0;
       $18 = ($17<<24>>24)==(0);
       if ($18) {
        label = 6;
       } else {
        $27 = ((($$0144196)) + 16|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = ($28|0)==(0|0);
        if (!($29)) {
         _free($28);
         HEAP32[$27>>2] = 0;
         $30 = ((($$0144196)) + 20|0);
         HEAP32[$30>>2] = 0;
        }
        $$0162 = $15;
        while(1) {
         $31 = (_strchr($$0162,58)|0);
         $32 = ($31|0)==(0|0);
         if ($32) {
          label = 13;
          break L3;
         }
         $34 = (_string_starts_with($$0162,12491,$31)|0);
         do {
          if ($34) {
           $35 = ((($31)) + 1|0);
           $36 = (_atoi($35)|0);
           $37 = HEAP8[$35>>0]|0;
           $38 = ($37<<24>>24)==(0);
           if ($38) {
            label = 20;
            break L3;
           }
           $$0164191 = $35;$40 = $37;
           while(1) {
            $39 = $40 << 24 >> 24;
            $isdigittmp = (($39) + -48)|0;
            $isdigit = ($isdigittmp>>>0)<(10);
            if (!($isdigit)) {
             break;
            }
            $41 = ((($$0164191)) + 1|0);
            $42 = HEAP8[$41>>0]|0;
            $43 = ($42<<24>>24)==(0);
            if ($43) {
             label = 20;
             break L3;
            } else {
             $$0164191 = $41;$40 = $42;
            }
           }
           $44 = ($40<<24>>24)==(64);
           if (!($44)) {
            label = 20;
            break L3;
           }
           $46 = ((($$0164191)) + 1|0);
           $47 = (_strchr($46,44)|0);
           $48 = ($47|0)==(0|0);
           if ($48) {
            $strlen165 = (_strlen($46)|0);
            $strchr166 = (($46) + ($strlen165)|0);
            $$2156 = $strchr166;
           } else {
            $$2156 = $47;
           }
           $49 = $$2156;
           $50 = $46;
           $51 = (($49) - ($50))|0;
           $52 = (_find_flare($11,$13,$46,$51)|0);
           $53 = ($52|0)==(0|0);
           if ($53) {
            label = 24;
            break L3;
           }
           _add_to_plan($$0144196,1,$52,$36);
           $$4158 = $$2156;
          } else {
           $55 = (_string_starts_with($$0162,12588,$31)|0);
           if ($55) {
            $56 = ((($31)) + 1|0);
            $57 = HEAP8[$56>>0]|0;
            switch ($57<<24>>24) {
            case 0: case 44:  {
             break;
            }
            default: {
             label = 28;
             break L3;
            }
            }
            _add_checkpoint_to_plan($$0144196);
            $$4158 = $56;
            break;
           }
           $59 = (_string_starts_with($$0162,12627,$31)|0);
           if (!($59)) {
            label = 36;
            break L3;
           }
           $60 = ((($31)) + 1|0);
           $61 = (_strchr($60,44)|0);
           $62 = ($61|0)==(0|0);
           if (!($62)) {
            label = 32;
            break L3;
           }
           $strlen = (_strlen($60)|0);
           $64 = (_find_flare($11,$13,$60,$strlen)|0);
           $65 = ($64|0)==(0|0);
           if ($65) {
            label = 35;
            break L3;
           }
           $strchr = (($60) + ($strlen)|0);
           _add_to_plan($$0144196,0,$64,-1);
           $$4158 = $strchr;
          }
         } while(0);
         $68 = ((($$4158)) + 1|0);
         $69 = HEAP8[$$4158>>0]|0;
         $70 = ($69<<24>>24)==(0);
         if ($70) {
          break;
         } else {
          $$0162 = $68;
         }
        }
        $71 = HEAP32[$27>>2]|0;
        $72 = ($71|0)==(0|0);
        if (!($72)) {
         $73 = ((($$0144196)) + 20|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (($74) + -1)|0;
         $76 = (((($71) + (($75*20)|0)|0)) + 4|0);
         $77 = HEAP32[$76>>2]|0;
         $78 = ($77|0)==(2);
         if ($78) {
          break;
         }
        }
        _add_checkpoint_to_plan($$0144196);
       }
      }
     } while(0);
     if ((label|0) == 6) {
      label = 0;
      $19 = ((($$0144196)) + 16|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)==(0|0);
      if (!($21)) {
       _free($20);
      }
      $22 = ((($$0144196)) + 20|0);
      HEAP32[$22>>2] = 2;
      $23 = (_malloc(40)|0);
      HEAP32[$19>>2] = $23;
      $24 = HEAP32[$$0144196>>2]|0;
      _create_plan_item($1,0,$24,-1);
      ;HEAP32[$23>>2]=HEAP32[$1>>2]|0;HEAP32[$23+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$23+16>>2]=HEAP32[$1+16>>2]|0;
      $25 = HEAP32[$19>>2]|0;
      $26 = ((($25)) + 20|0);
      _create_plan_item($2,2,0,-1);
      ;HEAP32[$26>>2]=HEAP32[$2>>2]|0;HEAP32[$26+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$26+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$26+16>>2]=HEAP32[$2+16>>2]|0;
     }
     HEAP8[$8>>0] = 1;
    }
    $79 = ((($$0144196)) + 40|0);
    $80 = ($79>>>0)<($4>>>0);
    if ($80) {
     $$0144196 = $79;
    } else {
     break L1;
    }
   }
   if ((label|0) == 13) {
    $33 = ((($0)) + 3800|0);
    dest=$33; src=12455; stop=dest+36|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$10 = 1;
    STACKTOP = sp;return ($$10|0);
   }
   else if ((label|0) == 20) {
    $45 = ((($0)) + 3800|0);
    dest=$45; src=12495; stop=dest+73|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$10 = 2;
    STACKTOP = sp;return ($$10|0);
   }
   else if ((label|0) == 24) {
    $54 = ((($0)) + 3800|0);
    dest=$54; src=12568; stop=dest+20|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$10 = 3;
    STACKTOP = sp;return ($$10|0);
   }
   else if ((label|0) == 28) {
    $58 = ((($0)) + 3800|0);
    dest=$58; src=12591; stop=dest+36|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$10 = 4;
    STACKTOP = sp;return ($$10|0);
   }
   else if ((label|0) == 32) {
    $63 = ((($0)) + 3800|0);
    dest=$63; src=12636; stop=dest+61|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$10 = 6;
    STACKTOP = sp;return ($$10|0);
   }
   else if ((label|0) == 35) {
    $66 = ((($0)) + 3800|0);
    dest=$66; src=12697; stop=dest+40|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$10 = 3;
    STACKTOP = sp;return ($$10|0);
   }
   else if ((label|0) == 36) {
    $67 = ((($0)) + 3800|0);
    dest=$67; src=12737; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$10 = 5;
    STACKTOP = sp;return ($$10|0);
   }
  }
 } while(0);
 $81 = ((($0)) + 360|0);
 $82 = +HEAPF64[$81>>3];
 $83 = HEAP32[$3>>2]|0;
 $84 = HEAP32[$5>>2]|0;
 $85 = ($84>>>0)<($83>>>0);
 if ($85) {
  $$0153187 = $84;
  while(1) {
   $86 = ((($$0153187)) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($$0153187)) + 16|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($87|0)==(0);
   L68: do {
    if (!($90)) {
     $$0143185 = 0;
     while(1) {
      $93 = (((($89) + (($$0143185*20)|0)|0)) + 4|0);
      $94 = HEAP32[$93>>2]|0;
      switch ($94|0) {
      case 1:  {
       $95 = (((($89) + (($$0143185*20)|0)|0)) + 16|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (+($96|0));
       $98 = $82 * $97;
       $99 = (~~(($98)));
       $100 = (_normalize_iters_quota($99)|0);
       $$sink = $100;
       label = 51;
       break;
      }
      case 0: case 2:  {
       $$sink = -1;
       label = 51;
       break;
      }
      default: {
      }
      }
      if ((label|0) == 51) {
       label = 0;
       $101 = (((($89) + (($$0143185*20)|0)|0)) + 12|0);
       HEAP32[$101>>2] = $$sink;
      }
      $102 = (($$0143185) + 1)|0;
      $exitcond = ($102|0)==($87|0);
      if ($exitcond) {
       break L68;
      } else {
       $$0143185 = $102;
      }
     }
    }
   } while(0);
   $91 = ((($$0153187)) + 40|0);
   $92 = ($91>>>0)<($83>>>0);
   if ($92) {
    $$0153187 = $91;
   } else {
    break;
   }
  }
 }
 _clear_error($0);
 $$10 = 0;
 STACKTOP = sp;return ($$10|0);
}
function _create_plan_item($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $2;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = $3;
 return;
}
function _string_starts_with($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = (_strlen($1)|0);
 $7 = ($5|0)==($6|0);
 if (!($7)) {
  $10 = 0;
  return ($10|0);
 }
 $8 = (_strncmp($0,$1,$5)|0);
 $9 = ($8|0)==(0);
 $10 = $9;
 return ($10|0);
}
function _find_flare($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$01012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 (_strncpy($4,$2,31)|0);
 $5 = ($3>>>0)<(31);
 $6 = $5 ? $3 : 31;
 $7 = (($4) + ($6)|0);
 HEAP8[$7>>0] = 0;
 $8 = ($0>>>0)<($1>>>0);
 L1: do {
  if ($8) {
   $$01012 = $0;
   while(1) {
    $9 = ((($$01012)) + 317|0);
    $10 = (_strcmp($9,$4)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $14 = $$01012;
     break L1;
    }
    $12 = ((($$01012)) + 400|0);
    $13 = ($12>>>0)<($1>>>0);
    if ($13) {
     $$01012 = $12;
    } else {
     $14 = 0;
     break;
    }
   }
  } else {
   $14 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($14|0);
}
function _add_to_plan($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 1)|0;
 HEAP32[$5>>2] = $9;
 $10 = ($9*20)|0;
 $11 = (_realloc($8,$10)|0);
 HEAP32[$7>>2] = $11;
 $12 = (($11) + (($6*20)|0)|0);
 _create_plan_item($4,$1,$2,$3);
 ;HEAP32[$12>>2]=HEAP32[$4>>2]|0;HEAP32[$12+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$12+16>>2]=HEAP32[$4+16>>2]|0;
 STACKTOP = sp;return;
}
function _add_checkpoint_to_plan($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _add_to_plan($0,2,0,-1);
 return;
}
function _clear_error($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 3800|0);
 HEAP8[$1>>0] = 0;
 return;
}
function _normalize_iters_quota($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)>(0);
 $2 = $1 ? $0 : 0;
 return ($2|0);
}
function _api_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 368|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _fc_solve_pats__init_soft_thread($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 35640|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($0)) + 35648|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($0)) + 35652|0);
 HEAP32[$4>>2] = 1;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 50000000;
 $6 = ((($0)) + 816|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 2792|0);
 HEAP32[$7>>2] = -1;
 $8 = ((($0)) + 37668|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 37672|0);
 HEAP32[$9>>2] = 0;
 _fc_solve_pats__soft_thread_reset_helper_223($0);
 $10 = ((($0)) + 37680|0);
 HEAP32[$10>>2] = 16;
 $11 = (_malloc(448)|0);
 $12 = ((($0)) + 37684|0);
 HEAP32[$12>>2] = $11;
 return;
}
function _fc_solve_pats__set_cut_off($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 2840|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 35652|0);
 HEAP32[$3>>2] = $2;
 return;
}
function _fc_solve_pats__soft_thread_reset_helper_223($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 816|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 2788|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 2796|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 35644|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 35656|0);
 HEAP32[$5>>2] = 1;
 $6 = ((($0)) + 37664|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 37660|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 37676|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 37688|0);
 HEAP32[$9>>2] = 0;
 return;
}
function _active_obj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_user_obj($0)|0);
 return ($1|0);
}
function _user_obj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _apply_game_params_for_all_instances($0) {
 $0 = $0|0;
 var $$02324 = 0, $$025 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<($2>>>0);
 if (!($5)) {
  return;
 }
 $6 = ((($0)) + 3716|0);
 $$025 = $4;
 while(1) {
  $7 = ((($$025)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$$025>>2]|0;
  $10 = ($9>>>0)<($8>>>0);
  if ($10) {
   $$02324 = $9;
   while(1) {
    $13 = HEAP32[$6>>2]|0;
    HEAP32[$$02324>>2] = $13;
    _calc_variant_suit_mask_and_desired_suit_value($$02324);
    $14 = ((($$02324)) + 400|0);
    $15 = ($14>>>0)<($8>>>0);
    if ($15) {
     $$02324 = $14;
    } else {
     break;
    }
   }
  }
  $11 = ((($$025)) + 40|0);
  $12 = ($11>>>0)<($2>>>0);
  if ($12) {
   $$025 = $11;
  } else {
   break;
  }
 }
 return;
}
function _calc_variant_suit_mask_and_desired_suit_value($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP8[$1>>0] = 1;
 $2 = ((($0)) + 5|0);
 HEAP8[$2>>0] = 1;
 $3 = ((($0)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 3;
 $6 = ($5<<24>>24)==(1);
 if (!($6)) {
  return;
 }
 HEAP8[$1>>0] = 3;
 HEAP8[$2>>0] = 0;
 return;
}
function _moves_order__free_228($0) {
 $0 = $0|0;
 var $$014 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$014 = 0;
  while(1) {
   $5 = (($2) + (($$014*224)|0)|0);
   $6 = HEAP32[$5>>2]|0;
   _free($6);
   $7 = (($$014) + 1)|0;
   $exitcond = ($7|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $$014 = $7;
   }
  }
 }
 _free($2);
 HEAP32[$1>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function _set_any_iter_handler($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 344|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 340|0);
 HEAP32[$5>>2] = $2;
 $6 = ($2|0)!=(0|0);
 $7 = ($1|0)!=(0|0);
 $or$cond = $7 | $6;
 if ($or$cond) {
  $8 = ((($0)) + 348|0);
  HEAP32[$8>>2] = $3;
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 _set_debug_iter_output_func_to_val($0,$$0);
 return;
}
function _iter_handler_wrapper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $7 = ((($6)) + 4|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;HEAP32[$7+16>>2]=0|0;
 $8 = HEAP32[$4>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($6)) + 4|0);
 _fc_solve_init_locs_229($9);
 $10 = ((($0)) + 344|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $15 = ((($0)) + 340|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 348|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiiiii[$16 & 1]($0,$1,$2,$6,$5,$18);
  STACKTOP = sp;return;
 } else {
  $13 = ((($0)) + 348|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_viiiiii[$11 & 1]($0,$1,$2,$6,$5,$14);
  STACKTOP = sp;return;
 }
}
function _set_debug_iter_output_func_to_val($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01921 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<($3>>>0);
 if (!($6)) {
  return;
 }
 $$01921 = $5;
 while(1) {
  $7 = ((($$01921)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$$01921>>2]|0;
  $10 = ($9>>>0)<($8>>>0);
  if ($10) {
   $$020 = $9;
   while(1) {
    $13 = ((($$020)) + 184|0);
    HEAP32[$13>>2] = $1;
    $14 = ((($$020)) + 400|0);
    $15 = ($14>>>0)<($8>>>0);
    if ($15) {
     $$020 = $14;
    } else {
     break;
    }
   }
  }
  $11 = ((($$01921)) + 40|0);
  $12 = ($11>>>0)<($3>>>0);
  if ($12) {
   $$01921 = $11;
  } else {
   break;
  }
 }
 return;
}
function _fc_solve_init_locs_229($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $1 = ((($0)) + 1|0);
 HEAP8[$1>>0] = 1;
 $2 = ((($0)) + 2|0);
 HEAP8[$2>>0] = 2;
 $3 = ((($0)) + 3|0);
 HEAP8[$3>>0] = 3;
 $4 = ((($0)) + 4|0);
 HEAP8[$4>>0] = 4;
 $5 = ((($0)) + 5|0);
 HEAP8[$5>>0] = 5;
 $6 = ((($0)) + 6|0);
 HEAP8[$6>>0] = 6;
 $7 = ((($0)) + 7|0);
 HEAP8[$7>>0] = 7;
 $8 = ((($0)) + 8|0);
 HEAP8[$8>>0] = 8;
 $9 = ((($0)) + 9|0);
 HEAP8[$9>>0] = 9;
 $10 = ((($0)) + 10|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($0)) + 11|0);
 HEAP8[$11>>0] = 1;
 $12 = ((($0)) + 12|0);
 HEAP8[$12>>0] = 2;
 $13 = ((($0)) + 13|0);
 HEAP8[$13>>0] = 3;
 $14 = ((($0)) + 14|0);
 HEAP8[$14>>0] = 4;
 $15 = ((($0)) + 15|0);
 HEAP8[$15>>0] = 5;
 $16 = ((($0)) + 16|0);
 HEAP8[$16>>0] = 6;
 $17 = ((($0)) + 17|0);
 HEAP8[$17>>0] = 7;
 return;
}
function _curr_inst($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _resume_solution($0) {
 $0 = $0|0;
 var $$1172201 = 0, $$1172202 = 0, $$4 = 0, $$6$ph = 0, $$6184 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select187 = 0, $spec$select187$1 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = ((($0)) + 1652|0);
 $6 = ((($0)) + 36|0);
 $7 = ((($0)) + 372|0);
 $8 = ((($0)) + 12|0);
 $9 = ((($1)) + 4|0);
 $10 = ((($0)) + 336|0);
 $11 = ((($0)) + 332|0);
 $12 = ((($0)) + 16|0);
 $13 = ((($0)) + 306|0);
 $14 = ((($0)) + 288|0);
 $15 = ((($0)) + 120|0);
 $16 = ((($0)) + 200|0);
 $17 = ((($0)) + 204|0);
 $18 = ((($0)) + 284|0);
 $19 = ((($0)) + 24|0);
 $20 = ((($0)) + 28|0);
 $21 = ((($0)) + 16|0);
 $22 = ((($0)) + 36|0);
 $23 = ((($0)) + 204|0);
 $24 = ((($0)) + 324|0);
 $25 = ((($0)) + 16|0);
 $26 = ((($0)) + 328|0);
 $27 = ((($0)) + 20|0);
 $28 = ((($0)) + 324|0);
 $29 = ((($1)) + 4|0);
 L1: while(1) {
  $30 = (_curr_inst($0)|0);
  $31 = ((($30)) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($30)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($32|0)==($34|0);
  do {
   if ($35) {
    $36 = ((($30)) + 33|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = ($37<<24>>24)==(0);
    if ($38) {
     HEAP8[$36>>0] = 1;
     HEAP32[$31>>2] = 0;
     label = 6;
     break;
    } else {
     _recycle_instance($0,$30);
     $39 = HEAP32[$0>>2]|0;
     $40 = ((($39)) + 40|0);
     HEAP32[$0>>2] = $40;
     $$6$ph = 1;
     break;
    }
   } else {
    label = 6;
   }
  } while(0);
  L8: do {
   if ((label|0) == 6) {
    label = 0;
    $41 = ((($30)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$31>>2]|0;
    $44 = (($43) + 1)|0;
    HEAP32[$31>>2] = $44;
    $45 = (((($42) + (($43*20)|0)|0)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)==(2);
    if ($47) {
     $48 = ((($30)) + 8|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(0|0);
     if ($50) {
      $$6$ph = 1;
      break;
     } else {
      label = 8;
      break L1;
     }
    }
    $65 = (((($42) + (($43*20)|0)|0)) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($42) + (($43*20)|0)|0);
    $68 = HEAP32[$67>>2]|0;
    HEAP32[$4>>2] = $68;
    $69 = ((($68)) + 312|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(9);
    if ($71) {
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $74 = ((($68)) + 1|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = $75&255;
     $77 = ((($68)) + 2|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = $78&255;
     $80 = (_fc_solve_initial_user_state_to_c_proto($5,$6,$73,$76,$79,$7)|0);
     if (!($80)) {
      label = 11;
      break L1;
     }
     $83 = HEAP8[$68>>0]|0;
     $84 = $83&255;
     $85 = HEAP8[$74>>0]|0;
     $86 = $85&255;
     $87 = HEAP8[$77>>0]|0;
     $88 = $87&255;
     $89 = (_fc_solve_check_state_validity($6,$84,$86,$88,$10)|0);
     HEAP32[$11>>2] = $89;
     $90 = ($89|0)==(0);
     if (!($90)) {
      label = 13;
      break L1;
     }
     _fc_solve_init_locs_229($13);
     dest=$14; src=$13; stop=dest+18|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
     dest=$15; src=$6; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     HEAP32[$16>>2] = 0;
     dest=$17; src=$6; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     HEAP32[$18>>2] = 0;
     $92 = HEAP8[$68>>0]|0;
     $93 = $92&255;
     $94 = HEAP8[$74>>0]|0;
     $95 = $94&255;
     _fc_solve_canonize_state_with_locs($6,$14,$93,$95);
     _init_instance($68);
    }
    $96 = HEAP32[$8>>2]|0;
    HEAP32[$1>>2] = $96;
    $97 = ($66|0)<(0);
    if ($97) {
     $100 = -1;
    } else {
     $98 = HEAP32[$12>>2]|0;
     $99 = (($98) + ($66))|0;
     $100 = $99;
    }
    HEAP32[$9>>2] = $100;
    $101 = ((($30)) + 36|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = HEAP32[$1>>2]|0;
    $104 = ($103|0)>(-1);
    $105 = ($102|0)<(0);
    $106 = ($102|0)<($103|0);
    $107 = $106 ? $102 : $103;
    $108 = $105 ? $103 : $107;
    $spec$select187 = $104 ? $108 : $102;
    $109 = HEAP32[$29>>2]|0;
    $110 = ($109|0)>(-1);
    $111 = ($spec$select187|0)<(0);
    $112 = ($spec$select187|0)<($109|0);
    $113 = $112 ? $spec$select187 : $109;
    $114 = $111 ? $109 : $113;
    $spec$select187$1 = $110 ? $114 : $spec$select187;
    $115 = ($spec$select187$1|0)<(0);
    if ($115) {
     $122 = 2147483647;
    } else {
     $116 = ((($68)) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (($117) + ($spec$select187$1))|0;
     $119 = HEAP32[$21>>2]|0;
     $120 = (($118) - ($119))|0;
     $122 = $120;
    }
    $121 = ((($68)) + 12|0);
    HEAP32[$121>>2] = $122;
    $123 = ((($68)) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    HEAP32[$19>>2] = $124;
    $125 = ((($68)) + 144|0);
    $126 = HEAP32[$125>>2]|0;
    HEAP32[$20>>2] = $126;
    if ($71) {
     _start_process_with_board($68,$22,$23);
    }
    $127 = HEAP32[$69>>2]|0;
    switch ($127|0) {
    case 5: case 9:  {
     $128 = (_resume_instance($68)|0);
     HEAP32[$69>>2] = $128;
     HEAP32[$24>>2] = $128;
     $129 = ((($68)) + 316|0);
     HEAP8[$129>>0] = 0;
     $130 = ($128|0)==(5);
     if ($130) {
      $$1172202 = 5;
     } else {
      $$1172201 = $128;
      label = 23;
     }
     break;
    }
    default: {
     $$1172201 = 1;
     label = 23;
    }
    }
    if ((label|0) == 23) {
     label = 0;
     HEAP8[$26>>0] = 0;
     $$1172202 = $$1172201;
    }
    $131 = HEAP32[$123>>2]|0;
    $132 = ((($68)) + 372|0);
    HEAP32[$132>>2] = $131;
    $133 = HEAP32[$125>>2]|0;
    $134 = ((($68)) + 376|0);
    HEAP32[$134>>2] = $133;
    $135 = HEAP32[$19>>2]|0;
    $136 = (($131) - ($135))|0;
    $137 = HEAP32[$25>>2]|0;
    $138 = (($137) + ($136))|0;
    HEAP32[$25>>2] = $138;
    $139 = ($66|0)>(-1);
    if ($139) {
     $140 = (($66) - ($136))|0;
     $141 = (_normalize_iters_quota($140)|0);
     HEAP32[$65>>2] = $141;
    }
    $142 = HEAP32[$20>>2]|0;
    $143 = (($133) - ($142))|0;
    $144 = HEAP32[$27>>2]|0;
    $145 = (($143) + ($144))|0;
    HEAP32[$27>>2] = $145;
    $146 = $132;
    $147 = $146;
    $148 = HEAP32[$147>>2]|0;
    $149 = (($146) + 4)|0;
    $150 = $149;
    $151 = HEAP32[$150>>2]|0;
    $152 = $19;
    $153 = $152;
    HEAP32[$153>>2] = $148;
    $154 = (($152) + 4)|0;
    $155 = $154;
    HEAP32[$155>>2] = $151;
    $156 = HEAP32[$28>>2]|0;
    switch ($156|0) {
    case 0:  {
     $157 = ((($68)) + 380|0);
     HEAP8[$157>>0] = 0;
     $158 = ((($30)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if ($160) {
      label = 29;
     } else {
      $161 = (_get_flare_move_count($0,$159)|0);
      $162 = (_get_flare_move_count($0,$68)|0);
      $163 = ($161|0)>($162|0);
      if ($163) {
       label = 29;
      }
     }
     if ((label|0) == 29) {
      label = 0;
      HEAP32[$158>>2] = $68;
     }
     HEAP32[$28>>2] = 1;
     $$6$ph = 1;
     break L8;
     break;
    }
    case 1:  {
     switch ($127|0) {
     case 5: case 9:  {
      break;
     }
     default: {
      $$6$ph = $$1172202;
      break L8;
     }
     }
     _recycle_inst($68);
     $164 = ((($68)) + 316|0);
     HEAP8[$164>>0] = 1;
     $$6$ph = $$1172202;
     break L8;
     break;
    }
    case 5:  {
     $165 = ((($30)) + 12|0);
     HEAP32[$165>>2] = $68;
     $166 = ((($68)) + 380|0);
     HEAP8[$166>>0] = 0;
     $167 = HEAP32[$8>>2]|0;
     $168 = ($167|0)<(0);
     $169 = ($138|0)<($167|0);
     $or$cond = $168 | $169;
     if (!($or$cond)) {
      label = 35;
      break L1;
     }
     $170 = HEAP32[$125>>2]|0;
     $171 = ((($68)) + 16|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = ($170|0)<($172|0);
     if (!($173)) {
      label = 35;
      break L1;
     }
     $176 = (((($42) + (($43*20)|0)|0)) + 12|0);
     $177 = HEAP32[$176>>2]|0;
     HEAP32[$65>>2] = $177;
     $178 = HEAP32[$101>>2]|0;
     $179 = ($178|0)>(-1);
     if ($179) {
      $180 = HEAP32[$123>>2]|0;
      $181 = ($180|0)<($178|0);
      if (!($181)) {
       HEAP32[$132>>2] = $180;
       HEAP32[$134>>2] = $170;
       _recycle_instance($0,$30);
       $182 = HEAP32[$0>>2]|0;
       $183 = ((($182)) + 40|0);
       HEAP32[$0>>2] = $183;
       $$6$ph = 1;
       break L8;
      }
     }
     $184 = ((($30)) + 33|0);
     HEAP8[$184>>0] = 0;
     $$6$ph = 1;
     break L8;
     break;
    }
    default: {
     $$6$ph = $$1172202;
     break L8;
    }
    }
   }
  } while(0);
  $185 = HEAP32[$0>>2]|0;
  $186 = ($185>>>0)<($3>>>0);
  $187 = ($$6$ph|0)==(1);
  $188 = $187 & $186;
  if (!($188)) {
   $$6184 = $$6$ph;
   break;
  }
 }
 if ((label|0) == 8) {
  $51 = ((($0)) + 32|0);
  HEAP32[$51>>2] = $49;
  $52 = ((($0)) + 24|0);
  $53 = ((($49)) + 372|0);
  $54 = $53;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = $52;
  $61 = $60;
  HEAP32[$61>>2] = $56;
  $62 = (($60) + 4)|0;
  $63 = $62;
  HEAP32[$63>>2] = $59;
  $64 = ((($0)) + 324|0);
  HEAP32[$64>>2] = 0;
  $$6184 = 0;
 }
 else if ((label|0) == 11) {
  $81 = ((($0)) + 332|0);
  HEAP32[$81>>2] = 4;
  $82 = ((($0)) + 324|0);
  HEAP32[$82>>2] = 8;
  $$4 = 8;
  STACKTOP = sp;return ($$4|0);
 }
 else if ((label|0) == 13) {
  $91 = ((($0)) + 324|0);
  HEAP32[$91>>2] = 8;
  $$4 = 8;
  STACKTOP = sp;return ($$4|0);
 }
 else if ((label|0) == 35) {
  $174 = HEAP32[$31>>2]|0;
  $175 = (($174) + -1)|0;
  HEAP32[$31>>2] = $175;
  $$6184 = $$1172202;
 }
 $189 = ((($0)) + 328|0);
 $190 = HEAP8[$189>>0]|0;
 $191 = ($190<<24>>24)==(0);
 $192 = $191 ? $$6184 : 5;
 $$4 = $192;
 STACKTOP = sp;return ($$4|0);
}
function _recycle_instance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$022 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4>>>0)<($3>>>0);
 if (!($5)) {
  $7 = ((($1)) + 24|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($1)) + 8|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($1)) + 12|0);
  HEAP32[$9>>2] = 0;
  return;
 }
 $6 = ((($0)) + 24|0);
 $$022 = $4;
 while(1) {
  $10 = ((($$022)) + 360|0);
  _fc_solve_moves_processed_free($10);
  $11 = ((($$022)) + 312|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(9);
  if (!($13)) {
   _recycle_flare($$022);
   $14 = $6;
   $15 = $14;
   HEAP32[$15>>2] = 0;
   $16 = (($14) + 4)|0;
   $17 = $16;
   HEAP32[$17>>2] = 0;
   HEAP32[$11>>2] = 9;
  }
  $18 = ((($$022)) + 356|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   _free($19);
   HEAP32[$18>>2] = 0;
   $21 = ((($$022)) + 352|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($$022)) + 348|0);
   HEAP32[$22>>2] = 0;
  }
  $23 = ((($$022)) + 372|0);
  $24 = $23;
  $25 = $24;
  HEAP32[$25>>2] = 0;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = 0;
  $28 = ((($$022)) + 400|0);
  $29 = ($28>>>0)<($3>>>0);
  if ($29) {
   $$022 = $28;
  } else {
   break;
  }
 }
 $7 = ((($1)) + 24|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($1)) + 12|0);
 HEAP32[$9>>2] = 0;
 return;
}
function _fc_solve_initial_user_state_to_c_proto($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0139255 = 0, $$0140258 = 0, $$0155$off0257 = 0, $$0156256 = 0, $$0178246 = 0, $$10150 = 0, $$10150$be = 0, $$10150$pn = 0, $$11151 = 0, $$1141 = 0, $$12152 = 0, $$15254 = 0, $$16 = 0, $$18 = 0, $$18$ph = 0, $$21202 = 0, $$2142 = 0, $$3143247 = 0, $$3159201 = 0, $$4144 = 0;
 var $$6146 = 0, $$6146$ph = 0, $$8148 = 0, $$8148$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $cond = 0, $scevgep = 0, $scevgep288 = 0, $sext = 0, $spec$select180 = 0;
 var $spec$select181 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 _fc_solve_state_init_proto($1,$3,$5);
 $7 = ($3|0)==(0);
 if ($7) {
  $76 = 1;
  STACKTOP = sp;return ($76|0);
 }
 $8 = $4 << 2;
 $9 = ($8|0)==(0);
 $scevgep = ((($1)) + 40|0);
 $scevgep288 = ((($1)) + 48|0);
 $cond = ($2|0)==(0);
 $$0140258 = $0;$$0155$off0257 = 1;$$0156256 = 0;
 L4: while(1) {
  if ($$0155$off0257) {
   $$2142 = $$0140258;
  } else {
   $$1141 = $$0140258;
   L8: while(1) {
    $10 = HEAP8[$$1141>>0]|0;
    switch ($10<<24>>24) {
    case 0:  {
     $76 = 0;
     label = 53;
     break L4;
     break;
    }
    case 10:  {
     break L8;
     break;
    }
    default: {
    }
    }
    $11 = ((($$1141)) + 1|0);
    $$1141 = $11;
   }
   $12 = ((($$1141)) + 1|0);
   $$2142 = $12;
  }
  $13 = (_fc_solve__try_prefixes($$2142,1584)|0);
  $14 = ($13|0)==(0|0);
  L13: do {
   if ($14) {
    $36 = (_fc_solve__try_prefixes($$2142,1600)|0);
    $37 = ($36|0)==(0|0);
    if ($37) {
     $54 = HEAP8[$$2142>>0]|0;
     $55 = ($54<<24>>24)==(58);
     $56 = ((($$2142)) + 1|0);
     $spec$select181 = $55 ? $56 : $$2142;
     $57 = (($1) + ($$0156256<<2)|0);
     $58 = HEAP32[$57>>2]|0;
     $$0139255 = 0;$$15254 = $spec$select181;
     while(1) {
      $59 = ($$0139255|0)==(0);
      L19: do {
       if ($59) {
        $$18$ph = $$15254;
       } else {
        $$16 = $$15254;
        while(1) {
         $60 = HEAP8[$$16>>0]|0;
         switch ($60<<24>>24) {
         case 0:  {
          $76 = 0;
          label = 53;
          break L4;
          break;
         }
         case 13: case 10:  {
          $$21202 = $$16;$$3159201 = $$0156256;
          break L13;
          break;
         }
         case 32: case 9:  {
          $$18$ph = $$16;
          break L19;
          break;
         }
         default: {
         }
         }
         $61 = ((($$16)) + 1|0);
         $$16 = $61;
        }
       }
      } while(0);
      $$18 = $$18$ph;
      L25: while(1) {
       $62 = HEAP8[$$18>>0]|0;
       switch ($62<<24>>24) {
       case 0:  {
        $76 = 0;
        label = 53;
        break L4;
        break;
       }
       case 13: case 10:  {
        $$21202 = $$18;$$3159201 = $$0156256;
        break L13;
        break;
       }
       case 9: case 32:  {
        break;
       }
       default: {
        break L25;
       }
       }
       $63 = ((($$18)) + 1|0);
       $$18 = $63;
      }
      $64 = (_fc_solve_card_parse_str($$18)|0);
      $65 = ($64&255)>(3);
      if (!($65)) {
       $76 = 0;
       label = 53;
       break L4;
      }
      $66 = HEAP8[$58>>0]|0;
      $67 = (($66) + 1)<<24>>24;
      HEAP8[$58>>0] = $67;
      $68 = $66&255;
      $69 = (($68) + 1)|0;
      $70 = (($58) + ($69)|0);
      HEAP8[$70>>0] = $64;
      $71 = (($$0139255) + 1)|0;
      $72 = ($71>>>0)<(20);
      if ($72) {
       $$0139255 = $71;$$15254 = $$18;
      } else {
       $$21202 = $$18;$$3159201 = $$0156256;
       break L13;
      }
     }
    }
    if (!($9)) {
     _memset(($scevgep288|0),0,($8|0))|0;
    }
    ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;
    $$10150 = $36;
    L34: while(1) {
     $38 = HEAP8[$$10150>>0]|0;
     switch ($38<<24>>24) {
     case 13: case 10:  {
      break L34;
      break;
     }
     case 9: case 32:  {
      $39 = ((($$10150)) + 1|0);
      $$10150$be = $39;
      break;
     }
     default: {
      $40 = (_fcs_str2suit($$10150)|0);
      $$10150$pn = $$10150;
      L38: while(1) {
       $$11151 = ((($$10150$pn)) + 1|0);
       $41 = HEAP8[$$11151>>0]|0;
       switch ($41<<24>>24) {
       case 45:  {
        $$10150$pn = $$11151;
        break;
       }
       case 48:  {
        $46 = 0;
        break L38;
        break;
       }
       default: {
        label = 35;
        break L38;
       }
       }
      }
      if ((label|0) == 35) {
       label = 0;
       $42 = (_fcs_str2rank($$11151)|0);
       $46 = $42;
      }
      $$12152 = $$11151;
      L43: while(1) {
       $43 = HEAP8[$$12152>>0]|0;
       switch ($43<<24>>24) {
       case 0:  {
        label = 38;
        break L4;
        break;
       }
       case 13: case 10: case 9: case 32:  {
        break L43;
        break;
       }
       default: {
       }
       }
       $44 = ((($$12152)) + 1|0);
       $$12152 = $44;
      }
      $45 = $46&255;
      $47 = (($6) + ($40<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = $48 << 2;
      $50 = (($49) + ($40))|0;
      $51 = (((($1)) + 48|0) + ($50)|0);
      HEAP8[$51>>0] = $45;
      $52 = (($48) + 1)|0;
      $53 = ($52>>>0)<($4>>>0);
      $spec$select180 = $53 ? $52 : 0;
      HEAP32[$47>>2] = $spec$select180;
      $$10150$be = $$12152;
     }
     }
     $$10150 = $$10150$be;
    }
    $73 = (($$0156256) + -1)|0;
    $$21202 = $$10150;$$3159201 = $73;
   } else {
    L51: do {
     if ($cond) {
      $$8148$ph = $13;
     } else {
      _memset(($scevgep|0),0,($2|0))|0;
      $$0178246 = 0;$$3143247 = $13;
      while(1) {
       $15 = ($$0178246|0)==(0);
       if ($15) {
        $$6146$ph = $$3143247;
       } else {
        $$4144 = $$3143247;
        L57: while(1) {
         $16 = HEAP8[$$4144>>0]|0;
         switch ($16<<24>>24) {
         case 0:  {
          $76 = 0;
          label = 53;
          break L4;
          break;
         }
         case 13: case 10:  {
          $$8148$ph = $$4144;
          break L51;
          break;
         }
         case 32: case 9:  {
          break L57;
          break;
         }
         default: {
         }
         }
         $17 = ((($$4144)) + 1|0);
         $$4144 = $17;
        }
        $18 = ((($$4144)) + 1|0);
        $$6146$ph = $18;
       }
       $$6146 = $$6146$ph;
       L62: while(1) {
        $19 = HEAP8[$$6146>>0]|0;
        switch ($19<<24>>24) {
        case 10: case 13:  {
         $$8148$ph = $$6146;
         break L51;
         break;
        }
        case 45: case 42:  {
         $29 = 0;
         break L62;
         break;
        }
        case 9: case 32:  {
         break;
        }
        default: {
         label = 19;
         break L62;
        }
        }
        $20 = ((($$6146)) + 1|0);
        $$6146 = $20;
       }
       if ((label|0) == 19) {
        label = 0;
        $21 = (_fcs_str2rank($$6146)|0);
        $22 = $21&255;
        $23 = ($22<<24>>24)==(0);
        if ($23) {
         $76 = 0;
         label = 53;
         break L4;
        }
        $sext = $21 << 24;
        $24 = (24)?($sext >> 24):($sext);
        $25 = (_fcs_str2suit($$6146)|0);
        $26 = (_fcs_make_card($24,$25)|0);
        $27 = $26&255;
        $29 = $27;
       }
       $28 = $29&255;
       $30 = (((($1)) + 40|0) + ($$0178246)|0);
       HEAP8[$30>>0] = $28;
       $31 = (($$0178246) + 1)|0;
       $32 = ($31>>>0)<($2>>>0);
       if ($32) {
        $$0178246 = $31;$$3143247 = $$6146;
       } else {
        $$8148$ph = $$6146;
        break;
       }
      }
     }
    } while(0);
    $$8148 = $$8148$ph;
    L70: while(1) {
     $33 = HEAP8[$$8148>>0]|0;
     switch ($33<<24>>24) {
     case 0:  {
      $76 = 0;
      label = 53;
      break L4;
      break;
     }
     case 10:  {
      break L70;
      break;
     }
     default: {
     }
     }
     $34 = ((($$8148)) + 1|0);
     $$8148 = $34;
    }
    $35 = (($$0156256) + -1)|0;
    $$21202 = $$8148;$$3159201 = $35;
   }
  } while(0);
  $74 = (($$3159201) + 1)|0;
  $75 = ($74>>>0)<($3>>>0);
  if ($75) {
   $$0140258 = $$21202;$$0155$off0257 = 0;$$0156256 = $74;
  } else {
   $76 = 1;
   label = 53;
   break;
  }
 }
 if ((label|0) == 38) {
  $76 = 0;
  STACKTOP = sp;return ($76|0);
 }
 else if ((label|0) == 53) {
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _fc_solve_check_state_validity($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0110$lcssa = 0, $$085111 = 0, $$087112 = 0, $$095113 = 0, $$097117 = 0, $$098121 = 0, $$099125 = 0, $$8 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $exitcond = 0, $exitcond134 = 0;
 var $scevgep = 0, $scevgep$1 = 0, $scevgep$2 = 0, $scevgep$3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $5 = sp;
 $scevgep = ((($5)) + 4|0);
 dest=$scevgep; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $scevgep$1 = ((($5)) + 60|0);
 dest=$scevgep$1; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $scevgep$2 = ((($5)) + 116|0);
 dest=$scevgep$2; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $scevgep$3 = ((($5)) + 172|0);
 dest=$scevgep$3; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $6 = $3 << 2;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$099125 = 0;
  while(1) {
   $9 = (((($0)) + 48|0) + ($$099125)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if (!($11)) {
    $12 = $$099125 & 3;
    $13 = HEAP8[$9>>0]|0;
    $14 = $13&255;
    $$098121 = 1;
    while(1) {
     $16 = ((($5) + (($12*56)|0)|0) + ($$098121<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (($17) + 1)|0;
     HEAP32[$16>>2] = $18;
     $19 = (($$098121) + 1)|0;
     $20 = ($$098121>>>0)<($14>>>0);
     if ($20) {
      $$098121 = $19;
     } else {
      break;
     }
    }
   }
   $15 = (($$099125) + 1)|0;
   $exitcond134 = ($15|0)==($6|0);
   if ($exitcond134) {
    break;
   } else {
    $$099125 = $15;
   }
  }
 }
 $8 = ($1|0)==(0);
 if (!($8)) {
  $$097117 = 0;
  while(1) {
   $22 = (((($0)) + 40|0) + ($$097117)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = ($23<<24>>24)==(0);
   $26 = $24 & 3;
   $27 = (2)?($24 >>> 2):($24);
   $28 = ((($5) + (($26*56)|0)|0) + ($27<<2)|0);
   if (!($25)) {
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 1)|0;
    HEAP32[$28>>2] = $30;
   }
   $31 = (($$097117) + 1)|0;
   $exitcond = ($31|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $$097117 = $31;
   }
  }
 }
 $21 = ($2|0)==(0);
 L19: do {
  if (!($21)) {
   $$095113 = 0;
   L21: while(1) {
    $32 = (($0) + ($$095113<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = ($34<<24>>24)==(0);
    if (!($36)) {
     $$087112 = 0;
     while(1) {
      $37 = (($$087112) + 1)|0;
      $38 = (($33) + ($37)|0);
      $39 = HEAP8[$38>>0]|0;
      $40 = $39&255;
      $41 = ($39<<24>>24)==(0);
      if ($41) {
       break L21;
      }
      $42 = $40 & 3;
      $43 = (2)?($40 >>> 2):($40);
      $44 = ((($5) + (($42*56)|0)|0) + ($43<<2)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (($45) + 1)|0;
      HEAP32[$44>>2] = $46;
      $47 = ($37>>>0)<($35>>>0);
      if ($47) {
       $$087112 = $37;
      } else {
       break;
      }
     }
    }
    $48 = (($$095113) + 1)|0;
    $49 = ($48>>>0)<($2>>>0);
    if ($49) {
     $$095113 = $48;
    } else {
     break L19;
    }
   }
   HEAP8[$4>>0] = 0;
   $$8 = 3;
   STACKTOP = sp;return ($$8|0);
  }
 } while(0);
 $$085111 = 0;
 while(1) {
  $50 = (((($5) + (($$085111*56)|0)|0)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==($3|0);
  if (!($52)) {
   $$0110$lcssa = 1;$$lcssa = $51;
   break;
  }
  $53 = (((($5) + (($$085111*56)|0)|0)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54|0)==($3|0);
  if (!($55)) {
   $$0110$lcssa = 2;$$lcssa = $54;
   break;
  }
  $59 = (((($5) + (($$085111*56)|0)|0)) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==($3|0);
  if (!($61)) {
   $$0110$lcssa = 3;$$lcssa = $60;
   break;
  }
  $62 = (((($5) + (($$085111*56)|0)|0)) + 16|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==($3|0);
  if (!($64)) {
   $$0110$lcssa = 4;$$lcssa = $63;
   break;
  }
  $65 = (((($5) + (($$085111*56)|0)|0)) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($66|0)==($3|0);
  if (!($67)) {
   $$0110$lcssa = 5;$$lcssa = $66;
   break;
  }
  $68 = (((($5) + (($$085111*56)|0)|0)) + 24|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)==($3|0);
  if (!($70)) {
   $$0110$lcssa = 6;$$lcssa = $69;
   break;
  }
  $71 = (((($5) + (($$085111*56)|0)|0)) + 28|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)==($3|0);
  if (!($73)) {
   $$0110$lcssa = 7;$$lcssa = $72;
   break;
  }
  $74 = (((($5) + (($$085111*56)|0)|0)) + 32|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)==($3|0);
  if (!($76)) {
   $$0110$lcssa = 8;$$lcssa = $75;
   break;
  }
  $77 = (((($5) + (($$085111*56)|0)|0)) + 36|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($78|0)==($3|0);
  if (!($79)) {
   $$0110$lcssa = 9;$$lcssa = $78;
   break;
  }
  $80 = (((($5) + (($$085111*56)|0)|0)) + 40|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)==($3|0);
  if (!($82)) {
   $$0110$lcssa = 10;$$lcssa = $81;
   break;
  }
  $83 = (((($5) + (($$085111*56)|0)|0)) + 44|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ($84|0)==($3|0);
  if (!($85)) {
   $$0110$lcssa = 11;$$lcssa = $84;
   break;
  }
  $86 = (((($5) + (($$085111*56)|0)|0)) + 48|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)==($3|0);
  if (!($88)) {
   $$0110$lcssa = 12;$$lcssa = $87;
   break;
  }
  $89 = (((($5) + (($$085111*56)|0)|0)) + 52|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)==($3|0);
  if (!($91)) {
   $$0110$lcssa = 13;$$lcssa = $90;
   break;
  }
  $92 = (($$085111) + 1)|0;
  $93 = ($92>>>0)<(4);
  if ($93) {
   $$085111 = $92;
  } else {
   $$8 = 0;
   label = 24;
   break;
  }
 }
 if ((label|0) == 24) {
  STACKTOP = sp;return ($$8|0);
 }
 $56 = (_fcs_make_card($$0110$lcssa,$$085111)|0);
 HEAP8[$4>>0] = $56;
 $57 = ($$lcssa>>>0)<($3>>>0);
 $58 = $57 ? 1 : 2;
 $$8 = $58;
 STACKTOP = sp;return ($$8|0);
}
function _init_instance($0) {
 $0 = $0|0;
 var $$042$lcssa = 0, $$04245 = 0, $$04344 = 0, $$046 = 0, $$1 = 0, $$pr = 0, $$sroa$05$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx6 = 0, $$sroa$3$0$$sroa_idx1 = 0, $$sroa$4$0$$sroa_idx2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 152|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 148|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + (($5*1356)|0)|0);
 $7 = ($5|0)>(0);
 if ($7) {
  $$046 = $3;
  while(1) {
   HEAP32[$$046>>2] = $0;
   $8 = ((($$046)) + 1352|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = ((($$046)) + 1336|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     _compile_prelude($$046);
    }
   }
   $14 = ((($$046)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 528|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$046)) + 16|0);
   _set_next_soft_thread($$046,0,$17,$18);
   $19 = ((($$046)) + 1356|0);
   $20 = ($19>>>0)<($6>>>0);
   if ($20) {
    $$046 = $19;
   } else {
    break;
   }
  }
 }
 HEAP32[$1>>2] = 0;
 _fc_solve_foreach_soft_thread($0,2,$1);
 _fc_solve_foreach_soft_thread($0,3,$1);
 $21 = ((($0)) + 138|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = (_malloc(128)|0);
 $$pr = HEAP32[$1>>2]|0;
 $25 = ($$pr|0)==(0);
 if ($25) {
  $$042$lcssa = 0;
 } else {
  $$04245 = 0;$$04344 = 0;$33 = $$pr;
  while(1) {
   $32 = $33 & 1;
   $34 = ($32|0)==(0);
   if ($34) {
    $$1 = $$04245;
   } else {
    $35 = (($24) + ($$04245<<2)|0);
    $36 = (($$04245) + 1)|0;
    HEAP32[$35>>2] = $$04344;
    $$1 = $36;
   }
   $37 = (($$04344) + 1)|0;
   $26 = (1)?($33 >>> 1):($33);
   $38 = ($26|0)==(0);
   if ($38) {
    break;
   } else {
    $$04245 = $$1;$$04344 = $37;$33 = $26;
   }
  }
  HEAP32[$1>>2] = $26;
  $$042$lcssa = $$1;
 }
 $27 = $$042$lcssa << 2;
 $28 = (($27) + 64)|0;
 $29 = $28 & -64;
 $30 = (_realloc($24,$29)|0);
 $31 = (_malloc(3584)|0);
 $$sroa$05$0$$sroa_idx = ((($0)) + 176|0);
 HEAP32[$$sroa$05$0$$sroa_idx>>2] = 1;
 $$sroa$2$0$$sroa_idx6 = ((($0)) + 180|0);
 HEAP32[$$sroa$2$0$$sroa_idx6>>2] = $31;
 HEAP32[$31>>2] = $30;
 $$sroa$3$0$$sroa_idx1 = ((($31)) + 4|0);
 HEAP32[$$sroa$3$0$$sroa_idx1>>2] = $$042$lcssa;
 $$sroa$4$0$$sroa_idx2 = ((($31)) + 8|0);
 _memset(($$sroa$4$0$$sroa_idx2|0),0,216)|0;
 HEAP8[$21>>0] = 1;
 STACKTOP = sp;return;
}
function _start_process_with_board($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$035 = 0, $$cast = 0, $$sroa$0 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$56$sroa_idx = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx14 = 0, $$sroa$515$0$$sroa_idx16 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$sroa$0 = sp + 8|0;
 $3 = sp + 88|0;
 $4 = sp;
 $5 = ((($0)) + 300|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 292|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 32|0);
 _fc_solve_hash_init($7,$8,1);
 $9 = HEAP32[$6>>2]|0;
 $10 = ((($0)) + 80|0);
 _fc_solve_hash_init($9,$10,0);
 dest=$$sroa$0; src=$1; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $$sroa$0$56$sroa_idx = ((($$sroa$0)) + 56|0);
 ;HEAP32[$$sroa$0$56$sroa_idx>>2]=0|0;HEAP32[$$sroa$0$56$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$0$56$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$0$56$sroa_idx+12>>2]=0|0;HEAP16[$$sroa$0$56$sroa_idx+16>>1]=0|0;
 $$sroa$0$0$$sroa_idx = ((($0)) + 196|0);
 dest=$$sroa$0$0$$sroa_idx; src=$$sroa$0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));HEAP16[$$sroa$0$0$$sroa_idx+72>>1]=HEAP16[$$sroa$0+72>>1]|0;
 $$sroa$3$0$$sroa_idx = ((($0)) + 270|0);
 HEAP8[$$sroa$3$0$$sroa_idx>>0] = 0;
 $$sroa$4$0$$sroa_idx = ((($0)) + 271|0);
 HEAP8[$$sroa$4$0$$sroa_idx>>0] = 0;
 $$sroa$5$0$$sroa_idx14 = ((($0)) + 272|0);
 HEAP32[$$sroa$5$0$$sroa_idx14>>2] = 0;
 $$sroa$515$0$$sroa_idx16 = ((($0)) + 276|0);
 HEAP32[$$sroa$515$0$$sroa_idx16>>2] = -1;
 _update_initial_cards_val($0);
 _FCS_STATE_keyval_pair_to_kv_248($4,$$sroa$0$0$$sroa_idx);
 $11 = ((($0)) + 152|0);
 $12 = HEAP32[$11>>2]|0;
 (_fc_solve_check_and_add_state($12,$4,$3)|0);
 $13 = HEAP32[$11>>2]|0;
 $14 = ((($0)) + 156|0);
 HEAP32[$14>>2] = $13;
 $$cast = $13;
 $15 = ((($0)) + 148|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($$cast) + (($16*1356)|0)|0);
 $18 = ($16|0)>(0);
 if (!($18)) {
  $26 = ((($0)) + 135|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ((($0)) + 133|0);
  HEAP8[$28>>0] = $27;
  STACKTOP = sp;return;
 }
 $$035 = $$cast;
 while(1) {
  $19 = ((($$035)) + 1332|0);
  HEAP32[$19>>2] = 0;
  $20 = ((($$035)) + 1336|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   $23 = ((($$035)) + 16|0);
   _set_next_prelude_item($$035,$21,$23);
  }
  $24 = ((($$035)) + 1356|0);
  $25 = ($24>>>0)<($17>>>0);
  if ($25) {
   $$035 = $24;
  } else {
   break;
  }
 }
 $26 = ((($0)) + 135|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ((($0)) + 133|0);
 HEAP8[$28>>0] = $27;
 STACKTOP = sp;return;
}
function _resume_instance($0) {
 $0 = $0|0;
 var $$0 = 0, $$03344 = 0, $$043 = 0, $$045 = 0, $$134$lcssa = 0, $$142 = 0, $$2 = 0, $$235 = 0, $$4 = 0, $$5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 137|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $9 = ((($0)) + 152|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 148|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($10) + (($12*1356)|0)|0);
  $14 = ((($0)) + 156|0);
  $$043 = HEAP32[$14>>2]|0;
  $15 = ((($0)) + 172|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16>>>0)<($12>>>0);
  L3: do {
   if ($17) {
    $18 = ((($0)) + 8|0);
    $19 = ((($0)) + 12|0);
    $20 = ((($0)) + 144|0);
    $21 = ((($0)) + 16|0);
    $$03344 = 5;$$045 = $$043;
    while(1) {
     $22 = ($$045>>>0)<($13>>>0);
     if ($22) {
      $$142 = $$045;
      while(1) {
       $23 = (_run_hard_thread($$142)|0);
       $24 = ($23>>>0)<(2);
       if ($24) {
        $$2 = $$142;$$235 = $23;
        break L3;
       }
       $25 = ($23|0)==(5);
       if ($25) {
        $26 = HEAP32[$18>>2]|0;
        $27 = HEAP32[$19>>2]|0;
        $28 = ($26|0)<($27|0);
        if (!($28)) {
         $$2 = $$142;$$235 = 5;
         break L3;
        }
        $29 = HEAP32[$20>>2]|0;
        $30 = HEAP32[$21>>2]|0;
        $31 = ($29|0)<($30|0);
        if (!($31)) {
         $$2 = $$142;$$235 = 5;
         break L3;
        }
       }
       $32 = ((($$142)) + 1356|0);
       $33 = ($32>>>0)<($13>>>0);
       if ($33) {
        $$142 = $32;
       } else {
        $$134$lcssa = $23;
        break;
       }
      }
     } else {
      $$134$lcssa = $$03344;
     }
     $$0 = HEAP32[$9>>2]|0;
     $34 = HEAP32[$15>>2]|0;
     $35 = HEAP32[$11>>2]|0;
     $36 = ($34>>>0)<($35>>>0);
     if ($36) {
      $$03344 = $$134$lcssa;$$045 = $$0;
     } else {
      $$2 = $$0;$$235 = $$134$lcssa;
      break;
     }
    }
   } else {
    $$2 = $$043;$$235 = 5;
   }
  } while(0);
  HEAP32[$14>>2] = $$2;
  $37 = HEAP32[$15>>2]|0;
  $38 = HEAP32[$11>>2]|0;
  $39 = ($37|0)==($38|0);
  if ($39) {
   $$5 = 1;
   return ($$5|0);
  } else {
   $$4 = $$235;
  }
 } else {
  $4 = ((($0)) + 160|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_fc_solve_befs_or_bfs_do_solve($7)|0);
  $$4 = $8;
 }
 $40 = ($$4|0)==(0);
 if (!($40)) {
  $$5 = $$4;
  return ($$5|0);
 }
 $41 = ((($0)) + 136|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ($42<<24>>24)==(0);
 if ($43) {
  $$5 = 0;
  return ($$5|0);
 }
 $44 = HEAP8[$1>>0]|0;
 $45 = ($44<<24>>24)==(0);
 if (!($45)) {
  $$5 = 0;
  return ($$5|0);
 }
 $46 = (_optimize_solution($0)|0);
 $$5 = $46;
 return ($$5|0);
}
function _get_flare_move_count($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _trace_flare_solution($0,$1);
 $2 = ((($0)) + 352|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($1)) + 352|0);
  $6 = HEAP32[$5>>2]|0;
  $$0 = $6;
  return ($$0|0);
 }
 $7 = ((($1)) + 360|0);
 $8 = ((($1)) + 368|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = ((($0)) + 204|0);
  $12 = ((($0)) + 3716|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ((($1)) + 352|0);
  _fc_solve_moves_processed_gen($7,$11,$14,$15);
 }
 $16 = (_fc_solve_moves_processed_get_moves_left($7)|0);
 $$0 = $16;
 return ($$0|0);
}
function _recycle_inst($0) {
 $0 = $0|0;
 var $$012 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fc_solve_finish_instance($0);
 _instance_free_solution_moves_233($0);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 172|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 148|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = ((($0)) + 152|0);
  $$012 = 0;
  while(1) {
   $10 = HEAP32[$6>>2]|0;
   $11 = (($10) + (($$012*1356)|0)|0);
   _recycle_ht($11);
   $12 = (($$012) + 1)|0;
   $13 = HEAP32[$3>>2]|0;
   $14 = ($12>>>0)<($13>>>0);
   if ($14) {
    $$012 = $12;
   } else {
    break;
   }
  }
 }
 $7 = ((($0)) + 160|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $15 = ((($0)) + 137|0);
  HEAP8[$15>>0] = 0;
  return;
 }
 _recycle_ht($8);
 $15 = ((($0)) + 137|0);
 HEAP8[$15>>0] = 0;
 return;
}
function _instance_free_solution_moves_233($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 284|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 _free($2);
 HEAP32[$1>>2] = 0;
 return;
}
function _recycle_ht($0) {
 $0 = $0|0;
 var $$021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fc_solve_reset_hard_thread_234($0);
 $1 = ((($0)) + 20|0);
 _fc_solve_compact_allocator_recycle($1);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 1344|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + (($5*552)|0)|0);
 $7 = ($5|0)>(0);
 if (!($7)) {
  return;
 }
 $$021 = $3;
 while(1) {
  _st_free_pq_235($$021);
  _fc_solve_reset_soft_thread_236($$021);
  $8 = ((($$021)) + 544|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   _fc_solve_pats__recycle_soft_thread_237($9);
  }
  $11 = ((($$021)) + 552|0);
  $12 = ($11>>>0)<($6>>>0);
  if ($12) {
   $$021 = $11;
  } else {
   break;
  }
 }
 return;
}
function _fc_solve_reset_hard_thread_234($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 2147483647;
 $3 = ((($0)) + 1348|0);
 HEAP32[$3>>2] = 0;
 return;
}
function _fc_solve_compact_allocator_recycle($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _fc_solve_compact_allocator_finish($0);
 _fc_solve_compact_allocator_init_helper($0);
 return;
}
function _st_free_pq_235($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 288|0);
 _fc_solve_PQueueFree_242($1);
 return;
}
function _fc_solve_reset_soft_thread_236($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 520|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($0)) + 521|0);
 HEAP8[$2>>0] = 0;
 return;
}
function _fc_solve_pats__recycle_soft_thread_237($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _fc_solve_pats__free_buckets_238($0);
 _fc_solve_pats__free_clusters_239($0);
 _fc_solve_pats__free_blocks_240($0);
 $1 = ((($0)) + 37668|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _fc_solve_pats__soft_thread_reset_helper_223($0);
  return;
 }
 _free($2);
 HEAP32[$1>>2] = 0;
 $4 = ((($0)) + 37672|0);
 HEAP32[$4>>2] = 0;
 _fc_solve_pats__soft_thread_reset_helper_223($0);
 return;
}
function _fc_solve_pats__free_buckets_238($0) {
 $0 = $0|0;
 var $$021 = 0, $$in1920 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$021 = 0;
 while(1) {
  $1 = (((($0)) + 2876|0) + ($$021<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$in1920 = $2;
   while(1) {
    $4 = ((($$in1920)) + 12|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = HEAP32[$$in1920>>2]|0;
    $7 = (_strlen($6)|0);
    $8 = (($7) + 1)|0;
    _fc_solve_pats__release_241($0,$6,$8);
    _fc_solve_pats__release_241($0,$$in1920,16);
    $9 = ($5|0)==(0|0);
    if ($9) {
     break;
    } else {
     $$in1920 = $5;
    }
   }
  }
  HEAP32[$1>>2] = 0;
  $10 = (($$021) + 1)|0;
  $exitcond = ($10|0)==(4093);
  if ($exitcond) {
   break;
  } else {
   $$021 = $10;
  }
 }
 return;
}
function _fc_solve_pats__free_clusters_239($0) {
 $0 = $0|0;
 var $$018 = 0, $$in1617 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$018 = 0;
 while(1) {
  $1 = (((($0)) + 35660|0) + ($$018<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$in1617 = $2;
   while(1) {
    $4 = ((($$in1617)) + 8|0);
    $5 = HEAP32[$4>>2]|0;
    _fc_solve_pats__release_241($0,$$in1617,12);
    $6 = ($5|0)==(0|0);
    if ($6) {
     break;
    } else {
     $$in1617 = $5;
    }
   }
  }
  HEAP32[$1>>2] = 0;
  $7 = (($$018) + 1)|0;
  $exitcond = ($7|0)==(499);
  if ($exitcond) {
   break;
  } else {
   $$018 = $7;
  }
 }
 return;
}
function _fc_solve_pats__free_blocks_240($0) {
 $0 = $0|0;
 var $$in1213 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 37656|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$1>>2] = 0;
  return;
 }
 $$in1213 = $2;
 while(1) {
  $4 = ((($$in1213)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$$in1213>>2]|0;
  _fc_solve_pats__release_241($0,$6,131072);
  _fc_solve_pats__release_241($0,$$in1213,16);
  $7 = ($5|0)==(0|0);
  if ($7) {
   break;
  } else {
   $$in1213 = $5;
  }
 }
 HEAP32[$1>>2] = 0;
 return;
}
function _fc_solve_pats__release_241($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 HEAP32[$3>>2] = $5;
 return;
}
function _fc_solve_PQueueFree_242($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 HEAP32[$1>>2] = 0;
 return;
}
function _fc_solve_compact_allocator_init_helper($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 _fc_solve_compact_allocator_extend($0);
 return;
}
function _trace_flare_solution($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 380|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  return;
 }
 _fc_solve_trace_solution($1);
 $5 = ((($1)) + 381|0);
 $6 = ((($0)) + 288|0);
 dest=$5; src=$6; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $7 = ((($1)) + 284|0);
 $8 = ((($0)) + 36|0);
 $9 = HEAP8[$1>>0]|0;
 $10 = $9&255;
 $11 = ((($1)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 _fc_solve_move_stack_normalize($7,$8,$5,$10,$13);
 $14 = ((($1)) + 352|0);
 _calc_moves_seq($7,$14);
 _instance_free_solution_moves_233($1);
 $15 = ((($1)) + 348|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 372|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($1)) + 144|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($1)) + 376|0);
 HEAP32[$21>>2] = $20;
 _recycle_flare($1);
 HEAP8[$2>>0] = 1;
 return;
}
function _fc_solve_moves_processed_get_moves_left($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 return ($4|0);
}
function _fc_solve_move_stack_normalize($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$03233 = 0, $$sink37 = 0, $$sink38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $tmpcast$byval_copy = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1392|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1392|0);
 $tmpcast$byval_copy = sp + 1380|0;
 $5 = sp + 1376|0;
 $6 = sp + 1292|0;
 $7 = sp;
 $8 = sp + 1288|0;
 $9 = sp + 1280|0;
 $10 = HEAPU8[15224>>0]|(HEAPU8[15224+1>>0]<<8)|(HEAPU8[15224+2>>0]<<16)|(HEAPU8[15224+3>>0]<<24);
 HEAP32[$8>>2] = $10;
 dest=$6; src=$1; stop=dest+80|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $11 = ((($6)) + 80|0);
 HEAP32[$11>>2] = 0;
 $12 = ($4|0)==(0);
 if (!($12)) {
  $$03233 = 0;
  while(1) {
   $24 = HEAP32[$11>>2]|0;
   $25 = 1 << $$03233;
   $26 = $24 & $25;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $24 | $25;
    HEAP32[$11>>2] = $28;
    $29 = (($6) + ($$03233<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $$03233 << 7;
    $32 = (($7) + ($31)|0);
    $33 = HEAP8[$30>>0]|0;
    $34 = $33&255;
    $35 = (($34) + 1)|0;
    _memcpy(($32|0),($30|0),($35|0))|0;
    HEAP32[$29>>2] = $32;
   }
   $36 = (($$03233) + 1)|0;
   $exitcond = ($36|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $$03233 = $36;
   }
  }
 }
 _fcs_move_stack__new_243($9);
 $13 = (_fc_solve_move_stack_pop($0,$5)|0);
 if ($13) {
  $58 = ((($0)) + 4|0);
  HEAP32[$58>>2] = 0;
  _fc_solve_move_stack_swallow_stack($0,$9);
  $59 = HEAP32[$9>>2]|0;
  _free($59);
  STACKTOP = sp;return;
 }
 $14 = ((($5)) + 1|0);
 $15 = ((($5)) + 1|0);
 $16 = ((($5)) + 2|0);
 $17 = ((($8)) + 2|0);
 $18 = ((($5)) + 2|0);
 $19 = ((($8)) + 2|0);
 $20 = ((($5)) + 2|0);
 $21 = ((($8)) + 2|0);
 $22 = ((($5)) + 3|0);
 $23 = ((($8)) + 3|0);
 $$sink37 = ((($8)) + 1|0);
 while(1) {
  ;HEAP8[$tmpcast$byval_copy>>0]=HEAP8[$5>>0]|0;HEAP8[$tmpcast$byval_copy+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$tmpcast$byval_copy+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$tmpcast$byval_copy+3>>0]=HEAP8[$5+3>>0]|0;
  _fc_solve_apply_move($6,$2,$tmpcast$byval_copy,$3,$4);
  $37 = HEAP8[$5>>0]|0;
  $38 = ($37<<24>>24)==(12);
  if (!($38)) {
   HEAP8[$8>>0] = $37;
   switch ($37<<24>>24) {
   case 11: case 4: case 1: case 0:  {
    $39 = HEAP8[$14>>0]|0;
    $40 = $39&255;
    $41 = (($2) + ($40)|0);
    $$sink38 = $41;
    label = 12;
    break;
   }
   case 5: case 3: case 2:  {
    $42 = HEAP8[$15>>0]|0;
    $43 = $42&255;
    $44 = (((($2)) + 10|0) + ($43)|0);
    $$sink38 = $44;
    label = 12;
    break;
   }
   default: {
   }
   }
   L19: do {
    if ((label|0) == 12) {
     label = 0;
     $45 = HEAP8[$$sink38>>0]|0;
     HEAP8[$$sink37>>0] = $45;
     switch ($37<<24>>24) {
     case 2: case 0:  {
      $51 = HEAP8[$16>>0]|0;
      $52 = $51&255;
      $53 = (($2) + ($52)|0);
      $54 = HEAP8[$53>>0]|0;
      HEAP8[$17>>0] = $54;
      $55 = ($37<<24>>24)==(0);
      if (!($55)) {
       break L19;
      }
      $56 = HEAP8[$22>>0]|0;
      HEAP8[$23>>0] = $56;
      break L19;
      break;
     }
     case 3: case 1:  {
      $46 = HEAP8[$18>>0]|0;
      $47 = $46&255;
      $48 = (((($2)) + 10|0) + ($47)|0);
      $49 = HEAP8[$48>>0]|0;
      HEAP8[$19>>0] = $49;
      break L19;
      break;
     }
     case 11: case 5: case 4:  {
      $50 = HEAP8[$20>>0]|0;
      HEAP8[$21>>0] = $50;
      break L19;
      break;
     }
     default: {
      break L19;
     }
     }
    }
   } while(0);
   ;HEAP8[$tmpcast$byval_copy>>0]=HEAP8[$8>>0]|0;HEAP8[$tmpcast$byval_copy+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$tmpcast$byval_copy+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$tmpcast$byval_copy+3>>0]=HEAP8[$8+3>>0]|0;
   _fcs_move_stack_push_244($9,$tmpcast$byval_copy);
  }
  $57 = (_fc_solve_move_stack_pop($0,$5)|0);
  if ($57) {
   break;
  }
 }
 $58 = ((($0)) + 4|0);
 HEAP32[$58>>2] = 0;
 _fc_solve_move_stack_swallow_stack($0,$9);
 $59 = HEAP32[$9>>2]|0;
 _free($59);
 STACKTOP = sp;return;
}
function _calc_moves_seq($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02324 = 0, $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = $4 << 2;
 $7 = (_malloc($6)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  return;
 }
 $9 = ($4|0)==(0);
 if (!($9)) {
  $10 = (($5) + ($4<<2)|0);
  $$02324 = $10;$$025 = 0;
  while(1) {
   $11 = ((($$02324)) + -4|0);
   $12 = (($7) + ($$025<<2)|0);
   $13 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8)|(HEAPU8[$11+2>>0]<<16)|(HEAPU8[$11+3>>0]<<24);
   HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=($13>>8)&255;HEAP8[$12+2>>0]=($13>>16)&255;HEAP8[$12+3>>0]=$13>>24;
   $14 = (($$025) + 1)|0;
   $exitcond = ($14|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $$02324 = $11;$$025 = $14;
   }
  }
 }
 HEAP32[$1>>2] = $4;
 HEAP32[$2>>2] = $7;
 return;
}
function _recycle_flare($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 316|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  return;
 }
 _recycle_inst($0);
 HEAP8[$1>>0] = 1;
 return;
}
function _fcs_move_stack__new_243($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(64)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _fc_solve_move_stack_pop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($3) + -1)|0;
 HEAP32[$2>>2] = $6;
 $7 = (($5) + ($6<<2)|0);
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
 HEAP8[$1>>0]=$8&255;HEAP8[$1+1>>0]=($8>>8)&255;HEAP8[$1+2>>0]=($8>>16)&255;HEAP8[$1+3>>0]=$8>>24;
 $$0 = 0;
 return ($$0|0);
}
function _fcs_move_stack_push_244($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $4 & 15;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $3 << 2;
  $8 = (($7) + 68)|0;
  $9 = HEAP32[$0>>2]|0;
  $10 = (_realloc($9,$8)|0);
  HEAP32[$0>>2] = $10;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($3<<2)|0);
 $13 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
 HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=($13>>8)&255;HEAP8[$12+2>>0]=($13>>16)&255;HEAP8[$12+3>>0]=$13>>24;
 return;
}
function _fc_solve_move_stack_swallow_stack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $2 = sp;
 $3 = (_fc_solve_move_stack_pop($1,$2)|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 while(1) {
  ;HEAP8[$$byval_copy>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$2+3>>0]|0;
  _fcs_move_stack_push_244($0,$$byval_copy);
  $4 = (_fc_solve_move_stack_pop($1,$2)|0);
  if ($4) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _run_hard_thread($0) {
 $0 = $0|0;
 var $$0101116 = 0, $$096$ph118 = 0, $$197103 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1328|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 16|0);
 $5 = ((($0)) + 1344|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 1336|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 1348|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12>>>0)<($6>>>0);
 if (!($13)) {
  $$3 = 5;
  return ($$3|0);
 }
 $14 = ((($0)) + 8|0);
 $15 = ((($0)) + 12|0);
 $16 = ((($3)) + 300|0);
 $17 = ((($3)) + 1|0);
 $18 = ((($3)) + 8|0);
 $19 = ((($3)) + 12|0);
 $20 = ((($3)) + 296|0);
 $21 = ((($3)) + 172|0);
 $22 = ((($3)) + 144|0);
 $23 = ((($3)) + 16|0);
 $24 = ((($3)) + 296|0);
 $25 = ((($3)) + 134|0);
 $$096$ph118 = 5;
 L4: while(1) {
  while(1) {
   $26 = HEAP32[$4>>2]|0;
   $27 = (((($10) + (($26*552)|0)|0)) + 520|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = ($28<<24>>24)==(0);
   if ($29) {
    break;
   }
   _switch_to_next_soft_thread($0,$6,$10,$8,$2,$4);
   $72 = HEAP32[$11>>2]|0;
   $73 = ($72>>>0)<($6>>>0);
   if (!($73)) {
    $$3 = $$096$ph118;
    label = 25;
    break L4;
   }
  }
  $30 = (($10) + (($26*552)|0)|0);
  $31 = (((($10) + (($26*552)|0)|0)) + 521|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = ($32<<24>>24)==(0);
  if ($33) {
   _init_dfs($30);
   _fc_solve_soft_thread_init_befs_or_bfs($30);
   $34 = (((($10) + (($26*552)|0)|0)) + 544|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0|0);
   if (!($36)) {
    _fc_solve_pats__init_buckets($35);
    _fc_solve_pats__init_clusters($35);
    $37 = ((($35)) + 820|0);
    $38 = HEAP32[$16>>2]|0;
    dest=$37; src=$38; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $39 = ((($35)) + 876|0);
    _memset(($39|0),0,1280)|0;
    $40 = HEAP8[$17>>0]|0;
    $41 = $40&255;
    $42 = ($40<<24>>24)==(0);
    if (!($42)) {
     $$0101116 = 0;
     while(1) {
      $43 = (((($35)) + 820|0) + ($$0101116<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = $$0101116 << 7;
      $46 = (((($35)) + 876|0) + ($45)|0);
      $47 = HEAP8[$44>>0]|0;
      $48 = $47&255;
      $49 = (($48) + 1)|0;
      _memmove(($46|0),($44|0),($49|0))|0;
      HEAP32[$43>>2] = $46;
      $50 = (($$0101116) + 1)|0;
      $exitcond = ($50|0)==($41|0);
      if ($exitcond) {
       break;
      } else {
       $$0101116 = $50;
      }
     }
    }
    _fc_solve_pats__initialize_solving_process($35);
   }
   HEAP8[$31>>0] = 1;
  }
  $51 = (_solve($30)|0);
  $52 = HEAP32[$14>>2]|0;
  $53 = HEAP32[$15>>2]|0;
  $54 = ($52|0)<($53|0);
  if (!($54)) {
   _switch_to_next_soft_thread($0,$6,$10,$8,$2,$4);
  }
  $55 = ($51|0)==(1);
  if ($55) {
   HEAP8[$27>>0] = 1;
   $56 = HEAP32[$11>>2]|0;
   $57 = (($56) + 1)|0;
   HEAP32[$11>>2] = $57;
   $58 = ($57|0)==($6|0);
   if ($58) {
    $59 = HEAP32[$21>>2]|0;
    $60 = (($59) + 1)|0;
    HEAP32[$21>>2] = $60;
   }
   $61 = (((($10) + (($26*552)|0)|0)) + 522|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = ($62<<24>>24)==(0);
   if (!($63)) {
    $64 = HEAP8[$25>>0]|0;
    $65 = ($64<<24>>24)==(0);
    if ($65) {
     $$3 = 1;
     label = 25;
     break;
    }
   }
   HEAP32[$24>>2] = $30;
   label = 21;
  } else {
   HEAP32[$20>>2] = $30;
   switch ($51|0) {
   case 0:  {
    $$3 = $51;
    label = 25;
    break L4;
    break;
   }
   case 5:  {
    label = 21;
    break;
   }
   default: {
    $$197103 = $51;
   }
   }
  }
  if ((label|0) == 21) {
   label = 0;
   $66 = HEAP32[$18>>2]|0;
   $67 = HEAP32[$19>>2]|0;
   $68 = ($66|0)<($67|0);
   if (!($68)) {
    $$3 = 5;
    label = 25;
    break;
   }
   $69 = HEAP32[$22>>2]|0;
   $70 = HEAP32[$23>>2]|0;
   $71 = ($69|0)<($70|0);
   if ($71) {
    $$197103 = 5;
   } else {
    $$3 = 5;
    label = 25;
    break;
   }
  }
  $74 = HEAP32[$11>>2]|0;
  $75 = ($74>>>0)<($6>>>0);
  if ($75) {
   $$096$ph118 = $$197103;
  } else {
   $$3 = $$197103;
   label = 25;
   break;
  }
 }
 if ((label|0) == 25) {
  return ($$3|0);
 }
 return (0)|0;
}
function _optimize_solution($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 284|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _fc_solve_trace_solution($0);
 }
 $4 = ((($0)) + 133|0);
 HEAP8[$4>>0] = 1;
 $5 = ((($0)) + 160|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_malloc(1356)|0);
  HEAP32[$5>>2] = $8;
  _fc_solve_instance__init_hard_thread($0,$8);
  $9 = ((($0)) + 156|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($8)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($10)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($10)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (((($14) + (($16*552)|0)|0)) + 542|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ((($12)) + 542|0);
  HEAP8[$19>>0] = $18;
  $$0 = $12;$$023 = $8;
  _setup_opt_thread__helper($0,$$0);
  $22 = ((($$023)) + 12|0);
  HEAP32[$22>>2] = 2147483647;
  $23 = (_fc_solve_befs_or_bfs_do_solve($$0)|0);
  return ($23|0);
 } else {
  $20 = ((($6)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $$0 = $21;$$023 = $6;
  _setup_opt_thread__helper($0,$$0);
  $22 = ((($$023)) + 12|0);
  HEAP32[$22>>2] = 2147483647;
  $23 = (_fc_solve_befs_or_bfs_do_solve($$0)|0);
  return ($23|0);
 }
 return (0)|0;
}
function _setup_opt_thread__helper($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$0$0$$sroa_idx = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 138|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = ((($1)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   _fc_solve_free_soft_thread_by_depth_move_array($1);
  }
  $9 = (_malloc(12)|0);
  $$sroa$0$0$$sroa_idx = ((($1)) + 8|0);
  HEAP32[$$sroa$0$0$$sroa_idx>>2] = 1;
  HEAP32[$6>>2] = $9;
  HEAP32[$2>>2] = 2147483647;
  $10 = ((($2)) + 4|0);
  $11 = ((($0)) + 176|0);
  _moves_order_dup_245($10,$11);
  ;HEAP32[$9>>2]=HEAP32[$2>>2]|0;HEAP32[$9+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$2+8>>2]|0;
 }
 $12 = ((($1)) + 16|0);
 HEAP32[$12>>2] = 1;
 $13 = ((($1)) + 550|0);
 HEAP8[$13>>0] = 1;
 $14 = ((($1)) + 549|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($1)) + 522|0);
 HEAP8[$15>>0] = 1;
 _fc_solve_soft_thread_init_befs_or_bfs($1);
 $16 = ((($1)) + 521|0);
 HEAP8[$16>>0] = 1;
 $17 = ((($0)) + 137|0);
 HEAP8[$17>>0] = 1;
 STACKTOP = sp;return;
}
function _moves_order_dup_245($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017 = 0, $$sroa$4$0$$sroa_idx7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 16)|0;
 $6 = $5 & -16;
 $7 = ($6*224)|0;
 $8 = (_memdup_246($4,$7)|0);
 $9 = ($2|0)==(0);
 if ($9) {
  HEAP32[$0>>2] = $2;
  $$sroa$4$0$$sroa_idx7 = ((($0)) + 4|0);
  HEAP32[$$sroa$4$0$$sroa_idx7>>2] = $8;
  return;
 }
 $$017 = 0;
 while(1) {
  $10 = (($8) + (($$017*224)|0)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (((($8) + (($$017*224)|0)|0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 << 2;
  $15 = (($14) + 64)|0;
  $16 = $15 & -64;
  $17 = (_memdup_246($11,$16)|0);
  HEAP32[$10>>2] = $17;
  $18 = (($$017) + 1)|0;
  $exitcond = ($18|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$017 = $18;
  }
 }
 HEAP32[$0>>2] = $2;
 $$sroa$4$0$$sroa_idx7 = ((($0)) + 4|0);
 HEAP32[$$sroa$4$0$$sroa_idx7>>2] = $8;
 return;
}
function _memdup_246($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _memcpy(($2|0),($0|0),($1|0))|0;
 $$0 = $2;
 return ($$0|0);
}
function _init_dfs($0) {
 $0 = $0|0;
 var $$08184 = 0, $$08283 = 0, $$085 = 0, $$sroa$019$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx20 = 0, $$sroa$3$0$$sroa_idx1 = 0, $$sroa$4$0$$sroa_idx2 = 0, $$sroa$5$0$$sroa_raw_idx = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond88 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 32|0);
 HEAP32[$5>>2] = 0;
 _increase_dfs_max_depth($0);
 $6 = ((($4)) + 196|0);
 $7 = ((($0)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$8>>2] = $6;
 $9 = ((($0)) + 36|0);
 $10 = ((($0)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 _fc_solve_rand_init($9,$11);
 $12 = ((($0)) + 48|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = ((($0)) + 548|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 $18 = ((($0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 44|0);
 HEAP32[$20>>2] = $19;
 $21 = ($19*12)|0;
 $22 = (_malloc($21)|0);
 HEAP32[$12>>2] = $22;
 $23 = ((($0)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($19|0)==(0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $$08184 = 0;$$085 = $22;
 while(1) {
  $26 = (($24) + (($$08184*12)|0)|0);
  $27 = HEAP32[$26>>2]|0;
  HEAP32[$$085>>2] = $27;
  $28 = (((($24) + (($$08184*12)|0)|0)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (((($24) + (($$08184*12)|0)|0)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31*224)|0;
  $33 = (_malloc($32)|0);
  $$sroa$019$0$$sroa_idx = ((($$085)) + 4|0);
  HEAP32[$$sroa$019$0$$sroa_idx>>2] = 0;
  $$sroa$2$0$$sroa_idx20 = ((($$085)) + 8|0);
  HEAP32[$$sroa$2$0$$sroa_idx20>>2] = $33;
  $34 = ($31|0)==(0);
  if (!($34)) {
   $$08283 = 0;
   while(1) {
    HEAP32[$1>>2] = 0;
    HEAP32[$2>>2] = 0;
    $41 = (($29) + (($$08283*224)|0)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (((($29) + (($$08283*224)|0)|0)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    _add_to_move_funcs_list($2,$1,$42,$44);
    $45 = HEAP32[$$sroa$2$0$$sroa_idx20>>2]|0;
    $46 = HEAP32[$$sroa$019$0$$sroa_idx>>2]|0;
    $47 = (($46) + 1)|0;
    HEAP32[$$sroa$019$0$$sroa_idx>>2] = $47;
    $48 = (($45) + (($46*224)|0)|0);
    if ($17) {
     $53 = 0;
    } else {
     $49 = (((($29) + (($$08283*224)|0)|0)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $53 = $50;
    }
    $51 = HEAP32[$2>>2]|0;
    $52 = HEAP32[$1>>2]|0;
    HEAP32[$48>>2] = $51;
    $$sroa$3$0$$sroa_idx1 = (((($45) + (($46*224)|0)|0)) + 4|0);
    HEAP32[$$sroa$3$0$$sroa_idx1>>2] = $52;
    $$sroa$4$0$$sroa_idx2 = (((($45) + (($46*224)|0)|0)) + 8|0);
    HEAP32[$$sroa$4$0$$sroa_idx2>>2] = $53;
    $$sroa$5$0$$sroa_raw_idx = ((($48)) + 12|0);
    _memset(($$sroa$5$0$$sroa_raw_idx|0),0,212)|0;
    $54 = ($53|0)==(2);
    $55 = (((($45) + (($46*224)|0)|0)) + 16|0);
    if ($54) {
     $56 = (((($29) + (($$08283*224)|0)|0)) + 16|0);
     _memcpy(($55|0),($56|0),208)|0;
     _fc_solve_initialize_befs_rater($0,$55);
    }
    $57 = (($$08283) + 1)|0;
    $exitcond = ($57|0)==($31|0);
    if ($exitcond) {
     break;
    } else {
     $$08283 = $57;
    }
   }
  }
  $35 = HEAP32[$$sroa$2$0$$sroa_idx20>>2]|0;
  $36 = HEAP32[$$sroa$019$0$$sroa_idx>>2]|0;
  $37 = ($36*224)|0;
  $38 = (_realloc($35,$37)|0);
  HEAP32[$$sroa$2$0$$sroa_idx20>>2] = $38;
  $39 = (($$08184) + 1)|0;
  $40 = ((($$085)) + 12|0);
  $exitcond88 = ($39|0)==($19|0);
  if ($exitcond88) {
   break;
  } else {
   $$08184 = $39;$$085 = $40;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_pats__init_buckets($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = HEAP8[$1>>0]|0;
 $6 = $5&255;
 $7 = ($4*3)|0;
 $8 = (1)?($7 >>> 1):($7);
 $9 = $4 & 1;
 $10 = (($8) + ($9))|0;
 $11 = ((($0)) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($0)) + 2876|0);
 $13 = (($10) + 12)|0;
 $14 = (_fc_solve_pats__align($13)|0);
 $15 = ((($0)) + 35636|0);
 _memset(($12|0),0,16376)|0;
 HEAP32[$15>>2] = $14;
 $16 = (($6) + 28)|0;
 $17 = (_fc_solve_pats__align($16)|0);
 $18 = ((($0)) + 2872|0);
 HEAP32[$18>>2] = $17;
 return;
}
function _fc_solve_pats__init_clusters($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 35660|0);
 _memset(($1|0),0,1996)|0;
 $2 = (_fc_solve_pats__new_block($0)|0);
 $3 = ((($0)) + 37656|0);
 HEAP32[$3>>2] = $2;
 return;
}
function _fc_solve_pats__initialize_solving_process($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $scevgep = ((($0)) + 12|0);
 _memset(($scevgep|0),0,400)|0;
 $2 = ((($0)) + 812|0);
 HEAP32[$2>>2] = 0;
 _fc_solve_pats__hash_layout($0);
 _fc_solve_pats__sort_piles($0);
 HEAP8[$1>>0] = 0;
 $3 = (_fc_solve_pats__new_position($0,0,$1)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 _fc_solve_pats__queue_position($0,$3,0);
 STACKTOP = sp;return;
}
function _solve($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 0:  {
  $3 = (_dfs_solve($0)|0);
  $$0 = $3;
  break;
 }
 case 1:  {
  $4 = (_fc_solve_befs_or_bfs_do_solve($0)|0);
  $$0 = $4;
  break;
 }
 case 2:  {
  $5 = (_do_patsolve($0)|0);
  $$0 = $5;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _switch_to_next_soft_thread($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 1332|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)<($4>>>0);
 if ($8) {
  _set_next_prelude_item($0,$3,$5);
  return;
 } else {
  $9 = HEAP32[$5>>2]|0;
  $10 = (($9) + 1)|0;
  $11 = (($10>>>0) % ($1>>>0))&-1;
  $12 = (((($2) + (($11*552)|0)|0)) + 528|0);
  $13 = HEAP32[$12>>2]|0;
  _set_next_soft_thread($0,$11,$13,$5);
  return;
 }
}
function _set_next_prelude_item($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$4$0$$sroa_idx2 = 0, $$sroa$4$0$copyload = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 1332|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $$sroa$0$0$$sroa_idx = (($1) + ($4<<3)|0);
 $$sroa$0$0$copyload = HEAP32[$$sroa$0$0$$sroa_idx>>2]|0;
 $$sroa$4$0$$sroa_idx2 = (((($1) + ($4<<3)|0)) + 4|0);
 $$sroa$4$0$copyload = HEAP32[$$sroa$4$0$$sroa_idx2>>2]|0;
 _set_next_soft_thread($0,$$sroa$0$0$copyload,$$sroa$4$0$copyload,$2);
 return;
}
function _set_next_soft_thread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2))|0;
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = $6;
 return;
}
function _dfs_solve($0) {
 $0 = $0|0;
 var $$0350466 = 0, $$0352453 = 0, $$0353 = 0, $$0353457 = 0, $$0353458 = 0, $$0358449 = 0, $$0367 = 0, $$0367$in462 = 0, $$0367$in462$phi = 0, $$0367461 = 0, $$0367463 = 0, $$0368448 = 0, $$0373 = 0, $$1339$ph = 0, $$1339$ph$be = 0, $$1345$ph = 0, $$1345$ph$be = 0, $$1355 = 0, $$1355$ph = 0, $$1355$ph$be = 0;
 var $$1355$ph682 = 0, $$1360 = 0, $$1360$ph = 0, $$1360$ph$be = 0, $$1360$ph681 = 0, $$1365 = 0, $$1365$ph = 0, $$1365$ph680 = 0, $$1370$ph = 0, $$1370$ph$be = 0, $$1370$ph679 = 0, $$2356 = 0, $$2356$ph = 0, $$2361 = 0, $$2366 = 0, $$2375$ph = 0, $$2375$ph$be = 0, $$3357 = 0, $$4342 = 0, $$4348 = 0;
 var $$5378 = 0, $$9 = 0, $$byval_copy1 = 0, $$in = 0, $$pr = 0, $$sroa$0244$0$copyload = 0, $$sroa$0258$0$$sroa_idx = 0, $$sroa$0258$0$$sroa_idx262 = 0, $$sroa$0258$0$$sroa_idx264 = 0, $$sroa$0258$0$copyload = 0, $$sroa$0258$0$copyload263 = 0, $$sroa$0258$0$copyload265 = 0, $$sroa$0258$1$ph = 0, $$sroa$0258$1$ph$be = 0, $$sroa$0258$4 = 0, $$sroa$2154$0$$sroa_idx155 = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$5$0$copyload = 0, $$sroa$9$0$$sroa_idx267 = 0, $$sroa$9$0$$sroa_idx268 = 0;
 var $$sroa$9$0$$sroa_idx270 = 0, $$sroa$9$0$copyload = 0, $$sroa$9$0$copyload269 = 0, $$sroa$9$0$copyload271 = 0, $$sroa$9$1$ph = 0, $$sroa$9$1$ph$be = 0, $$sroa$9$4 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
 var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
 var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
 var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
 var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond553 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 304|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (_fcs_get_calc_real_depth($4)|0);
 $8 = ((($4)) + 134|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ((($0)) + 522|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($4)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $$sroa$0244$0$copyload = HEAP8[$4>>0]|0;
 $$sroa$5$0$$sroa_idx = ((($4)) + 1|0);
 $$sroa$5$0$copyload = HEAP8[$$sroa$5$0$$sroa_idx>>0]|0;
 $16 = ((($0)) + 32|0);
 $17 = ((($0)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$16>>2]|0;
 $20 = (($18) + (($19*244)|0)|0);
 $21 = ((($0)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 542|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = HEAP32[$20>>2]|0;
 $26 = ((($25)) + 56|0);
 HEAP32[$1>>2] = $25;
 $$sroa$2154$0$$sroa_idx155 = ((($1)) + 4|0);
 HEAP32[$$sroa$2154$0$$sroa_idx155>>2] = $26;
 $27 = (((($18) + (($19*244)|0)|0)) + 4|0);
 $28 = $27;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 _calculate_real_depth($7,$25);
 $38 = ((($0)) + 48|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($4)) + 8|0);
 $41 = (_calc_ht_max_num_states($4,$3)|0);
 $42 = ((($4)) + 184|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($4)) + 188|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$16>>2]|0;
 $$0373 = $39;
 while(1) {
  $47 = HEAP32[$$0373>>2]|0;
  $48 = ($46|0)<($47|0);
  $49 = ((($$0373)) + 12|0);
  if ($48) {
   break;
  } else {
   $$0373 = $49;
  }
 }
 $50 = ($6<<24>>24)!=(0);
 $51 = ($9<<24>>24)==(0);
 $52 = ($11<<24>>24)==(0);
 $53 = ($24<<24>>24)!=(0);
 $54 = ((($0)) + 36|0);
 $55 = ((($3)) + 8|0);
 $56 = ($$0373|0)==($39|0);
 if ($56) {
  $359 = 0;
 } else {
  $57 = ((($$0373)) + -12|0);
  $58 = HEAP32[$57>>2]|0;
  $359 = $58;
 }
 $$sroa$0258$0$$sroa_idx = ((($$0373)) + 4|0);
 $$sroa$0258$0$copyload = HEAP32[$$sroa$0258$0$$sroa_idx>>2]|0;
 $$sroa$9$0$$sroa_idx267 = ((($$0373)) + 8|0);
 $$sroa$9$0$copyload = HEAP32[$$sroa$9$0$$sroa_idx267>>2]|0;
 $59 = ((($2)) + 4|0);
 $60 = (3)?($13 >>> 3):($13);
 $61 = $13 & 7;
 $62 = 1 << $61;
 $63 = ($43|0)==(0|0);
 $64 = ((($0)) + 524|0);
 $65 = ((($0)) + 523|0);
 $66 = ((($4)) + 140|0);
 $67 = ((($4)) + 20|0);
 $68 = ((($4)) + 144|0);
 $69 = ((($2)) + 4|0);
 $70 = ((($0)) + 524|0);
 $71 = ((($0)) + 523|0);
 $$1339$ph = $47;$$1345$ph = $359;$$1355$ph = 0;$$1360$ph = $20;$$1365$ph = $22;$$1370$ph = $25;$$2375$ph = $$0373;$$sroa$0258$1$ph = $$sroa$0258$0$copyload;$$sroa$9$1$ph = $$sroa$9$0$copyload;
 L7: while(1) {
  $$1355$ph682 = $$1355$ph;$$1360$ph681 = $$1360$ph;$$1365$ph680 = $$1365$ph;$$1370$ph679 = $$1370$ph;
  L9: while(1) {
   $$1355 = $$1355$ph682;$$1360 = $$1360$ph681;$$1365 = $$1365$ph680;
   while(1) {
    $72 = HEAP32[$16>>2]|0;
    $73 = (($72) + 1)|0;
    $74 = ($73|0)<($$1365|0);
    if ($74) {
     $$2361 = $$1360;$$2366 = $$1365;
    } else {
     _increase_dfs_max_depth($0);
     $75 = HEAP32[$17>>2]|0;
     $76 = HEAP32[$16>>2]|0;
     $77 = (($75) + (($76*244)|0)|0);
     $78 = HEAP32[$21>>2]|0;
     $79 = (((($75) + (($76*244)|0)|0)) + 4|0);
     $80 = $79;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 4)|0;
     $84 = $83;
     $85 = HEAP32[$84>>2]|0;
     $86 = $2;
     $87 = $86;
     HEAP32[$87>>2] = $82;
     $88 = (($86) + 4)|0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $$2361 = $77;$$2366 = $78;
    }
    $90 = ((($$2361)) + 16|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = HEAP32[$2>>2]|0;
    $93 = ($91|0)==($92|0);
    if ($93) {
     $94 = ((($$2361)) + 12|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==($$sroa$0258$1$ph|0);
     if ($96) {
      break;
     }
     HEAP32[$2>>2] = 0;
     $138 = ((($$2361)) + 20|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $139 | $95;
     $141 = ($140|0)==(0);
     do {
      if ($141) {
       if (!($63)) {
        $142 = HEAP32[$40>>2]|0;
        $143 = HEAP32[$16>>2]|0;
        $144 = ($143|0)==(0);
        if ($144) {
         $151 = 0;
        } else {
         $145 = HEAP32[$17>>2]|0;
         $146 = (($143) + -1)|0;
         $147 = (($145) + (($146*244)|0)|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = ((($148)) + 68|0);
         $150 = HEAP32[$149>>2]|0;
         $151 = $150;
        }
        FUNCTION_TABLE_viiiiii[$43 & 1]($45,$142,$143,$4,$1,$151);
       }
       $152 = (_fcs__should_state_be_pruned($53,$$1370$ph679)|0);
       if ($152) {
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        $153 = (_fc_solve_sfs_raymond_prune($0,$$byval_copy1)|0);
        $154 = ($153|0)==(0|0);
        if (!($154)) {
         HEAP32[$94>>2] = $$sroa$0258$1$ph;
         _fc_solve_derived_states_list_add_state($2,$153,0);
         $155 = ((($$2361)) + 24|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0);
         if ($157) {
          HEAP32[$155>>2] = 1;
          $158 = ((($$2361)) + 28|0);
          $159 = HEAP32[$158>>2]|0;
          $160 = (_realloc($159,8)|0);
          HEAP32[$158>>2] = $160;
         }
         $161 = ((($$2361)) + 28|0);
         $162 = HEAP32[$161>>2]|0;
         HEAP32[$162>>2] = 0;
         break;
        }
       }
       $163 = (_count_num_vacant_freecells($$sroa$0244$0$copyload,$$1370$ph679)|0);
       $164 = (_count_num_vacant_stacks($$sroa$5$0$copyload,$$1370$ph679)|0);
       $165 = ($164<<24>>24)==($$sroa$5$0$copyload<<24>>24);
       $166 = ($163<<24>>24)==($$sroa$0244$0$copyload<<24>>24);
       $spec$select = $166 & $165;
       if ($spec$select) {
        label = 32;
        break L7;
       }
       $167 = ((($$2361)) + 241|0);
       HEAP8[$167>>0] = $163;
       HEAP8[$64>>0] = $163;
       $168 = ((($$2361)) + 240|0);
       HEAP8[$168>>0] = $164;
       HEAP8[$65>>0] = $164;
       $169 = ((($$2361)) + 32|0);
       _fc_solve__calc_positions_by_rank_data($0,$$1370$ph679,$169,$50);
      }
     } while(0);
     $175 = HEAP32[$94>>2]|0;
     $176 = (((($$sroa$9$1$ph) + (($175*224)|0)|0)) + 16|0);
     $177 = ($175>>>0)<($$sroa$0258$1$ph>>>0);
     L36: do {
      if ($177) {
       $178 = (((($$sroa$9$1$ph) + (($175*224)|0)|0)) + 8|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)!=(0);
       while(1) {
        $181 = HEAP32[$94>>2]|0;
        $182 = (($$sroa$9$1$ph) + (($181*224)|0)|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = HEAP32[$138>>2]|0;
        $185 = (($183) + ($184<<2)|0);
        $186 = HEAP32[$185>>2]|0;
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        FUNCTION_TABLE_viii[$186 & 31]($0,$$byval_copy1,$2);
        $187 = HEAP32[$138>>2]|0;
        $188 = (($187) + 1)|0;
        HEAP32[$138>>2] = $188;
        $189 = HEAP32[$94>>2]|0;
        $190 = (((($$sroa$9$1$ph) + (($189*224)|0)|0)) + 4|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($188|0)==($191|0);
        if ($192) {
         break;
        }
        $194 = HEAP32[$2>>2]|0;
        $195 = ($194|0)==(0);
        $196 = $180 | $195;
        if (!($196)) {
         $$2356 = 0;$199 = $194;
         break L36;
        }
       }
       $193 = (($189) + 1)|0;
       HEAP32[$94>>2] = $193;
       HEAP32[$138>>2] = 0;
       $$2356$ph = $179;
       label = 38;
      } else {
       $$2356$ph = $$1355;
       label = 38;
      }
     } while(0);
     if ((label|0) == 38) {
      label = 0;
      $$pr = HEAP32[$2>>2]|0;
      $$2356 = $$2356$ph;$199 = $$pr;
     }
     $197 = ((($$2361)) + 24|0);
     $198 = HEAP32[$197>>2]|0;
     $200 = ($199>>>0)>($198>>>0);
     $201 = ((($$2361)) + 28|0);
     if ($200) {
      $202 = $199 << 3;
      HEAP32[$197>>2] = $199;
      $203 = HEAP32[$201>>2]|0;
      $204 = (_realloc($203,$202)|0);
      HEAP32[$201>>2] = $204;
      label = 42;
     } else {
      $205 = ($199|0)==(0);
      if (!($205)) {
       label = 42;
      }
     }
     L48: do {
      if ((label|0) == 42) {
       label = 0;
       $$in = ((($$2361)) + 28|0);
       $206 = HEAP32[$$in>>2]|0;
       $$0368448 = 0;
       while(1) {
        $208 = (($206) + ($$0368448<<3)|0);
        HEAP32[$208>>2] = $$0368448;
        $209 = (($$0368448) + 1)|0;
        $exitcond = ($209|0)==($199|0);
        if ($exitcond) {
         break;
        } else {
         $$0368448 = $209;
        }
       }
       $207 = ($199>>>0)>(1);
       if ($207) {
        switch ($$2356|0) {
        case 1:  {
         $$0367461 = (($199) + -1)|0;
         $$0367$in462 = $199;$$0367463 = $$0367461;
         while(1) {
          $210 = (_fc_solve_rand_get_random_number($54)|0);
          $211 = (($210>>>0) % ($$0367$in462>>>0))&-1;
          $212 = (($206) + ($$0367463<<3)|0);
          $213 = $212;
          $214 = $213;
          $215 = HEAP32[$214>>2]|0;
          $216 = (($213) + 4)|0;
          $217 = $216;
          $218 = HEAP32[$217>>2]|0;
          $219 = (($206) + ($211<<3)|0);
          $220 = $219;
          $221 = $220;
          $222 = HEAP32[$221>>2]|0;
          $223 = (($220) + 4)|0;
          $224 = $223;
          $225 = HEAP32[$224>>2]|0;
          $226 = $212;
          $227 = $226;
          HEAP32[$227>>2] = $222;
          $228 = (($226) + 4)|0;
          $229 = $228;
          HEAP32[$229>>2] = $225;
          $230 = $219;
          $231 = $230;
          HEAP32[$231>>2] = $215;
          $232 = (($230) + 4)|0;
          $233 = $232;
          HEAP32[$233>>2] = $218;
          $$0367 = (($$0367463) + -1)|0;
          $234 = ($$0367|0)==(0);
          if ($234) {
           break L48;
          } else {
           $$0367$in462$phi = $$0367463;$$0367463 = $$0367;$$0367$in462 = $$0367$in462$phi;
          }
         }
         break;
        }
        case 2:  {
         break;
        }
        default: {
         break L48;
        }
        }
        if ($177) {
         $235 = HEAP32[$69>>2]|0;
         $$0358449 = 0;
         while(1) {
          $238 = (($235) + ($$0358449<<3)|0);
          $239 = HEAP32[$238>>2]|0;
          $240 = (_calc_depth($239)|0);
          $241 = (20000 - ($240))|0;
          $242 = (_befs_rate_state($0,$176,$239,$241)|0);
          $243 = (((($206) + ($$0358449<<3)|0)) + 4|0);
          HEAP32[$243>>2] = $242;
          $244 = (($$0358449) + 1)|0;
          $exitcond553 = ($244|0)==($199|0);
          if ($exitcond553) {
           break;
          } else {
           $$0358449 = $244;
          }
         }
         $236 = (($206) + ($199<<3)|0);
         $237 = ($199|0)>(1);
         if ($237) {
          $$0353457 = ((($206)) + 8|0);
          $$0353458 = $$0353457;
          while(1) {
           $245 = ($$0353458>>>0)>($206>>>0);
           L66: do {
            if ($245) {
             $$0352453 = $$0353458;
             while(1) {
              $246 = ((($$0352453)) + 4|0);
              $247 = HEAP32[$246>>2]|0;
              $248 = ((($$0352453)) + -8|0);
              $249 = ((($$0352453)) + -4|0);
              $250 = HEAP32[$249>>2]|0;
              $251 = ($247|0)<($250|0);
              if (!($251)) {
               break L66;
              }
              $252 = $$0352453;
              $253 = $252;
              $254 = HEAP32[$253>>2]|0;
              $255 = (($252) + 4)|0;
              $256 = $255;
              $257 = HEAP32[$256>>2]|0;
              $258 = $248;
              $259 = $258;
              $260 = HEAP32[$259>>2]|0;
              $261 = (($258) + 4)|0;
              $262 = $261;
              $263 = HEAP32[$262>>2]|0;
              $264 = $$0352453;
              $265 = $264;
              HEAP32[$265>>2] = $260;
              $266 = (($264) + 4)|0;
              $267 = $266;
              HEAP32[$267>>2] = $263;
              $268 = $248;
              $269 = $268;
              HEAP32[$269>>2] = $254;
              $270 = (($268) + 4)|0;
              $271 = $270;
              HEAP32[$271>>2] = $257;
              $272 = ($248>>>0)>($206>>>0);
              if ($272) {
               $$0352453 = $248;
              } else {
               break;
              }
             }
            }
           } while(0);
           $$0353 = ((($$0353458)) + 8|0);
           $273 = ($$0353>>>0)<($236>>>0);
           if ($273) {
            $$0353458 = $$0353;
           } else {
            break;
           }
          }
         }
        }
       }
      }
     } while(0);
     HEAP32[$90>>2] = 0;
     $$3357 = $$2356;
    } else {
     $$3357 = $$1355;
    }
    $274 = HEAP32[$2>>2]|0;
    $275 = HEAP32[$59>>2]|0;
    $276 = HEAP32[$90>>2]|0;
    $277 = ($276>>>0)<($274>>>0);
    if ($277) {
     $278 = (($276) + -1)|0;
     $279 = ((($$2361)) + 28|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = (($280) + ($278<<3)|0);
     $$0350466 = $281;$307 = $276;
     while(1) {
      $282 = ((($$0350466)) + 8|0);
      $283 = HEAP32[$282>>2]|0;
      $284 = (($275) + ($283<<3)|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = (_fcs__is_state_a_dead_end($285)|0);
      if (!($286)) {
       $287 = (((($285)) + 75|0) + ($60)|0);
       $288 = HEAP8[$287>>0]|0;
       $289 = $288&255;
       $290 = $62 & $289;
       $291 = ($290|0)==(0);
       if ($291) {
        label = 63;
        break L9;
       }
      }
      $352 = (($307) + 1)|0;
      $353 = ($352>>>0)<($274>>>0);
      if ($353) {
       $$0350466 = $282;$307 = $352;
      } else {
       break;
      }
     }
    }
    $354 = ((($$2361)) + 16|0);
    HEAP32[$354>>2] = $274;
    $$1355 = $$3357;$$1360 = $$2361;$$1365 = $$2366;
   }
   if (!($52)) {
    $97 = ((($$1370$ph679)) + 74|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98 | 8;
    HEAP8[$97>>0] = $99;
    if (!($51)) {
     _mark_as_dead_end__proto($$1370$ph679);
    }
   }
   $100 = ((($$2361)) + 4|0);
   $101 = $2;
   $102 = $101;
   $103 = HEAP32[$102>>2]|0;
   $104 = (($101) + 4)|0;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = $100;
   $108 = $107;
   HEAP32[$108>>2] = $103;
   $109 = (($107) + 4)|0;
   $110 = $109;
   HEAP32[$110>>2] = $106;
   $111 = HEAP32[$16>>2]|0;
   $112 = (($111) + -1)|0;
   HEAP32[$16>>2] = $112;
   $113 = ($111|0)<(1);
   if ($113) {
    label = 75;
    break L7;
   }
   $114 = ((($$2361)) + -244|0);
   $115 = ((($$2361)) + -240|0);
   $116 = $115;
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $119 = (($116) + 4)|0;
   $120 = $119;
   $121 = HEAP32[$120>>2]|0;
   $122 = $2;
   $123 = $122;
   HEAP32[$123>>2] = $118;
   $124 = (($122) + 4)|0;
   $125 = $124;
   HEAP32[$125>>2] = $121;
   $126 = HEAP32[$114>>2]|0;
   $127 = ((($126)) + 56|0);
   HEAP32[$1>>2] = $126;
   HEAP32[$$sroa$2154$0$$sroa_idx155>>2] = $127;
   $128 = ((($$2361)) + -3|0);
   $129 = HEAP8[$128>>0]|0;
   HEAP8[$70>>0] = $129;
   $130 = ((($$2361)) + -4|0);
   $131 = HEAP8[$130>>0]|0;
   HEAP8[$71>>0] = $131;
   $132 = ($111|0)>($$1345$ph|0);
   if ($132) {
    $$1355$ph682 = $$1355;$$1360$ph681 = $114;$$1365$ph680 = $$2366;$$1370$ph679 = $126;
   } else {
    label = 17;
    break;
   }
  }
  if ((label|0) == 17) {
   label = 0;
   $133 = ((($$2375$ph)) + -12|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($133|0)==($39|0);
   if ($135) {
    $360 = 0;
   } else {
    $136 = ((($$2375$ph)) + -24|0);
    $137 = HEAP32[$136>>2]|0;
    $360 = $137;
   }
   $$sroa$0258$0$$sroa_idx262 = ((($$2375$ph)) + -8|0);
   $$sroa$0258$0$copyload263 = HEAP32[$$sroa$0258$0$$sroa_idx262>>2]|0;
   $$sroa$9$0$$sroa_idx268 = ((($$2375$ph)) + -4|0);
   $$sroa$9$0$copyload269 = HEAP32[$$sroa$9$0$$sroa_idx268>>2]|0;
   $$1339$ph$be = $134;$$1345$ph$be = $360;$$1355$ph$be = $$1355;$$1360$ph$be = $114;$$1370$ph$be = $126;$$2375$ph$be = $133;$$sroa$0258$1$ph$be = $$sroa$0258$0$copyload263;$$sroa$9$1$ph$be = $$sroa$9$0$copyload269;
  }
  else if ((label|0) == 63) {
   label = 0;
   $292 = ((($285)) + 56|0);
   $293 = HEAP32[$40>>2]|0;
   $294 = (($293) + 1)|0;
   HEAP32[$40>>2] = $294;
   $295 = HEAP32[$55>>2]|0;
   $296 = (($295) + 1)|0;
   HEAP32[$55>>2] = $296;
   _set_scan_visited($285,$13);
   $297 = HEAP32[$40>>2]|0;
   $298 = ((($285)) + 68|0);
   HEAP32[$298>>2] = $297;
   $299 = HEAP32[$16>>2]|0;
   $300 = (($299) + 1)|0;
   HEAP32[$16>>2] = $300;
   $301 = ($300|0)<($$1339$ph|0);
   if ($301) {
    $$4342 = $$1339$ph;$$4348 = $$1345$ph;$$5378 = $$2375$ph;$$sroa$0258$4 = $$sroa$0258$1$ph;$$sroa$9$4 = $$sroa$9$1$ph;
   } else {
    $302 = ((($$2375$ph)) + 12|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = ($302|0)==($39|0);
    if ($304) {
     $361 = 0;
    } else {
     $305 = HEAP32[$$2375$ph>>2]|0;
     $361 = $305;
    }
    $$sroa$0258$0$$sroa_idx264 = ((($$2375$ph)) + 16|0);
    $$sroa$0258$0$copyload265 = HEAP32[$$sroa$0258$0$$sroa_idx264>>2]|0;
    $$sroa$9$0$$sroa_idx270 = ((($$2375$ph)) + 20|0);
    $$sroa$9$0$copyload271 = HEAP32[$$sroa$9$0$$sroa_idx270>>2]|0;
    $$4342 = $303;$$4348 = $361;$$5378 = $302;$$sroa$0258$4 = $$sroa$0258$0$copyload265;$$sroa$9$4 = $$sroa$9$0$copyload271;
   }
   $306 = ((($$2361)) + 16|0);
   HEAP32[$306>>2] = $307;
   $308 = ((($$2361)) + 4|0);
   $309 = $2;
   $310 = $309;
   $311 = HEAP32[$310>>2]|0;
   $312 = (($309) + 4)|0;
   $313 = $312;
   $314 = HEAP32[$313>>2]|0;
   $315 = $308;
   $316 = $315;
   HEAP32[$316>>2] = $311;
   $317 = (($315) + 4)|0;
   $318 = $317;
   HEAP32[$318>>2] = $314;
   $319 = ((($$2361)) + 244|0);
   HEAP32[$319>>2] = $285;
   HEAP32[$1>>2] = $285;
   HEAP32[$$sroa$2154$0$$sroa_idx155>>2] = $292;
   $320 = ((($$2361)) + 256|0);
   HEAP32[$320>>2] = 0;
   $321 = ((($$2361)) + 264|0);
   HEAP32[$321>>2] = 0;
   $322 = ((($$2361)) + 260|0);
   HEAP32[$322>>2] = 0;
   $323 = ((($$2361)) + 248|0);
   $324 = $323;
   $325 = $324;
   $326 = HEAP32[$325>>2]|0;
   $327 = (($324) + 4)|0;
   $328 = $327;
   $329 = HEAP32[$328>>2]|0;
   $330 = $2;
   $331 = $330;
   HEAP32[$331>>2] = $326;
   $332 = (($330) + 4)|0;
   $333 = $332;
   HEAP32[$333>>2] = $329;
   HEAP32[$2>>2] = 0;
   _calculate_real_depth($7,$285);
   $334 = HEAP32[$66>>2]|0;
   $335 = HEAP32[$67>>2]|0;
   $336 = ($334|0)<($335|0);
   if (!($336)) {
    _free_states($4);
   }
   $337 = HEAP32[$55>>2]|0;
   $338 = ($337|0)==($41|0);
   if ($338) {
    label = 72;
    break;
   }
   $339 = HEAP32[$68>>2]|0;
   $340 = ($339|0)<($15|0);
   if ($340) {
    $$1339$ph$be = $$4342;$$1345$ph$be = $$4348;$$1355$ph$be = $$3357;$$1360$ph$be = $319;$$1370$ph$be = $285;$$2375$ph$be = $$5378;$$sroa$0258$1$ph$be = $$sroa$0258$4;$$sroa$9$1$ph$be = $$sroa$9$4;
   } else {
    label = 72;
    break;
   }
  }
  $$1339$ph = $$1339$ph$be;$$1345$ph = $$1345$ph$be;$$1355$ph = $$1355$ph$be;$$1360$ph = $$1360$ph$be;$$1365$ph = $$2366;$$1370$ph = $$1370$ph$be;$$2375$ph = $$2375$ph$be;$$sroa$0258$1$ph = $$sroa$0258$1$ph$be;$$sroa$9$1$ph = $$sroa$9$1$ph$be;
 }
 if ((label|0) == 32) {
  $170 = ((($4)) + 280|0);
  HEAP32[$170>>2] = $$1370$ph679;
  $171 = HEAP32[$40>>2]|0;
  $172 = (($171) + 1)|0;
  HEAP32[$40>>2] = $172;
  $173 = HEAP32[$55>>2]|0;
  $174 = (($173) + 1)|0;
  HEAP32[$55>>2] = $174;
  $$9 = 0;
  STACKTOP = sp;return ($$9|0);
 }
 else if ((label|0) == 72) {
  $341 = $2;
  $342 = $341;
  $343 = HEAP32[$342>>2]|0;
  $344 = (($341) + 4)|0;
  $345 = $344;
  $346 = HEAP32[$345>>2]|0;
  $347 = $323;
  $348 = $347;
  HEAP32[$348>>2] = $343;
  $349 = (($347) + 4)|0;
  $350 = $349;
  HEAP32[$350>>2] = $346;
  $351 = ((($4)) + 280|0);
  HEAP32[$351>>2] = $285;
  $$9 = 5;
  STACKTOP = sp;return ($$9|0);
 }
 else if ((label|0) == 75) {
  $355 = HEAP32[$40>>2]|0;
  $356 = (($355) + 1)|0;
  HEAP32[$40>>2] = $356;
  $357 = HEAP32[$55>>2]|0;
  $358 = (($357) + 1)|0;
  HEAP32[$55>>2] = $358;
  HEAP32[$16>>2] = -1;
  $$9 = 1;
  STACKTOP = sp;return ($$9|0);
 }
 return (0)|0;
}
function _do_patsolve($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $switch$select = 0, $switch$select24 = 0, $switch$selectcmp = 0, $switch$selectcmp23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 544|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 2788|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + ($5))|0;
 $11 = (($10) - ($9))|0;
 $12 = ((($3)) + 2792|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($3)) + 35656|0);
 HEAP32[$13>>2] = 1;
 _fc_solve_pats__do_it($3);
 $14 = HEAP32[$4>>2]|0;
 $15 = (($14) - ($5))|0;
 $16 = HEAP32[$8>>2]|0;
 $17 = (($16) + ($15))|0;
 HEAP32[$8>>2] = $17;
 $18 = HEAP32[$1>>2]|0;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($15))|0;
 HEAP32[$19>>2] = $21;
 $22 = HEAP32[$13>>2]|0;
 $switch$selectcmp = ($22|0)==(1);
 $switch$select = $switch$selectcmp&1;
 $switch$selectcmp23 = ($22|0)==(-1);
 $switch$select24 = $switch$selectcmp23 ? 5 : $switch$select;
 return ($switch$select24|0);
}
function _fcs_get_calc_real_depth($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 132|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 return ($3|0);
}
function _calculate_real_depth($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014$lcssa = 0, $$01418 = 0, $$019 = 0, $$11516 = 0, $$117 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 if (!($0)) {
  return;
 }
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$014$lcssa = -1;
 } else {
  $$01418 = -1;$$019 = $1;
  while(1) {
   $3 = ((($$019)) + 56|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($$01418) + 1)|0;
   $6 = ($4|0)==(0|0);
   if ($6) {
    $$014$lcssa = $5;
    break;
   } else {
    $$01418 = $5;$$019 = $4;
   }
  }
 }
 $7 = ((($1)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($$014$lcssa|0);
 if ($9) {
  return;
 }
 $$11516 = $$014$lcssa;$$117 = $1;$10 = $7;
 while(1) {
  HEAP32[$10>>2] = $$11516;
  $11 = (($$11516) + -1)|0;
  $12 = ((($$117)) + 56|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 64|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($11|0);
  if ($16) {
   break;
  } else {
   $$11516 = $11;$$117 = $13;$10 = $14;
  }
 }
 return;
}
function _calc_ht_max_num_states($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $11 = (($10) + ($5))|0;
 $12 = ($3|0)<($11|0);
 $13 = $12 ? $3 : $11;
 return ($13|0);
}
function _increase_dfs_max_depth($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 64)|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3*244)|0;
 $7 = (_realloc($5,$6)|0);
 HEAP32[$4>>2] = $7;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($7) + (($8*244)|0)|0);
 _memset(($9|0),0,15616)|0;
 HEAP32[$1>>2] = $3;
 return;
}
function _mark_as_dead_end__proto($0) {
 $0 = $0|0;
 var $$012 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 | 4;
 HEAP8[$1>>0] = $3;
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 $7 = ((($5)) + 72|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (($8) + -1)<<16>>16;
 HEAP16[$7>>1] = $9;
 $10 = ($9<<16>>16)==(0);
 if (!($10)) {
  return;
 }
 $$012 = $5;
 while(1) {
  $11 = ((($$012)) + 74|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 & 8;
  $15 = ($14|0)==(0);
  if ($15) {
   label = 7;
   break;
  }
  $16 = $13 | 4;
  $17 = $16&255;
  HEAP8[$11>>0] = $17;
  $18 = ((($$012)) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   label = 7;
   break;
  }
  $21 = ((($19)) + 72|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = (($22) + -1)<<16>>16;
  HEAP16[$21>>1] = $23;
  $24 = ($23<<16>>16)==(0);
  if ($24) {
   $$012 = $19;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return;
 }
}
function _fcs__should_state_be_pruned($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($0) {
  $2 = (_fcs__should_state_be_pruned__state($1)|0);
  $3 = $2;
 } else {
  $3 = 0;
 }
 return ($3|0);
}
function _count_num_vacant_freecells($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07$lcssa = 0, $$078 = 0, $$09 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0&255;
 $3 = ($0<<24>>24)==(0);
 if ($3) {
  $$07$lcssa = 0;
  return ($$07$lcssa|0);
 }
 $$078 = 0;$$09 = 0;
 while(1) {
  $4 = (((($1)) + 40|0) + ($$09)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  $7 = $6&1;
  $spec$select = (($$078) + ($7))<<24>>24;
  $8 = (($$09) + 1)|0;
  $exitcond = ($8|0)==($2|0);
  if ($exitcond) {
   $$07$lcssa = $spec$select;
   break;
  } else {
   $$078 = $spec$select;$$09 = $8;
  }
 }
 return ($$07$lcssa|0);
}
function _count_num_vacant_stacks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07$lcssa = 0, $$078 = 0, $$09 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0&255;
 $3 = ($0<<24>>24)==(0);
 if ($3) {
  $$07$lcssa = 0;
  return ($$07$lcssa|0);
 }
 $$078 = 0;$$09 = 0;
 while(1) {
  $4 = (($1) + ($$09<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  $8 = $7&1;
  $spec$select = (($$078) + ($8))<<24>>24;
  $9 = (($$09) + 1)|0;
  $exitcond = ($9|0)==($2|0);
  if ($exitcond) {
   $$07$lcssa = $spec$select;
   break;
  } else {
   $$078 = $spec$select;$$09 = $9;
  }
 }
 return ($$07$lcssa|0);
}
function _fc_solve__calc_positions_by_rank_data($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07885 = 0, $$079$lcssa = 0, $$07988 = 0, $$08193 = 0, $$08284 = 0, $$089 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond98 = 0, $exitcond99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($5)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 _memset(($2|0),-1,208)|0;
 if ($3) {
  $6 = $$sroa$3$0$copyload&255;
  $7 = ($$sroa$3$0$copyload<<24>>24)==(0);
  if ($7) {
   return;
  }
  $$07885 = 0;
  while(1) {
   $8 = (($1) + ($$07885<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($10<<24>>24)==(0);
   if (!($12)) {
    $13 = $$07885&255;
    $$08284 = 0;
    while(1) {
     $15 = (($$08284) + 1)|0;
     $16 = (($9) + ($15)|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = $18 & 3;
     $20 = (2)?($18 >>> 2):($18);
     $21 = ($19*14)|0;
     $22 = (($21) + ($20))|0;
     $23 = $$08284&255;
     $$sroa$0$0$$sroa_idx = (($2) + ($22<<1)|0);
     HEAP8[$$sroa$0$0$$sroa_idx>>0] = $13;
     $$sroa$2$0$$sroa_idx = (((($2) + ($22<<1)|0)) + 1|0);
     HEAP8[$$sroa$2$0$$sroa_idx>>0] = $23;
     $exitcond = ($15|0)==($11|0);
     if ($exitcond) {
      break;
     } else {
      $$08284 = $15;
     }
    }
   }
   $14 = (($$07885) + 1)|0;
   $exitcond98 = ($14|0)==($6|0);
   if ($exitcond98) {
    break;
   } else {
    $$07885 = $14;
   }
  }
  return;
 }
 $24 = ((($5)) + 3|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 & 3;
 $27 = $26&255;
 $28 = $$sroa$3$0$copyload&255;
 $29 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($29) {
  return;
 }
 $$08193 = 0;
 while(1) {
  $30 = (($1) + ($$08193<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = (($33) + -1)|0;
  $35 = ($32<<24>>24)==(0);
  if (!($35)) {
   $36 = ((($31)) + 1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = ($32<<24>>24)==(1);
   if ($38) {
    $$079$lcssa = $37;
   } else {
    $39 = $$08193&255;
    $$07988 = $37;$$089 = 0;
    while(1) {
     $42 = (($$089) + 1)|0;
     $43 = (($$089) + 2)|0;
     $44 = (($31) + ($43)|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = (_fcs_is_parent_card__helper_247($45,$$07988,$27)|0);
     if (!($46)) {
      $47 = $$089&255;
      _fc_solve__assign_dest_stack_and_col_ptr($2,$39,$47,$$07988);
     }
     $48 = ($42|0)<($34|0);
     if ($48) {
      $$07988 = $45;$$089 = $42;
     } else {
      $$079$lcssa = $45;
      break;
     }
    }
   }
   $40 = $$08193&255;
   $41 = $34&255;
   _fc_solve__assign_dest_stack_and_col_ptr($2,$40,$41,$$079$lcssa);
  }
  $49 = (($$08193) + 1)|0;
  $exitcond99 = ($49|0)==($28|0);
  if ($exitcond99) {
   break;
  } else {
   $$08193 = $49;
  }
 }
 return;
}
function _fc_solve_rand_get_random_number($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_fc_solve_rand_rand15($0)|0);
 $2 = (_fc_solve_rand_rand15($0)|0);
 $3 = $2 << 15;
 $4 = $3 | $1;
 return ($4|0);
}
function _calc_depth($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _befs_rate_state($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0105$lcssa = 0.0, $$0105133 = 0.0, $$0106$lcssa = 0.0, $$0106132 = 0.0, $$0108125 = 0, $$0109$lcssa = 0, $$0109124 = 0, $$0112141 = 0.0, $$0115140 = 0, $$0116$lcssa = 0, $$0116131 = 0, $$0119130 = 0, $$0123 = 0, $$1 = 0.0, $$1110$lcssa = 0, $$1110122 = 0, $$1113 = 0.0, $$2 = 0.0, $$2114 = 0.0, $$2118 = 0;
 var $$3 = 0.0, $$sroa$0$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$6$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0;
 var $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond145 = 0, $exitcond146 = 0, $not$ = 0, $spec$select = 0, $spec$select121 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 & 3;
 $$sroa$0$0$copyload = HEAP8[$5>>0]|0;
 $$sroa$4$0$$sroa_idx = ((($5)) + 1|0);
 $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
 $$sroa$6$0$$sroa_idx = ((($5)) + 2|0);
 $$sroa$6$0$copyload = HEAP8[$$sroa$6$0$$sroa_idx>>0]|0;
 $10 = $8 & 16;
 $11 = ($10|0)!=(0);
 $12 = ($3|0)>(0);
 $13 = $12 ? $3 : 0;
 $14 = (+($13|0));
 $15 = ((($1)) + 32|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $16 * $14;
 $18 = ((($1)) + 56|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $19 != 0.0;
 if ($20) {
  $21 = $$sroa$6$0$copyload&255;
  $22 = $21 << 2;
  $23 = ($$sroa$6$0$copyload<<24>>24)==(0);
  if ($23) {
   $$1113 = $17;
  } else {
   $$0112141 = $17;$$0115140 = 0;
   while(1) {
    $24 = (((($2)) + 48|0) + ($$0115140)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = (((($1)) + 48|0) + ($26<<3)|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $$0112141 + $28;
    $30 = (($$0115140) + 1)|0;
    $31 = ($30>>>0)<($22>>>0);
    if ($31) {
     $$0112141 = $29;$$0115140 = $30;
    } else {
     $$1113 = $29;
     break;
    }
   }
  }
 } else {
  $$1113 = $17;
 }
 $32 = HEAP8[$1>>0]|0;
 $33 = ($32<<24>>24)==(0);
 if ($33) {
  $$2114 = $$1113;
 } else {
  $34 = $$sroa$4$0$copyload&255;
  $35 = ($$sroa$4$0$copyload<<24>>24)==(0);
  if ($35) {
   $$0105$lcssa = 0.0;$$0106$lcssa = 0.0;$$0116$lcssa = 0;
  } else {
   $$0105133 = 0.0;$$0106132 = 0.0;$$0116131 = 0;$$0119130 = 0;
   while(1) {
    $40 = (($2) + ($$0119130<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = ($42&255)<(2);
    if ($44) {
     $45 = ($42<<24>>24)==(0);
     $46 = $45&1;
     $spec$select = (($$0116131) + ($46))<<24>>24;
     $$1 = $$0105133;$$2 = $$0106132;$$2118 = $spec$select;
    } else {
     $47 = (($43) + -1)|0;
     $48 = (_update_col_cards_under_sequences($9,$41,$47)|0);
     $49 = (5136 + ($48<<3)|0);
     $50 = +HEAPF64[$49>>3];
     $51 = $$0105133 + $50;
     $52 = ($48|0)>(0);
     if ($52) {
      if ($11) {
       $57 = 1.0;
      } else {
       $53 = (($43) - ($48))|0;
       $54 = (5136 + ($53<<3)|0);
       $55 = +HEAPF64[$54>>3];
       $57 = $55;
      }
      $56 = $$0106132 + $57;
      $$1 = $51;$$2 = $56;$$2118 = $$0116131;
     } else {
      $$1 = $51;$$2 = $$0106132;$$2118 = $$0116131;
     }
    }
    $58 = (($$0119130) + 1)|0;
    $exitcond146 = ($58|0)==($34|0);
    if ($exitcond146) {
     $$0105$lcssa = $$1;$$0106$lcssa = $$2;$$0116$lcssa = $$2118;
     break;
    } else {
     $$0105133 = $$1;$$0106132 = $$2;$$0116131 = $$2118;$$0119130 = $58;
    }
   }
  }
  $36 = (_count_num_vacant_freecells($$sroa$0$0$copyload,$2)|0);
  $37 = $7 & 12;
  $38 = ($37<<24>>24)==(0);
  $39 = $36&255;
  do {
   if ($38) {
    if ($11) {
     $59 = $$0116$lcssa&255;
     $60 = (($39) + ($59))|0;
     $66 = $60;
     break;
    } else {
     $61 = (($39) + 1)|0;
     $62 = $$0116$lcssa&255;
     $63 = $61 << $62;
     $66 = $63;
     break;
    }
   } else {
    $64 = $11 ? $39 : 0;
    $66 = $64;
   }
  } while(0);
  $65 = (+($66|0));
  $67 = ((($1)) + 8|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $68 * $65;
  $70 = ((($5)) + 24|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $71 - $$0105$lcssa;
  $73 = ((($1)) + 16|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $72 * $74;
  $76 = $69 + $75;
  $77 = ((($1)) + 24|0);
  $78 = +HEAPF64[$77>>3];
  $79 = $$0106$lcssa * $78;
  $80 = $76 + $79;
  $81 = $$1113 + $80;
  $$2114 = $81;
 }
 $82 = ((($1)) + 40|0);
 $83 = +HEAPF64[$82>>3];
 $84 = $83 != 0.0;
 if (!($84)) {
  $$3 = $$2114;
  $105 = (~~(($$3)));
  return ($105|0);
 }
 $85 = $$sroa$6$0$copyload&255;
 $86 = ($85*52)|0;
 $87 = $$sroa$4$0$copyload&255;
 $88 = ($$sroa$4$0$copyload<<24>>24)==(0);
 if ($88) {
  $$0109$lcssa = $86;
 } else {
  $$0108125 = 0;$$0109124 = $86;
  while(1) {
   $92 = (($2) + ($$0108125<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = ($94&255)>(1);
   if ($96) {
    $$0123 = 1;$$1110122 = $$0109124;
    while(1) {
     $98 = (($93) + ($$0123)|0);
     $99 = HEAP8[$98>>0]|0;
     $100 = (($$0123) + 1)|0;
     $101 = (($93) + ($100)|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = (_fcs_is_parent_card__helper_247($99,$102,$9)|0);
     $not$ = $103 ^ 1;
     $104 = $not$ << 31 >> 31;
     $spec$select121 = (($$1110122) + ($104))|0;
     $exitcond = ($100|0)==($95|0);
     if ($exitcond) {
      $$1110$lcssa = $spec$select121;
      break;
     } else {
      $$0123 = $100;$$1110122 = $spec$select121;
     }
    }
   } else {
    $$1110$lcssa = $$0109124;
   }
   $97 = (($$0108125) + 1)|0;
   $exitcond145 = ($97|0)==($87|0);
   if ($exitcond145) {
    $$0109$lcssa = $$1110$lcssa;
    break;
   } else {
    $$0108125 = $97;$$0109124 = $$1110$lcssa;
   }
  }
 }
 $89 = (+($$0109$lcssa|0));
 $90 = $83 * $89;
 $91 = $$2114 + $90;
 $$3 = $91;
 $105 = (~~(($$3)));
 return ($105|0);
}
function _fcs__is_state_a_dead_end($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 4;
 $4 = ($3<<24>>24)!=(0);
 return ($4|0);
}
function _set_scan_visited($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 7;
 $3 = 1 << $2;
 $4 = (3)?($1 >> 3):($1);
 $5 = (((($0)) + 75|0) + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $3 | $7;
 $9 = $8&255;
 HEAP8[$5>>0] = $9;
 return;
}
function _free_states($0) {
 $0 = $0|0;
 var $$0 = 0, $$04454 = 0, $$04549 = 0, $$046 = 0, $$048 = 0, $$pn47 = 0, $$pn47$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 152|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 148|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + (($5*1356)|0)|0);
 $7 = ($5|0)>(0);
 if (!($7)) {
  $36 = ((($0)) + 32|0);
  _fc_solve_hash_foreach($36,$0);
  STACKTOP = sp;return;
 }
 $$04454 = $3;
 while(1) {
  $8 = ((($$04454)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($$04454)) + 1344|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($9) + (($11*552)|0)|0);
  $13 = ($11|0)>(0);
  if ($13) {
   $$04549 = $9;
   while(1) {
    $14 = ((($$04549)) + 16|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     _free_states_handle_soft_dfs_soft_thread($$04549);
    } else {
     $17 = ((($$04549)) + 549|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if (!($19)) {
      _fc_solve_pq_init($1);
      $20 = ((($$04549)) + 288|0);
      $21 = ((($$04549)) + 296|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ((($$04549)) + 292|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($22) + ($24<<3)|0);
      $26 = ($24|0)<(1);
      if (!($26)) {
       $$046 = ((($22)) + 8|0);
       $$048 = $$046;$$pn47 = $22;
       while(1) {
        $27 = HEAP32[$$048>>2]|0;
        $28 = (_fcs__is_state_a_dead_end($27)|0);
        if (!($28)) {
         $29 = ((($$pn47)) + 12|0);
         $30 = HEAP32[$29>>2]|0;
         _fc_solve_pq_push($1,$27,$30);
        }
        $$0 = ((($$048)) + 8|0);
        $31 = ($$0>>>0)>($25>>>0);
        if ($31) {
         break;
        } else {
         $$pn47$phi = $$048;$$048 = $$0;$$pn47 = $$pn47$phi;
        }
       }
      }
      _st_free_pq_235($$04549);
      ;HEAP32[$20>>2]=HEAP32[$1>>2]|0;HEAP32[$20+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$1+8>>2]|0;
     }
    }
    $32 = ((($$04549)) + 552|0);
    $33 = ($32>>>0)<($12>>>0);
    if ($33) {
     $$04549 = $32;
    } else {
     break;
    }
   }
  }
  $34 = ((($$04454)) + 1356|0);
  $35 = ($34>>>0)<($6>>>0);
  if ($35) {
   $$04454 = $34;
  } else {
   break;
  }
 }
 $36 = ((($0)) + 32|0);
 _fc_solve_hash_foreach($36,$0);
 STACKTOP = sp;return;
}
function _free_states_handle_soft_dfs_soft_thread($0) {
 $0 = $0|0;
 var $$036$lcssa = 0, $$03639 = 0, $$03738 = 0, $$040 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + (($4*244)|0)|0);
 $6 = ($4|0)>(0);
 if (!($6)) {
  return;
 }
 $$040 = $2;
 while(1) {
  $7 = ((($$040)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($$040)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + ($10<<3)|0);
  $12 = ((($$040)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($8) + ($13<<3)|0);
  $15 = ((($$040)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($10|0)<($13|0);
  if ($17) {
   $$03639 = $11;$$03738 = $11;
   while(1) {
    $18 = HEAP32[$$03738>>2]|0;
    $19 = (($16) + ($18<<3)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_fcs__is_state_a_dead_end($20)|0);
    if ($21) {
     $$1 = $$03639;
    } else {
     $22 = ((($$03639)) + 8|0);
     $23 = $$03738;
     $24 = $23;
     $25 = HEAP32[$24>>2]|0;
     $26 = (($23) + 4)|0;
     $27 = $26;
     $28 = HEAP32[$27>>2]|0;
     $29 = $$03639;
     $30 = $29;
     HEAP32[$30>>2] = $25;
     $31 = (($29) + 4)|0;
     $32 = $31;
     HEAP32[$32>>2] = $28;
     $$1 = $22;
    }
    $33 = ((($$03738)) + 8|0);
    $34 = ($33>>>0)<($14>>>0);
    if ($34) {
     $$03639 = $$1;$$03738 = $33;
    } else {
     $$036$lcssa = $$1;
     break;
    }
   }
  } else {
   $$036$lcssa = $11;
  }
  $35 = $$036$lcssa;
  $36 = $8;
  $37 = (($35) - ($36))|0;
  $38 = (3)?($37 >> 3):($37);
  HEAP32[$12>>2] = $38;
  $39 = ((($$040)) + 244|0);
  $40 = ($39>>>0)<($5>>>0);
  if ($40) {
   $$040 = $39;
  } else {
   break;
  }
 }
 return;
}
function _fc_solve_pq_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 HEAP32[$0>>2] = 1024;
 $2 = (_malloc(8200)|0);
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $2;
 return;
}
function _fc_solve_pq_push($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$024 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($5>>>0)>($6>>>0);
 $8 = ((($0)) + 8|0);
 if ($7) {
  $9 = $6 << 3;
  $10 = (($9) + 2056)|0;
  $11 = (($6) + 256)|0;
  $12 = HEAP32[$8>>2]|0;
  HEAP32[$0>>2] = $11;
  $13 = (_realloc($12,$10)|0);
  HEAP32[$8>>2] = $13;
 }
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($4|0)==(0);
 L4: do {
  if ($16) {
   $$0$lcssa = 1;
  } else {
   $$024 = $5;
   while(1) {
    $17 = (1)?($$024 >>> 1):($$024);
    $18 = (($15) + ($17<<3)|0);
    ;HEAP32[$$byval_copy>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$18+4>>2]|0;
    $19 = (_fcs_pq_rating($$byval_copy)|0);
    $20 = ($19|0)<($2|0);
    if (!($20)) {
     $$0$lcssa = $$024;
     break L4;
    }
    $21 = (($15) + ($$024<<3)|0);
    $22 = (1)?($$024 >>> 1):($$024);
    $23 = (($15) + ($22<<3)|0);
    $24 = $23;
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($24) + 4)|0;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = $21;
    $31 = $30;
    HEAP32[$31>>2] = $26;
    $32 = (($30) + 4)|0;
    $33 = $32;
    HEAP32[$33>>2] = $29;
    $34 = ($22|0)==(1);
    if ($34) {
     $$0$lcssa = 1;
     break;
    } else {
     $$024 = $22;
    }
   }
  }
 } while(0);
 $35 = (($15) + ($$0$lcssa<<3)|0);
 HEAP32[$35>>2] = $1;
 $36 = (((($15) + ($$0$lcssa<<3)|0)) + 4|0);
 HEAP32[$36>>2] = $2;
 STACKTOP = sp;return;
}
function _fc_solve_hash_foreach($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02 = 0, $$0281 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)>(0);
 if (!($5)) {
  return;
 }
 $6 = ((($0)) + 4|0);
 $7 = ((($0)) + 20|0);
 $$02 = 0;
 while(1) {
  $8 = (($4) + ($$02<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $$0281 = $8;$12 = $9;
   while(1) {
    $11 = HEAP32[$12>>2]|0;
    $13 = (_free_states_should_delete($11,$1)|0);
    $14 = HEAP32[$$0281>>2]|0;
    $15 = ((($14)) + 8|0);
    if ($13) {
     $16 = HEAP32[$15>>2]|0;
     $17 = HEAP32[$6>>2]|0;
     HEAP32[$15>>2] = $17;
     $18 = HEAP32[$$0281>>2]|0;
     HEAP32[$6>>2] = $18;
     HEAP32[$$0281>>2] = $16;
     $19 = HEAP32[$7>>2]|0;
     $20 = (($19) + -1)|0;
     HEAP32[$7>>2] = $20;
     $$1 = $$0281;
    } else {
     $$1 = $15;
    }
    $21 = HEAP32[$$1>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     break;
    } else {
     $$0281 = $$1;$12 = $21;
    }
   }
  }
  $23 = (($$02) + 1)|0;
  $exitcond = ($23|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$02 = $23;
  }
 }
 return;
}
function _free_states_should_delete($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_fcs__is_state_a_dead_end($0)|0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 128|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 56|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$3>>2] = $0;
 $6 = ((($1)) + 140|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 HEAP32[$6>>2] = $8;
 $$0 = 1;
 return ($$0|0);
}
function _fcs_pq_rating($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _update_col_cards_under_sequences($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01112 = 0, $$013 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $$0$lcssa = $2;
  return ($$0$lcssa|0);
 }
 $4 = (($2) + 1)|0;
 $5 = (($1) + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $$01112 = $6;$$013 = $2;
 while(1) {
  $7 = (($1) + ($$013)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = (_fcs_is_parent_card__helper_247($$01112,$8,$0)|0);
  if (!($9)) {
   $$0$lcssa = $$013;
   label = 5;
   break;
  }
  $10 = (($$013) + -1)|0;
  $11 = ($$013|0)>(1);
  if ($11) {
   $$01112 = $8;$$013 = $10;
  } else {
   $$0$lcssa = $10;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _fcs_is_parent_card__helper_247($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0&255;
 $4 = (2)?($3 >>> 2):($3);
 $5 = (($4) + 1)|0;
 $6 = $1&255;
 $7 = (2)?($6 >>> 2):($6);
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $18 = 0;
  return ($18|0);
 }
 switch ($2|0) {
 case 2:  {
  $16 = 1;
  break;
 }
 case 1:  {
  $9 = $1 ^ $0;
  $10 = $9 & 3;
  $11 = ($10<<24>>24)==(0);
  $12 = $11&1;
  $16 = $12;
  break;
 }
 default: {
  $13 = $1 ^ $0;
  $14 = $13 & 1;
  $15 = $14&255;
  $16 = $15;
 }
 }
 $17 = ($16|0)!=(0);
 $18 = $17;
 return ($18|0);
}
function _fc_solve_rand_rand15($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1*214013)|0;
 $3 = (($2) + 2531011)|0;
 HEAP32[$0>>2] = $3;
 $4 = (16)?($3 >>> 16):($3);
 $5 = $4 & 32767;
 return ($5|0);
}
function _fc_solve__assign_dest_stack_and_col_ptr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3&255;
 $5 = (2)?($4 >>> 2):($4);
 $6 = $5 << 4;
 $7 = (($6) + -16)|0;
 $8 = $4 << 1;
 $9 = $8 & 6;
 $10 = $7 | $9;
 $11 = (($0) + ($10)|0);
 $$0 = $11;
 while(1) {
  $12 = HEAP8[$$0>>0]|0;
  $13 = ($12<<24>>24)==(-1);
  $14 = ((($$0)) + 8|0);
  if ($13) {
   break;
  } else {
   $$0 = $14;
  }
 }
 $15 = ((($$0)) + 1|0);
 HEAP8[$$0>>0] = $1;
 HEAP8[$15>>0] = $2;
 return;
}
function _fcs__should_state_be_pruned__state($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 16;
 $4 = ($3<<24>>24)==(0);
 return ($4|0);
}
function _fc_solve_pats__hash_layout($0) {
 $0 = $0|0;
 var $$09 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($1)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $2 = $$sroa$3$0$copyload&255;
 $3 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($3) {
  return;
 }
 $$09 = 0;
 while(1) {
  _fc_solve_pats__hashpile($0,$$09);
  $4 = (($$09) + 1)|0;
  $exitcond = ($4|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$09 = $4;
  }
 }
 return;
}
function _fc_solve_pats__hashpile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (((($0)) + 820|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) + 1)|0;
 $7 = (($3) + ($6)|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($3)) + 1|0);
 $9 = (_fnv_hash_str($8)|0);
 $10 = (((($0)) + 2196|0) + ($1<<2)|0);
 HEAP32[$10>>2] = $9;
 $11 = (((($0)) + 2236|0) + ($1<<2)|0);
 HEAP32[$11>>2] = -1;
 return;
}
function _fnv_hash_str($0) {
 $0 = $0|0;
 var $$04$lcssa = 0, $$045 = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$04$lcssa = -2128831035;
  return ($$04$lcssa|0);
 }
 $$045 = -2128831035;$$06 = $0;$4 = $1;
 while(1) {
  $3 = ((($$06)) + 1|0);
  $5 = (_fnv_hash($4,$$045)|0);
  $6 = HEAP8[$3>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $$04$lcssa = $5;
   break;
  } else {
   $$045 = $5;$$06 = $3;$4 = $6;
  }
 }
 return ($$04$lcssa|0);
}
function _fnv_hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = Math_imul($1, 16777619)|0;
 $3 = $0&255;
 $4 = $2 ^ $3;
 return ($4|0);
}
function _fc_solve_pats__align($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 7;
 $2 = ($1|0)==(0);
 $3 = $0 | 7;
 $4 = (($3) + 1)|0;
 $5 = $2 ? $0 : $4;
 return ($5|0);
}
function _fc_solve_rand_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function _add_to_move_funcs_list($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$019$lcssa = 0, $$01920 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) + ($3))|0;
 $7 = $6 << 2;
 $8 = (_realloc($5,$7)|0);
 $9 = ($3|0)==(0);
 if ($9) {
  $$019$lcssa = $4;
  HEAP32[$0>>2] = $8;
  HEAP32[$1>>2] = $$019$lcssa;
  return;
 }
 $$01920 = $4;$$021 = 0;
 while(1) {
  $11 = (($2) + ($$021<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (4192 + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($$01920) + 1)|0;
  $16 = (($8) + ($$01920<<2)|0);
  HEAP32[$16>>2] = $14;
  $17 = (($$021) + 1)|0;
  $exitcond = ($17|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$01920 = $15;$$021 = $17;
  }
 }
 $10 = (($4) + ($3))|0;
 $$019$lcssa = $10;
 HEAP32[$0>>2] = $8;
 HEAP32[$1>>2] = $$019$lcssa;
 return;
}
function _fc_solve_initialize_befs_rater($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$067$op = 0.0, $$sroa$0$0$copyload = 0, $$sroa$414$0$$sroa_idx = 0, $$sroa$414$0$copyload = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0;
 var $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0;
 var $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0;
 var $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $narrow = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 160|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $3 + 0.0;
 $5 = ((($1)) + 168|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $4 + $6;
 $8 = ((($1)) + 176|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 + $9;
 $11 = ((($1)) + 184|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $10 + $12;
 $14 = ((($1)) + 192|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $13 + $15;
 $17 = ((($1)) + 200|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $16 + $18;
 $20 = ((($1)) + 160|0);
 $21 = $19 < 9.9999999999999995E-7;
 $$067$op = 2147483647.0 / $19;
 $22 = $21 ? 2147483647.0 : $$067$op;
 $23 = HEAP32[$0>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $$sroa$414$0$$sroa_idx = ((($24)) + 2|0);
 $$sroa$414$0$copyload = HEAP8[$$sroa$414$0$$sroa_idx>>0]|0;
 $25 = ((($24)) + 3|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = +HEAPF64[$20>>3];
 $28 = $22 * $27;
 $29 = $$sroa$414$0$copyload&255;
 $30 = ($29*52)|0;
 $31 = (+($30|0));
 $32 = $28 / $31;
 $33 = $26 & 16;
 $$sroa$0$0$copyload = HEAP8[$24>>0]|0;
 $34 = ((($1)) + 48|0);
 HEAPF64[$34>>3] = 0.0;
 $35 = $32 + 0.0;
 $36 = ((($1)) + 56|0);
 HEAPF64[$36>>3] = $35;
 $37 = $32 + $35;
 $38 = ((($1)) + 64|0);
 HEAPF64[$38>>3] = $37;
 $39 = $32 + $37;
 $40 = ((($1)) + 72|0);
 HEAPF64[$40>>3] = $39;
 $41 = $32 + $39;
 $42 = ((($1)) + 80|0);
 HEAPF64[$42>>3] = $41;
 $43 = $32 + $41;
 $44 = ((($1)) + 88|0);
 HEAPF64[$44>>3] = $43;
 $45 = $32 + $43;
 $46 = ((($1)) + 96|0);
 HEAPF64[$46>>3] = $45;
 $47 = $32 + $45;
 $48 = ((($1)) + 104|0);
 HEAPF64[$48>>3] = $47;
 $49 = $32 + $47;
 $50 = ((($1)) + 112|0);
 HEAPF64[$50>>3] = $49;
 $51 = $32 + $49;
 $52 = ((($1)) + 120|0);
 HEAPF64[$52>>3] = $51;
 $53 = $32 + $51;
 $54 = ((($1)) + 128|0);
 HEAPF64[$54>>3] = $53;
 $55 = $32 + $53;
 $56 = ((($1)) + 136|0);
 HEAPF64[$56>>3] = $55;
 $57 = $32 + $55;
 $58 = ((($1)) + 144|0);
 HEAPF64[$58>>3] = $57;
 $59 = $32 + $57;
 $60 = ((($1)) + 152|0);
 HEAPF64[$60>>3] = $59;
 $61 = ($33<<24>>24)!=(0);
 $62 = ((($1)) + 168|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $22 * $63;
 $65 = $26 & 12;
 $66 = ($65<<24>>24)==(0);
 $67 = $$sroa$0$0$copyload&255;
 do {
  if ($66) {
   if ($61) {
    $68 = ((($24)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69&255;
    $71 = (($70) + ($67))|0;
    $79 = $71;
    break;
   } else {
    $72 = (($67) + 1)|0;
    $73 = ((($24)) + 1|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $72 << $75;
    $79 = $76;
    break;
   }
  } else {
   $77 = $61 ? $67 : 1;
   $79 = $77;
  }
 } while(0);
 $78 = (+($79|0));
 $80 = $64 / $78;
 $81 = ((($1)) + 8|0);
 HEAPF64[$81>>3] = $80;
 $82 = ((($1)) + 176|0);
 $83 = +HEAPF64[$82>>3];
 $84 = $22 * $83;
 $85 = ((($24)) + 24|0);
 $86 = +HEAPF64[$85>>3];
 $87 = $84 / $86;
 $88 = ((($1)) + 16|0);
 HEAPF64[$88>>3] = $87;
 $89 = ((($1)) + 184|0);
 $90 = +HEAPF64[$89>>3];
 $91 = $22 * $90;
 $92 = (5136 + ($30<<3)|0);
 $93 = +HEAPF64[$92>>3];
 $94 = $91 / $93;
 $95 = ((($1)) + 24|0);
 HEAPF64[$95>>3] = $94;
 $96 = ((($1)) + 192|0);
 $97 = +HEAPF64[$96>>3];
 $98 = $22 * $97;
 $99 = $98 / 2.0E+4;
 $100 = ((($1)) + 32|0);
 HEAPF64[$100>>3] = $99;
 $101 = ((($1)) + 200|0);
 $102 = +HEAPF64[$101>>3];
 $103 = $22 * $102;
 $104 = $103 / $31;
 $105 = ((($1)) + 40|0);
 HEAPF64[$105>>3] = $104;
 $106 = $80 != 0.0;
 $107 = $87 != 0.0;
 $or$cond = $106 | $107;
 $108 = $94 != 0.0;
 $narrow = $or$cond | $108;
 $109 = $narrow&1;
 HEAP8[$1>>0] = $109;
 return;
}
function _fc_solve_hash_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 12|0);
 HEAP32[$3>>2] = 2048;
 $4 = ((($1)) + 16|0);
 HEAP32[$4>>2] = 2047;
 _fcs_hash_set_max_num_elems_249($1);
 $5 = ((($1)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = (_calloc(2048,4)|0);
 HEAP32[$1>>2] = $6;
 $7 = ((($1)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($1)) + 8|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($1)) + 28|0);
 _fc_solve_compact_allocator_init($9,$0);
 return;
}
function _update_initial_cards_val($0) {
 $0 = $0|0;
 var $$0$lcssa = 0.0, $$02426 = 0, $$027 = 0.0, $$1 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 3|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 3;
 $4 = $3&255;
 $5 = ((($0)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0$lcssa = 0.0;
  $10 = ((($0)) + 24|0);
  HEAPF64[$10>>3] = $$0$lcssa;
  return;
 }
 $8 = HEAP8[$5>>0]|0;
 $9 = $8&255;
 $$02426 = 0;$$027 = 0.0;
 while(1) {
  $11 = (((($0)) + 196|0) + ($$02426<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13&255)<(2);
  if ($14) {
   $$1 = $$027;
  } else {
   $15 = $13&255;
   $16 = (($15) + -1)|0;
   $17 = (_update_col_cards_under_sequences($4,$12,$16)|0);
   $18 = (5136 + ($17<<3)|0);
   $19 = +HEAPF64[$18>>3];
   $20 = $$027 + $19;
   $$1 = $20;
  }
  $21 = (($$02426) + 1)|0;
  $22 = ($21>>>0)<($9>>>0);
  if ($22) {
   $$02426 = $21;$$027 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 $10 = ((($0)) + 24|0);
 HEAPF64[$10>>3] = $$0$lcssa;
 return;
}
function _FCS_STATE_keyval_pair_to_kv_248($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 $3 = ((($1)) + 56|0);
 HEAP32[$2>>2] = $3;
 return;
}
function _fcs_hash_set_max_num_elems_249($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 HEAP32[$1>>2] = 4096;
 return;
}
function _compile_prelude($0) {
 $0 = $0|0;
 var $$056107 = 0, $$059106 = 0, $$062$lcssa = 0, $$062100 = 0, $$063105 = 0, $$160 = 0, $$16497 = 0, $$265 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 1352|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 9|0);
 $5 = ((($0)) + 4|0);
 $6 = ((($0)) + 1344|0);
 $$056107 = 0;$$059106 = 0;$$063105 = $3;$16 = 0;$41 = 0;$43 = 0;$54 = 0;
 L1: while(1) {
  $7 = (_atol($$063105)|0);
  $8 = HEAP8[$$063105>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   label = 7;
   break;
  }
  $$16497 = $$063105;$11 = $8;
  while(1) {
   $10 = $11 << 24 >> 24;
   $isdigittmp = (($10) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if (!($isdigit)) {
    break;
   }
   $12 = ((($$16497)) + 1|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    label = 7;
    break L1;
   } else {
    $$16497 = $12;$11 = $13;
   }
  }
  $15 = ($11<<24>>24)==(64);
  if (!($15)) {
   label = 7;
   break;
  }
  $17 = ((($$16497)) + 1|0);
  $$265 = $17;
  while(1) {
   $18 = HEAP8[$$265>>0]|0;
   $19 = ($18<<24>>24)==(0);
   $20 = ($18<<24>>24)!=(44);
   $spec$select = $19 ^ $20;
   $21 = ((($$265)) + 1|0);
   if ($spec$select) {
    $$265 = $21;
   } else {
    break;
   }
  }
  (_strncpy($1,$17,10)|0);
  HEAP8[$4>>0] = 0;
  $22 = $$265;
  $23 = $17;
  $24 = (($22) - ($23))|0;
  $25 = (($1) + ($24)|0);
  HEAP8[$25>>0] = 0;
  $26 = ((($$265)) + 1|0);
  $27 = HEAP32[$5>>2]|0;
  $28 = HEAP32[$6>>2]|0;
  $29 = (($27) + (($28*552)|0)|0);
  $30 = ($28|0)>(0);
  L12: do {
   if ($30) {
    $$062100 = $27;
    while(1) {
     $31 = ((($$062100)) + 532|0);
     $32 = (_strcmp($31,$1)|0);
     $33 = ($32|0)==(0);
     if ($33) {
      $$062$lcssa = $$062100;
      break L12;
     }
     $34 = ((($$062100)) + 552|0);
     $35 = ($34>>>0)<($29>>>0);
     if ($35) {
      $$062100 = $34;
     } else {
      $$062$lcssa = $34;
      break;
     }
    }
   } else {
    $$062$lcssa = $27;
   }
  } while(0);
  $36 = ($$062$lcssa|0)==($29|0);
  if ($36) {
   label = 17;
   break;
  }
  $37 = $$056107 & 15;
  $38 = ($37|0)==(0);
  if ($38) {
   $39 = $$056107 << 3;
   $40 = (($39) + 128)|0;
   $42 = (_realloc($41,$40)|0);
   $$160 = $42;$50 = $42;$55 = $42;$56 = $42;$57 = $42;
  } else {
   $$160 = $$059106;$50 = $54;$55 = $41;$56 = $43;$57 = $16;
  }
  $44 = (($$056107) + 1)|0;
  $45 = $$062$lcssa;
  $46 = $27;
  $47 = (($45) - ($46))|0;
  $48 = (($47|0) / 552)&-1;
  $$sroa$0$0$$sroa_idx = (($$160) + ($$056107<<3)|0);
  HEAP32[$$sroa$0$0$$sroa_idx>>2] = $48;
  $$sroa$2$0$$sroa_idx1 = (((($$160) + ($$056107<<3)|0)) + 4|0);
  HEAP32[$$sroa$2$0$$sroa_idx1>>2] = $7;
  if ($19) {
   label = 19;
   break;
  } else {
   $$056107 = $44;$$059106 = $$160;$$063105 = $26;$16 = $57;$41 = $55;$43 = $56;$54 = $50;
  }
 }
 if ((label|0) == 7) {
  _free($16);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 17) {
  _free($43);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 19) {
  $49 = $44 << 3;
  $51 = (_realloc($50,$49)|0);
  $52 = ((($0)) + 1336|0);
  HEAP32[$52>>2] = $51;
  $53 = ((($0)) + 1328|0);
  HEAP32[$53>>2] = $44;
  STACKTOP = sp;return;
 }
}
function _fcs_make_card($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 << 2;
 $3 = $2 | $1;
 $4 = $3&255;
 return ($4|0);
}
function _fc_solve_state_init_proto($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa25 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = ($1|0)==(0);
 if ($3) {
  $$0$lcssa25 = 0;
  label = 5;
 } else {
  $$020 = 0;
  while(1) {
   $4 = $$020 << 7;
   $5 = (($2) + ($4)|0);
   $6 = (($0) + ($$020<<2)|0);
   HEAP32[$6>>2] = $5;
   dest=$5; stop=dest+105|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $7 = (($$020) + 1)|0;
   $exitcond = ($7|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $$020 = $7;
   }
  }
  $8 = ($1>>>0)<(10);
  if ($8) {
   $$0$lcssa25 = $1;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $scevgep = (($0) + ($$0$lcssa25<<2)|0);
  $9 = $$0$lcssa25 << 2;
  $10 = (40 - ($9))|0;
  _memset(($scevgep|0),0,($10|0))|0;
 }
 $11 = ((($0)) + 56|0);
 $12 = ((($0)) + 80|0);
 HEAP32[$12>>2] = 0;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;HEAP32[$11+16>>2]=0|0;HEAP16[$11+20>>1]=0|0;HEAP8[$11+22>>0]=0|0;
 return;
}
function _fc_solve__try_prefixes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $13 = 0;
  return ($13|0);
 }
 $$01013 = $1;$7 = $2;
 while(1) {
  $8 = (_strlen($7)|0);
  $9 = (_strncasecmp($0,$7,$8)|0);
  $10 = ($9|0)==(0);
  $5 = ((($$01013)) + 4|0);
  if ($10) {
   break;
  }
  $4 = HEAP32[$5>>2]|0;
  $6 = ($4|0)==(0|0);
  if ($6) {
   $13 = 0;
   label = 6;
   break;
  } else {
   $$01013 = $5;$7 = $4;
  }
 }
 if ((label|0) == 6) {
  return ($13|0);
 }
 $11 = (_strlen($7)|0);
 $12 = (($0) + ($11)|0);
 $13 = $12;
 return ($13|0);
}
function _fcs_str2rank($0) {
 $0 = $0|0;
 var $$0 = 0, $$03 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 L1: while(1) {
  $1 = HEAP8[$$0>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_toupper($2)|0);
  switch ($3|0) {
  case 13: case 10: case 9: case 32: case 0:  {
   label = 13;
   break L1;
   break;
  }
  case 65:  {
   label = 14;
   break L1;
   break;
  }
  case 74:  {
   label = 15;
   break L1;
   break;
  }
  case 81:  {
   label = 16;
   break L1;
   break;
  }
  case 75:  {
   label = 17;
   break L1;
   break;
  }
  case 49:  {
   label = 3;
   break L1;
   break;
  }
  case 48: case 84:  {
   $$03 = 10;
   break L1;
   break;
  }
  case 50:  {
   label = 4;
   break L1;
   break;
  }
  case 51:  {
   label = 5;
   break L1;
   break;
  }
  case 52:  {
   label = 6;
   break L1;
   break;
  }
  case 53:  {
   label = 7;
   break L1;
   break;
  }
  case 54:  {
   label = 8;
   break L1;
   break;
  }
  case 55:  {
   label = 9;
   break L1;
   break;
  }
  case 56:  {
   label = 10;
   break L1;
   break;
  }
  case 57:  {
   label = 11;
   break L1;
   break;
  }
  default: {
  }
  }
  $8 = ((($$0)) + 1|0);
  $$0 = $8;
 }
 switch (label|0) {
  case 3: {
   $4 = ((($$0)) + 1|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = ($5<<24>>24)==(48);
   $7 = $6 ? 10 : 1;
   $$03 = $7;
   break;
  }
  case 4: {
   $$03 = 2;
   break;
  }
  case 5: {
   $$03 = 3;
   break;
  }
  case 6: {
   $$03 = 4;
   break;
  }
  case 7: {
   $$03 = 5;
   break;
  }
  case 8: {
   $$03 = 6;
   break;
  }
  case 9: {
   $$03 = 7;
   break;
  }
  case 10: {
   $$03 = 8;
   break;
  }
  case 11: {
   $$03 = 9;
   break;
  }
  case 13: {
   $$03 = 0;
   break;
  }
  case 14: {
   $$03 = 1;
   break;
  }
  case 15: {
   $$03 = 11;
   break;
  }
  case 16: {
   $$03 = 12;
   break;
  }
  case 17: {
   $$03 = 13;
   break;
  }
 }
 return ($$03|0);
}
function _fcs_str2suit($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 L1: while(1) {
  $1 = HEAP8[$$0>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_toupper($2)|0);
  switch ($3|0) {
  case 0: case 32: case 72:  {
   label = 6;
   break L1;
   break;
  }
  case 67:  {
   $$02 = 1;
   break L1;
   break;
  }
  case 68:  {
   label = 4;
   break L1;
   break;
  }
  case 83:  {
   label = 5;
   break L1;
   break;
  }
  default: {
  }
  }
  $4 = ((($$0)) + 1|0);
  $$0 = $4;
 }
 if ((label|0) == 4) {
  $$02 = 2;
 }
 else if ((label|0) == 5) {
  $$02 = 3;
 }
 else if ((label|0) == 6) {
  $$02 = 0;
 }
 return ($$02|0);
}
function _fc_solve_card_parse_str($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_fcs_str2rank($0)|0);
 $2 = (_fcs_str2suit($0)|0);
 $3 = (_fcs_make_card($1,$2)|0);
 return ($3|0);
}
function _fc_solve_moves_processed_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 HEAP32[$1>>2] = 0;
 return;
}
function _user_free_resources($0) {
 $0 = $0|0;
 var $$04142 = 0, $$043 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<($2>>>0);
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  _free($6);
  $7 = ((($0)) + 3920|0);
  _fc_solve_meta_compact_allocator_finish($7);
  return;
 }
 $$043 = $4;
 while(1) {
  $8 = ((($$043)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$$043>>2]|0;
  $11 = ($10>>>0)<($9>>>0);
  if ($11) {
   $$04142 = $10;
   while(1) {
    $16 = ((($$04142)) + 312|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 | 1;
    $19 = ($18|0)==(9);
    if (!($19)) {
     $20 = ((($$04142)) + 316|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      _fc_solve_finish_instance($$04142);
     }
    }
    _free_instance($$04142);
    $23 = ((($$04142)) + 317|0);
    HEAP8[$23>>0] = 0;
    $24 = ((($$04142)) + 360|0);
    _fc_solve_moves_processed_free($24);
    $25 = ((($$04142)) + 356|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(0|0);
    if (!($27)) {
     _free($26);
     HEAP32[$25>>2] = 0;
     $28 = ((($$04142)) + 352|0);
     HEAP32[$28>>2] = 0;
    }
    $29 = ((($$04142)) + 400|0);
    $30 = ($29>>>0)<($9>>>0);
    if ($30) {
     $$04142 = $29;
    } else {
     break;
    }
   }
  }
  $12 = HEAP32[$$043>>2]|0;
  _free($12);
  $13 = ((($$043)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   _free($14);
  }
  $31 = ((($$043)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0|0);
  if (!($33)) {
   _free($32);
  }
  $34 = ((($$043)) + 40|0);
  $35 = ($34>>>0)<($2>>>0);
  if ($35) {
   $$043 = $34;
  } else {
   break;
  }
 }
 $6 = HEAP32[$3>>2]|0;
 _free($6);
 $7 = ((($0)) + 3920|0);
 _fc_solve_meta_compact_allocator_finish($7);
 return;
}
function _user_initialize($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 (_fc_solve_get_preset_by_name(12961,$1)|0);
 $2 = ((($0)) + 3704|0);
 $3 = HEAP32[$1>>2]|0;
 dest=$2; src=$3; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($0)) + 3920|0);
 _fc_solve_meta_compact_allocator_init($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 344|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 340|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 12|0);
 HEAP32[$9>>2] = -1;
 $10 = ((($0)) + 16|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 328|0);
 HEAP8[$15>>0] = 1;
 $16 = ((($0)) + 352|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 360|0);
 HEAPF64[$17>>3] = 1.0;
 _clear_error($0);
 _user_next_instance($0);
 STACKTOP = sp;return;
}
function _fc_solve_meta_compact_allocator_init($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 return;
}
function _user_next_instance($0) {
 $0 = $0|0;
 var $$sroa$5$0$$sroa_idx = 0, $$sroa$6$0$$sroa_raw_idx = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($2) - ($5))|0;
 $7 = (($6|0) / 40)&-1;
 $8 = (($6) + 40)|0;
 $9 = (_realloc($4,$8)|0);
 HEAP32[$3>>2] = $9;
 $10 = (($9) + (($7*40)|0)|0);
 HEAP32[$0>>2] = $10;
 $11 = ((($10)) + 40|0);
 HEAP32[$1>>2] = $11;
 $12 = (_curr_inst($0)|0);
 $$sroa$5$0$$sroa_idx = ((($12)) + 33|0);
 ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;HEAP32[$12+12>>2]=0|0;HEAP32[$12+16>>2]=0|0;HEAP32[$12+20>>2]=0|0;HEAP32[$12+24>>2]=0|0;HEAP32[$12+28>>2]=0|0;HEAP8[$12+32>>0]=0|0;
 HEAP8[$$sroa$5$0$$sroa_idx>>0] = 1;
 $$sroa$6$0$$sroa_raw_idx = ((($12)) + 34|0);
 ;HEAP16[$$sroa$6$0$$sroa_raw_idx>>1]=0|0;HEAP16[$$sroa$6$0$$sroa_raw_idx+2>>1]=0|0;HEAP16[$$sroa$6$0$$sroa_raw_idx+4>>1]=0|0;
 _user_next_flare($0);
 return;
}
function _user_next_flare($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_curr_inst($0)|0);
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = $4;
 $6 = (($3) - ($5))|0;
 $7 = (($6|0) / 400)&-1;
 $8 = (($6) + 400)|0;
 $9 = (_realloc($4,$8)|0);
 HEAP32[$1>>2] = $9;
 $10 = (($9) + (($7*400)|0)|0);
 $11 = ((($10)) + 400|0);
 HEAP32[$2>>2] = $11;
 $12 = ((($1)) + 36|0);
 HEAP32[$12>>2] = -1;
 $13 = ((($0)) + 32|0);
 HEAP32[$13>>2] = $10;
 $14 = ((($0)) + 3920|0);
 _alloc_instance($10,$14);
 $15 = (((($9) + (($7*400)|0)|0)) + 152|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 368|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($0)) + 3704|0);
 (_fc_solve_apply_preset_by_ptr($10,$20)|0);
 _calc_variant_suit_mask_and_desired_suit_value($10);
 $21 = (((($9) + (($7*400)|0)|0)) + 312|0);
 HEAP32[$21>>2] = 9;
 $22 = ((($0)) + 324|0);
 HEAP32[$22>>2] = 9;
 $23 = ((($0)) + 340|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $26 = ((($0)) + 344|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0|0);
  $phitmp = $28 ? 0 : 1;
  $30 = $phitmp;
 } else {
  $30 = 1;
 }
 $29 = (((($9) + (($7*400)|0)|0)) + 184|0);
 HEAP32[$29>>2] = $30;
 $31 = (((($9) + (($7*400)|0)|0)) + 188|0);
 HEAP32[$31>>2] = $0;
 $32 = (((($9) + (($7*400)|0)|0)) + 352|0);
 HEAP32[$32>>2] = 0;
 $33 = (((($9) + (($7*400)|0)|0)) + 356|0);
 HEAP32[$33>>2] = 0;
 $34 = (((($9) + (($7*400)|0)|0)) + 317|0);
 HEAP8[$34>>0] = 0;
 $35 = (((($9) + (($7*400)|0)|0)) + 368|0);
 HEAP32[$35>>2] = 0;
 $36 = (((($9) + (($7*400)|0)|0)) + 316|0);
 HEAP8[$36>>0] = 1;
 $37 = (((($9) + (($7*400)|0)|0)) + 372|0);
 $38 = $37;
 $39 = $38;
 HEAP32[$39>>2] = 0;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = 0;
 return;
}
function _alloc_instance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$13$sroa$0$0$$sroa$13$0$$sroa_raw_idx$sroa_raw_idx = 0, $$sroa$139$0$$sroa_idx10 = 0, $$sroa$2$0$$sroa_idx2 = 0, $$sroa$21$0$$sroa_idx26 = 0, $$sroa$22$0$$sroa_idx = 0, $$sroa$2228$0$$sroa_idx = 0, $$sroa$23$0$$sroa_raw_idx = 0, $$sroa$3$0$$sroa_idx3 = 0, $$sroa$4$0$$sroa_idx4 = 0, $$sroa$5$0$$sroa_idx5 = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$8$0$$sroa_idx = 0, $$sroa$9$0$$sroa_idx = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = $0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $$sroa$2$0$$sroa_idx2 = ((($0)) + 8|0);
 HEAP32[$$sroa$2$0$$sroa_idx2>>2] = 0;
 $$sroa$3$0$$sroa_idx3 = ((($0)) + 12|0);
 HEAP32[$$sroa$3$0$$sroa_idx3>>2] = 2147483647;
 $$sroa$4$0$$sroa_idx4 = ((($0)) + 16|0);
 HEAP32[$$sroa$4$0$$sroa_idx4>>2] = 2147483647;
 $$sroa$5$0$$sroa_idx5 = ((($0)) + 20|0);
 HEAP32[$$sroa$5$0$$sroa_idx5>>2] = 2147483647;
 $$sroa$6$0$$sroa_idx = ((($0)) + 24|0);
 $$sroa$8$0$$sroa_idx = ((($0)) + 134|0);
 dest=$$sroa$6$0$$sroa_idx; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$$sroa$6$0$$sroa_idx+108>>1]=0|0;
 HEAP8[$$sroa$8$0$$sroa_idx>>0] = 1;
 $$sroa$9$0$$sroa_idx = ((($0)) + 135|0);
 $$sroa$13$sroa$0$0$$sroa$13$0$$sroa_raw_idx$sroa_raw_idx = ((($0)) + 139|0);
 HEAP8[$$sroa$9$0$$sroa_idx>>0]=0&255;HEAP8[$$sroa$9$0$$sroa_idx+1>>0]=(0>>8)&255;HEAP8[$$sroa$9$0$$sroa_idx+2>>0]=(0>>16)&255;HEAP8[$$sroa$9$0$$sroa_idx+3>>0]=0>>24;
 HEAP8[$$sroa$13$sroa$0$0$$sroa$13$0$$sroa_raw_idx$sroa_raw_idx>>0] = 0;
 $$sroa$139$0$$sroa_idx10 = ((($0)) + 140|0);
 $$sroa$21$0$$sroa_idx26 = ((($0)) + 292|0);
 _memset(($$sroa$139$0$$sroa_idx10|0),0,152)|0;
 HEAP32[$$sroa$21$0$$sroa_idx26>>2] = $1;
 $$sroa$22$0$$sroa_idx = ((($0)) + 296|0);
 $6 = $$sroa$22$0$$sroa_idx;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $$sroa$2228$0$$sroa_idx = ((($0)) + 304|0);
 HEAP8[$$sroa$2228$0$$sroa_idx>>0] = 0;
 $$sroa$23$0$$sroa_raw_idx = ((($0)) + 305|0);
 ;HEAP8[$$sroa$23$0$$sroa_raw_idx>>0]=0|0;HEAP8[$$sroa$23$0$$sroa_raw_idx+1>>0]=0|0;HEAP8[$$sroa$23$0$$sroa_raw_idx+2>>0]=0|0;HEAP8[$$sroa$23$0$$sroa_raw_idx+3>>0]=0|0;HEAP8[$$sroa$23$0$$sroa_raw_idx+4>>0]=0|0;HEAP8[$$sroa$23$0$$sroa_raw_idx+5>>0]=0|0;HEAP8[$$sroa$23$0$$sroa_raw_idx+6>>0]=0|0;
 _apply_preset_by_name($0);
 (_new_hard_thread($0)|0);
 return;
}
function _apply_preset_by_name($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (_fc_solve_get_preset_by_name(12961,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[$1>>2]|0;
 (_fc_solve_apply_preset_by_ptr($0,$4)|0);
 STACKTOP = sp;return;
}
function _new_hard_thread($0) {
 $0 = $0|0;
 var $$0 = 0, $$03638 = 0, $$03739 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 192|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(32);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 152|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 148|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7*1356)|0;
 $9 = (($8) + 1356)|0;
 $10 = (_realloc($5,$9)|0);
 HEAP32[$4>>2] = $10;
 $11 = HEAP32[$6>>2]|0;
 $12 = (($10) + (($11*1356)|0)|0);
 $13 = ($12>>>0)>($10>>>0);
 if ($13) {
  $$03739 = $10;
  while(1) {
   $14 = ((($$03739)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($$03739)) + 1344|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($15) + (($17*552)|0)|0);
   $19 = ($17|0)>(0);
   if ($19) {
    $$03638 = $15;
    while(1) {
     HEAP32[$$03638>>2] = $$03739;
     $20 = ((($$03638)) + 552|0);
     $21 = ($20>>>0)<($18>>>0);
     if ($21) {
      $$03638 = $20;
     } else {
      break;
     }
    }
   }
   $22 = ((($$03739)) + 1356|0);
   $23 = ($22>>>0)<($12>>>0);
   if ($23) {
    $$03739 = $22;
   } else {
    break;
   }
  }
 }
 $24 = HEAP32[$4>>2]|0;
 $25 = (($24) + (($11*1356)|0)|0);
 _fc_solve_instance__init_hard_thread($0,$25);
 $26 = HEAP32[$6>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$6>>2] = $27;
 $28 = (((($24) + (($11*1356)|0)|0)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $$0 = $29;
 return ($$0|0);
}
function _free_instance($0) {
 $0 = $0|0;
 var $$019 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 _fc_solve_foreach_soft_thread($0,1,0);
 $1 = ((($0)) + 152|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 148|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + (($4*1356)|0)|0);
 $6 = ($4|0)>(0);
 if ($6) {
  $$019 = $2;
  while(1) {
   _free_hard_thread($$019);
   $7 = ((($$019)) + 1356|0);
   $8 = ($7>>>0)<($5>>>0);
   if ($8) {
    $$019 = $7;
   } else {
    break;
   }
  }
 }
 $9 = HEAP32[$1>>2]|0;
 _free($9);
 $10 = ((($0)) + 160|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _free_hard_thread($11);
  $13 = HEAP32[$10>>2]|0;
  _free($13);
 }
 $14 = ((($0)) + 164|0);
 _moves_order__free_228($14);
 $15 = ((($0)) + 138|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  _instance_free_solution_moves_233($0);
  return;
 }
 $18 = ((($0)) + 176|0);
 _moves_order__free_228($18);
 _instance_free_solution_moves_233($0);
 return;
}
function _free_hard_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1352|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 $3 = ((($0)) + 1336|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = ((($0)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 _free($6);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = ((($0)) + 20|0);
 _fc_solve_compact_allocator_finish($9);
 return;
}
function _calc_moves_flare($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_SINGLE_FLARE($0)|0);
 _trace_flare_solution($0,$1);
 return ($1|0);
}
function _SINGLE_FLARE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_curr_inst($0)|0);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $7 = $3;
  return ($7|0);
 }
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 return ($7|0);
}
function _fc_solve_compact_allocator_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = $1;
 _fc_solve_compact_allocator_init_helper_268($0);
 return;
}
function _fc_solve_compact_allocator_init_helper_268($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 _fc_solve_compact_allocator_extend($0);
 return;
}
function _fc_solve_compact_allocator_extend($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_meta_request_new_buffer($2)|0);
 $4 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $4;
 HEAP32[$0>>2] = $3;
 $5 = ((($3)) + 4|0);
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($3)) + 65152|0);
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $8;
 return;
}
function _meta_request_new_buffer($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (_malloc(65152)|0);
  $$0 = $4;
  return ($$0|0);
 } else {
  $3 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $3;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _fc_solve_meta_compact_allocator_finish($0) {
 $0 = $0|0;
 var $$012 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  _free($1);
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  _free($1);
  if (!($4)) {
   $$012 = $3;
   while(1) {
    $5 = HEAP32[$$012>>2]|0;
    $6 = ($5|0)==(0|0);
    _free($$012);
    if ($6) {
     break;
    } else {
     $$012 = $5;
    }
   }
  }
 }
 HEAP32[$0>>2] = 0;
 return;
}
function _fc_solve_compact_allocator_finish($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$phi = 0, $$019 = 0, $$019$in$in = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $$0 = $3;$$019$in$in = $4;
 while(1) {
  $$019 = HEAP32[$$019$in$in>>2]|0;
  $5 = ($$019|0)==(0|0);
  HEAP32[$$019$in$in>>2] = $$0;
  if ($5) {
   break;
  } else {
   $$0$phi = $$019$in$in;$$019$in$in = $$019;$$0 = $$0$phi;
  }
 }
 HEAP32[$2>>2] = $$019$in$in;
 return;
}
function _fc_solve_apply_move($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ((($2)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((($2)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = HEAP8[$2>>0]|0;
 switch ($11<<24>>24) {
 case 0:  {
  $12 = (($0) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($0) + ($7<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($2)) + 3|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  _fcs_col_transfer_cards_279($13,$15,$18);
  return;
  break;
 }
 case 2:  {
  $19 = (((($0)) + 40|0) + ($7)|0);
  $20 = HEAP8[$19>>0]|0;
  _fcs_state_push_280($0,$10,$20);
  HEAP8[$19>>0] = 0;
  return;
  break;
 }
 case 3:  {
  $21 = (((($0)) + 40|0) + ($7)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = (((($0)) + 40|0) + ($10)|0);
  HEAP8[$23>>0] = $22;
  HEAP8[$21>>0] = 0;
  return;
  break;
 }
 case 1:  {
  $24 = (($0) + ($7<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (($25) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = (($26) + -1)<<24>>24;
  HEAP8[$25>>0] = $30;
  $31 = $30&255;
  $32 = (($31) + 1)|0;
  $33 = (($25) + ($32)|0);
  HEAP8[$33>>0] = 0;
  $34 = (((($0)) + 40|0) + ($10)|0);
  HEAP8[$34>>0] = $29;
  return;
  break;
 }
 case 4:  {
  $35 = (($0) + ($7<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP8[$36>>0]|0;
  $38 = (($37) + -1)<<24>>24;
  HEAP8[$36>>0] = $38;
  $39 = $38&255;
  $40 = (($39) + 1)|0;
  $41 = (($36) + ($40)|0);
  HEAP8[$41>>0] = 0;
  $42 = (((($0)) + 48|0) + ($10)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = (($43) + 1)<<24>>24;
  HEAP8[$42>>0] = $44;
  return;
  break;
 }
 case 5:  {
  $45 = (((($0)) + 40|0) + ($7)|0);
  HEAP8[$45>>0] = 0;
  $46 = (((($0)) + 48|0) + ($10)|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = (($47) + 1)<<24>>24;
  HEAP8[$46>>0] = $48;
  return;
  break;
 }
 case 11:  {
  $49 = (($0) + ($7<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (((($0)) + 48|0) + ($10)|0);
  $52 = HEAP8[$50>>0]|0;
  $53 = (($52) + -1)<<24>>24;
  HEAP8[$50>>0] = $53;
  $54 = $53&255;
  $55 = (($54) + 1)|0;
  $56 = (($50) + ($55)|0);
  HEAP8[$56>>0] = 0;
  $57 = HEAP8[$51>>0]|0;
  $58 = (($57) + 1)<<24>>24;
  HEAP8[$51>>0] = $58;
  $59 = HEAP8[$50>>0]|0;
  $60 = (($59) + -1)<<24>>24;
  HEAP8[$50>>0] = $60;
  $61 = $60&255;
  $62 = (($61) + 1)|0;
  $63 = (($50) + ($62)|0);
  HEAP8[$63>>0] = 0;
  $64 = HEAP8[$51>>0]|0;
  $65 = (($64) + 1)<<24>>24;
  HEAP8[$51>>0] = $65;
  $66 = HEAP8[$50>>0]|0;
  $67 = (($66) + -1)<<24>>24;
  HEAP8[$50>>0] = $67;
  $68 = $67&255;
  $69 = (($68) + 1)|0;
  $70 = (($50) + ($69)|0);
  HEAP8[$70>>0] = 0;
  $71 = HEAP8[$51>>0]|0;
  $72 = (($71) + 1)<<24>>24;
  HEAP8[$51>>0] = $72;
  $73 = HEAP8[$50>>0]|0;
  $74 = (($73) + -1)<<24>>24;
  HEAP8[$50>>0] = $74;
  $75 = $74&255;
  $76 = (($75) + 1)|0;
  $77 = (($50) + ($76)|0);
  HEAP8[$77>>0] = 0;
  $78 = HEAP8[$51>>0]|0;
  $79 = (($78) + 1)<<24>>24;
  HEAP8[$51>>0] = $79;
  $80 = HEAP8[$50>>0]|0;
  $81 = (($80) + -1)<<24>>24;
  HEAP8[$50>>0] = $81;
  $82 = $81&255;
  $83 = (($82) + 1)|0;
  $84 = (($50) + ($83)|0);
  HEAP8[$84>>0] = 0;
  $85 = HEAP8[$51>>0]|0;
  $86 = (($85) + 1)<<24>>24;
  HEAP8[$51>>0] = $86;
  $87 = HEAP8[$50>>0]|0;
  $88 = (($87) + -1)<<24>>24;
  HEAP8[$50>>0] = $88;
  $89 = $88&255;
  $90 = (($89) + 1)|0;
  $91 = (($50) + ($90)|0);
  HEAP8[$91>>0] = 0;
  $92 = HEAP8[$51>>0]|0;
  $93 = (($92) + 1)<<24>>24;
  HEAP8[$51>>0] = $93;
  $94 = HEAP8[$50>>0]|0;
  $95 = (($94) + -1)<<24>>24;
  HEAP8[$50>>0] = $95;
  $96 = $95&255;
  $97 = (($96) + 1)|0;
  $98 = (($50) + ($97)|0);
  HEAP8[$98>>0] = 0;
  $99 = HEAP8[$51>>0]|0;
  $100 = (($99) + 1)<<24>>24;
  HEAP8[$51>>0] = $100;
  $101 = HEAP8[$50>>0]|0;
  $102 = (($101) + -1)<<24>>24;
  HEAP8[$50>>0] = $102;
  $103 = $102&255;
  $104 = (($103) + 1)|0;
  $105 = (($50) + ($104)|0);
  HEAP8[$105>>0] = 0;
  $106 = HEAP8[$51>>0]|0;
  $107 = (($106) + 1)<<24>>24;
  HEAP8[$51>>0] = $107;
  $108 = HEAP8[$50>>0]|0;
  $109 = (($108) + -1)<<24>>24;
  HEAP8[$50>>0] = $109;
  $110 = $109&255;
  $111 = (($110) + 1)|0;
  $112 = (($50) + ($111)|0);
  HEAP8[$112>>0] = 0;
  $113 = HEAP8[$51>>0]|0;
  $114 = (($113) + 1)<<24>>24;
  HEAP8[$51>>0] = $114;
  $115 = HEAP8[$50>>0]|0;
  $116 = (($115) + -1)<<24>>24;
  HEAP8[$50>>0] = $116;
  $117 = $116&255;
  $118 = (($117) + 1)|0;
  $119 = (($50) + ($118)|0);
  HEAP8[$119>>0] = 0;
  $120 = HEAP8[$51>>0]|0;
  $121 = (($120) + 1)<<24>>24;
  HEAP8[$51>>0] = $121;
  $122 = HEAP8[$50>>0]|0;
  $123 = (($122) + -1)<<24>>24;
  HEAP8[$50>>0] = $123;
  $124 = $123&255;
  $125 = (($124) + 1)|0;
  $126 = (($50) + ($125)|0);
  HEAP8[$126>>0] = 0;
  $127 = HEAP8[$51>>0]|0;
  $128 = (($127) + 1)<<24>>24;
  HEAP8[$51>>0] = $128;
  $129 = HEAP8[$50>>0]|0;
  $130 = (($129) + -1)<<24>>24;
  HEAP8[$50>>0] = $130;
  $131 = $130&255;
  $132 = (($131) + 1)|0;
  $133 = (($50) + ($132)|0);
  HEAP8[$133>>0] = 0;
  $134 = HEAP8[$51>>0]|0;
  $135 = (($134) + 1)<<24>>24;
  HEAP8[$51>>0] = $135;
  $136 = HEAP8[$50>>0]|0;
  $137 = (($136) + -1)<<24>>24;
  HEAP8[$50>>0] = $137;
  $138 = $137&255;
  $139 = (($138) + 1)|0;
  $140 = (($50) + ($139)|0);
  HEAP8[$140>>0] = 0;
  $141 = HEAP8[$51>>0]|0;
  $142 = (($141) + 1)<<24>>24;
  HEAP8[$51>>0] = $142;
  return;
  break;
 }
 case 12:  {
  $143 = ($1|0)==(0|0);
  if ($143) {
   _fc_solve_canonize_state($0,$3,$4);
   return;
  } else {
   _fc_solve_canonize_state_with_locs($0,$1,$3,$4);
   return;
  }
  break;
 }
 default: {
  return;
 }
 }
}
function _fcs_col_transfer_cards_279($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $5 = (($4) - ($2))|0;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = $5 & 255;
 $8 = (($7) + 1)|0;
 $9 = (($1) + ($8)|0);
 $10 = HEAP8[$0>>0]|0;
 $11 = $10&255;
 $12 = (($11) + 1)|0;
 $13 = (($0) + ($12)|0);
 _memcpy(($13|0),($9|0),($2|0))|0;
 $14 = (($11) + ($2))|0;
 $15 = $14&255;
 HEAP8[$0>>0] = $15;
 _memset(($9|0),0,($2|0))|0;
 return;
}
function _fcs_state_push_280($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($0) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = (($5) + 1)<<24>>24;
 HEAP8[$4>>0] = $6;
 $7 = $5&255;
 $8 = (($7) + 1)|0;
 $9 = (($4) + ($8)|0);
 HEAP8[$9>>0] = $2;
 return;
}
function _fc_solve_derived_states_list_add_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$0$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 $7 = $6&1;
 $8 = (($3) + ($7))|0;
 $9 = $8 & 15;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $8 << 3;
  $12 = (($11) + 128)|0;
  $13 = (_realloc($5,$12)|0);
  HEAP32[$4>>2] = $13;
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$0>>2] = $16;
 $$sroa$0$0$$sroa_idx = (($14) + ($15<<3)|0);
 HEAP32[$$sroa$0$0$$sroa_idx>>2] = $1;
 $$sroa$2$0$$sroa_idx1 = (((($14) + ($15<<3)|0)) + 4|0);
 HEAP32[$$sroa$2$0$$sroa_idx1>>2] = $2;
 return;
}
function _fc_solve_apply_moves_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0121$lcssa = 0, $$0121143 = 0, $$0126$off0142 = 0, $$0130$off0141 = 0, $$1127$off0 = 0, $$1131 = 0, $$3124 = 0, $$4125 = 0, $$5 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 _moves_order__free_285($0);
 $3 = (_malloc(3584)|0);
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$0>>2]|0;
 $6 = (((($3) + (($5*224)|0)|0)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = (_malloc(64)|0);
 $8 = (($3) + (($5*224)|0)|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$4>>2]|0;
 $10 = (((($9) + (($5*224)|0)|0)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = (($5) + 1)|0;
 HEAP32[$0>>2] = $11;
 $12 = (_strlen($1)|0);
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   $$0121$lcssa = 0;
  } else {
   $14 = $1;
   $$0121143 = 0;$$0126$off0142 = 0;$$0130$off0141 = 0;
   L3: while(1) {
    $15 = (($1) + ($$0121143)|0);
    $16 = HEAP8[$15>>0]|0;
    switch ($16<<24>>24) {
    case 91: case 40:  {
     if ($$0126$off0142) {
      label = 5;
      break L3;
     }
     $17 = HEAP32[$4>>2]|0;
     $18 = HEAP32[$0>>2]|0;
     $19 = (($18) + -1)|0;
     $20 = (((($17) + (($19*224)|0)|0)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0);
     if (!($22)) {
      $23 = $18 & 15;
      $24 = ($23|0)==(0);
      if ($24) {
       $25 = ($18*224)|0;
       $26 = (($25) + 3584)|0;
       $27 = (_realloc($17,$26)|0);
       HEAP32[$4>>2] = $27;
      }
      $28 = HEAP32[$4>>2]|0;
      $29 = HEAP32[$0>>2]|0;
      $30 = (((($28) + (($29*224)|0)|0)) + 4|0);
      HEAP32[$30>>2] = 0;
      $31 = (_malloc(64)|0);
      $32 = (($28) + (($29*224)|0)|0);
      HEAP32[$32>>2] = $31;
      $33 = (($29) + 1)|0;
      HEAP32[$0>>2] = $33;
     }
     $34 = HEAP32[$4>>2]|0;
     $35 = HEAP32[$0>>2]|0;
     $36 = (($35) + -1)|0;
     $37 = (((($34) + (($36*224)|0)|0)) + 8|0);
     HEAP32[$37>>2] = 1;
     $$1127$off0 = 1;$$1131 = 1;$$4125 = $$0121143;
     break;
    }
    case 93: case 41:  {
     if ($$0130$off0141) {
      label = 12;
      break L3;
     }
     if (!($$0126$off0142)) {
      label = 14;
      break L3;
     }
     $38 = (($$0121143) + 1)|0;
     $39 = (($1) + ($38)|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(61);
     if ($41) {
      $42 = (($$0121143) + 2)|0;
      $43 = (($1) + ($42)|0);
      $44 = (_strchr($43,40)|0);
      $45 = ($44|0)==(0|0);
      if ($45) {
       label = 17;
       break L3;
      }
      $46 = (_string_starts_with_291($43,13255,$44)|0);
      if ($46) {
       $$sink = 1;
      } else {
       $47 = (_string_starts_with_291($43,13260,$44)|0);
       if ($47) {
        $$sink = 2;
       } else {
        label = 20;
        break L3;
       }
      }
      $48 = HEAP32[$4>>2]|0;
      $49 = HEAP32[$0>>2]|0;
      $50 = (($49) + -1)|0;
      $51 = (((($48) + (($50*224)|0)|0)) + 8|0);
      HEAP32[$51>>2] = $$sink;
      $52 = ((($44)) + 1|0);
      $53 = (_strchr($52,41)|0);
      $54 = ($53|0)==(0|0);
      if ($54) {
       label = 22;
       break L3;
      }
      $55 = HEAP32[$4>>2]|0;
      $56 = HEAP32[$0>>2]|0;
      $57 = (($56) + -1)|0;
      $58 = (((($55) + (($57*224)|0)|0)) + 8|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($59|0)==(2);
      if ($60) {
       $61 = (((($55) + (($57*224)|0)|0)) + 176|0);
       _fc_solve_set_weights_295($52,$53,$61);
      } else {
       $62 = ($53|0)==($52|0);
       if (!($62)) {
        label = 26;
        break L3;
       }
      }
      $63 = $53;
      $64 = (($63) - ($14))|0;
      $$3124 = $64;
     } else {
      $$3124 = $$0121143;
     }
     $65 = HEAP32[$4>>2]|0;
     $66 = HEAP32[$0>>2]|0;
     $67 = (($66) + -1)|0;
     $68 = (((($65) + (($67*224)|0)|0)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(0);
     if (!($70)) {
      $71 = $66 & 15;
      $72 = ($71|0)==(0);
      if ($72) {
       $73 = ($66*224)|0;
       $74 = (($73) + 3584)|0;
       $75 = (_realloc($65,$74)|0);
       HEAP32[$4>>2] = $75;
      }
      $76 = HEAP32[$4>>2]|0;
      $77 = HEAP32[$0>>2]|0;
      $78 = (((($76) + (($77*224)|0)|0)) + 4|0);
      HEAP32[$78>>2] = 0;
      $79 = (_malloc(64)|0);
      $80 = (($76) + (($77*224)|0)|0);
      HEAP32[$80>>2] = $79;
      $81 = (($77) + 1)|0;
      HEAP32[$0>>2] = $81;
     }
     $82 = HEAP32[$4>>2]|0;
     $83 = HEAP32[$0>>2]|0;
     $84 = (($83) + -1)|0;
     $85 = (((($82) + (($84*224)|0)|0)) + 8|0);
     HEAP32[$85>>2] = 0;
     $$1127$off0 = 0;$$1131 = 0;$$4125 = $$3124;
     break;
    }
    default: {
     $86 = HEAP32[$4>>2]|0;
     $87 = HEAP32[$0>>2]|0;
     $88 = (($87) + -1)|0;
     $89 = (((($86) + (($88*224)|0)|0)) + 4|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $90 & 15;
     $92 = ($91|0)==(0);
     if ($92) {
      $93 = (($86) + (($88*224)|0)|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = $90 << 2;
      $96 = (($95) + 64)|0;
      $97 = (_realloc($94,$96)|0);
      $98 = HEAP32[$4>>2]|0;
      $99 = HEAP32[$0>>2]|0;
      $100 = (($99) + -1)|0;
      $101 = (($98) + (($100*224)|0)|0);
      HEAP32[$101>>2] = $97;
     }
     $102 = HEAP8[$15>>0]|0;
     $103 = (_fc_solve_string_to_move_num($102)|0);
     $104 = HEAP32[$4>>2]|0;
     $105 = HEAP32[$0>>2]|0;
     $106 = (($105) + -1)|0;
     $107 = (($104) + (($106*224)|0)|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = (((($104) + (($106*224)|0)|0)) + 4|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (($110) + 1)|0;
     HEAP32[$109>>2] = $111;
     $112 = (($108) + ($110<<2)|0);
     HEAP32[$112>>2] = $103;
     $$1127$off0 = $$0126$off0142;$$1131 = 0;$$4125 = $$0121143;
    }
    }
    $113 = (($$4125) + 1)|0;
    $114 = ($113>>>0)<($12>>>0);
    if ($114) {
     $$0121143 = $113;$$0126$off0142 = $$1127$off0;$$0130$off0141 = $$1131;
    } else {
     $$0121$lcssa = $113;
     break L1;
    }
   }
   if ((label|0) == 5) {
    dest=$2; src=13093; stop=dest+31|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$5 = 1;
    return ($$5|0);
   }
   else if ((label|0) == 12) {
    dest=$2; src=13124; stop=dest+24|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$5 = 2;
    return ($$5|0);
   }
   else if ((label|0) == 14) {
    dest=$2; src=13148; stop=dest+49|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$5 = 3;
    return ($$5|0);
   }
   else if ((label|0) == 17) {
    dest=$2; src=13197; stop=dest+58|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$5 = 5;
    return ($$5|0);
   }
   else if ((label|0) == 20) {
    dest=$2; src=13264; stop=dest+28|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$5 = 6;
    return ($$5|0);
   }
   else if ((label|0) == 22) {
    dest=$2; src=13292; stop=dest+46|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$5 = 7;
    return ($$5|0);
   }
   else if ((label|0) == 26) {
    dest=$2; src=13338; stop=dest+33|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $$5 = 8;
    return ($$5|0);
   }
  }
 } while(0);
 $115 = ($$0121$lcssa|0)==($12|0);
 if (!($115)) {
  dest=$2; src=13371; stop=dest+30|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $$5 = 4;
  return ($$5|0);
 }
 $116 = HEAP32[$4>>2]|0;
 $117 = HEAP32[$0>>2]|0;
 $118 = (($117) + -1)|0;
 $119 = (((($116) + (($118*224)|0)|0)) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)==(0);
 if ($121) {
  HEAP32[$0>>2] = $118;
  $122 = (($116) + (($118*224)|0)|0);
  $123 = HEAP32[$122>>2]|0;
  _free($123);
  $124 = HEAP32[$4>>2]|0;
  $125 = HEAP32[$0>>2]|0;
  $126 = (($124) + (($125*224)|0)|0);
  HEAP32[$126>>2] = 0;
 }
 HEAP8[$2>>0] = 0;
 $$5 = 0;
 return ($$5|0);
}
function _moves_order__free_285($0) {
 $0 = $0|0;
 var $$014 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$014 = 0;
  while(1) {
   $5 = (($2) + (($$014*224)|0)|0);
   $6 = HEAP32[$5>>2]|0;
   _free($6);
   $7 = (($$014) + 1)|0;
   $exitcond = ($7|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $$014 = $7;
   }
  }
 }
 _free($2);
 HEAP32[$1>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function _string_starts_with_291($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = $0;
 $5 = (($3) - ($4))|0;
 $6 = (_strlen($1)|0);
 $7 = ($5|0)==($6|0);
 if (!($7)) {
  $10 = 0;
  return ($10|0);
 }
 $8 = (_strncmp($0,$1,$5)|0);
 $9 = ($8|0)==(0);
 $10 = $9;
 return ($10|0);
}
function _fc_solve_set_weights_295($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01519$lcssa = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $$1$5 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0;
 var $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $scevgep = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $$1 = $0;
 while(1) {
  $4 = HEAP8[$$1>>0]|0;
  $5 = ($4<<24>>24)==(44);
  $6 = ((($$1)) + 1|0);
  if ($5) {
   $$1 = $6;
  } else {
   break;
  }
 }
 $7 = ($$1>>>0)<($1>>>0);
 if ($7) {
  $8 = (+_strtod($$1,$3));
  $9 = $8 > 0.0;
  $10 = $9 ? $8 : 0.0;
  HEAPF64[$2>>3] = $10;
  $11 = HEAP32[$3>>2]|0;
  $$1$1 = $11;
  while(1) {
   $16 = HEAP8[$$1$1>>0]|0;
   $17 = ($16<<24>>24)==(44);
   $18 = ((($$1$1)) + 1|0);
   if ($17) {
    $$1$1 = $18;
   } else {
    break;
   }
  }
  $19 = ($$1$1>>>0)<($1>>>0);
  if ($19) {
   $20 = (+_strtod($$1$1,$3));
   $21 = $20 > 0.0;
   $22 = $21 ? $20 : 0.0;
   $23 = ((($2)) + 8|0);
   HEAPF64[$23>>3] = $22;
   $24 = HEAP32[$3>>2]|0;
   $$1$2 = $24;
   while(1) {
    $25 = HEAP8[$$1$2>>0]|0;
    $26 = ($25<<24>>24)==(44);
    $27 = ((($$1$2)) + 1|0);
    if ($26) {
     $$1$2 = $27;
    } else {
     break;
    }
   }
   $28 = ($$1$2>>>0)<($1>>>0);
   if ($28) {
    $29 = (+_strtod($$1$2,$3));
    $30 = $29 > 0.0;
    $31 = $30 ? $29 : 0.0;
    $32 = ((($2)) + 16|0);
    HEAPF64[$32>>3] = $31;
    $33 = HEAP32[$3>>2]|0;
    $$1$3 = $33;
    while(1) {
     $34 = HEAP8[$$1$3>>0]|0;
     $35 = ($34<<24>>24)==(44);
     $36 = ((($$1$3)) + 1|0);
     if ($35) {
      $$1$3 = $36;
     } else {
      break;
     }
    }
    $37 = ($$1$3>>>0)<($1>>>0);
    if ($37) {
     $38 = (+_strtod($$1$3,$3));
     $39 = $38 > 0.0;
     $40 = $39 ? $38 : 0.0;
     $41 = ((($2)) + 24|0);
     HEAPF64[$41>>3] = $40;
     $42 = HEAP32[$3>>2]|0;
     $$1$4 = $42;
     while(1) {
      $43 = HEAP8[$$1$4>>0]|0;
      $44 = ($43<<24>>24)==(44);
      $45 = ((($$1$4)) + 1|0);
      if ($44) {
       $$1$4 = $45;
      } else {
       break;
      }
     }
     $46 = ($$1$4>>>0)<($1>>>0);
     if ($46) {
      $47 = (+_strtod($$1$4,$3));
      $48 = $47 > 0.0;
      $49 = $48 ? $47 : 0.0;
      $50 = ((($2)) + 32|0);
      HEAPF64[$50>>3] = $49;
      $51 = HEAP32[$3>>2]|0;
      $$1$5 = $51;
      while(1) {
       $52 = HEAP8[$$1$5>>0]|0;
       $53 = ($52<<24>>24)==(44);
       $54 = ((($$1$5)) + 1|0);
       if ($53) {
        $$1$5 = $54;
       } else {
        break;
       }
      }
      $55 = ($$1$5>>>0)<($1>>>0);
      if ($55) {
       $56 = (+_strtod($$1$5,$3));
       $57 = $56 > 0.0;
       $58 = $57 ? $56 : 0.0;
       $59 = ((($2)) + 40|0);
       HEAPF64[$59>>3] = $58;
       STACKTOP = sp;return;
      } else {
       $$01519$lcssa = 5;
      }
     } else {
      $$01519$lcssa = 4;
     }
    } else {
     $$01519$lcssa = 3;
    }
   } else {
    $$01519$lcssa = 2;
   }
  } else {
   $$01519$lcssa = 1;
  }
 } else {
  $$01519$lcssa = 0;
 }
 $scevgep = (($2) + ($$01519$lcssa<<3)|0);
 $12 = (($$01519$lcssa) + 1)|0;
 $13 = ($12>>>0)>(6);
 $umax = $13 ? $12 : 6;
 $14 = (($umax) - ($$01519$lcssa))|0;
 $15 = $14 << 3;
 _memset(($scevgep|0),0,($15|0))|0;
 STACKTOP = sp;return;
}
function _fc_solve_string_to_move_num($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 $2 = (4304 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 return ($4|0);
}
function _fc_solve_apply_preset_by_ptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$043 = 0, $$04447 = 0, $$04551 = 0, $$046 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $2 = sp;
 $3 = ((($1)) + 12|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255)>(8);
 if ($5) {
  $$043 = 2;
  STACKTOP = sp;return ($$043|0);
 }
 $6 = ((($1)) + 13|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7&255)>(10);
 if ($8) {
  $$043 = 3;
  STACKTOP = sp;return ($$043|0);
 }
 $9 = ((($1)) + 14|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10&255)>(2);
 if ($11) {
  $$043 = 4;
  STACKTOP = sp;return ($$043|0);
 }
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$0>>2] = $12;
 $13 = ((($1)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(14);
 $16 = ((($0)) + 304|0);
 $17 = $15&1;
 HEAP8[$16>>0] = $17;
 $18 = ((($0)) + 152|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 148|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + (($21*1356)|0)|0);
 $23 = ($21|0)>(0);
 if ($23) {
  $24 = ((($1)) + 16|0);
  $$04551 = $19;
  while(1) {
   $25 = ((($$04551)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($$04551)) + 1344|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + (($28*552)|0)|0);
   $30 = ($28|0)>(0);
   if ($30) {
    $$04447 = $26;
    while(1) {
     $31 = ((($$04447)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($$04447)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0);
     if (!($35)) {
      $$046 = 0;
      while(1) {
       $38 = (((($32) + (($$046*12)|0)|0)) + 4|0);
       $39 = $1;
       $40 = $39;
       $41 = HEAP32[$40>>2]|0;
       $42 = (($39) + 4)|0;
       $43 = $42;
       $44 = HEAP32[$43>>2]|0;
       _apply_moves($38,$41,$44,$24);
       $45 = (($$046) + 1)|0;
       $46 = HEAP32[$33>>2]|0;
       $47 = ($45>>>0)<($46>>>0);
       if ($47) {
        $$046 = $45;
       } else {
        break;
       }
      }
     }
     $36 = ((($$04447)) + 552|0);
     $37 = ($36>>>0)<($29>>>0);
     if ($37) {
      $$04447 = $36;
     } else {
      break;
     }
    }
   }
   $48 = ((($$04551)) + 1356|0);
   $49 = ($48>>>0)<($22>>>0);
   if ($49) {
    $$04551 = $48;
   } else {
    break;
   }
  }
 }
 $50 = ((($0)) + 164|0);
 $51 = ((($1)) + 16|0);
 (_fc_solve_apply_moves_order($50,$51,$2)|0);
 $$043 = 0;
 STACKTOP = sp;return ($$043|0);
}
function _apply_moves($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$02631 = 0, $$030 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $$02631 = 0;
 L4: while(1) {
  $9 = (($8) + (($$02631*224)|0)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (((($8) + (($$02631*224)|0)|0)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $$030 = 0;
   while(1) {
    $16 = (($10) + ($$030<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = 1 << $17;
    $19 = ($18|0)<(0);
    $20 = $19 << 31 >> 31;
    $21 = $18 & $1;
    $22 = $20 & $2;
    $23 = ($21|0)==(0);
    $24 = ($22|0)==(0);
    $25 = $23 & $24;
    $14 = (($$030) + 1)|0;
    if ($25) {
     break L4;
    }
    $15 = ($14>>>0)<($12>>>0);
    if ($15) {
     $$030 = $14;
    } else {
     break;
    }
   }
  }
  $26 = (($$02631) + 1)|0;
  $27 = HEAP32[$0>>2]|0;
  $28 = ($26>>>0)<($27>>>0);
  if ($28) {
   $$02631 = $26;
  } else {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 (_fc_solve_apply_moves_order($0,$3,$4)|0);
 STACKTOP = sp;return;
}
function _fc_solve_get_preset_by_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_fcs_get_preset_id_by_name($0)|0);
 $3 = (_fcs_get_preset_by_id($2,$1)|0);
 return ($3|0);
}
function _fcs_get_preset_id_by_name($0) {
 $0 = $0|0;
 var $$069 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$069 = 0;
 while(1) {
  $1 = (3168 + (($$069*36)|0)|0);
  $2 = (_strcmp($0,$1)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   break;
  }
  $4 = (($$069) + 1)|0;
  $5 = ($4>>>0)<(23);
  if ($5) {
   $$069 = $4;
  } else {
   $8 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($8|0);
 }
 $6 = (((3168 + (($$069*36)|0)|0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 return ($8|0);
}
function _fcs_get_preset_by_id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0710$lcssa = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($0|0) {
  case 0:  {
   $$0710$lcssa = $0;
   label = 17;
   break;
  }
  case 1:  {
   $$0710$lcssa = 1;
   label = 17;
   break;
  }
  case 15:  {
   $$0710$lcssa = 2;
   label = 17;
   break;
  }
  case 2:  {
   $$0710$lcssa = 3;
   label = 17;
   break;
  }
  case 3:  {
   $$0710$lcssa = 4;
   label = 17;
   break;
  }
  case 4:  {
   $$0710$lcssa = 5;
   label = 17;
   break;
  }
  case 5:  {
   $$0710$lcssa = 6;
   label = 17;
   break;
  }
  case 6:  {
   $$0710$lcssa = 7;
   label = 17;
   break;
  }
  case 7:  {
   $$0710$lcssa = 8;
   label = 17;
   break;
  }
  case 8:  {
   $$0710$lcssa = 9;
   label = 17;
   break;
  }
  case 9:  {
   $$0710$lcssa = 10;
   label = 17;
   break;
  }
  case 10:  {
   $$0710$lcssa = 11;
   label = 17;
   break;
  }
  case 11:  {
   $$0710$lcssa = 12;
   label = 17;
   break;
  }
  case 12:  {
   $$0710$lcssa = 13;
   label = 17;
   break;
  }
  case 13:  {
   $$0710$lcssa = 14;
   label = 17;
   break;
  }
  case 14:  {
   $$0710$lcssa = 15;
   label = 17;
   break;
  }
  default: {
   $3 = 1;
  }
  }
 } while(0);
 if ((label|0) == 17) {
  $2 = (1632 + (($$0710$lcssa*96)|0)|0);
  HEAP32[$1>>2] = $2;
  $3 = 0;
 }
 return ($3|0);
}
function _fc_solve_soft_thread_init_befs_or_bfs($0) {
 $0 = $0|0;
 var $$016 = 0, $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 $3 = ((($0)) + 549|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  _fc_solve_initialize_bfs_queue($0);
 } else {
  $6 = ((($0)) + 288|0);
  _fc_solve_pq_init_304($6);
  $7 = ((($0)) + 304|0);
  _fc_solve_initialize_befs_rater_305($0,$7);
 }
 $8 = ((($0)) + 264|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $32 = HEAP32[$0>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33)) + 196|0);
  $35 = ((($0)) + 512|0);
  HEAP32[$35>>2] = $34;
  STACKTOP = sp;return;
 }
 HEAP32[$1>>2] = 0;
 HEAP32[$2>>2] = 0;
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$016 = 0;$21 = $12;
  while(1) {
   $20 = ((($21)) + 8|0);
   $22 = HEAP32[$20>>2]|0;
   $23 = (($22) + (($$016*224)|0)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (((($22) + (($$016*224)|0)|0)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   _add_to_move_funcs_list_306($2,$1,$24,$26);
   $27 = (($$016) + 1)|0;
   $28 = HEAP32[$11>>2]|0;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($27>>>0)<($30>>>0);
   if ($31) {
    $$016 = $27;$21 = $28;
   } else {
    break;
   }
  }
 }
 $16 = HEAP32[$2>>2]|0;
 HEAP32[$8>>2] = $16;
 $$cast = $16;
 $17 = HEAP32[$1>>2]|0;
 $18 = (($$cast) + ($17<<2)|0);
 $19 = ((($0)) + 268|0);
 HEAP32[$19>>2] = $18;
 $32 = HEAP32[$0>>2]|0;
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($33)) + 196|0);
 $35 = ((($0)) + 512|0);
 HEAP32[$35>>2] = $34;
 STACKTOP = sp;return;
}
function _fc_solve_pq_init_304($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 HEAP32[$0>>2] = 1024;
 $2 = (_malloc(8200)|0);
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $2;
 return;
}
function _fc_solve_initialize_befs_rater_305($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$067$op = 0.0, $$sroa$0$0$copyload = 0, $$sroa$414$0$$sroa_idx = 0, $$sroa$414$0$copyload = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0;
 var $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0;
 var $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0;
 var $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0;
 var $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $narrow = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 160|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $3 + 0.0;
 $5 = ((($1)) + 168|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $4 + $6;
 $8 = ((($1)) + 176|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 + $9;
 $11 = ((($1)) + 184|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $10 + $12;
 $14 = ((($1)) + 192|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $13 + $15;
 $17 = ((($1)) + 200|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $16 + $18;
 $20 = ((($1)) + 160|0);
 $21 = $19 < 9.9999999999999995E-7;
 $$067$op = 2147483647.0 / $19;
 $22 = $21 ? 2147483647.0 : $$067$op;
 $23 = HEAP32[$0>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $$sroa$414$0$$sroa_idx = ((($24)) + 2|0);
 $$sroa$414$0$copyload = HEAP8[$$sroa$414$0$$sroa_idx>>0]|0;
 $25 = ((($24)) + 3|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = +HEAPF64[$20>>3];
 $28 = $22 * $27;
 $29 = $$sroa$414$0$copyload&255;
 $30 = ($29*52)|0;
 $31 = (+($30|0));
 $32 = $28 / $31;
 $33 = $26 & 16;
 $$sroa$0$0$copyload = HEAP8[$24>>0]|0;
 $34 = ((($1)) + 48|0);
 HEAPF64[$34>>3] = 0.0;
 $35 = $32 + 0.0;
 $36 = ((($1)) + 56|0);
 HEAPF64[$36>>3] = $35;
 $37 = $32 + $35;
 $38 = ((($1)) + 64|0);
 HEAPF64[$38>>3] = $37;
 $39 = $32 + $37;
 $40 = ((($1)) + 72|0);
 HEAPF64[$40>>3] = $39;
 $41 = $32 + $39;
 $42 = ((($1)) + 80|0);
 HEAPF64[$42>>3] = $41;
 $43 = $32 + $41;
 $44 = ((($1)) + 88|0);
 HEAPF64[$44>>3] = $43;
 $45 = $32 + $43;
 $46 = ((($1)) + 96|0);
 HEAPF64[$46>>3] = $45;
 $47 = $32 + $45;
 $48 = ((($1)) + 104|0);
 HEAPF64[$48>>3] = $47;
 $49 = $32 + $47;
 $50 = ((($1)) + 112|0);
 HEAPF64[$50>>3] = $49;
 $51 = $32 + $49;
 $52 = ((($1)) + 120|0);
 HEAPF64[$52>>3] = $51;
 $53 = $32 + $51;
 $54 = ((($1)) + 128|0);
 HEAPF64[$54>>3] = $53;
 $55 = $32 + $53;
 $56 = ((($1)) + 136|0);
 HEAPF64[$56>>3] = $55;
 $57 = $32 + $55;
 $58 = ((($1)) + 144|0);
 HEAPF64[$58>>3] = $57;
 $59 = $32 + $57;
 $60 = ((($1)) + 152|0);
 HEAPF64[$60>>3] = $59;
 $61 = ($33<<24>>24)!=(0);
 $62 = ((($1)) + 168|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $22 * $63;
 $65 = $26 & 12;
 $66 = ($65<<24>>24)==(0);
 $67 = $$sroa$0$0$copyload&255;
 do {
  if ($66) {
   if ($61) {
    $68 = ((($24)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69&255;
    $71 = (($70) + ($67))|0;
    $79 = $71;
    break;
   } else {
    $72 = (($67) + 1)|0;
    $73 = ((($24)) + 1|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $72 << $75;
    $79 = $76;
    break;
   }
  } else {
   $77 = $61 ? $67 : 1;
   $79 = $77;
  }
 } while(0);
 $78 = (+($79|0));
 $80 = $64 / $78;
 $81 = ((($1)) + 8|0);
 HEAPF64[$81>>3] = $80;
 $82 = ((($1)) + 176|0);
 $83 = +HEAPF64[$82>>3];
 $84 = $22 * $83;
 $85 = ((($24)) + 24|0);
 $86 = +HEAPF64[$85>>3];
 $87 = $84 / $86;
 $88 = ((($1)) + 16|0);
 HEAPF64[$88>>3] = $87;
 $89 = ((($1)) + 184|0);
 $90 = +HEAPF64[$89>>3];
 $91 = $22 * $90;
 $92 = (5136 + ($30<<3)|0);
 $93 = +HEAPF64[$92>>3];
 $94 = $91 / $93;
 $95 = ((($1)) + 24|0);
 HEAPF64[$95>>3] = $94;
 $96 = ((($1)) + 192|0);
 $97 = +HEAPF64[$96>>3];
 $98 = $22 * $97;
 $99 = $98 / 2.0E+4;
 $100 = ((($1)) + 32|0);
 HEAPF64[$100>>3] = $99;
 $101 = ((($1)) + 200|0);
 $102 = +HEAPF64[$101>>3];
 $103 = $22 * $102;
 $104 = $103 / $31;
 $105 = ((($1)) + 40|0);
 HEAPF64[$105>>3] = $104;
 $106 = $80 != 0.0;
 $107 = $87 != 0.0;
 $or$cond = $106 | $107;
 $108 = $94 != 0.0;
 $narrow = $or$cond | $108;
 $109 = $narrow&1;
 HEAP8[$1>>0] = $109;
 return;
}
function _fc_solve_initialize_bfs_queue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = (_fcs_compact_alloc_ptr_307($2,8)|0);
 $4 = ((($0)) + 272|0);
 HEAP32[$4>>2] = $3;
 $5 = (_fcs_compact_alloc_ptr_307($2,8)|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($0)) + 276|0);
 HEAP32[$8>>2] = $5;
 $9 = ((($5)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 280|0);
 HEAP32[$10>>2] = 0;
 return;
}
function _add_to_move_funcs_list_306($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$019$lcssa = 0, $$01920 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) + ($3))|0;
 $7 = $6 << 2;
 $8 = (_realloc($5,$7)|0);
 $9 = ($3|0)==(0);
 if ($9) {
  $$019$lcssa = $4;
  HEAP32[$0>>2] = $8;
  HEAP32[$1>>2] = $$019$lcssa;
  return;
 }
 $$01920 = $4;$$021 = 0;
 while(1) {
  $11 = (($2) + ($$021<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (4192 + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($$01920) + 1)|0;
  $16 = (($8) + ($$01920<<2)|0);
  HEAP32[$16>>2] = $14;
  $17 = (($$021) + 1)|0;
  $exitcond = ($17|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$01920 = $15;$$021 = $17;
  }
 }
 $10 = (($4) + ($3))|0;
 $$019$lcssa = $10;
 HEAP32[$0>>2] = $8;
 HEAP32[$1>>2] = $$019$lcssa;
 return;
}
function _fcs_compact_alloc_ptr_307($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (0 - ($1))|0;
 $3 = $2 & 3;
 $4 = (($3) + ($1))|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = (($6) - ($9))|0;
 $11 = ($10>>>0)<($4>>>0);
 if ($11) {
  _fc_solve_compact_allocator_extend($0);
 } else {
  $12 = ((($0)) + 12|0);
  HEAP32[$12>>2] = $8;
 }
 $13 = HEAP32[$7>>2]|0;
 $14 = (($13) + ($4)|0);
 HEAP32[$7>>2] = $14;
 $15 = ((($0)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 return ($16|0);
}
function _fc_solve_befs_or_bfs_do_solve($0) {
 $0 = $0|0;
 var $$0191 = 0, $$0192 = 0, $$0193 = 0, $$0194 = 0, $$0195 = 0, $$0196214 = 0, $$0197213 = 0, $$0198219 = 0, $$1211 = 0, $$1220 = 0, $$2$lcssa = 0, $$2200 = 0, $$2215 = 0, $$3 = 0, $$3201 = 0, $$4 = 0, $$byval_copy1 = 0, $$not205 = 0, $$pr = 0, $$sroa$054$0$copyload = 0;
 var $$sroa$280$0$$sroa_idx81 = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$5$0$copyload = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge206 = 0, $or$cond204 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $1 = sp;
 $2 = sp + 8|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 304|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)!=(0);
 $8 = (_fcs_get_calc_real_depth_310($4)|0);
 $9 = ((($4)) + 134|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 522|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)!=(0);
 $17 = ((($4)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = 0;
 $23 = ((($0)) + 264|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($0)) + 268|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($0)) + 512|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 56|0);
 HEAP32[$2>>2] = $28;
 $$sroa$280$0$$sroa_idx81 = ((($2)) + 4|0);
 HEAP32[$$sroa$280$0$$sroa_idx81>>2] = $29;
 $30 = ((($0)) + 542|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ($31<<24>>24)!=(0);
 $33 = ((($4)) + 8|0);
 $34 = ((($3)) + 8|0);
 $35 = ((($0)) + 549|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = ($36<<24>>24)!=(0);
 $38 = ((($0)) + 550|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = ($39<<24>>24)!=(0);
 if ($37) {
  $41 = ((($0)) + 288|0);
  $$0191 = 0;$$0192 = 0;$$0194 = $41;
 } else {
  $42 = ((($0)) + 272|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($0)) + 276|0);
  $45 = HEAP32[$44>>2]|0;
  $$0191 = $43;$$0192 = $45;$$0194 = 0;
 }
 $$sroa$054$0$copyload = HEAP8[$4>>0]|0;
 $$sroa$5$0$$sroa_idx = ((($4)) + 1|0);
 $$sroa$5$0$copyload = HEAP8[$$sroa$5$0$$sroa_idx>>0]|0;
 $46 = (_calc_ht_max_num_states_311($4,$3)|0);
 $47 = ((($4)) + 184|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($4)) + 188|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($0)) + 56|0);
 $52 = ($28|0)==(0|0);
 do {
  if ($52) {
   $$0195 = 1;$$1211 = $$0192;$$3201 = 0;
  } else {
   $53 = ((($4)) + 144|0);
   $54 = ((($$0191)) + 4|0);
   $55 = (3)?($13 >>> 3):($13);
   $56 = $13 & 7;
   $57 = 1 << $56;
   $58 = ($48|0)==(0|0);
   $59 = ((($0)) + 280|0);
   $60 = ((($0)) + 524|0);
   $61 = ((($0)) + 523|0);
   $62 = ($24>>>0)<($26>>>0);
   $63 = ((($1)) + 4|0);
   $64 = ((($0)) + 304|0);
   $65 = ((($0)) + 280|0);
   $66 = ((($3)) + 20|0);
   $$not205 = $16 ^ 1;
   $$0198219 = $28;$$1220 = $$0192;
   while(1) {
    $67 = (_fcs__should_state_be_pruned_312($32,$$0198219)|0);
    if ($67) {
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;
     $68 = (_fc_solve_sfs_raymond_prune($0,$$byval_copy1)|0);
     $69 = ($68|0)==(0|0);
     if ($69) {
      $$2200 = $$0198219;
     } else {
      $70 = ((($68)) + 56|0);
      HEAP32[$2>>2] = $68;
      HEAP32[$$sroa$280$0$$sroa_idx81>>2] = $70;
      $$2200 = $68;
     }
    } else {
     $$2200 = $$0198219;
    }
    $71 = ((($$2200)) + 74|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    if ($40) {
     $74 = $73 & 3;
     $75 = ($74|0)==(1);
     if ($75) {
      label = 13;
     } else {
      $$4 = $$1220;
     }
    } else {
     $76 = $73 & 4;
     $77 = ($76|0)==(0);
     if ($77) {
      $78 = (((($$2200)) + 75|0) + ($55)|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = $79&255;
      $81 = $57 & $80;
      $82 = ($81|0)==(0);
      if ($82) {
       label = 13;
      } else {
       $$4 = $$1220;
      }
     } else {
      $$4 = $$1220;
     }
    }
    if ((label|0) == 13) {
     label = 0;
     $83 = HEAP32[$34>>2]|0;
     $84 = ($83|0)==($46|0);
     if ($84) {
      label = 15;
      break;
     }
     $85 = HEAP32[$53>>2]|0;
     $86 = ($85|0)<($18|0);
     if (!($86)) {
      label = 15;
      break;
     }
     if (!($58)) {
      $87 = HEAP32[$33>>2]|0;
      $88 = (_calc_depth_313($$2200)|0);
      $89 = ((($$2200)) + 56|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)==(0|0);
      if ($91) {
       $94 = 0;
      } else {
       $92 = ((($90)) + 68|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = $93;
      }
      FUNCTION_TABLE_viiiiii[$48 & 1]($50,$87,$88,$4,$2,$94);
     }
     $95 = (_count_num_vacant_freecells_314($$sroa$054$0$copyload,$$2200)|0);
     $96 = (_count_num_vacant_stacks_315($$sroa$5$0$copyload,$$2200)|0);
     $97 = ($96<<24>>24)==($$sroa$5$0$copyload<<24>>24);
     $98 = ($95<<24>>24)==($$sroa$054$0$copyload<<24>>24);
     $or$cond204 = $98 & $97;
     if ($or$cond204) {
      label = 21;
      break;
     }
     _calculate_real_depth_316($8,$$2200);
     HEAP8[$60>>0] = $95;
     HEAP8[$61>>0] = $96;
     _fc_solve__calc_positions_by_rank_data_317($0,$$2200,$51,$7);
     HEAP32[$1>>2] = 0;
     if ($62) {
      $$0197213 = $24;
      while(1) {
       $103 = HEAP32[$$0197213>>2]|0;
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;
       FUNCTION_TABLE_viii[$103 & 31]($0,$$byval_copy1,$1);
       $104 = ((($$0197213)) + 4|0);
       $105 = ($104>>>0)<($26>>>0);
       if ($105) {
        $$0197213 = $104;
       } else {
        break;
       }
      }
     }
     if ($16) {
      $106 = HEAP8[$71>>0]|0;
      $107 = $106 | 8;
      HEAP8[$71>>0] = $107;
     }
     $108 = HEAP32[$33>>2]|0;
     $109 = (($108) + 1)|0;
     HEAP32[$33>>2] = $109;
     $110 = HEAP32[$34>>2]|0;
     $111 = (($110) + 1)|0;
     HEAP32[$34>>2] = $111;
     $112 = HEAP32[$63>>2]|0;
     $113 = HEAP32[$1>>2]|0;
     $114 = (($112) + ($113<<3)|0);
     $115 = ($113|0)>(0);
     if ($115) {
      $$0196214 = $112;$$2215 = $$1220;
      while(1) {
       $116 = HEAP32[$$0196214>>2]|0;
       if ($37) {
        _FCS_STATE_keyval_pair_to_kv_318($$byval_copy1,$116);
        $117 = HEAP32[$$byval_copy1>>2]|0;
        $118 = (_FCS_STATE_kv_to_collectible_319($$byval_copy1)|0);
        $119 = (_calc_depth_313($118)|0);
        $120 = (20000 - ($119))|0;
        $121 = (_befs_rate_state_320($0,$64,$117,$120)|0);
        _fc_solve_pq_push_321($$0194,$116,$121);
        $$3 = $$2215;
       } else {
        $122 = HEAP32[$65>>2]|0;
        $123 = ($122|0)==(0|0);
        if ($123) {
         $126 = (_fcs_compact_alloc_ptr_307($66,8)|0);
         $$0193 = $126;
        } else {
         $124 = ((($122)) + 4|0);
         $125 = HEAP32[$124>>2]|0;
         HEAP32[$65>>2] = $125;
         $$0193 = $122;
        }
        $127 = ((($$2215)) + 4|0);
        HEAP32[$127>>2] = $$0193;
        HEAP32[$$2215>>2] = $116;
        $128 = ((($$0193)) + 4|0);
        HEAP32[$128>>2] = 0;
        $$3 = $$0193;
       }
       $129 = ((($$0196214)) + 8|0);
       $130 = ($129>>>0)<($114>>>0);
       if ($130) {
        $$0196214 = $129;$$2215 = $$3;
       } else {
        $$2$lcssa = $$3;
        break;
       }
      }
     } else {
      $$2$lcssa = $$1220;
     }
     if ($40) {
      $131 = HEAP8[$71>>0]|0;
      $132 = $131 | 2;
      HEAP8[$71>>0] = $132;
     } else {
      _set_scan_visited_322($$2200,$13);
      $133 = HEAP32[$1>>2]|0;
      $134 = ($133|0)!=(0);
      $brmerge = $134 | $$not205;
      $brmerge206 = $11 | $brmerge;
      if (!($brmerge206)) {
       _mark_as_dead_end__proto_323($$2200);
      }
     }
     $135 = HEAP32[$33>>2]|0;
     $136 = (($135) + -1)|0;
     $137 = ((($$2200)) + 68|0);
     HEAP32[$137>>2] = $136;
     $$4 = $$2$lcssa;
    }
    if ($37) {
     _fc_solve_pq_pop($$0194,$$byval_copy1);
    } else {
     $138 = HEAP32[$54>>2]|0;
     $139 = ($138|0)==($$4|0);
     if ($139) {
      label = 45;
      break;
     }
     $140 = HEAP32[$138>>2]|0;
     HEAP32[$$byval_copy1>>2] = $140;
     $141 = ((($138)) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     HEAP32[$54>>2] = $142;
     $143 = HEAP32[$59>>2]|0;
     HEAP32[$141>>2] = $143;
     HEAP32[$59>>2] = $138;
    }
    $$pr = HEAP32[$$byval_copy1>>2]|0;
    $144 = ($$pr|0)==(0|0);
    if ($144) {
     break;
    }
    $145 = ((($$pr)) + 56|0);
    HEAP32[$2>>2] = $$pr;
    HEAP32[$$sroa$280$0$$sroa_idx81>>2] = $145;
    $$0198219 = $$pr;$$1220 = $$4;
   }
   if ((label|0) == 15) {
    HEAP32[$27>>2] = $$2200;
    $$0195 = 5;$$1211 = $$1220;$$3201 = $$2200;
    break;
   }
   else if ((label|0) == 21) {
    $99 = HEAP32[$33>>2]|0;
    $100 = (($99) + 1)|0;
    HEAP32[$33>>2] = $100;
    $101 = HEAP32[$34>>2]|0;
    $102 = (($101) + 1)|0;
    HEAP32[$34>>2] = $102;
    $$0195 = 0;$$1211 = $$1220;$$3201 = $$2200;
    break;
   }
   else if ((label|0) == 45) {
    HEAP32[$$byval_copy1>>2] = 0;
   }
   $$0195 = 1;$$1211 = $$4;$$3201 = 0;
  }
 } while(0);
 $146 = ((($4)) + 280|0);
 HEAP32[$146>>2] = $$3201;
 $147 = ((($1)) + 4|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)==(0|0);
 if (!($149)) {
  _free($148);
 }
 if ($37) {
  STACKTOP = sp;return ($$0195|0);
 }
 $150 = ((($0)) + 276|0);
 HEAP32[$150>>2] = $$1211;
 STACKTOP = sp;return ($$0195|0);
}
function _fcs_get_calc_real_depth_310($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 132|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 return ($3|0);
}
function _calc_ht_max_num_states_311($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $11 = (($10) + ($5))|0;
 $12 = ($3|0)<($11|0);
 $13 = $12 ? $3 : $11;
 return ($13|0);
}
function _fcs__should_state_be_pruned_312($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($0) {
  $2 = (_fcs__should_state_be_pruned__state_328($1)|0);
  $3 = $2;
 } else {
  $3 = 0;
 }
 return ($3|0);
}
function _calc_depth_313($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _count_num_vacant_freecells_314($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07$lcssa = 0, $$078 = 0, $$09 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0&255;
 $3 = ($0<<24>>24)==(0);
 if ($3) {
  $$07$lcssa = 0;
  return ($$07$lcssa|0);
 }
 $$078 = 0;$$09 = 0;
 while(1) {
  $4 = (((($1)) + 40|0) + ($$09)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  $7 = $6&1;
  $spec$select = (($$078) + ($7))<<24>>24;
  $8 = (($$09) + 1)|0;
  $exitcond = ($8|0)==($2|0);
  if ($exitcond) {
   $$07$lcssa = $spec$select;
   break;
  } else {
   $$078 = $spec$select;$$09 = $8;
  }
 }
 return ($$07$lcssa|0);
}
function _count_num_vacant_stacks_315($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07$lcssa = 0, $$078 = 0, $$09 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0&255;
 $3 = ($0<<24>>24)==(0);
 if ($3) {
  $$07$lcssa = 0;
  return ($$07$lcssa|0);
 }
 $$078 = 0;$$09 = 0;
 while(1) {
  $4 = (($1) + ($$09<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  $8 = $7&1;
  $spec$select = (($$078) + ($8))<<24>>24;
  $9 = (($$09) + 1)|0;
  $exitcond = ($9|0)==($2|0);
  if ($exitcond) {
   $$07$lcssa = $spec$select;
   break;
  } else {
   $$078 = $spec$select;$$09 = $9;
  }
 }
 return ($$07$lcssa|0);
}
function _calculate_real_depth_316($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014$lcssa = 0, $$01418 = 0, $$019 = 0, $$11516 = 0, $$117 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 if (!($0)) {
  return;
 }
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$014$lcssa = -1;
 } else {
  $$01418 = -1;$$019 = $1;
  while(1) {
   $3 = ((($$019)) + 56|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = (($$01418) + 1)|0;
   $6 = ($4|0)==(0|0);
   if ($6) {
    $$014$lcssa = $5;
    break;
   } else {
    $$01418 = $5;$$019 = $4;
   }
  }
 }
 $7 = ((($1)) + 64|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($$014$lcssa|0);
 if ($9) {
  return;
 }
 $$11516 = $$014$lcssa;$$117 = $1;$10 = $7;
 while(1) {
  HEAP32[$10>>2] = $$11516;
  $11 = (($$11516) + -1)|0;
  $12 = ((($$117)) + 56|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 64|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($11|0);
  if ($16) {
   break;
  } else {
   $$11516 = $11;$$117 = $13;$10 = $14;
  }
 }
 return;
}
function _fc_solve__calc_positions_by_rank_data_317($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07885 = 0, $$079$lcssa = 0, $$07988 = 0, $$08193 = 0, $$08284 = 0, $$089 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond98 = 0, $exitcond99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($5)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 _memset(($2|0),-1,208)|0;
 if ($3) {
  $6 = $$sroa$3$0$copyload&255;
  $7 = ($$sroa$3$0$copyload<<24>>24)==(0);
  if ($7) {
   return;
  }
  $$07885 = 0;
  while(1) {
   $8 = (($1) + ($$07885<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = ($10<<24>>24)==(0);
   if (!($12)) {
    $13 = $$07885&255;
    $$08284 = 0;
    while(1) {
     $15 = (($$08284) + 1)|0;
     $16 = (($9) + ($15)|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = $18 & 3;
     $20 = (2)?($18 >>> 2):($18);
     $21 = ($19*14)|0;
     $22 = (($21) + ($20))|0;
     $23 = $$08284&255;
     $$sroa$0$0$$sroa_idx = (($2) + ($22<<1)|0);
     HEAP8[$$sroa$0$0$$sroa_idx>>0] = $13;
     $$sroa$2$0$$sroa_idx = (((($2) + ($22<<1)|0)) + 1|0);
     HEAP8[$$sroa$2$0$$sroa_idx>>0] = $23;
     $exitcond = ($15|0)==($11|0);
     if ($exitcond) {
      break;
     } else {
      $$08284 = $15;
     }
    }
   }
   $14 = (($$07885) + 1)|0;
   $exitcond98 = ($14|0)==($6|0);
   if ($exitcond98) {
    break;
   } else {
    $$07885 = $14;
   }
  }
  return;
 }
 $24 = ((($5)) + 3|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 & 3;
 $27 = $26&255;
 $28 = $$sroa$3$0$copyload&255;
 $29 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($29) {
  return;
 }
 $$08193 = 0;
 while(1) {
  $30 = (($1) + ($$08193<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = (($33) + -1)|0;
  $35 = ($32<<24>>24)==(0);
  if (!($35)) {
   $36 = ((($31)) + 1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = ($32<<24>>24)==(1);
   if ($38) {
    $$079$lcssa = $37;
   } else {
    $39 = $$08193&255;
    $$07988 = $37;$$089 = 0;
    while(1) {
     $42 = (($$089) + 1)|0;
     $43 = (($$089) + 2)|0;
     $44 = (($31) + ($43)|0);
     $45 = HEAP8[$44>>0]|0;
     $46 = (_fcs_is_parent_card__helper_326($45,$$07988,$27)|0);
     if (!($46)) {
      $47 = $$089&255;
      _fc_solve__assign_dest_stack_and_col_ptr_327($2,$39,$47,$$07988);
     }
     $48 = ($42|0)<($34|0);
     if ($48) {
      $$07988 = $45;$$089 = $42;
     } else {
      $$079$lcssa = $45;
      break;
     }
    }
   }
   $40 = $$08193&255;
   $41 = $34&255;
   _fc_solve__assign_dest_stack_and_col_ptr_327($2,$40,$41,$$079$lcssa);
  }
  $49 = (($$08193) + 1)|0;
  $exitcond99 = ($49|0)==($28|0);
  if ($exitcond99) {
   break;
  } else {
   $$08193 = $49;
  }
 }
 return;
}
function _FCS_STATE_keyval_pair_to_kv_318($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 $3 = ((($1)) + 56|0);
 HEAP32[$2>>2] = $3;
 return;
}
function _FCS_STATE_kv_to_collectible_319($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _befs_rate_state_320($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0105$lcssa = 0.0, $$0105133 = 0.0, $$0106$lcssa = 0.0, $$0106132 = 0.0, $$0108125 = 0, $$0109$lcssa = 0, $$0109124 = 0, $$0112141 = 0.0, $$0115140 = 0, $$0116$lcssa = 0, $$0116131 = 0, $$0119130 = 0, $$0123 = 0, $$1 = 0.0, $$1110$lcssa = 0, $$1110122 = 0, $$1113 = 0.0, $$2 = 0.0, $$2114 = 0.0, $$2118 = 0;
 var $$3 = 0.0, $$sroa$0$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$6$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0;
 var $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond145 = 0, $exitcond146 = 0, $not$ = 0, $spec$select = 0, $spec$select121 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 & 3;
 $$sroa$0$0$copyload = HEAP8[$5>>0]|0;
 $$sroa$4$0$$sroa_idx = ((($5)) + 1|0);
 $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
 $$sroa$6$0$$sroa_idx = ((($5)) + 2|0);
 $$sroa$6$0$copyload = HEAP8[$$sroa$6$0$$sroa_idx>>0]|0;
 $10 = $8 & 16;
 $11 = ($10|0)!=(0);
 $12 = ($3|0)>(0);
 $13 = $12 ? $3 : 0;
 $14 = (+($13|0));
 $15 = ((($1)) + 32|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $16 * $14;
 $18 = ((($1)) + 56|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $19 != 0.0;
 if ($20) {
  $21 = $$sroa$6$0$copyload&255;
  $22 = $21 << 2;
  $23 = ($$sroa$6$0$copyload<<24>>24)==(0);
  if ($23) {
   $$1113 = $17;
  } else {
   $$0112141 = $17;$$0115140 = 0;
   while(1) {
    $24 = (((($2)) + 48|0) + ($$0115140)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = (((($1)) + 48|0) + ($26<<3)|0);
    $28 = +HEAPF64[$27>>3];
    $29 = $$0112141 + $28;
    $30 = (($$0115140) + 1)|0;
    $31 = ($30>>>0)<($22>>>0);
    if ($31) {
     $$0112141 = $29;$$0115140 = $30;
    } else {
     $$1113 = $29;
     break;
    }
   }
  }
 } else {
  $$1113 = $17;
 }
 $32 = HEAP8[$1>>0]|0;
 $33 = ($32<<24>>24)==(0);
 if ($33) {
  $$2114 = $$1113;
 } else {
  $34 = $$sroa$4$0$copyload&255;
  $35 = ($$sroa$4$0$copyload<<24>>24)==(0);
  if ($35) {
   $$0105$lcssa = 0.0;$$0106$lcssa = 0.0;$$0116$lcssa = 0;
  } else {
   $$0105133 = 0.0;$$0106132 = 0.0;$$0116131 = 0;$$0119130 = 0;
   while(1) {
    $40 = (($2) + ($$0119130<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = ($42&255)<(2);
    if ($44) {
     $45 = ($42<<24>>24)==(0);
     $46 = $45&1;
     $spec$select = (($$0116131) + ($46))<<24>>24;
     $$1 = $$0105133;$$2 = $$0106132;$$2118 = $spec$select;
    } else {
     $47 = (($43) + -1)|0;
     $48 = (_update_col_cards_under_sequences_325($9,$41,$47)|0);
     $49 = (5136 + ($48<<3)|0);
     $50 = +HEAPF64[$49>>3];
     $51 = $$0105133 + $50;
     $52 = ($48|0)>(0);
     if ($52) {
      if ($11) {
       $57 = 1.0;
      } else {
       $53 = (($43) - ($48))|0;
       $54 = (5136 + ($53<<3)|0);
       $55 = +HEAPF64[$54>>3];
       $57 = $55;
      }
      $56 = $$0106132 + $57;
      $$1 = $51;$$2 = $56;$$2118 = $$0116131;
     } else {
      $$1 = $51;$$2 = $$0106132;$$2118 = $$0116131;
     }
    }
    $58 = (($$0119130) + 1)|0;
    $exitcond146 = ($58|0)==($34|0);
    if ($exitcond146) {
     $$0105$lcssa = $$1;$$0106$lcssa = $$2;$$0116$lcssa = $$2118;
     break;
    } else {
     $$0105133 = $$1;$$0106132 = $$2;$$0116131 = $$2118;$$0119130 = $58;
    }
   }
  }
  $36 = (_count_num_vacant_freecells_314($$sroa$0$0$copyload,$2)|0);
  $37 = $7 & 12;
  $38 = ($37<<24>>24)==(0);
  $39 = $36&255;
  do {
   if ($38) {
    if ($11) {
     $59 = $$0116$lcssa&255;
     $60 = (($39) + ($59))|0;
     $66 = $60;
     break;
    } else {
     $61 = (($39) + 1)|0;
     $62 = $$0116$lcssa&255;
     $63 = $61 << $62;
     $66 = $63;
     break;
    }
   } else {
    $64 = $11 ? $39 : 0;
    $66 = $64;
   }
  } while(0);
  $65 = (+($66|0));
  $67 = ((($1)) + 8|0);
  $68 = +HEAPF64[$67>>3];
  $69 = $68 * $65;
  $70 = ((($5)) + 24|0);
  $71 = +HEAPF64[$70>>3];
  $72 = $71 - $$0105$lcssa;
  $73 = ((($1)) + 16|0);
  $74 = +HEAPF64[$73>>3];
  $75 = $72 * $74;
  $76 = $69 + $75;
  $77 = ((($1)) + 24|0);
  $78 = +HEAPF64[$77>>3];
  $79 = $$0106$lcssa * $78;
  $80 = $76 + $79;
  $81 = $$1113 + $80;
  $$2114 = $81;
 }
 $82 = ((($1)) + 40|0);
 $83 = +HEAPF64[$82>>3];
 $84 = $83 != 0.0;
 if (!($84)) {
  $$3 = $$2114;
  $105 = (~~(($$3)));
  return ($105|0);
 }
 $85 = $$sroa$6$0$copyload&255;
 $86 = ($85*52)|0;
 $87 = $$sroa$4$0$copyload&255;
 $88 = ($$sroa$4$0$copyload<<24>>24)==(0);
 if ($88) {
  $$0109$lcssa = $86;
 } else {
  $$0108125 = 0;$$0109124 = $86;
  while(1) {
   $92 = (($2) + ($$0108125<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = ($94&255)>(1);
   if ($96) {
    $$0123 = 1;$$1110122 = $$0109124;
    while(1) {
     $98 = (($93) + ($$0123)|0);
     $99 = HEAP8[$98>>0]|0;
     $100 = (($$0123) + 1)|0;
     $101 = (($93) + ($100)|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = (_fcs_is_parent_card__helper_326($99,$102,$9)|0);
     $not$ = $103 ^ 1;
     $104 = $not$ << 31 >> 31;
     $spec$select121 = (($$1110122) + ($104))|0;
     $exitcond = ($100|0)==($95|0);
     if ($exitcond) {
      $$1110$lcssa = $spec$select121;
      break;
     } else {
      $$0123 = $100;$$1110122 = $spec$select121;
     }
    }
   } else {
    $$1110$lcssa = $$0109124;
   }
   $97 = (($$0108125) + 1)|0;
   $exitcond145 = ($97|0)==($87|0);
   if ($exitcond145) {
    $$0109$lcssa = $$1110$lcssa;
    break;
   } else {
    $$0108125 = $97;$$0109124 = $$1110$lcssa;
   }
  }
 }
 $89 = (+($$0109$lcssa|0));
 $90 = $83 * $89;
 $91 = $$2114 + $90;
 $$3 = $91;
 $105 = (~~(($$3)));
 return ($105|0);
}
function _fc_solve_pq_push_321($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$024 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($5>>>0)>($6>>>0);
 $8 = ((($0)) + 8|0);
 if ($7) {
  $9 = $6 << 3;
  $10 = (($9) + 2056)|0;
  $11 = (($6) + 256)|0;
  $12 = HEAP32[$8>>2]|0;
  HEAP32[$0>>2] = $11;
  $13 = (_realloc($12,$10)|0);
  HEAP32[$8>>2] = $13;
 }
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($4|0)==(0);
 L4: do {
  if ($16) {
   $$0$lcssa = 1;
  } else {
   $$024 = $5;
   while(1) {
    $17 = (1)?($$024 >>> 1):($$024);
    $18 = (($15) + ($17<<3)|0);
    ;HEAP32[$$byval_copy>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$18+4>>2]|0;
    $19 = (_fcs_pq_rating_324($$byval_copy)|0);
    $20 = ($19|0)<($2|0);
    if (!($20)) {
     $$0$lcssa = $$024;
     break L4;
    }
    $21 = (($15) + ($$024<<3)|0);
    $22 = (1)?($$024 >>> 1):($$024);
    $23 = (($15) + ($22<<3)|0);
    $24 = $23;
    $25 = $24;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($24) + 4)|0;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = $21;
    $31 = $30;
    HEAP32[$31>>2] = $26;
    $32 = (($30) + 4)|0;
    $33 = $32;
    HEAP32[$33>>2] = $29;
    $34 = ($22|0)==(1);
    if ($34) {
     $$0$lcssa = 1;
     break;
    } else {
     $$024 = $22;
    }
   }
  }
 } while(0);
 $35 = (($15) + ($$0$lcssa<<3)|0);
 HEAP32[$35>>2] = $1;
 $36 = (((($15) + ($$0$lcssa<<3)|0)) + 4|0);
 HEAP32[$36>>2] = $2;
 STACKTOP = sp;return;
}
function _set_scan_visited_322($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 7;
 $3 = 1 << $2;
 $4 = (3)?($1 >> 3):($1);
 $5 = (((($0)) + 75|0) + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $3 | $7;
 $9 = $8&255;
 HEAP8[$5>>0] = $9;
 return;
}
function _mark_as_dead_end__proto_323($0) {
 $0 = $0|0;
 var $$012 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 | 4;
 HEAP8[$1>>0] = $3;
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 $7 = ((($5)) + 72|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (($8) + -1)<<16>>16;
 HEAP16[$7>>1] = $9;
 $10 = ($9<<16>>16)==(0);
 if (!($10)) {
  return;
 }
 $$012 = $5;
 while(1) {
  $11 = ((($$012)) + 74|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 & 8;
  $15 = ($14|0)==(0);
  if ($15) {
   label = 7;
   break;
  }
  $16 = $13 | 4;
  $17 = $16&255;
  HEAP8[$11>>0] = $17;
  $18 = ((($$012)) + 56|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   label = 7;
   break;
  }
  $21 = ((($19)) + 72|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = (($22) + -1)<<16>>16;
  HEAP16[$21>>1] = $23;
  $24 = ($23<<16>>16)==(0);
  if ($24) {
   $$012 = $19;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return;
 }
}
function _fc_solve_pq_pop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$037$lcssa = 0, $$03738 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy2 = sp + 8|0;
 $2 = sp;
 $3 = (_fc_solve_is_pqueue_empty($0)|0);
 if ($3) {
  HEAP32[$1>>2] = 0;
  STACKTOP = sp;return;
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$1>>2] = $9;
 $10 = (($5) + ($7<<3)|0);
 $11 = $10;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = (($7) + -1)|0;
 $22 = ($21>>>0)<(2);
 L5: do {
  if ($22) {
   $$037$lcssa = 1;
  } else {
   $$03738 = 1;$23 = 2;
   while(1) {
    $24 = ($23|0)==($21|0);
    $25 = $23 | 1;
    if ($24) {
     $$0 = $23;
    } else {
     $26 = (($5) + ($23<<3)|0);
     $27 = (($5) + ($25<<3)|0);
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$27>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$27+4>>2]|0;
     $28 = (_fcs_pq_rating_324($$byval_copy2)|0);
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$26+4>>2]|0;
     $29 = (_fcs_pq_rating_324($$byval_copy2)|0);
     $30 = ($28|0)>($29|0);
     $spec$select = $30 ? $25 : $23;
     $$0 = $spec$select;
    }
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$2+4>>2]|0;
    $31 = (_fcs_pq_rating_324($$byval_copy2)|0);
    $32 = (($5) + ($$0<<3)|0);
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$32>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$32+4>>2]|0;
    $33 = (_fcs_pq_rating_324($$byval_copy2)|0);
    $34 = ($31|0)<($33|0);
    if (!($34)) {
     $$037$lcssa = $$03738;
     break L5;
    }
    $35 = (($5) + ($$03738<<3)|0);
    $36 = $32;
    $37 = $36;
    $38 = HEAP32[$37>>2]|0;
    $39 = (($36) + 4)|0;
    $40 = $39;
    $41 = HEAP32[$40>>2]|0;
    $42 = $35;
    $43 = $42;
    HEAP32[$43>>2] = $38;
    $44 = (($42) + 4)|0;
    $45 = $44;
    HEAP32[$45>>2] = $41;
    $46 = $$0 << 1;
    $47 = ($46>>>0)>($21>>>0);
    if ($47) {
     $$037$lcssa = $$0;
     break;
    } else {
     $$03738 = $$0;$23 = $46;
    }
   }
  }
 } while(0);
 $48 = (($5) + ($$037$lcssa<<3)|0);
 $49 = $48;
 $50 = $49;
 HEAP32[$50>>2] = $13;
 $51 = (($49) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $16;
 HEAP32[$6>>2] = $21;
 STACKTOP = sp;return;
}
function _fc_solve_is_pqueue_empty($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 return ($3|0);
}
function _fcs_pq_rating_324($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _update_col_cards_under_sequences_325($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01112 = 0, $$013 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $$0$lcssa = $2;
  return ($$0$lcssa|0);
 }
 $4 = (($2) + 1)|0;
 $5 = (($1) + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $$01112 = $6;$$013 = $2;
 while(1) {
  $7 = (($1) + ($$013)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = (_fcs_is_parent_card__helper_326($$01112,$8,$0)|0);
  if (!($9)) {
   $$0$lcssa = $$013;
   label = 5;
   break;
  }
  $10 = (($$013) + -1)|0;
  $11 = ($$013|0)>(1);
  if ($11) {
   $$01112 = $8;$$013 = $10;
  } else {
   $$0$lcssa = $10;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _fcs_is_parent_card__helper_326($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0&255;
 $4 = (2)?($3 >>> 2):($3);
 $5 = (($4) + 1)|0;
 $6 = $1&255;
 $7 = (2)?($6 >>> 2):($6);
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $18 = 0;
  return ($18|0);
 }
 switch ($2|0) {
 case 2:  {
  $16 = 1;
  break;
 }
 case 1:  {
  $9 = $1 ^ $0;
  $10 = $9 & 3;
  $11 = ($10<<24>>24)==(0);
  $12 = $11&1;
  $16 = $12;
  break;
 }
 default: {
  $13 = $1 ^ $0;
  $14 = $13 & 1;
  $15 = $14&255;
  $16 = $15;
 }
 }
 $17 = ($16|0)!=(0);
 $18 = $17;
 return ($18|0);
}
function _fc_solve__assign_dest_stack_and_col_ptr_327($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3&255;
 $5 = (2)?($4 >>> 2):($4);
 $6 = $5 << 4;
 $7 = (($6) + -16)|0;
 $8 = $4 << 1;
 $9 = $8 & 6;
 $10 = $7 | $9;
 $11 = (($0) + ($10)|0);
 $$0 = $11;
 while(1) {
  $12 = HEAP8[$$0>>0]|0;
  $13 = ($12<<24>>24)==(-1);
  $14 = ((($$0)) + 8|0);
  if ($13) {
   break;
  } else {
   $$0 = $14;
  }
 }
 $15 = ((($$0)) + 1|0);
 HEAP8[$$0>>0] = $1;
 HEAP8[$15>>0] = $2;
 return;
}
function _fcs__should_state_be_pruned__state_328($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 16;
 $4 = ($3<<24>>24)==(0);
 return ($4|0);
}
function _fc_solve_sfs_check_state_begin($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 128|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 $8 = ((($0)) + 1340|0);
 $9 = $7&1;
 HEAP8[$8>>0] = $9;
 if ($7) {
  $10 = ((($6)) + 56|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$5>>2] = $11;
  $$0 = $6;
 } else {
  $12 = ((($0)) + 20|0);
  $13 = (_fcs_state_ia_alloc_into_var($12)|0);
  $$0 = $13;
 }
 _FCS_STATE_collectible_to_kv_331($1,$$0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$2>>2]|0;
 dest=$14; src=$15; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $16 = ((($1)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($2)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 ;HEAP32[$17>>2]=HEAP32[$19>>2]|0;HEAP32[$17+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$17+12>>2]=HEAP32[$19+12>>2]|0;HEAP32[$17+16>>2]=HEAP32[$19+16>>2]|0;HEAP32[$17+20>>2]=HEAP32[$19+20>>2]|0;HEAP32[$17+24>>2]=HEAP32[$19+24>>2]|0;
 $20 = HEAP32[$16>>2]|0;
 $21 = ((($20)) + 24|0);
 HEAP32[$21>>2] = 0;
 $22 = HEAP32[$2>>2]|0;
 $23 = ((($$0)) + 56|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($$0)) + 60|0);
 HEAP32[$24>>2] = $3;
 $25 = ((($$0)) + 64|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1)|0;
 HEAP32[$25>>2] = $27;
 $28 = ((($$0)) + 74|0);
 HEAP8[$28>>0] = 0;
 $29 = ((($$0)) + 72|0);
 HEAP16[$29>>1] = 0;
 $30 = ((($$0)) + 75|0);
 HEAP8[$30>>0]=0&255;HEAP8[$30+1>>0]=(0>>8)&255;HEAP8[$30+2>>0]=(0>>16)&255;HEAP8[$30+3>>0]=0>>24;
 $31 = ((($3)) + 4|0);
 HEAP32[$31>>2] = 0;
 return 0;
}
function _fcs_state_ia_alloc_into_var($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_fcs_compact_alloc_ptr_307($0,84)|0);
 return ($1|0);
}
function _FCS_STATE_collectible_to_kv_331($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 _FCS_STATE_keyval_pair_to_kv_318($2,$1);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 STACKTOP = sp;return;
}
function _fc_solve_sfs_check_state_end($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_fcs_get_calc_real_depth_310($6)|0);
 $8 = ((($6)) + 134|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 $11 = (_fc_solve_check_and_add_state($5,$2,$4)|0);
 if ($11) {
  $60 = HEAP32[$2>>2]|0;
  $$0 = $60;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ((($5)) + 1340|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $20 = ((($5)) + 20|0);
  _fcs_compact_alloc_release_334($20);
 } else {
  $15 = ((($6)) + 128|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($2)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$18>>2] = $16;
  $19 = HEAP32[$2>>2]|0;
  HEAP32[$15>>2] = $19;
 }
 $21 = (_FCS_STATE_kv_to_collectible_319($4)|0);
 _calculate_real_depth_316($7,$21);
 $22 = ((($6)) + 133|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 if (!($24)) {
  $25 = (_FCS_STATE_kv_to_collectible_319($4)|0);
  $26 = (_calc_depth_313($25)|0);
  $27 = (_FCS_STATE_kv_to_collectible_319($1)|0);
  $28 = (_calc_depth_313($27)|0);
  $29 = (($28) + 1)|0;
  $30 = ($26|0)>($29|0);
  if ($30) {
   $31 = (_fc_solve_move_stack_compact_allocate_335($5,$3)|0);
   $32 = ((($4)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($33)) + 4|0);
   HEAP32[$34>>2] = $31;
   $35 = ((($33)) + 18|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36 & 4;
   $38 = ($37<<24>>24)==(0);
   if ($38) {
    $39 = HEAP32[$33>>2]|0;
    $40 = ((($39)) + 72|0);
    $41 = HEAP16[$40>>1]|0;
    $42 = (($41) + -1)<<16>>16;
    HEAP16[$40>>1] = $42;
    $43 = ($42<<16>>16)!=(0);
    $brmerge = $10 | $43;
    if (!($brmerge)) {
     $44 = HEAP32[$33>>2]|0;
     _mark_as_dead_end__proto_323($44);
    }
    $45 = ((($1)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 16|0);
    $48 = HEAP16[$47>>1]|0;
    $49 = (($48) + 1)<<16>>16;
    HEAP16[$47>>1] = $49;
   }
   $50 = HEAP32[$1>>2]|0;
   $51 = HEAP32[$32>>2]|0;
   HEAP32[$51>>2] = $50;
   $52 = ((($1)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ((($53)) + 8|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + 1)|0;
   $57 = HEAP32[$32>>2]|0;
   $58 = ((($57)) + 8|0);
   HEAP32[$58>>2] = $56;
  }
 }
 $59 = (_FCS_STATE_kv_to_collectible_319($4)|0);
 $$0 = $59;
 STACKTOP = sp;return ($$0|0);
}
function _fcs_compact_alloc_release_334($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = $2;
 return;
}
function _fc_solve_move_stack_compact_allocate_335($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 2;
 $6 = (($5) + 8)|0;
 $7 = (_fcs_compact_alloc_ptr_307($2,$6)|0);
 $8 = ((($7)) + 8|0);
 HEAP32[$7>>2] = $8;
 $9 = HEAP32[$3>>2]|0;
 $10 = ((($7)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 $13 = $12 << 2;
 _memcpy(($8|0),($11|0),($13|0))|0;
 return ($7|0);
}
function _fc_solve_sfs_simple_simon_move_sequence_to_founds($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$086 = 0, $$byval_copy1 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $7 = $$sroa$3$0$copyload&255;
 $8 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ((($3)) + 4|0);
 $$086 = 0;
 while(1) {
  $10 = HEAP32[$1>>2]|0;
  $11 = (($10) + ($$086<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($13&255)<(13);
  if (!($15)) {
   $21 = (($12) + ($14)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = (($14) + -1)|0;
   $24 = (($12) + ($23)|0);
   $19 = HEAP8[$24>>0]|0;
   $25 = (_fcs_is_ss_true_parent($19,$22)|0);
   if ($25) {
    $16 = (($14) + -2)|0;
    $17 = (($12) + ($16)|0);
    $18 = HEAP8[$17>>0]|0;
    $20 = (_fcs_is_ss_true_parent($18,$19)|0);
    if ($20) {
     $101 = (($14) + -3)|0;
     $102 = (($12) + ($101)|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = (_fcs_is_ss_true_parent($103,$18)|0);
     if ($104) {
      $105 = (($14) + -4)|0;
      $106 = (($12) + ($105)|0);
      $107 = HEAP8[$106>>0]|0;
      $108 = (_fcs_is_ss_true_parent($107,$103)|0);
      if ($108) {
       $109 = (($14) + -5)|0;
       $110 = (($12) + ($109)|0);
       $111 = HEAP8[$110>>0]|0;
       $112 = (_fcs_is_ss_true_parent($111,$107)|0);
       if ($112) {
        $113 = (($14) + -6)|0;
        $114 = (($12) + ($113)|0);
        $115 = HEAP8[$114>>0]|0;
        $116 = (_fcs_is_ss_true_parent($115,$111)|0);
        if ($116) {
         $117 = (($14) + -7)|0;
         $118 = (($12) + ($117)|0);
         $119 = HEAP8[$118>>0]|0;
         $120 = (_fcs_is_ss_true_parent($119,$115)|0);
         if ($120) {
          $121 = (($14) + -8)|0;
          $122 = (($12) + ($121)|0);
          $123 = HEAP8[$122>>0]|0;
          $124 = (_fcs_is_ss_true_parent($123,$119)|0);
          if ($124) {
           $125 = (($14) + -9)|0;
           $126 = (($12) + ($125)|0);
           $127 = HEAP8[$126>>0]|0;
           $128 = (_fcs_is_ss_true_parent($127,$123)|0);
           if ($128) {
            $129 = (($14) + -10)|0;
            $130 = (($12) + ($129)|0);
            $131 = HEAP8[$130>>0]|0;
            $132 = (_fcs_is_ss_true_parent($131,$127)|0);
            if ($132) {
             $133 = (($14) + -11)|0;
             $134 = (($12) + ($133)|0);
             $135 = HEAP8[$134>>0]|0;
             $136 = (_fcs_is_ss_true_parent($135,$131)|0);
             if ($136) {
              $137 = (($14) + -12)|0;
              $138 = (($12) + ($137)|0);
              $95 = HEAP8[$138>>0]|0;
              $139 = (_fcs_is_ss_true_parent($95,$135)|0);
              if ($139) {
               ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
               (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
               $140 = HEAP32[$9>>2]|0;
               $29 = ((($140)) + 24|0);
               $28 = HEAP32[$29>>2]|0;
               $27 = 1 << $$086;
               $141 = $28 & $27;
               $142 = ($141|0)==(0);
               if ($142) {
                $26 = $28 | $27;
                HEAP32[$29>>2] = $26;
                $30 = HEAP32[$3>>2]|0;
                $31 = (($30) + ($$086<<2)|0);
                $32 = HEAP32[$31>>2]|0;
                $33 = $$086 << 7;
                $34 = (((($4)) + 48|0) + ($33)|0);
                $35 = HEAP8[$32>>0]|0;
                $36 = $35&255;
                $37 = (($36) + 1)|0;
                _memcpy(($34|0),($32|0),($37|0))|0;
                HEAP32[$31>>2] = $34;
               }
               $38 = HEAP32[$3>>2]|0;
               $39 = (($38) + ($$086<<2)|0);
               $40 = HEAP32[$39>>2]|0;
               $41 = HEAP8[$40>>0]|0;
               $42 = (($41) + -1)<<24>>24;
               $43 = $42&255;
               $44 = (($43) + 1)|0;
               $45 = (($40) + ($44)|0);
               HEAP8[$45>>0] = 0;
               $46 = (($41) + -2)<<24>>24;
               $47 = $46&255;
               $48 = (($47) + 1)|0;
               $49 = (($40) + ($48)|0);
               HEAP8[$49>>0] = 0;
               $50 = (($41) + -3)<<24>>24;
               $51 = $50&255;
               $52 = (($51) + 1)|0;
               $53 = (($40) + ($52)|0);
               HEAP8[$53>>0] = 0;
               $54 = (($41) + -4)<<24>>24;
               $55 = $54&255;
               $56 = (($55) + 1)|0;
               $57 = (($40) + ($56)|0);
               HEAP8[$57>>0] = 0;
               $58 = (($41) + -5)<<24>>24;
               $59 = $58&255;
               $60 = (($59) + 1)|0;
               $61 = (($40) + ($60)|0);
               HEAP8[$61>>0] = 0;
               $62 = (($41) + -6)<<24>>24;
               $63 = $62&255;
               $64 = (($63) + 1)|0;
               $65 = (($40) + ($64)|0);
               HEAP8[$65>>0] = 0;
               $66 = (($41) + -7)<<24>>24;
               $67 = $66&255;
               $68 = (($67) + 1)|0;
               $69 = (($40) + ($68)|0);
               HEAP8[$69>>0] = 0;
               $70 = (($41) + -8)<<24>>24;
               $71 = $70&255;
               $72 = (($71) + 1)|0;
               $73 = (($40) + ($72)|0);
               HEAP8[$73>>0] = 0;
               $74 = (($41) + -9)<<24>>24;
               $75 = $74&255;
               $76 = (($75) + 1)|0;
               $77 = (($40) + ($76)|0);
               HEAP8[$77>>0] = 0;
               $78 = (($41) + -10)<<24>>24;
               $79 = $78&255;
               $80 = (($79) + 1)|0;
               $81 = (($40) + ($80)|0);
               HEAP8[$81>>0] = 0;
               $82 = (($41) + -11)<<24>>24;
               $83 = $82&255;
               $84 = (($83) + 1)|0;
               $85 = (($40) + ($84)|0);
               HEAP8[$85>>0] = 0;
               $86 = (($41) + -12)<<24>>24;
               $87 = $86&255;
               $88 = (($87) + 1)|0;
               $89 = (($40) + ($88)|0);
               HEAP8[$89>>0] = 0;
               $90 = (($41) + -13)<<24>>24;
               HEAP8[$40>>0] = $90;
               $91 = $90&255;
               $92 = (($91) + 1)|0;
               $93 = (($40) + ($92)|0);
               HEAP8[$93>>0] = 0;
               $94 = $95 & 3;
               $96 = $94&255;
               $97 = HEAP32[$3>>2]|0;
               $98 = (((($97)) + 48|0) + ($96)|0);
               HEAP8[$98>>0] = 13;
               _fcs_move_stack_non_seq_push_336($5,$$086,$96);
               ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
               $99 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
               _fc_solve_derived_states_list_add_state($2,$99,0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
  $100 = (($$086) + 1)|0;
  $exitcond = ($100|0)==($7|0);
  if ($exitcond) {
   break;
  } else {
   $$086 = $100;
  }
 }
 STACKTOP = sp;return;
}
function _fcs_is_ss_true_parent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_fcs_is_ss_false_parent($0,$1)|0);
 if (!($2)) {
  $4 = 0;
  return ($4|0);
 }
 $3 = (_fcs_is_ss_suit_true($0,$1)|0);
 $4 = $3;
 return ($4|0);
}
function _fcs_move_stack_non_seq_push_336($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _fcs_move_stack_params_push_337($0,11,$1,$2,1);
 return;
}
function _fcs_move_stack_params_push_337($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $5 = sp;
 $6 = $1&255;
 HEAP8[$5>>0] = $6;
 $7 = $2&255;
 $8 = ((($5)) + 1|0);
 HEAP8[$8>>0] = $7;
 $9 = $3&255;
 $10 = ((($5)) + 2|0);
 HEAP8[$10>>0] = $9;
 $11 = $4&255;
 $12 = ((($5)) + 3|0);
 HEAP8[$12>>0] = $11;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$5>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$5+3>>0]|0;
 _fcs_move_stack_push_338($0,$$byval_copy);
 STACKTOP = sp;return;
}
function _fcs_move_stack_push_338($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 HEAP32[$2>>2] = $4;
 $5 = $4 & 15;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $3 << 2;
  $8 = (($7) + 68)|0;
  $9 = HEAP32[$0>>2]|0;
  $10 = (_realloc($9,$8)|0);
  HEAP32[$0>>2] = $10;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($3<<2)|0);
 $13 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
 HEAP8[$12>>0]=$13&255;HEAP8[$12+1>>0]=($13>>8)&255;HEAP8[$12+2>>0]=($13>>16)&255;HEAP8[$12+3>>0]=$13>>24;
 return;
}
function _fcs_is_ss_false_parent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0&255;
 $3 = (2)?($2 >>> 2):($2);
 $4 = $1&255;
 $5 = (2)?($4 >>> 2):($4);
 $6 = (($5) + 1)|0;
 $7 = ($3|0)==($6|0);
 return ($7|0);
}
function _fcs_is_ss_suit_true($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 ^ $0;
 $3 = $2 & 3;
 $4 = ($3<<24>>24)==(0);
 return ($4|0);
}
function _fc_solve_sfs_simple_simon_move_sequence_to_true_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0110117 = 0, $$0111116 = 0, $$0113114 = 0, $$0121 = 0, $$1112 = 0, $$byval_copy1 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $7 = (_fc_solve_calc_positions_by_rank_location_339($0)|0);
 $8 = $$sroa$3$0$copyload&255;
 $9 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ((($0)) + 523|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ((($3)) + 4|0);
 $13 = $11&255;
 $$0121 = 0;
 while(1) {
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + ($$0121<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($17<<24>>24)==(0);
  L6: do {
   if (!($19)) {
    $20 = (($18) + -2)|0;
    $21 = (($16) + ($18)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = 1 << $$0121;
    $24 = $$0121 << 7;
    $25 = (((($4)) + 48|0) + ($24)|0);
    $26 = (($18) + -1)|0;
    $$0110117 = $22;$$0111116 = 1;$$0113114 = $20;
    while(1) {
     $27 = (_fcs_card_is_king_340($$0110117)|0);
     if (!($27)) {
      $28 = $$0110117&255;
      $29 = $28 & 3;
      $30 = ($29*14)|0;
      $31 = (2)?($28 >>> 2):($28);
      $32 = (($31) + 1)|0;
      $33 = (($32) + ($30))|0;
      $$sroa$0$0$$sroa_idx = (($7) + ($33<<1)|0);
      $$sroa$0$0$copyload = HEAP8[$$sroa$0$0$$sroa_idx>>0]|0;
      $34 = $$sroa$0$0$copyload << 24 >> 24;
      $35 = ($$0121|0)==($34|0);
      if (!($35)) {
       $$sroa$4$0$$sroa_idx = (((($7) + ($33<<1)|0)) + 1|0);
       $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
       $36 = $$sroa$4$0$copyload << 24 >> 24;
       $37 = HEAP32[$1>>2]|0;
       $38 = (($37) + ($34<<2)|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = HEAP8[$39>>0]|0;
       $41 = $40&255;
       $42 = (($41) + -1)|0;
       $43 = ($42|0)==($36|0);
       if ($43) {
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
        $44 = HEAP32[$12>>2]|0;
        $45 = ((($44)) + 24|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = $46 & $23;
        $48 = ($47|0)==(0);
        if ($48) {
         $49 = $46 | $23;
         HEAP32[$45>>2] = $49;
         $50 = HEAP32[$3>>2]|0;
         $51 = (($50) + ($$0121<<2)|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = HEAP8[$52>>0]|0;
         $54 = $53&255;
         $55 = (($54) + 1)|0;
         _memcpy(($25|0),($52|0),($55|0))|0;
         HEAP32[$51>>2] = $25;
        }
        $56 = HEAP32[$12>>2]|0;
        $57 = ((($56)) + 24|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = 1 << $34;
        $60 = $58 & $59;
        $61 = ($60|0)==(0);
        if ($61) {
         $62 = $58 | $59;
         HEAP32[$57>>2] = $62;
         $63 = HEAP32[$3>>2]|0;
         $64 = (($63) + ($34<<2)|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = $34 << 7;
         $67 = (((($4)) + 48|0) + ($66)|0);
         $68 = HEAP8[$65>>0]|0;
         $69 = $68&255;
         $70 = (($69) + 1)|0;
         _memcpy(($67|0),($65|0),($70|0))|0;
         HEAP32[$64>>2] = $67;
        }
        $71 = HEAP32[$3>>2]|0;
        $72 = (($26) - ($$0113114))|0;
        _fc_solve_move_sequence_function_341($71,$5,$34,$$0121,$72);
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        $73 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
        _fc_solve_derived_states_list_add_state($2,$73,0);
       }
      }
     }
     $74 = ($$0113114|0)==(-1);
     if ($74) {
      break L6;
     }
     $75 = (($$0113114) + 1)|0;
     $76 = (($16) + ($75)|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = (_fcs_is_ss_false_parent($77,$$0110117)|0);
     if (!($78)) {
      break L6;
     }
     $79 = (_fcs_is_ss_suit_true($77,$$0110117)|0);
     if ($79) {
      $$1112 = $$0111116;
     } else {
      $80 = (($$0111116) + 1)|0;
      $81 = (_calc_max_simple_simon_seq_move($13)|0);
      $82 = ($81>>>0)<($80>>>0);
      if ($82) {
       break L6;
      } else {
       $$1112 = $80;
      }
     }
     $83 = (($$0113114) + -1)|0;
     $84 = ($$0113114|0)>(-1);
     if ($84) {
      $$0110117 = $77;$$0111116 = $$1112;$$0113114 = $83;
     } else {
      break;
     }
    }
   }
  } while(0);
  $85 = (($$0121) + 1)|0;
  $exitcond = ($85|0)==($8|0);
  if ($exitcond) {
   break;
  } else {
   $$0121 = $85;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_calc_positions_by_rank_location_339($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (((($5) + (($7*244)|0)|0)) + 32|0);
  $$0 = $8;
  return ($$0|0);
 } else {
  $9 = ((($0)) + 56|0);
  $$0 = $9;
  return ($$0|0);
 }
 return (0)|0;
}
function _fcs_card_is_king_340($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 $2 = (4128 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)!=(0);
 return ($4|0);
}
function _fc_solve_move_sequence_function_341($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (($0) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + ($3<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 _fcs_col_transfer_cards_342($6,$8,$4);
 _fcs_move_stack_params_push_337($1,0,$3,$2,$4);
 return;
}
function _calc_max_simple_simon_seq_move($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)<(0);
 $2 = 1 << $0;
 $3 = $1 ? 0 : $2;
 return ($3|0);
}
function _fcs_col_transfer_cards_342($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $5 = (($4) - ($2))|0;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = $5 & 255;
 $8 = (($7) + 1)|0;
 $9 = (($1) + ($8)|0);
 $10 = HEAP8[$0>>0]|0;
 $11 = $10&255;
 $12 = (($11) + 1)|0;
 $13 = (($0) + ($12)|0);
 _memcpy(($13|0),($9|0),($2|0))|0;
 $14 = (($11) + ($2))|0;
 $15 = $14&255;
 HEAP8[$0>>0] = $15;
 _memset(($9|0),0,($2|0))|0;
 return;
}
function _fc_solve_sfs_simple_simon_move_whole_stack_sequence_to_false_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$09193 = 0, $$095 = 0, $$byval_copy1 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 8|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 40|0);
 $6 = HEAP32[$4>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($6)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $7 = ((($0)) + 523|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (_calc_max_simple_simon_seq_move($9)|0);
 $11 = $$sroa$3$0$copyload&255;
 $12 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = ((($3)) + 4|0);
 $$095 = 0;
 while(1) {
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + ($$095<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = ($17<<24>>24)==(0);
  if (!($19)) {
   $20 = (_get_seq_h($16,$$byval_copy1)|0);
   $21 = ($20|0)>(0);
   $22 = HEAP32[$$byval_copy1>>2]|0;
   $23 = ($10>>>0)<($22>>>0);
   $or$cond = $21 | $23;
   if (!($or$cond)) {
    $24 = ((($16)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = 1 << $$095;
    $27 = $$095 << 7;
    $28 = (((($4)) + 48|0) + ($27)|0);
    $$09193 = 0;
    while(1) {
     $29 = ($$09193|0)==($$095|0);
     if (!($29)) {
      $30 = HEAP32[$1>>2]|0;
      $31 = (($30) + ($$09193<<2)|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $35 = $33&255;
       $36 = (($32) + ($35)|0);
       $37 = HEAP8[$36>>0]|0;
       $38 = (_fcs_is_ss_false_parent($37,$25)|0);
       if ($38) {
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($4,$3,$$byval_copy1,$5)|0);
        $39 = HEAP32[$13>>2]|0;
        $40 = ((($39)) + 24|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = $41 & $26;
        $43 = ($42|0)==(0);
        if ($43) {
         $44 = $41 | $26;
         HEAP32[$40>>2] = $44;
         $45 = HEAP32[$3>>2]|0;
         $46 = (($45) + ($$095<<2)|0);
         $47 = HEAP32[$46>>2]|0;
         $48 = HEAP8[$47>>0]|0;
         $49 = $48&255;
         $50 = (($49) + 1)|0;
         _memcpy(($28|0),($47|0),($50|0))|0;
         HEAP32[$46>>2] = $28;
        }
        $51 = HEAP32[$13>>2]|0;
        $52 = ((($51)) + 24|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = 1 << $$09193;
        $55 = $53 & $54;
        $56 = ($55|0)==(0);
        if ($56) {
         $57 = $53 | $54;
         HEAP32[$52>>2] = $57;
         $58 = HEAP32[$3>>2]|0;
         $59 = (($58) + ($$09193<<2)|0);
         $60 = HEAP32[$59>>2]|0;
         $61 = $$09193 << 7;
         $62 = (((($4)) + 48|0) + ($61)|0);
         $63 = HEAP8[$60>>0]|0;
         $64 = $63&255;
         $65 = (($64) + 1)|0;
         _memcpy(($62|0),($60|0),($65|0))|0;
         HEAP32[$59>>2] = $62;
        }
        $66 = HEAP32[$3>>2]|0;
        _fc_solve_move_sequence_function_341($66,$5,$$09193,$$095,$18);
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        $67 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$5)|0);
        _fc_solve_derived_states_list_add_state($2,$67,0);
       }
      }
     }
     $68 = (($$09193) + 1)|0;
     $exitcond = ($68|0)==($11|0);
     if ($exitcond) {
      break;
     } else {
      $$09193 = $68;
     }
    }
   }
  }
  $69 = (($$095) + 1)|0;
  $exitcond99 = ($69|0)==($11|0);
  if ($exitcond99) {
   break;
  } else {
   $$095 = $69;
  }
 }
 STACKTOP = sp;return;
}
function _get_seq_h($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02230 = 0, $$023$lcssa = 0, $$02329 = 0, $$024$lcssa = 0, $$02428 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2&255;
 $4 = (($3) + -2)|0;
 $5 = ($2&255)>(1);
 L1: do {
  if ($5) {
   $6 = (($0) + ($3)|0);
   $7 = HEAP8[$6>>0]|0;
   $$02230 = $7;$$02329 = $4;$$02428 = 1;
   while(1) {
    $8 = (($$02329) + 1)|0;
    $9 = (($0) + ($8)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = (_fcs_is_ss_false_parent($10,$$02230)|0);
    if (!($11)) {
     $$023$lcssa = $$02329;$$024$lcssa = $$02428;
     break L1;
    }
    $12 = (_fcs_is_ss_suit_true($10,$$02230)|0);
    $not$ = $12 ^ 1;
    $13 = $not$&1;
    $spec$select = (($$02428) + ($13))|0;
    $14 = (($$02329) + -1)|0;
    $15 = ($$02329|0)>(0);
    if ($15) {
     $$02230 = $10;$$02329 = $14;$$02428 = $spec$select;
    } else {
     $$023$lcssa = $14;$$024$lcssa = $spec$select;
     break;
    }
   }
  } else {
   $$023$lcssa = $4;$$024$lcssa = 1;
  }
 } while(0);
 HEAP32[$1>>2] = $$024$lcssa;
 $16 = (($$023$lcssa) + 1)|0;
 return ($16|0);
}
function _fc_solve_sfs_simple_simon_move_sequence_to_true_parent_with_some_cards_above($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0120151 = 0, $$0122148 = 0, $$0154 = 0, $$1126$off0138 = 0, $$1128$off0136 = 0, $$byval_copy2 = 0, $$ph = 0, $$pn = 0, $$pn$in = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $$byval_copy2 = sp + 216|0;
 $3 = sp + 208|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($5)) + 48|0);
 $$sroa$3$0$$sroa_idx = ((($7)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $9 = (_fc_solve_calc_positions_by_rank_location_339($0)|0);
 $10 = $$sroa$3$0$copyload&255;
 $11 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = ((($0)) + 523|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ((($4)) + 124|0);
 $16 = ((($3)) + 4|0);
 $$0154 = 0;
 while(1) {
  $17 = HEAP32[$1>>2]|0;
  $18 = (($17) + ($$0154<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($20<<24>>24)==(0);
  L6: do {
   if (!($22)) {
    $23 = (($21) + -2)|0;
    $24 = 1 << $$0154;
    $25 = $$0154 << 7;
    $26 = (((($5)) + 48|0) + ($25)|0);
    $27 = (($21) + -1)|0;
    $$0120151 = 1;$$0122148 = $23;
    while(1) {
     $28 = (($$0122148) + 2)|0;
     $29 = (($19) + ($28)|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($$0122148|0)==(-1);
     if ($31) {
      $$1126$off0138 = 0;$$1128$off0136 = 1;
      label = 9;
     } else {
      $32 = (($$0122148) + 1)|0;
      $33 = (($19) + ($32)|0);
      $34 = HEAP8[$33>>0]|0;
      $35 = (_fcs_is_ss_false_parent($34,$30)|0);
      if ($35) {
       $36 = (_fcs_is_ss_suit_true($34,$30)|0);
       if ($36) {
        $$pn$in = 0;
       } else {
        $$1126$off0138 = 1;$$1128$off0136 = 0;
        label = 9;
       }
      } else {
       $$1126$off0138 = 0;$$1128$off0136 = 1;
       label = 9;
      }
     }
     do {
      if ((label|0) == 9) {
       label = 0;
       $37 = (_fcs_card_is_king_340($30)|0);
       if (!($37)) {
        $38 = $30&255;
        $39 = $38 & 3;
        $40 = ($39*14)|0;
        $41 = (2)?($38 >>> 2):($38);
        $42 = (($41) + 1)|0;
        $43 = (($42) + ($40))|0;
        $$sroa$0$0$$sroa_idx = (($9) + ($43<<1)|0);
        $$sroa$0$0$copyload = HEAP8[$$sroa$0$0$$sroa_idx>>0]|0;
        $44 = $$sroa$0$0$copyload << 24 >> 24;
        $45 = ($$0154|0)==($44|0);
        if (!($45)) {
         $$sroa$4$0$$sroa_idx = (((($9) + ($43<<1)|0)) + 1|0);
         $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
         $46 = $$sroa$4$0$copyload << 24 >> 24;
         $47 = HEAP32[$1>>2]|0;
         $48 = (($47) + ($44<<2)|0);
         $49 = HEAP32[$48>>2]|0;
         $50 = HEAP8[$49>>0]|0;
         $51 = $50&255;
         _populate_seq_points($49,$46,$4);
         ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
         $52 = (_false_seq_index_loop($10,$$byval_copy2,$14,$49,$4,$$0154,$44,0)|0);
         if ($52) {
          $53 = HEAP32[$15>>2]|0;
          $54 = (_calc_max_simple_simon_seq_move($53)|0);
          $55 = ($54>>>0)<($$0120151>>>0);
          if (!($55)) {
           ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
           (_fc_solve_sfs_check_state_begin($5,$3,$$byval_copy2,$6)|0);
           $56 = HEAP32[$16>>2]|0;
           $57 = ((($56)) + 24|0);
           $58 = HEAP32[$57>>2]|0;
           $59 = $58 & $24;
           $60 = ($59|0)==(0);
           if ($60) {
            $61 = $58 | $24;
            HEAP32[$57>>2] = $61;
            $62 = HEAP32[$3>>2]|0;
            $63 = (($62) + ($$0154<<2)|0);
            $64 = HEAP32[$63>>2]|0;
            $65 = HEAP8[$64>>0]|0;
            $66 = $65&255;
            $67 = (($66) + 1)|0;
            _memcpy(($26|0),($64|0),($67|0))|0;
            HEAP32[$63>>2] = $26;
           }
           $68 = HEAP32[$16>>2]|0;
           $69 = ((($68)) + 24|0);
           $70 = HEAP32[$69>>2]|0;
           $71 = 1 << $44;
           $72 = $70 & $71;
           $73 = ($72|0)==(0);
           if ($73) {
            $74 = $70 | $71;
            HEAP32[$69>>2] = $74;
            $75 = HEAP32[$3>>2]|0;
            $76 = (($75) + ($44<<2)|0);
            $77 = HEAP32[$76>>2]|0;
            $78 = $44 << 7;
            $79 = (((($5)) + 48|0) + ($78)|0);
            $80 = HEAP8[$77>>0]|0;
            $81 = $80&255;
            $82 = (($81) + 1)|0;
            _memcpy(($79|0),($77|0),($82|0))|0;
            HEAP32[$76>>2] = $79;
           }
           _move_sequences_analysis_seqs_loop($3,$6,$4,$44,$51,$8);
           $83 = HEAP32[$3>>2]|0;
           $84 = (($27) - ($$0122148))|0;
           _fc_solve_move_sequence_function_341($83,$6,$44,$$0154,$84);
           ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
           $85 = (_fc_solve_sfs_check_state_end($0,$$byval_copy2,$3,$6)|0);
           _fc_solve_derived_states_list_add_state($2,$85,0);
          }
         }
         if ($$1128$off0136) {
          break L6;
         } else {
          $$pn$in = $$1126$off0138;
          break;
         }
        }
       }
       if ($$1128$off0136) {
        break L6;
       } else {
        $$pn$in = $$1126$off0138;
       }
      }
     } while(0);
     $$pn = $$pn$in&1;
     $$ph = (($$0120151) + ($$pn))|0;
     $86 = (($$0122148) + -1)|0;
     $87 = ($$0122148|0)>(-1);
     if ($87) {
      $$0120151 = $$ph;$$0122148 = $86;
     } else {
      break;
     }
    }
   }
  } while(0);
  $88 = (($$0154) + 1)|0;
  $exitcond = ($88|0)==($10|0);
  if ($exitcond) {
   break;
  } else {
   $$0154 = $88;
  }
 }
 STACKTOP = sp;return;
}
function _populate_seq_points($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $3 = HEAP8[$0>>0]|0;
 $4 = $3&255;
 _generic_populate_seq_points($0,$1,$2,$4);
 return;
}
function _false_seq_index_loop($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 $8 = (_generic_false_seq_index_loop($0,$$byval_copy,$2,$3,$4,$5,$6,$7,0,0,0)|0);
 STACKTOP = sp;return ($8|0);
}
function _move_sequences_analysis_seqs_loop($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$033 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 }
 $8 = ((($0)) + 4|0);
 $$033 = 0;
 while(1) {
  $9 = (((($2)) + 84|0) + ($$033<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$8>>2]|0;
  $12 = ((($11)) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = 1 << $10;
  $15 = $13 & $14;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $13 | $14;
   HEAP32[$12>>2] = $17;
   $18 = HEAP32[$0>>2]|0;
   $19 = (($18) + ($10<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $10 << 7;
   $22 = (($5) + ($21)|0);
   $23 = HEAP8[$20>>0]|0;
   $24 = $23&255;
   $25 = (($24) + 1)|0;
   _memcpy(($22|0),($20|0),($25|0))|0;
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + ($10<<2)|0);
   HEAP32[$27>>2] = $22;
  }
  $28 = HEAP32[$0>>2]|0;
  $29 = ($$033|0)==(0);
  if ($29) {
   $36 = $4;
  } else {
   $30 = (($$033) + -1)|0;
   $31 = (((($2)) + 4|0) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $36 = $32;
  }
  $33 = (((($2)) + 4|0) + ($$033<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($36) - ($34))|0;
  _fc_solve_move_sequence_function_341($28,$1,$10,$3,$35);
  $37 = (($$033) + 1)|0;
  $38 = HEAP32[$2>>2]|0;
  $39 = ($37>>>0)<($38>>>0);
  if ($39) {
   $$033 = $37;
  } else {
   break;
  }
 }
 return;
}
function _generic_false_seq_index_loop($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$065$lcssa = 0, $$06585 = 0, $$067$lcssa = 0, $$06781 = 0, $$06880 = 0, $$166 = 0, $$169 = 0, $$270 = 0, $$275 = 0, $$not = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $or$cond = 0, $switch = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $11 = sp;
 $12 = HEAP32[$4>>2]|0;
 _init_stacks_map($11,$5,$6);
 $13 = $8&1;
 $14 = (($12) + ($13))|0;
 $15 = ($14|0)==(0);
 L1: do {
  if ($15) {
   $$065$lcssa = $2;$$067$lcssa = 0;
  } else {
   $16 = ($0|0)>(0);
   $17 = HEAP32[$1>>2]|0;
   $$not = $7 ^ 1;
   $18 = ($2|0)>(0);
   $or$cond = $18 & $$not;
   $$06585 = $2;$$06781 = 0;
   while(1) {
    $19 = ($$06781|0)==($12|0);
    if ($19) {
     $37 = $9;$41 = $10;
    } else {
     $20 = (((($4)) + 4|0) + ($$06781<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($21) + 1)|0;
     $23 = (($3) + ($22)|0);
     $24 = HEAP8[$23>>0]|0;
     $25 = (((($4)) + 128|0) + ($$06781<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $37 = $24;$41 = $26;
    }
    L8: do {
     if ($16) {
      $$06880 = 0;
      L10: while(1) {
       $27 = (($17) + ($$06880<<2)|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = ($29<<24>>24)==(0);
       do {
        if ($31) {
         $$0 = 7;
        } else {
         $32 = (($11) + ($$06880)|0);
         $33 = HEAP8[$32>>0]|0;
         $34 = ($33<<24>>24)==(0);
         if ($34) {
          $35 = (($28) + ($30)|0);
          $36 = HEAP8[$35>>0]|0;
          $38 = (_fcs_is_ss_false_parent($36,$37)|0);
          if ($38) {
           $39 = (_calc_max_simple_simon_seq_move($$06585)|0);
           $40 = ($39>>>0)<($41>>>0);
           if (!($40)) {
            $$0 = 8;
            break;
           }
          }
          $$0 = 0;
         } else {
          $$0 = 7;
         }
        }
       } while(0);
       $trunc = $$0&255;
       $trunc$clear = $trunc & 15;
       switch ($trunc$clear<<24>>24) {
       case 8:  {
        $$166 = $$06585;$$270 = $$06880;
        label = 20;
        break L8;
        break;
       }
       case 7: case 0:  {
        break;
       }
       default: {
        break L10;
       }
       }
       $42 = (($$06880) + 1)|0;
       $43 = ($42|0)<($0|0);
       if ($43) {
        $$06880 = $42;
       } else {
        label = 14;
        break L8;
       }
      }
      $switch = ($$0|0)==(0);
      if ($switch) {
       $$275 = $$06585;
      } else {
       $$065$lcssa = $$06585;$$067$lcssa = $$06781;
       break L1;
      }
     } else {
      label = 14;
     }
    } while(0);
    L21: do {
     if ((label|0) == 14) {
      label = 0;
      if (!($or$cond)) {
       $$065$lcssa = $$06585;$$067$lcssa = $$06781;
       break L1;
      }
      $44 = (($$06585) + -1)|0;
      $45 = (_calc_max_simple_simon_seq_move($44)|0);
      $46 = ($45>>>0)<($41>>>0);
      if ($46) {
       $$065$lcssa = $$06585;$$067$lcssa = $$06781;
       break L1;
      }
      $$169 = 0;
      while(1) {
       $47 = (($17) + ($$169<<2)|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = HEAP8[$48>>0]|0;
       $50 = ($49<<24>>24)==(0);
       if ($50) {
        $51 = (($11) + ($$169)|0);
        $52 = HEAP8[$51>>0]|0;
        $53 = ($52<<24>>24)==(0);
        if ($53) {
         $$166 = $44;$$270 = $$169;
         label = 20;
         break L21;
        }
       }
       $54 = (($$169) + 1)|0;
       $$169 = $54;
      }
     }
    } while(0);
    if ((label|0) == 20) {
     label = 0;
     $55 = (($11) + ($$270)|0);
     HEAP8[$55>>0] = 1;
     $56 = (((($4)) + 84|0) + ($$06781<<2)|0);
     HEAP32[$56>>2] = $$270;
     $$275 = $$166;
    }
    $57 = (($$06781) + 1)|0;
    $58 = ($57>>>0)<($14>>>0);
    if ($58) {
     $$06585 = $$275;$$06781 = $57;
    } else {
     $$065$lcssa = $$275;$$067$lcssa = $57;
     break;
    }
   }
  }
 } while(0);
 $59 = ((($4)) + 124|0);
 HEAP32[$59>>2] = $$065$lcssa;
 $60 = ($$067$lcssa|0)==($14|0);
 STACKTOP = sp;return ($60|0);
}
function _init_stacks_map($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$0; stop=dest+10|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $3 = (($0) + ($2)|0);
 HEAP8[$3>>0] = 1;
 $4 = (($0) + ($1)|0);
 HEAP8[$4>>0] = 1;
 return;
}
function _generic_populate_seq_points($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$lcssa = 0, $$03235 = 0, $$03334 = 0, $$036 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = (((($2)) + 128|0) + ($4<<2)|0);
 HEAP32[$5>>2] = 1;
 $6 = (($3) + -2)|0;
 $7 = ($6|0)>($1|0);
 if ($7) {
  $8 = (($0) + ($3)|0);
  $9 = HEAP8[$8>>0]|0;
  $$03235 = $6;$$03334 = $9;$$036 = $4;
  while(1) {
   $11 = (($$03235) + 1)|0;
   $12 = (($0) + ($11)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = (_fcs_is_ss_false_parent($13,$$03334)|0);
   $15 = (($$036) + 1)|0;
   if ($14) {
    $$1 = $$036;
   } else {
    $16 = (((($2)) + 128|0) + ($15<<2)|0);
    $17 = (((($2)) + 4|0) + ($$036<<2)|0);
    HEAP32[$17>>2] = $11;
    HEAP32[$16>>2] = 1;
    $$1 = $15;
   }
   $18 = (_fcs_is_ss_suit_true($13,$$03334)|0);
   $19 = $18 ^ 1;
   $20 = $19&1;
   $21 = (((($2)) + 128|0) + ($$1<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + ($20))|0;
   HEAP32[$21>>2] = $23;
   $24 = (($$03235) + -1)|0;
   $25 = ($24|0)>($1|0);
   if ($25) {
    $$03235 = $24;$$03334 = $13;$$036 = $$1;
   } else {
    $$0$lcssa = $$1;
    break;
   }
  }
 } else {
  $$0$lcssa = $4;
 }
 $10 = ($6|0)<($1|0);
 if ($10) {
  $$2 = $$0$lcssa;
  HEAP32[$2>>2] = $$2;
  return;
 }
 $26 = (((($2)) + 4|0) + ($$0$lcssa<<2)|0);
 $27 = (($$0$lcssa) + 1)|0;
 $28 = (($1) + 1)|0;
 HEAP32[$26>>2] = $28;
 $$2 = $27;
 HEAP32[$2>>2] = $$2;
 return;
}
function _fc_solve_sfs_simple_simon_move_sequence_with_some_cards_above_to_true_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0126139 = 0, $$0126139$in = 0, $$0127136 = 0, $$0129135 = 0, $$0131134 = 0, $$0141 = 0, $$byval_copy2 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $exitcond = 0, $not$ = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $$byval_copy2 = sp + 216|0;
 $3 = sp + 208|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($5)) + 48|0);
 $$sroa$3$0$$sroa_idx = ((($7)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $9 = (_fc_solve_calc_positions_by_rank_location_339($0)|0);
 $10 = $$sroa$3$0$copyload&255;
 $11 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = ((($0)) + 523|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ((($4)) + 124|0);
 $16 = ((($3)) + 4|0);
 $$0141 = 0;
 while(1) {
  $17 = HEAP32[$1>>2]|0;
  $18 = (($17) + ($$0141<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = ($20<<24>>24)==(0);
  if (!($22)) {
   $23 = 1 << $$0141;
   $24 = $$0141 << 7;
   $25 = (((($5)) + 48|0) + ($24)|0);
   $$0126139$in = $21;
   while(1) {
    $$0126139 = (($$0126139$in) + -1)|0;
    $26 = (($19) + ($$0126139$in)|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = ($$0126139$in>>>0)<($21>>>0);
    L10: do {
     if ($28) {
      $$0127136 = $27;$$0129135 = 1;$$0131134 = $$0126139$in;
      while(1) {
       $29 = (($$0131134) + 1)|0;
       $30 = (($19) + ($29)|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = (_fcs_is_ss_false_parent($$0127136,$31)|0);
       if (!($32)) {
        break;
       }
       $85 = (_fcs_is_ss_suit_true($$0127136,$31)|0);
       $not$ = $85 ^ 1;
       $86 = $not$&1;
       $spec$select = (($$0129135) + ($86))|0;
       $87 = ($29>>>0)<($21>>>0);
       if ($87) {
        $$0127136 = $31;$$0129135 = $spec$select;$$0131134 = $29;
       } else {
        break L10;
       }
      }
      $33 = (_fcs_card_is_king_340($27)|0);
      if (!($33)) {
       $34 = $27&255;
       $35 = $34 & 3;
       $36 = ($35*14)|0;
       $37 = (2)?($34 >>> 2):($34);
       $38 = (($37) + 1)|0;
       $39 = (($38) + ($36))|0;
       $$sroa$0$0$$sroa_idx = (($9) + ($39<<1)|0);
       $$sroa$0$0$copyload = HEAP8[$$sroa$0$0$$sroa_idx>>0]|0;
       $40 = $$sroa$0$0$copyload << 24 >> 24;
       $41 = ($$0141|0)==($40|0);
       if (!($41)) {
        $$sroa$4$0$$sroa_idx = (((($9) + ($39<<1)|0)) + 1|0);
        $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
        $42 = $$sroa$4$0$copyload << 24 >> 24;
        $43 = HEAP32[$1>>2]|0;
        $44 = (($43) + ($40<<2)|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = HEAP8[$45>>0]|0;
        $47 = $46&255;
        $48 = (($47) + -1)|0;
        $49 = ($48|0)==($42|0);
        if ($49) {
         $50 = (($$0131134) + -1)|0;
         _populate_seq_points($19,$50,$4);
         ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
         $51 = (_false_seq_index_loop($10,$$byval_copy2,$14,$19,$4,$$0141,$40,0)|0);
         if ($51) {
          $52 = HEAP32[$15>>2]|0;
          $53 = (_calc_max_simple_simon_seq_move($52)|0);
          $54 = ($53>>>0)>($$0129135>>>0);
          if ($54) {
           ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
           (_fc_solve_sfs_check_state_begin($5,$3,$$byval_copy2,$6)|0);
           $55 = HEAP32[$16>>2]|0;
           $56 = ((($55)) + 24|0);
           $57 = HEAP32[$56>>2]|0;
           $58 = $57 & $23;
           $59 = ($58|0)==(0);
           if ($59) {
            $60 = $57 | $23;
            HEAP32[$56>>2] = $60;
            $61 = HEAP32[$3>>2]|0;
            $62 = (($61) + ($$0141<<2)|0);
            $63 = HEAP32[$62>>2]|0;
            $64 = HEAP8[$63>>0]|0;
            $65 = $64&255;
            $66 = (($65) + 1)|0;
            _memcpy(($25|0),($63|0),($66|0))|0;
            HEAP32[$62>>2] = $25;
           }
           $67 = HEAP32[$16>>2]|0;
           $68 = ((($67)) + 24|0);
           $69 = HEAP32[$68>>2]|0;
           $70 = 1 << $40;
           $71 = $69 & $70;
           $72 = ($71|0)==(0);
           if ($72) {
            $73 = $69 | $70;
            HEAP32[$68>>2] = $73;
            $74 = HEAP32[$3>>2]|0;
            $75 = (($74) + ($40<<2)|0);
            $76 = HEAP32[$75>>2]|0;
            $77 = $40 << 7;
            $78 = (((($5)) + 48|0) + ($77)|0);
            $79 = HEAP8[$76>>0]|0;
            $80 = $79&255;
            $81 = (($80) + 1)|0;
            _memcpy(($78|0),($76|0),($81|0))|0;
            HEAP32[$75>>2] = $78;
           }
           _move_sequences_analysis_seqs_loop($3,$6,$4,$$0141,$21,$8);
           $82 = HEAP32[$3>>2]|0;
           $83 = (($$0131134) - ($$0126139))|0;
           _fc_solve_move_sequence_function_341($82,$6,$40,$$0141,$83);
           ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
           $84 = (_fc_solve_sfs_check_state_end($0,$$byval_copy2,$3,$6)|0);
           _fc_solve_derived_states_list_add_state($2,$84,0);
          }
         }
        }
       }
      }
     }
    } while(0);
    $88 = ($$0126139$in|0)>(1);
    if ($88) {
     $$0126139$in = $$0126139;
    } else {
     break;
    }
   }
  }
  $89 = (($$0141) + 1)|0;
  $exitcond = ($89|0)==($10|0);
  if ($exitcond) {
   break;
  } else {
   $$0141 = $89;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_simple_simon_move_sequence_with_junk_seq_above_to_true_parent_with_some_cards_above($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0157$lcssa = 0, $$0157168 = 0, $$0158175 = 0, $$0159167 = 0, $$0162$lcssa = 0, $$0162166 = 0, $$0179 = 0, $$2161 = 0, $$byval_copy2 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $not$ = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy2 = sp + 224|0;
 $3 = sp + 216|0;
 $4 = sp + 208|0;
 $5 = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$6>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($8)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $9 = (_fc_solve_calc_positions_by_rank_location_339($0)|0);
 $10 = $$sroa$3$0$copyload&255;
 $11 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = ((($0)) + 523|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ((($5)) + 124|0);
 $16 = ((($3)) + 4|0);
 $17 = ((($$byval_copy2)) + 4|0);
 $$0179 = 0;
 while(1) {
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + ($$0179<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($21<<24>>24)==(0);
  if (!($23)) {
   $24 = (_get_seq_h($20,$4)|0);
   $25 = ($24|0)==(0);
   if (!($25)) {
    $26 = (($24) + 1)|0;
    $27 = (($20) + ($26)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = (($24) + -1)|0;
    $30 = ($24|0)>(0);
    L10: do {
     if ($30) {
      $$0157168 = $29;$$0159167 = $28;$$0162166 = 1;
      while(1) {
       $31 = (($$0157168) + 1)|0;
       $32 = (($20) + ($31)|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = (_fcs_is_ss_false_parent($33,$$0159167)|0);
       if (!($34)) {
        $$0157$lcssa = $$0157168;$$0162$lcssa = $$0162166;$$2161 = $33;
        break L10;
       }
       $35 = (_fcs_is_ss_suit_true($33,$$0159167)|0);
       $not$ = $35 ^ 1;
       $36 = $not$&1;
       $spec$select = (($$0162166) + ($36))|0;
       $37 = (($$0157168) + -1)|0;
       $38 = ($$0157168|0)>(0);
       if ($38) {
        $$0157168 = $37;$$0159167 = $33;$$0162166 = $spec$select;
       } else {
        $$0157$lcssa = $37;$$0162$lcssa = $spec$select;$$2161 = $33;
        break;
       }
      }
     } else {
      $$0157$lcssa = $29;$$0162$lcssa = 1;$$2161 = $28;
     }
    } while(0);
    $39 = (_fcs_card_is_king_340($$2161)|0);
    if (!($39)) {
     $40 = $$2161&255;
     $41 = $40 & 3;
     $42 = ($41*14)|0;
     $43 = (2)?($40 >>> 2):($40);
     $44 = (($43) + 1)|0;
     $45 = (($44) + ($42))|0;
     $$sroa$0$0$$sroa_idx = (($9) + ($45<<1)|0);
     $$sroa$0$0$copyload = HEAP8[$$sroa$0$0$$sroa_idx>>0]|0;
     $46 = $$sroa$0$0$copyload << 24 >> 24;
     $47 = ($$0179|0)==($46|0);
     if (!($47)) {
      $$sroa$4$0$$sroa_idx = (((($9) + ($45<<1)|0)) + 1|0);
      $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
      $48 = $$sroa$4$0$copyload << 24 >> 24;
      $49 = HEAP32[$1>>2]|0;
      $50 = (($49) + ($46<<2)|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = HEAP8[$51>>0]|0;
      $53 = $52&255;
      $54 = (($53) + -2)|0;
      $55 = ($54|0)<($48|0);
      if (!($55)) {
       _populate_seq_points($51,$48,$5);
       $56 = HEAP8[$27>>0]|0;
       $57 = HEAP32[$4>>2]|0;
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
       $58 = (_generic_false_seq_index_loop($10,$$byval_copy2,$14,$51,$5,$$0179,$46,0,1,$56,$57)|0);
       if ($58) {
        $59 = HEAP32[$15>>2]|0;
        $60 = (_calc_max_simple_simon_seq_move($59)|0);
        $61 = ($60>>>0)<($$0162$lcssa>>>0);
        if (!($61)) {
         ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
         (_fc_solve_sfs_check_state_begin($6,$3,$$byval_copy2,$7)|0);
         $62 = HEAP32[$16>>2]|0;
         $63 = ((($62)) + 24|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = 1 << $$0179;
         $66 = $64 & $65;
         $67 = ($66|0)==(0);
         if ($67) {
          $68 = $64 | $65;
          HEAP32[$63>>2] = $68;
          $69 = HEAP32[$3>>2]|0;
          $70 = (($69) + ($$0179<<2)|0);
          $71 = HEAP32[$70>>2]|0;
          $72 = $$0179 << 7;
          $73 = (((($6)) + 48|0) + ($72)|0);
          $74 = HEAP8[$71>>0]|0;
          $75 = $74&255;
          $76 = (($75) + 1)|0;
          _memcpy(($73|0),($71|0),($76|0))|0;
          HEAP32[$70>>2] = $73;
         }
         $77 = HEAP32[$16>>2]|0;
         $78 = ((($77)) + 24|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = 1 << $46;
         $81 = $79 & $80;
         $82 = ($81|0)==(0);
         if ($82) {
          $83 = $79 | $80;
          HEAP32[$78>>2] = $83;
          $84 = HEAP32[$3>>2]|0;
          $85 = (($84) + ($46<<2)|0);
          $86 = HEAP32[$85>>2]|0;
          $87 = $46 << 7;
          $88 = (((($6)) + 48|0) + ($87)|0);
          $89 = HEAP8[$86>>0]|0;
          $90 = $89&255;
          $91 = (($90) + 1)|0;
          _memcpy(($88|0),($86|0),($91|0))|0;
          HEAP32[$85>>2] = $88;
         }
         $92 = HEAP32[$5>>2]|0;
         $93 = ($92|0)==(-1);
         if (!($93)) {
          $$0158175 = 0;
          while(1) {
           _calc_start_end_src_stack($$byval_copy2,$$0158175,$5,$24,$22,$$0179,$46,$53);
           $97 = (((($5)) + 84|0) + ($$0158175<<2)|0);
           $98 = HEAP32[$97>>2]|0;
           $99 = HEAP32[$16>>2]|0;
           $100 = ((($99)) + 24|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = HEAP32[$17>>2]|0;
           $103 = 1 << $102;
           $104 = $103 & $101;
           $105 = ($104|0)==(0);
           if ($105) {
            $106 = $103 | $101;
            HEAP32[$100>>2] = $106;
            $107 = HEAP32[$3>>2]|0;
            $108 = (($107) + ($102<<2)|0);
            $109 = HEAP32[$108>>2]|0;
            $110 = $102 << 7;
            $111 = (((($6)) + 48|0) + ($110)|0);
            $112 = HEAP8[$109>>0]|0;
            $113 = $112&255;
            $114 = (($113) + 1)|0;
            _memcpy(($111|0),($109|0),($114|0))|0;
            HEAP32[$108>>2] = $111;
           }
           $115 = HEAP32[$16>>2]|0;
           $116 = ((($115)) + 24|0);
           $117 = HEAP32[$116>>2]|0;
           $118 = 1 << $98;
           $119 = $117 & $118;
           $120 = ($119|0)==(0);
           if ($120) {
            $121 = $117 | $118;
            HEAP32[$116>>2] = $121;
            $122 = HEAP32[$3>>2]|0;
            $123 = (($122) + ($98<<2)|0);
            $124 = HEAP32[$123>>2]|0;
            $125 = $98 << 7;
            $126 = (((($6)) + 48|0) + ($125)|0);
            $127 = HEAP8[$124>>0]|0;
            $128 = $127&255;
            $129 = (($128) + 1)|0;
            _memcpy(($126|0),($124|0),($129|0))|0;
            HEAP32[$123>>2] = $126;
           }
           $130 = HEAP32[$3>>2]|0;
           $131 = HEAP32[$$byval_copy2>>2]|0;
           _fc_solve_move_sequence_function_341($130,$7,$98,$102,$131);
           $132 = (($$0158175) + 1)|0;
           $133 = HEAP32[$5>>2]|0;
           $134 = (($133) + 1)|0;
           $135 = ($132>>>0)<($134>>>0);
           if ($135) {
            $$0158175 = $132;
           } else {
            break;
           }
          }
         }
         $94 = HEAP32[$3>>2]|0;
         $95 = (($24) - ($$0157$lcssa))|0;
         _fc_solve_move_sequence_function_341($94,$7,$46,$$0179,$95);
         ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
         $96 = (_fc_solve_sfs_check_state_end($0,$$byval_copy2,$3,$7)|0);
         _fc_solve_derived_states_list_add_state($2,$96,0);
        }
       }
      }
     }
    }
   }
  }
  $136 = (($$0179) + 1)|0;
  $exitcond = ($136|0)==($10|0);
  if ($exitcond) {
   break;
  } else {
   $$0179 = $136;
  }
 }
 STACKTOP = sp;return;
}
function _calc_start_end_src_stack($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sink = 0, $$sink12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)==($1|0);
 if ($9) {
  $10 = (($4) - ($3))|0;
  $$sink = $5;$$sink12 = $10;
 } else {
  $11 = ($1|0)==(0);
  if ($11) {
   $18 = $7;
  } else {
   $12 = (($1) + -1)|0;
   $13 = (((($2)) + 4|0) + ($12<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $18 = $14;
  }
  $15 = (((($2)) + 4|0) + ($1<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($18) - ($16))|0;
  $$sink = $6;$$sink12 = $17;
 }
 HEAP32[$0>>2] = $$sink12;
 $19 = ((($0)) + 4|0);
 HEAP32[$19>>2] = $$sink;
 return;
}
function _fc_solve_sfs_simple_simon_move_whole_stack_sequence_to_false_parent_with_some_cards_above($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0128134 = 0, $$0135 = 0, $$1126 = 0, $$1126$1 = 0, $$1126$2 = 0, $$1126$3142 = 0, $$byval_copy2 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$$sroa_idx$1 = 0, $$sroa$0$0$$sroa_idx$2 = 0, $$sroa$0$0$$sroa_idx$3 = 0, $$sroa$0$0$$sroa_idx38$1 = 0, $$sroa$0$0$$sroa_idx38$2 = 0, $$sroa$0$0$$sroa_idx38$3 = 0, $$sroa$0$0$copyload = 0, $$sroa$0$0$copyload$1 = 0, $$sroa$0$0$copyload$2 = 0, $$sroa$0$0$copyload$3 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0;
 var $$sroa$6$0$$sroa_idx = 0, $$sroa$6$0$$sroa_idx$1 = 0, $$sroa$6$0$$sroa_idx$2 = 0, $$sroa$6$0$$sroa_idx$3 = 0, $$sroa$6$0$$sroa_idx40 = 0, $$sroa$6$0$$sroa_idx40$1 = 0, $$sroa$6$0$$sroa_idx40$2 = 0, $$sroa$6$0$$sroa_idx40$3 = 0, $$sroa$6$0$copyload = 0, $$sroa$6$0$copyload$1 = 0, $$sroa$6$0$copyload$2 = 0, $$sroa$6$0$copyload$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $exitcond = 0, $exitcond141 = 0, $or$cond = 0, $or$cond131 = 0, $or$cond131$1 = 0, $or$cond131$2 = 0, $or$cond131$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy2 = sp + 216|0;
 $3 = sp + 208|0;
 $4 = sp + 224|0;
 $5 = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 40|0);
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($6)) + 48|0);
 $$sroa$3$0$$sroa_idx = ((($8)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $10 = ((($0)) + 523|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (_fc_solve_calc_positions_by_rank_location_339($0)|0);
 $13 = $11&255;
 $14 = (_calc_max_simple_simon_seq_move($13)|0);
 $15 = $$sroa$3$0$copyload&255;
 $16 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = ((($3)) + 4|0);
 $$sroa$6$0$$sroa_idx40 = ((($4)) + 1|0);
 $$0135 = 0;
 while(1) {
  $18 = HEAP32[$1>>2]|0;
  $19 = (($18) + ($$0135<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($21<<24>>24)==(0);
  if (!($23)) {
   $24 = (_get_seq_h($20,$$byval_copy2)|0);
   $25 = ($24|0)!=(0);
   $26 = HEAP32[$$byval_copy2>>2]|0;
   $27 = ($14>>>0)<($26>>>0);
   $or$cond = $25 | $27;
   if (!($or$cond)) {
    $28 = ((($20)) + 1|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = (_fcs_card_is_king_340($29)|0);
    if (!($30)) {
     $34 = $29&255;
     $35 = (2)?($34 >>> 2):($34);
     $36 = (($35) + 1)|0;
     $$sroa$0$0$$sroa_idx = (($12) + ($36<<1)|0);
     $$sroa$0$0$copyload = HEAP8[$$sroa$0$0$$sroa_idx>>0]|0;
     $37 = ($$sroa$0$0$copyload<<24>>24)<(0);
     $38 = $$sroa$0$0$copyload << 24 >> 24;
     $39 = ($$0135|0)==($38|0);
     $or$cond131 = $37 | $39;
     if ($or$cond131) {
      $$1126 = 0;
     } else {
      $$sroa$6$0$$sroa_idx = (((($12) + ($36<<1)|0)) + 1|0);
      $$sroa$6$0$copyload = HEAP8[$$sroa$6$0$$sroa_idx>>0]|0;
      HEAP8[$4>>0] = $$sroa$0$0$copyload;
      HEAP8[$$sroa$6$0$$sroa_idx40>>0] = $$sroa$6$0$copyload;
      $$1126 = 1;
     }
     $40 = (($35) + 15)|0;
     $$sroa$0$0$$sroa_idx$1 = (($12) + ($40<<1)|0);
     $$sroa$0$0$copyload$1 = HEAP8[$$sroa$0$0$$sroa_idx$1>>0]|0;
     $41 = ($$sroa$0$0$copyload$1<<24>>24)<(0);
     $42 = $$sroa$0$0$copyload$1 << 24 >> 24;
     $43 = ($$0135|0)==($42|0);
     $or$cond131$1 = $41 | $43;
     if ($or$cond131$1) {
      $$1126$1 = $$1126;
     } else {
      $$sroa$6$0$$sroa_idx40$1 = (((($4) + ($$1126<<1)|0)) + 1|0);
      $$sroa$0$0$$sroa_idx38$1 = (($4) + ($$1126<<1)|0);
      $87 = (($$1126) + 1)|0;
      $$sroa$6$0$$sroa_idx$1 = (((($12) + ($40<<1)|0)) + 1|0);
      $$sroa$6$0$copyload$1 = HEAP8[$$sroa$6$0$$sroa_idx$1>>0]|0;
      HEAP8[$$sroa$0$0$$sroa_idx38$1>>0] = $$sroa$0$0$copyload$1;
      HEAP8[$$sroa$6$0$$sroa_idx40$1>>0] = $$sroa$6$0$copyload$1;
      $$1126$1 = $87;
     }
     $88 = (($35) + 29)|0;
     $$sroa$0$0$$sroa_idx$2 = (($12) + ($88<<1)|0);
     $$sroa$0$0$copyload$2 = HEAP8[$$sroa$0$0$$sroa_idx$2>>0]|0;
     $89 = ($$sroa$0$0$copyload$2<<24>>24)<(0);
     $90 = $$sroa$0$0$copyload$2 << 24 >> 24;
     $91 = ($$0135|0)==($90|0);
     $or$cond131$2 = $89 | $91;
     if ($or$cond131$2) {
      $$1126$2 = $$1126$1;
     } else {
      $$sroa$6$0$$sroa_idx40$2 = (((($4) + ($$1126$1<<1)|0)) + 1|0);
      $$sroa$0$0$$sroa_idx38$2 = (($4) + ($$1126$1<<1)|0);
      $92 = (($$1126$1) + 1)|0;
      $$sroa$6$0$$sroa_idx$2 = (((($12) + ($88<<1)|0)) + 1|0);
      $$sroa$6$0$copyload$2 = HEAP8[$$sroa$6$0$$sroa_idx$2>>0]|0;
      HEAP8[$$sroa$0$0$$sroa_idx38$2>>0] = $$sroa$0$0$copyload$2;
      HEAP8[$$sroa$6$0$$sroa_idx40$2>>0] = $$sroa$6$0$copyload$2;
      $$1126$2 = $92;
     }
     $93 = (($35) + 43)|0;
     $$sroa$0$0$$sroa_idx$3 = (($12) + ($93<<1)|0);
     $$sroa$0$0$copyload$3 = HEAP8[$$sroa$0$0$$sroa_idx$3>>0]|0;
     $94 = ($$sroa$0$0$copyload$3<<24>>24)<(0);
     $95 = $$sroa$0$0$copyload$3 << 24 >> 24;
     $96 = ($$0135|0)==($95|0);
     $or$cond131$3 = $94 | $96;
     if ($or$cond131$3) {
      _sort_ds_dcs($4,$$1126$2);
      $98 = ($$1126$2|0)==(0);
      if (!($98)) {
       $$1126$3142 = $$1126$2;
       label = 7;
      }
     } else {
      $$sroa$6$0$$sroa_idx40$3 = (((($4) + ($$1126$2<<1)|0)) + 1|0);
      $$sroa$0$0$$sroa_idx38$3 = (($4) + ($$1126$2<<1)|0);
      $97 = (($$1126$2) + 1)|0;
      $$sroa$6$0$$sroa_idx$3 = (((($12) + ($93<<1)|0)) + 1|0);
      $$sroa$6$0$copyload$3 = HEAP8[$$sroa$6$0$$sroa_idx$3>>0]|0;
      HEAP8[$$sroa$0$0$$sroa_idx38$3>>0] = $$sroa$0$0$copyload$3;
      HEAP8[$$sroa$6$0$$sroa_idx40$3>>0] = $$sroa$6$0$copyload$3;
      _sort_ds_dcs($4,$97);
      $$1126$3142 = $97;
      label = 7;
     }
     if ((label|0) == 7) {
      label = 0;
      $31 = 1 << $$0135;
      $32 = $$0135 << 7;
      $33 = (((($6)) + 48|0) + ($32)|0);
      $$0128134 = 0;
      while(1) {
       $44 = (($4) + ($$0128134<<1)|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45 << 24 >> 24;
       $47 = (((($4) + ($$0128134<<1)|0)) + 1|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = $48 << 24 >> 24;
       $50 = HEAP32[$1>>2]|0;
       $51 = (($50) + ($46<<2)|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = HEAP8[$52>>0]|0;
       $54 = $53&255;
       _populate_seq_points($52,$49,$5);
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
       $55 = (_false_seq_index_loop($15,$$byval_copy2,$13,$52,$5,$$0135,$46,1)|0);
       if ($55) {
        ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($6,$3,$$byval_copy2,$7)|0);
        $56 = HEAP32[$17>>2]|0;
        $57 = ((($56)) + 24|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = $58 & $31;
        $60 = ($59|0)==(0);
        if ($60) {
         $61 = $58 | $31;
         HEAP32[$57>>2] = $61;
         $62 = HEAP32[$3>>2]|0;
         $63 = (($62) + ($$0135<<2)|0);
         $64 = HEAP32[$63>>2]|0;
         $65 = HEAP8[$64>>0]|0;
         $66 = $65&255;
         $67 = (($66) + 1)|0;
         _memcpy(($33|0),($64|0),($67|0))|0;
         HEAP32[$63>>2] = $33;
        }
        $68 = HEAP32[$17>>2]|0;
        $69 = ((($68)) + 24|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = 1 << $46;
        $72 = $70 & $71;
        $73 = ($72|0)==(0);
        if ($73) {
         $74 = $70 | $71;
         HEAP32[$69>>2] = $74;
         $75 = HEAP32[$3>>2]|0;
         $76 = (($75) + ($46<<2)|0);
         $77 = HEAP32[$76>>2]|0;
         $78 = $46 << 7;
         $79 = (((($6)) + 48|0) + ($78)|0);
         $80 = HEAP8[$77>>0]|0;
         $81 = $80&255;
         $82 = (($81) + 1)|0;
         _memcpy(($79|0),($77|0),($82|0))|0;
         HEAP32[$76>>2] = $79;
        }
        _move_sequences_analysis_seqs_loop($3,$7,$5,$46,$54,$9);
        $83 = HEAP32[$3>>2]|0;
        _fc_solve_move_sequence_function_341($83,$7,$46,$$0135,$22);
        ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
        $84 = (_fc_solve_sfs_check_state_end($0,$$byval_copy2,$3,$7)|0);
        _fc_solve_derived_states_list_add_state($2,$84,0);
       }
       $85 = (($$0128134) + 1)|0;
       $exitcond = ($85|0)==($$1126$3142|0);
       if ($exitcond) {
        break;
       } else {
        $$0128134 = $85;
       }
      }
     }
    }
   }
  }
  $86 = (($$0135) + 1)|0;
  $exitcond141 = ($86|0)==($15|0);
  if ($exitcond141) {
   break;
  } else {
   $$0135 = $86;
  }
 }
 STACKTOP = sp;return;
}
function _sort_ds_dcs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$027 = 0, $$02732 = 0, $$02733 = 0, $$029 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1<<1)|0);
 $3 = ($1|0)>(1);
 if (!($3)) {
  return;
 }
 $$02732 = ((($0)) + 2|0);
 $$02733 = $$02732;
 while(1) {
  $4 = ($$02733>>>0)>($0>>>0);
  L6: do {
   if ($4) {
    $$029 = $$02733;
    while(1) {
     $5 = HEAP8[$$029>>0]|0;
     $6 = ((($$029)) + -2|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($5<<24>>24)<($7<<24>>24);
     if (!($8)) {
      $9 = ($5<<24>>24)==($7<<24>>24);
      if (!($9)) {
       break L6;
      }
      $10 = ((($$029)) + 1|0);
      $11 = HEAP8[$10>>0]|0;
      $12 = ((($$029)) + -1|0);
      $13 = HEAP8[$12>>0]|0;
      $14 = ($11<<24>>24)>($13<<24>>24);
      if (!($14)) {
       break L6;
      }
     }
     $16 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8);
     $17 = HEAPU8[$$029>>0]|(HEAPU8[$$029+1>>0]<<8);
     HEAP8[$6>>0]=$17&255;HEAP8[$6+1>>0]=$17>>8;
     HEAP8[$$029>>0]=$16&255;HEAP8[$$029+1>>0]=$16>>8;
     $18 = ($6>>>0)>($0>>>0);
     if ($18) {
      $$029 = $6;
     } else {
      break;
     }
    }
   }
  } while(0);
  $$027 = ((($$02733)) + 2|0);
  $15 = ($$027>>>0)<($2>>>0);
  if ($15) {
   $$02733 = $$027;
  } else {
   break;
  }
 }
 return;
}
function _fc_solve_sfs_simple_simon_move_sequence_to_parent_on_the_same_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0127140 = 0, $$0128138 = 0, $$0129$lcssa = 0, $$0129133 = 0, $$0130$lcssa = 0, $$0130132 = 0, $$0130132$phi = 0, $$0142 = 0, $$byval_copy2 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $exitcond = 0, $exitcond146 = 0, $exitcond147 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $$byval_copy2 = sp + 216|0;
 $3 = sp + 208|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($5)) + 48|0);
 $$sroa$3$0$$sroa_idx = ((($7)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $9 = $$sroa$3$0$copyload&255;
 $10 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ((($0)) + 523|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ((($4)) + 124|0);
 $15 = ((($3)) + 4|0);
 $$0142 = 0;
 while(1) {
  $16 = HEAP32[$1>>2]|0;
  $17 = (($16) + ($$0142<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($19&255)<(3);
  if (!($21)) {
   $22 = (($20) + -2)|0;
   $23 = 1 << $$0142;
   $24 = $$0142 << 7;
   $25 = (((($5)) + 48|0) + ($24)|0);
   $$0127140 = 0;
   while(1) {
    $26 = (($$0127140) + 1)|0;
    $27 = (($18) + ($26)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = (($$0127140) + 2)|0;
    $30 = (($18) + ($29)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = (_fcs_is_ss_true_parent($28,$31)|0);
    if (!($32)) {
     $$0128138 = $29;
     while(1) {
      $33 = (($$0128138) + 1)|0;
      $34 = (($18) + ($33)|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = (_fcs_is_ss_true_parent($28,$35)|0);
      if ($36) {
       $37 = (($$0128138) + 1)|0;
       $38 = ($37>>>0)<($20>>>0);
       L16: do {
        if ($38) {
         $$0129133 = 1;$$0130132 = $$0128138;$40 = $37;
         while(1) {
          $39 = (($18) + ($40)|0);
          $41 = HEAP8[$39>>0]|0;
          $42 = (($$0130132) + 2)|0;
          $43 = (($18) + ($42)|0);
          $44 = HEAP8[$43>>0]|0;
          $45 = (_fcs_is_ss_false_parent($41,$44)|0);
          if (!($45)) {
           $$0129$lcssa = $$0129133;$$0130$lcssa = $$0130132;
           break L16;
          }
          $46 = (_fcs_is_ss_true_parent($41,$44)|0);
          $47 = $46 ^ 1;
          $48 = $47&1;
          $49 = (($$0129133) + ($48))|0;
          $50 = (($40) + 1)|0;
          $51 = ($50>>>0)<($20>>>0);
          if ($51) {
           $$0130132$phi = $40;$$0129133 = $49;$40 = $50;$$0130132 = $$0130132$phi;
          } else {
           $$0129$lcssa = $49;$$0130$lcssa = $40;
           break;
          }
         }
        } else {
         $$0129$lcssa = 1;$$0130$lcssa = $$0128138;
        }
       } while(0);
       _populate_seq_points($18,$$0130$lcssa,$4);
       $52 = HEAP32[$4>>2]|0;
       $53 = (((($4)) + 128|0) + ($52<<2)|0);
       HEAP32[$53>>2] = $$0129$lcssa;
       $54 = (($52) + 1)|0;
       HEAP32[$4>>2] = $54;
       $55 = (((($4)) + 4|0) + ($52<<2)|0);
       HEAP32[$55>>2] = $$0128138;
       _generic_populate_seq_points($18,$$0127140,$4,$$0128138);
       ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
       $56 = (_false_seq_index_loop($9,$$byval_copy2,$13,$18,$4,$$0142,$$0142,0)|0);
       if ($56) {
        $57 = HEAP32[$14>>2]|0;
        $58 = (_calc_max_simple_simon_seq_move($57)|0);
        $59 = ($58>>>0)<($$0129$lcssa>>>0);
        if (!($59)) {
         ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
         (_fc_solve_sfs_check_state_begin($5,$3,$$byval_copy2,$6)|0);
         $60 = HEAP32[$15>>2]|0;
         $61 = ((($60)) + 24|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = $62 & $23;
         $64 = ($63|0)==(0);
         if ($64) {
          $65 = $62 | $23;
          HEAP32[$61>>2] = $65;
          $66 = HEAP32[$3>>2]|0;
          $67 = (($66) + ($$0142<<2)|0);
          $68 = HEAP32[$67>>2]|0;
          $69 = HEAP8[$68>>0]|0;
          $70 = $69&255;
          $71 = (($70) + 1)|0;
          _memcpy(($25|0),($68|0),($71|0))|0;
          HEAP32[$67>>2] = $25;
         }
         _move_sequences_analysis_seqs_loop($3,$6,$4,$$0142,$20,$8);
         $72 = (((($4)) + 84|0) + ($52<<2)|0);
         $73 = HEAP32[$72>>2]|0;
         $74 = HEAP32[$15>>2]|0;
         $75 = ((($74)) + 24|0);
         $76 = HEAP32[$75>>2]|0;
         $77 = 1 << $73;
         $78 = $76 & $77;
         $79 = ($78|0)==(0);
         if ($79) {
          $80 = $76 | $77;
          HEAP32[$75>>2] = $80;
          $81 = HEAP32[$3>>2]|0;
          $82 = (($81) + ($73<<2)|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = $73 << 7;
          $85 = (((($5)) + 48|0) + ($84)|0);
          $86 = HEAP8[$83>>0]|0;
          $87 = $86&255;
          $88 = (($87) + 1)|0;
          _memcpy(($85|0),($83|0),($88|0))|0;
          HEAP32[$82>>2] = $85;
         }
         $89 = HEAP32[$3>>2]|0;
         $90 = (1 - ($$0128138))|0;
         $91 = (($90) + ($$0130$lcssa))|0;
         _fc_solve_move_sequence_function_341($89,$6,$$0142,$73,$91);
         ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
         $92 = (_fc_solve_sfs_check_state_end($0,$$byval_copy2,$3,$6)|0);
         _fc_solve_derived_states_list_add_state($2,$92,0);
        }
       }
      }
      $exitcond = ($33|0)==($20|0);
      if ($exitcond) {
       break;
      } else {
       $$0128138 = $33;
      }
     }
    }
    $exitcond146 = ($26|0)==($22|0);
    if ($exitcond146) {
     break;
    } else {
     $$0127140 = $26;
    }
   }
  }
  $93 = (($$0142) + 1)|0;
  $exitcond147 = ($93|0)==($9|0);
  if ($exitcond147) {
   break;
  } else {
   $$0142 = $93;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_simple_simon_move_sequence_to_false_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$09394 = 0, $$096 = 0, $$byval_copy1 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond101 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy1 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 40|0);
 $7 = HEAP32[$5>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($7)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $8 = ((($0)) + 523|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (_calc_max_simple_simon_seq_move($10)|0);
 $12 = $$sroa$3$0$copyload&255;
 $13 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = ((($3)) + 4|0);
 $$096 = 0;
 while(1) {
  $15 = HEAP32[$1>>2]|0;
  $16 = (($15) + ($$096<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($18<<24>>24)==(0);
  if (!($20)) {
   $21 = (_get_seq_h($17,$4)|0);
   $22 = HEAP32[$4>>2]|0;
   $23 = ($11>>>0)<($22>>>0);
   if (!($23)) {
    $24 = (($21) + 1)|0;
    $25 = (($17) + ($24)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = 1 << $$096;
    $28 = $$096 << 7;
    $29 = (((($5)) + 48|0) + ($28)|0);
    $30 = (($19) - ($21))|0;
    $$09394 = 0;
    while(1) {
     $31 = ($$09394|0)==($$096|0);
     if (!($31)) {
      $32 = HEAP32[$1>>2]|0;
      $33 = (($32) + ($$09394<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if (!($36)) {
       $37 = $35&255;
       $38 = (($34) + ($37)|0);
       $39 = HEAP8[$38>>0]|0;
       $40 = (_fcs_is_ss_false_parent($39,$26)|0);
       if ($40) {
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($5,$3,$$byval_copy1,$6)|0);
        $41 = HEAP32[$14>>2]|0;
        $42 = ((($41)) + 24|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = $43 & $27;
        $45 = ($44|0)==(0);
        if ($45) {
         $46 = $43 | $27;
         HEAP32[$42>>2] = $46;
         $47 = HEAP32[$3>>2]|0;
         $48 = (($47) + ($$096<<2)|0);
         $49 = HEAP32[$48>>2]|0;
         $50 = HEAP8[$49>>0]|0;
         $51 = $50&255;
         $52 = (($51) + 1)|0;
         _memcpy(($29|0),($49|0),($52|0))|0;
         HEAP32[$48>>2] = $29;
        }
        $53 = HEAP32[$14>>2]|0;
        $54 = ((($53)) + 24|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = 1 << $$09394;
        $57 = $55 & $56;
        $58 = ($57|0)==(0);
        if ($58) {
         $59 = $55 | $56;
         HEAP32[$54>>2] = $59;
         $60 = HEAP32[$3>>2]|0;
         $61 = (($60) + ($$09394<<2)|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = $$09394 << 7;
         $64 = (((($5)) + 48|0) + ($63)|0);
         $65 = HEAP8[$62>>0]|0;
         $66 = $65&255;
         $67 = (($66) + 1)|0;
         _memcpy(($64|0),($62|0),($67|0))|0;
         HEAP32[$61>>2] = $64;
        }
        $68 = HEAP32[$3>>2]|0;
        _fc_solve_move_sequence_function_341($68,$6,$$09394,$$096,$30);
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        $69 = (_fc_solve_sfs_check_state_end($0,$$byval_copy1,$3,$6)|0);
        _fc_solve_derived_states_list_add_state($2,$69,0);
       }
      }
     }
     $70 = (($$09394) + 1)|0;
     $exitcond = ($70|0)==($12|0);
     if ($exitcond) {
      break;
     } else {
      $$09394 = $70;
     }
    }
   }
  }
  $71 = (($$096) + 1)|0;
  $exitcond101 = ($71|0)==($12|0);
  if ($exitcond101) {
   break;
  } else {
   $$096 = $71;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_args_man_free($0) {
 $0 = $0|0;
 var $$014 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)>(0);
 if ($4) {
  $$014 = 0;
  while(1) {
   $5 = (($3) + ($$014<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   _free($6);
   $7 = (($$014) + 1)|0;
   $exitcond = ($7|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $$014 = $7;
   }
  }
 }
 _free($3);
 HEAP32[$0>>2] = 0;
 HEAP32[$2>>2] = 0;
 return;
}
function _fc_solve_args_man_chop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$be = 0, $$042$off081$ph = 0, $$084 = 0, $$1$lcssa = 0, $$109799 = 0, $$178 = 0, $$2 = 0, $$383 = 0, $$383$ph = 0, $$383$ph$be = 0, $$5 = 0, $$5$be = 0, $$9 = 0, $$lcssa = 0, $$pr = 0, $$pr100 = 0, $$pr67 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 _fc_solve_args_man_alloc($2);
 $3 = ((($2)) + 8|0);
 $4 = ((($2)) + 12|0);
 $5 = ((($2)) + 16|0);
 $6 = (_malloc(1024)|0);
 HEAP32[$3>>2] = $6;
 HEAP32[$4>>2] = $6;
 $7 = ((($6)) + 1023|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$1>>0]|0;
 $9 = ($8<<24>>24)==(0);
 L1: do {
  if (!($9)) {
   $$084 = $1;$10 = $8;
   L3: while(1) {
    $11 = (_is_whitespace($10)|0);
    if ($11) {
     $$178 = $$084;
     while(1) {
      $12 = ((($$178)) + 1|0);
      $$pr = HEAP8[$12>>0]|0;
      $13 = (_is_whitespace($$pr)|0);
      if ($13) {
       $$178 = $12;
      } else {
       $$1$lcssa = $12;$$lcssa = $$pr;
       break;
      }
     }
    } else {
     $$1$lcssa = $$084;$$lcssa = $10;
    }
    L10: do {
     switch ($$lcssa<<24>>24) {
     case 0:  {
      break L1;
      break;
     }
     case 35:  {
      $$2 = $$1$lcssa;
      while(1) {
       $14 = HEAP8[$$2>>0]|0;
       switch ($14<<24>>24) {
       case 10: case 0:  {
        $$0$be = $$2;$35 = $14;
        break L10;
        break;
       }
       default: {
       }
       }
       $15 = ((($$2)) + 1|0);
       $$2 = $15;
      }
      break;
     }
     default: {
      $$042$off081$ph = 0;$$383$ph = $$1$lcssa;
      L12: while(1) {
       $$383 = $$383$ph;
       L14: while(1) {
        $16 = HEAP8[$$383>>0]|0;
        $17 = $16 << 24 >> 24;
        switch ($17|0) {
        case 13: case 0: case 10: case 9: case 32:  {
         $$109799 = $$383;
         break L12;
         break;
        }
        case 35:  {
         label = 27;
         break L12;
         break;
        }
        case 34:  {
         label = 13;
         break L14;
         break;
        }
        case 92:  {
         break;
        }
        default: {
         label = 30;
         break L14;
        }
        }
        $18 = ((($$383)) + 1|0);
        $19 = HEAP8[$18>>0]|0;
        $20 = ((($$383)) + 2|0);
        $21 = $19 << 24 >> 24;
        switch ($21|0) {
        case 0:  {
         label = 31;
         break L12;
         break;
        }
        case 10: case 13:  {
         if (!($$042$off081$ph)) {
          label = 33;
          break L12;
         }
         break;
        }
        default: {
         _add_to_last_arg($2,$19);
        }
        }
        $$383 = $20;
       }
       L21: do {
        if ((label|0) == 13) {
         label = 0;
         $$5 = $$383;
         L24: while(1) {
          $22 = ((($$5)) + 1|0);
          $23 = HEAP8[$22>>0]|0;
          $24 = $23 << 24 >> 24;
          L26: do {
           switch ($24|0) {
           case 0:  {
            $$383$ph$be = $22;
            break L21;
            break;
           }
           case 34:  {
            break L24;
            break;
           }
           case 92:  {
            $26 = ((($$5)) + 2|0);
            $27 = HEAP8[$26>>0]|0;
            $28 = $27 << 24 >> 24;
            switch ($28|0) {
            case 0:  {
             break L3;
             break;
            }
            case 13: case 10:  {
             $$5$be = $26;
             break L26;
             break;
            }
            case 34: case 92:  {
             _add_to_last_arg($2,$27);
             $$5$be = $26;
             break L26;
             break;
            }
            default: {
             _add_to_last_arg($2,92);
             _add_to_last_arg($2,$27);
             $$5$be = $26;
             break L26;
            }
            }
            break;
           }
           default: {
            _add_to_last_arg($2,$23);
            $$5$be = $22;
           }
           }
          } while(0);
          $$5 = $$5$be;
         }
         $25 = ((($$5)) + 2|0);
         $$383$ph$be = $25;
        }
        else if ((label|0) == 30) {
         label = 0;
         _add_to_last_arg($2,$16);
         $31 = ((($$383)) + 1|0);
         $$383$ph$be = $31;
        }
       } while(0);
       $$042$off081$ph = 1;$$383$ph = $$383$ph$be;
      }
      L35: do {
       if ((label|0) == 27) {
        label = 0;
        $$9 = $$383;$29 = $16;
        while(1) {
         switch ($29<<24>>24) {
         case 10: case 0:  {
          $$109799 = $$9;
          break L35;
          break;
         }
         default: {
         }
         }
         $30 = ((($$9)) + 1|0);
         $$pr67 = HEAP8[$30>>0]|0;
         $$9 = $30;$29 = $$pr67;
        }
       }
       else if ((label|0) == 31) {
        label = 0;
        $32 = ((($$383)) + 1|0);
        $$109799 = $32;
       }
       else if ((label|0) == 33) {
        label = 0;
        $$pr100 = HEAP8[$20>>0]|0;
        $$0$be = $20;$35 = $$pr100;
        break L10;
       }
      } while(0);
      _push_args_last_arg($2);
      $33 = HEAP8[$$109799>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if ($34) {
       break L1;
      } else {
       $$0$be = $$109799;$35 = $33;
      }
     }
     }
    } while(0);
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     break L1;
    } else {
     $$084 = $$0$be;$10 = $35;
    }
   }
   _push_args_last_arg($2);
  }
 } while(0);
 $37 = HEAP32[$4>>2]|0;
 $38 = HEAP32[$3>>2]|0;
 $39 = ($37|0)==($38|0);
 if ($39) {
  $40 = HEAP32[$3>>2]|0;
  _free($40);
  $41 = $2;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = $0;
  $48 = $47;
  HEAP32[$48>>2] = $43;
  $49 = (($47) + 4)|0;
  $50 = $49;
  HEAP32[$50>>2] = $46;
  STACKTOP = sp;return;
 }
 _push_args_last_arg($2);
 $40 = HEAP32[$3>>2]|0;
 _free($40);
 $41 = $2;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($41) + 4)|0;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = $0;
 $48 = $47;
 HEAP32[$48>>2] = $43;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 STACKTOP = sp;return;
}
function _fc_solve_args_man_alloc($0) {
 $0 = $0|0;
 var $$sroa$4$0$$sroa_idx2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(128)|0);
 HEAP32[$0>>2] = 0;
 $$sroa$4$0$$sroa_idx2 = ((($0)) + 4|0);
 HEAP32[$$sroa$4$0$$sroa_idx2>>2] = $1;
 return;
}
function _is_whitespace($0) {
 $0 = $0|0;
 var $$clear = 0, $1 = 0, $2 = 0, $switch$cast = 0, $switch$cast$clear = 0, $switch$downshift = 0, $switch$masked = 0, $switch$tableidx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $switch$tableidx = (($0) + -9)<<24>>24;
 $1 = ($switch$tableidx&255)<(24);
 if ($1) {
  $switch$cast = $switch$tableidx&255;
  $switch$cast$clear = $switch$cast & 16777215;
  $switch$downshift = ($switch$cast$clear)?(8388627 >>> $switch$cast$clear):(8388627);
  $2 = $switch$downshift & 1;
  $$clear = $2 & 16777215;
  $switch$masked = ($$clear|0)!=(0);
  return ($switch$masked|0);
 } else {
  return 0;
 }
 return (0)|0;
}
function _add_to_last_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 1|0);
 HEAP32[$2>>2] = $4;
 HEAP8[$3>>0] = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  return;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7;
 $12 = $10;
 $13 = (($11) + 1024)|0;
 $14 = (($13) - ($12))|0;
 $15 = (_realloc($10,$14)|0);
 $16 = HEAP32[$9>>2]|0;
 $17 = $15;
 $18 = (($17) - ($16))|0;
 $19 = HEAP32[$2>>2]|0;
 $20 = (($19) + ($18)|0);
 HEAP32[$2>>2] = $20;
 $21 = (($18) + 1024)|0;
 $22 = HEAP32[$6>>2]|0;
 $23 = (($22) + ($21)|0);
 HEAP32[$6>>2] = $23;
 HEAP32[$9>>2] = $15;
 return;
}
function _push_args_last_arg($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = (($5) + 1)|0;
 $7 = (_malloc($6)|0);
 $$cast = $4;
 (_strncpy($7,$$cast,$5)|0);
 $8 = (($7) + ($5)|0);
 HEAP8[$8>>0] = 0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[$0>>2] = $12;
 $13 = (($10) + ($11<<2)|0);
 HEAP32[$13>>2] = $7;
 $14 = $12 & 31;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $20 = HEAP32[$3>>2]|0;
  HEAP32[$1>>2] = $20;
  return;
 }
 $16 = $12 << 2;
 $17 = (($16) + 128)|0;
 $18 = HEAP32[$9>>2]|0;
 $19 = (_realloc($18,$17)|0);
 HEAP32[$9>>2] = $19;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $20;
 return;
}
function _fc_solve_canonize_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$04750 = 0, $$04852 = 0, $$04954 = 0, $$058 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(1);
 if ($3) {
  $$058 = 1;
  while(1) {
   $$04954 = $$058;
   while(1) {
    $5 = (($0) + ($$04954<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (($$04954) + -1)|0;
    $8 = (($0) + ($7<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (_fc_solve_stack_compare_for_comparison_349($6,$9)|0);
    $11 = ($10|0)<(0);
    if (!($11)) {
     break;
    }
    $12 = HEAP32[$5>>2]|0;
    $13 = HEAP32[$8>>2]|0;
    HEAP32[$5>>2] = $13;
    HEAP32[$8>>2] = $12;
    $14 = ($7|0)==(0);
    if ($14) {
     break;
    } else {
     $$04954 = $7;
    }
   }
   $15 = (($$058) + 1)|0;
   $exitcond62 = ($15|0)==($2|0);
   if ($exitcond62) {
    break;
   } else {
    $$058 = $15;
   }
  }
 }
 $4 = ($1>>>0)>(1);
 if (!($4)) {
  return;
 }
 $$04852 = 1;
 while(1) {
  $$04750 = $$04852;
  while(1) {
   $16 = (((($0)) + 40|0) + ($$04750)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = (($$04750) + -1)|0;
   $19 = (((($0)) + 40|0) + ($18)|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = (_fc_solve_card_compare_350($17,$20)|0);
   $22 = ($21|0)<(0);
   if (!($22)) {
    break;
   }
   HEAP8[$16>>0] = $20;
   HEAP8[$19>>0] = $17;
   $23 = ($18|0)==(0);
   if ($23) {
    break;
   } else {
    $$04750 = $18;
   }
  }
  $24 = (($$04852) + 1)|0;
  $exitcond = ($24|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$04852 = $24;
  }
 }
 return;
}
function _fc_solve_stack_compare_for_comparison_349($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03642 = 0, $$37 = 0, $$v = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2&255)<($3&255);
 $$v = $4 ? $2 : $3;
 $5 = $$v&255;
 $6 = ($$v<<24>>24)==(0);
 L1: do {
  if (!($6)) {
   $$03642 = 1;
   while(1) {
    $9 = (($0) + ($$03642)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = (($1) + ($$03642)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = (_fc_solve_card_compare_350($10,$12)|0);
    $14 = ($13|0)==(0);
    if (!($14)) {
     break;
    }
    $7 = (($$03642) + 1)|0;
    $8 = ($$03642>>>0)<($5>>>0);
    if ($8) {
     $$03642 = $7;
    } else {
     break L1;
    }
   }
   return ($13|0);
  }
 } while(0);
 $15 = ($2&255)>($3&255);
 $$37 = $15&1;
 $spec$select = $4 ? -1 : $$37;
 return ($spec$select|0);
}
function _fc_solve_card_compare_350($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0&255;
 $3 = $1&255;
 $4 = (($2) - ($3))|0;
 return ($4|0);
}
function _fc_solve_canonize_state_with_locs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$06572 = 0, $$06668 = 0, $$06770 = 0, $$076 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond80 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3>>>0)>(1);
 if ($4) {
  $$076 = 1;
  while(1) {
   $$06572 = $$076;
   while(1) {
    $6 = (($0) + ($$06572<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($$06572) + -1)|0;
    $9 = (($0) + ($8<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (_fc_solve_stack_compare_for_comparison_349($7,$10)|0);
    $12 = ($11|0)<(0);
    if (!($12)) {
     break;
    }
    $13 = HEAP32[$6>>2]|0;
    $14 = HEAP32[$9>>2]|0;
    HEAP32[$6>>2] = $14;
    HEAP32[$9>>2] = $13;
    $15 = (($1) + ($$06572)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = (($1) + ($8)|0);
    $18 = HEAP8[$17>>0]|0;
    HEAP8[$15>>0] = $18;
    HEAP8[$17>>0] = $16;
    $19 = ($8|0)==(0);
    if ($19) {
     break;
    } else {
     $$06572 = $8;
    }
   }
   $20 = (($$076) + 1)|0;
   $exitcond80 = ($20|0)==($3|0);
   if ($exitcond80) {
    break;
   } else {
    $$076 = $20;
   }
  }
 }
 $5 = ($2>>>0)>(1);
 if (!($5)) {
  return;
 }
 $$06770 = 1;
 while(1) {
  $$06668 = $$06770;
  while(1) {
   $21 = (((($0)) + 40|0) + ($$06668)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = (($$06668) + -1)|0;
   $24 = (((($0)) + 40|0) + ($23)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = (_fc_solve_card_compare_350($22,$25)|0);
   $27 = ($26|0)<(0);
   if (!($27)) {
    break;
   }
   HEAP8[$21>>0] = $25;
   HEAP8[$24>>0] = $22;
   $28 = (((($1)) + 10|0) + ($$06668)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = (((($1)) + 10|0) + ($23)|0);
   $31 = HEAP8[$30>>0]|0;
   HEAP8[$28>>0] = $31;
   HEAP8[$30>>0] = $29;
   $32 = ($23|0)==(0);
   if ($32) {
    break;
   } else {
    $$06668 = $23;
   }
  }
  $33 = (($$06770) + 1)|0;
  $exitcond = ($33|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$06770 = $33;
  }
 }
 return;
}
function _fc_solve_state_as_string($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$0202$lcssa = 0, $$0202290 = 0, $$0203304 = 0, $$0204235 = 0, $$0205241 = 0, $$0206301 = 0, $$0207247 = 0, $$0208311 = 0, $$0209308 = 0, $$0210253 = 0, $$0211260 = 0, $$0212296 = 0, $$0213266 = 0, $$0214265 = 0, $$0216271 = 0, $$0217285 = 0, $$0218$lcssa = 0, $$0218289 = 0, $$0220284 = 0, $$0221283 = 0;
 var $$0233 = 0, $$1 = 0, $$10 = 0, $$11 = 0, $$11234 = 0, $$11237 = 0, $$12$lcssa337 = 0, $$1219277 = 0, $$12232 = 0, $$13 = 0, $$14 = 0, $$2$lcssa = 0, $$2278 = 0, $$3272 = 0, $$4 = 0, $$4259 = 0, $$4259336 = 0, $$4261 = 0, $$5$lcssa = 0, $$5254 = 0;
 var $$6 = 0, $$7$lcssa = 0, $$7248 = 0, $$9$lcssa = 0, $$9$pn236 = 0, $$9242 = 0, $$pn = 0, $$pn222 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond322 = 0, $exitcond323 = 0, $exitcond324 = 0, $exitcond325 = 0, $exitcond326 = 0, $exitcond327 = 0, $exitcond328 = 0, $exitcond329 = 0, $exitcond330 = 0, $exitcond331 = 0, $exitcond332 = 0, $exitcond333 = 0, $exitcond334 = 0, $scevgep = 0, $spec$select = 0, $spec$select228 = 0, $strchr = 0, $strlen223 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer8 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $vararg_buffer33 = sp + 520|0;
 $vararg_buffer30 = sp + 512|0;
 $vararg_buffer24 = sp + 496|0;
 $vararg_buffer21 = sp + 488|0;
 $vararg_buffer14 = sp + 464|0;
 $vararg_buffer11 = sp + 456|0;
 $vararg_buffer8 = sp + 448|0;
 $vararg_buffer1 = sp + 424|0;
 $vararg_buffer = sp + 416|0;
 $9 = sp + 336|0;
 $10 = sp + 288|0;
 $11 = sp + 256|0;
 $12 = sp + 128|0;
 $13 = sp;
 $14 = sp + 524|0;
 $15 = ($4|0)!=(0);
 if ($7) {
  if ($15) {
   $$0203304 = 0;
   while(1) {
    $17 = (($10) + ($$0203304<<2)|0);
    HEAP32[$17>>2] = $$0203304;
    $18 = (($$0203304) + 1)|0;
    $exitcond332 = ($18|0)==($4|0);
    if ($exitcond332) {
     break;
    } else {
     $$0203304 = $18;
    }
   }
  }
  $16 = ($3|0)==(0);
  if (!($16)) {
   $$0206301 = 0;
   while(1) {
    $19 = (($11) + ($$0206301<<2)|0);
    HEAP32[$19>>2] = $$0206301;
    $20 = (($$0206301) + 1)|0;
    $exitcond331 = ($20|0)==($3|0);
    if ($exitcond331) {
     break;
    } else {
     $$0206301 = $20;
    }
   }
  }
 } else {
  if ($15) {
   $$0208311 = 0;
   while(1) {
    $22 = (($2) + ($$0208311)|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (($10) + ($24<<2)|0);
    HEAP32[$25>>2] = $$0208311;
    $26 = (($$0208311) + 1)|0;
    $exitcond334 = ($26|0)==($4|0);
    if ($exitcond334) {
     break;
    } else {
     $$0208311 = $26;
    }
   }
  }
  $21 = ($3|0)==(0);
  if (!($21)) {
   $$0209308 = 0;
   while(1) {
    $27 = (((($2)) + 10|0) + ($$0209308)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = (($11) + ($29<<2)|0);
    HEAP32[$30>>2] = $$0209308;
    $31 = (($$0209308) + 1)|0;
    $exitcond333 = ($31|0)==($3|0);
    if ($exitcond333) {
     break;
    } else {
     $$0209308 = $31;
    }
   }
  }
 }
 $32 = $5 << 2;
 $33 = ($32|0)==(0);
 if (!($33)) {
  $$0212296 = 0;
  while(1) {
   $34 = (((($1)) + 48|0) + ($$0212296)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = (($9) + (($$0212296*10)|0)|0);
   _rank2str_355($36,$37,$8);
   $38 = HEAP8[$37>>0]|0;
   $39 = ($38<<24>>24)==(32);
   if ($39) {
    HEAP8[$37>>0] = 48;
   }
   $40 = (($$0212296) + 1)|0;
   $exitcond330 = ($40|0)==($32|0);
   if ($exitcond330) {
    break;
   } else {
    $$0212296 = $40;
   }
  }
 }
 if ($6) {
  dest=$0; src=13463; stop=dest+13|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $118 = ((($0)) + 12|0);
  $119 = ($32|0)==(0);
  if ($119) {
   $$7$lcssa = $118;
  } else {
   $$0207247 = 0;$$7248 = $118;
   while(1) {
    $124 = (($9) + (($$0207247*10)|0)|0);
    $125 = $$0207247 | 1;
    $126 = (($9) + (($125*10)|0)|0);
    $127 = $$0207247 | 2;
    $128 = (($9) + (($127*10)|0)|0);
    $129 = $$0207247 | 3;
    $130 = (($9) + (($129*10)|0)|0);
    HEAP32[$vararg_buffer24>>2] = $124;
    $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
    HEAP32[$vararg_ptr27>>2] = $126;
    $vararg_ptr28 = ((($vararg_buffer24)) + 8|0);
    HEAP32[$vararg_ptr28>>2] = $128;
    $vararg_ptr29 = ((($vararg_buffer24)) + 12|0);
    HEAP32[$vararg_ptr29>>2] = $130;
    $131 = (_sprintf($$7248,13488,$vararg_buffer24)|0);
    $132 = (($$7248) + ($131)|0);
    $133 = (($$0207247) + 4)|0;
    $134 = ($133>>>0)<($32>>>0);
    if ($134) {
     $$0207247 = $133;$$7248 = $132;
    } else {
     $$7$lcssa = $132;
     break;
    }
   }
  }
  $120 = ((($$7$lcssa)) + 1|0);
  HEAP8[$$7$lcssa>>0] = 32;
  dest=$120; src=13476; stop=dest+12|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $121 = ((($$7$lcssa)) + 12|0);
  $122 = (($3) + -1)|0;
  $123 = ($122|0)>(-1);
  if ($123) {
   $135 = ((($$7$lcssa)) + 13|0);
   HEAP8[$121>>0] = 32;
   $$0205241 = 0;$$9242 = $135;
   while(1) {
    $137 = (($11) + ($$0205241<<2)|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (((($1)) + 40|0) + ($138)|0);
    $140 = HEAP8[$139>>0]|0;
    _render_freecell_card($140,$12,$8);
    HEAP32[$vararg_buffer30>>2] = $12;
    $141 = (_sprintf($$9242,13509,$vararg_buffer30)|0);
    $142 = (($$9242) + ($141)|0);
    $143 = ($$0205241|0)<($122|0);
    if ($143) {
     $144 = ((($142)) + 1|0);
     HEAP8[$142>>0] = 32;
     $$10 = $144;
    } else {
     $$10 = $142;
    }
    $145 = (($$0205241) + 1)|0;
    $exitcond323 = ($145|0)==($3|0);
    if ($exitcond323) {
     $$9$lcssa = $$10;
     break;
    } else {
     $$0205241 = $145;$$9242 = $$10;
    }
   }
  } else {
   $$9$lcssa = $121;
  }
  HEAP8[$$9$lcssa>>0] = 10;
  $$11234 = ((($$9$lcssa)) + 1|0);
  $136 = ($4|0)==(0);
  if ($136) {
   $$14 = $$11234;
   HEAP8[$$14>>0] = 0;
   STACKTOP = sp;return;
  }
  $$0204235 = 0;$$11237 = $$11234;$$9$pn236 = $$9$lcssa;
  while(1) {
   $146 = (($10) + ($$0204235<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($1) + ($147<<2)|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = ((($$9$pn236)) + 2|0);
   HEAP8[$$11237>>0] = 58;
   $153 = ($150<<24>>24)==(0);
   if ($153) {
    $$12$lcssa337 = $152;
    label = 63;
   } else {
    $$0233 = 0;$$12232 = $152;
    while(1) {
     $155 = (($$0233) + 1)|0;
     $156 = (($149) + ($155)|0);
     $157 = HEAP8[$156>>0]|0;
     _fc_solve_card_stringify($157,$12,$8);
     HEAP32[$vararg_buffer33>>2] = $12;
     $158 = (_sprintf($$12232,13513,$vararg_buffer33)|0);
     $159 = (($$12232) + ($158)|0);
     $exitcond = ($155|0)==($151|0);
     if ($exitcond) {
      break;
     } else {
      $$0233 = $155;$$12232 = $159;
     }
    }
    $154 = ($150<<24>>24)==(0);
    if ($154) {
     $$12$lcssa337 = $159;
     label = 63;
    } else {
     $$13 = $159;
    }
   }
   if ((label|0) == 63) {
    label = 0;
    $160 = ((($$12$lcssa337)) + 1|0);
    HEAP8[$$12$lcssa337>>0] = 32;
    $$13 = $160;
   }
   HEAP8[$$13>>0] = 10;
   $161 = (($$0204235) + 1)|0;
   $$11 = ((($$13)) + 1|0);
   $exitcond322 = ($161|0)==($4|0);
   if ($exitcond322) {
    $$14 = $$11;
    break;
   } else {
    $$0204235 = $161;$$11237 = $$11;$$9$pn236 = $$13;
   }
  }
  HEAP8[$$14>>0] = 0;
  STACKTOP = sp;return;
 }
 $41 = (2)?($3 >>> 2):($3);
 $42 = $3 & 3;
 $43 = ($42|0)!=(0);
 $44 = $43&1;
 $45 = (($41) + ($44))|0;
 $46 = ($45|0)==(0);
 if ($46) {
  $$0202$lcssa = $0;$$0218$lcssa = 0;
 } else {
  $$0202290 = $0;$$0218289 = 0;
  while(1) {
   $47 = $$0218289 << 2;
   $48 = (($3) - ($47))|0;
   $49 = ($48>>>0)<(4);
   $spec$select = $49 ? $48 : 4;
   $50 = ($spec$select|0)==(0);
   if (!($50)) {
    $$0217285 = 0;$$0220284 = $13;$$0221283 = $12;
    while(1) {
     $52 = (($$0217285) + ($47))|0;
     $53 = (($11) + ($52<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (((($1)) + 40|0) + ($54)|0);
     $56 = HEAP8[$55>>0]|0;
     _render_freecell_card($56,$14,$8);
     HEAP32[$vararg_buffer>>2] = $14;
     $57 = (_sprintf($$0220284,13401,$vararg_buffer)|0);
     $58 = (($$0220284) + ($57)|0);
     ;HEAP8[$$0221283>>0]=HEAP8[13406>>0]|0;HEAP8[$$0221283+1>>0]=HEAP8[13406+1>>0]|0;HEAP8[$$0221283+2>>0]=HEAP8[13406+2>>0]|0;HEAP8[$$0221283+3>>0]=HEAP8[13406+3>>0]|0;HEAP8[$$0221283+4>>0]=HEAP8[13406+4>>0]|0;
     $strlen223 = (_strlen($$0221283)|0);
     $strchr = (($$0221283) + ($strlen223)|0);
     $59 = (($$0217285) + 1)|0;
     $60 = ($59>>>0)<($spec$select>>>0);
     if ($60) {
      $$0217285 = $59;$$0220284 = $58;$$0221283 = $strchr;
     } else {
      break;
     }
    }
   }
   $51 = ($$0218289>>>0)<($5>>>0);
   if ($51) {
    $61 = (($9) + (($47*10)|0)|0);
    $62 = $47 | 1;
    $63 = (($9) + (($62*10)|0)|0);
    $64 = $47 | 2;
    $65 = (($9) + (($64*10)|0)|0);
    $66 = $47 | 3;
    $67 = (($9) + (($66*10)|0)|0);
    HEAP32[$vararg_buffer1>>2] = $13;
    $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
    HEAP32[$vararg_ptr4>>2] = $61;
    $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
    HEAP32[$vararg_ptr5>>2] = $63;
    $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
    HEAP32[$vararg_ptr6>>2] = $65;
    $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
    HEAP32[$vararg_ptr7>>2] = $67;
    $68 = (_sprintf($$0202290,13411,$vararg_buffer1)|0);
    $$pn222 = $68;
   } else {
    HEAP32[$vararg_buffer8>>2] = $13;
    $69 = (_sprintf($$0202290,13449,$vararg_buffer8)|0);
    $$pn222 = $69;
   }
   $$1 = (($$0202290) + ($$pn222)|0);
   HEAP32[$vararg_buffer11>>2] = $12;
   $70 = (_sprintf($$1,13449,$vararg_buffer11)|0);
   $71 = (($$1) + ($70)|0);
   $72 = (($$0218289) + 1)|0;
   $exitcond329 = ($72|0)==($45|0);
   if ($exitcond329) {
    $$0202$lcssa = $71;$$0218$lcssa = $45;
    break;
   } else {
    $$0202290 = $71;$$0218289 = $72;
   }
  }
 }
 $73 = ($$0218$lcssa>>>0)<($5>>>0);
 if ($73) {
  $$1219277 = $$0218$lcssa;$$2278 = $$0202$lcssa;
  while(1) {
   $74 = $$1219277 << 2;
   $75 = (($9) + (($74*10)|0)|0);
   $76 = $74 | 1;
   $77 = (($9) + (($76*10)|0)|0);
   $78 = $74 | 2;
   $79 = (($9) + (($78*10)|0)|0);
   $80 = $74 | 3;
   $81 = (($9) + (($80*10)|0)|0);
   HEAP32[$vararg_buffer14>>2] = 15228;
   $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
   HEAP32[$vararg_ptr17>>2] = $75;
   $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
   HEAP32[$vararg_ptr18>>2] = $77;
   $vararg_ptr19 = ((($vararg_buffer14)) + 12|0);
   HEAP32[$vararg_ptr19>>2] = $79;
   $vararg_ptr20 = ((($vararg_buffer14)) + 16|0);
   HEAP32[$vararg_ptr20>>2] = $81;
   $82 = (_sprintf($$2278,13411,$vararg_buffer14)|0);
   $83 = (($$2278) + ($82)|0);
   $84 = (($$1219277) + 1)|0;
   $exitcond328 = ($84|0)==($5|0);
   if ($exitcond328) {
    $$2$lcssa = $83;
    break;
   } else {
    $$1219277 = $84;$$2278 = $83;
   }
  }
 } else {
  $$2$lcssa = $$0202$lcssa;
 }
 $85 = ((($$2$lcssa)) + 1|0);
 HEAP8[$$2$lcssa>>0] = 10;
 $86 = ((($$2$lcssa)) + 2|0);
 HEAP8[$85>>0] = 10;
 $87 = ($4|0)==(0);
 if ($87) {
  HEAP8[$86>>0] = 10;
  $94 = 2;
 } else {
  $88 = $4 << 2;
  $89 = $88 | 2;
  $$0216271 = 0;$$3272 = $86;
  while(1) {
   ;HEAP8[$$3272>>0]=HEAP8[13453>>0]|0;HEAP8[$$3272+1>>0]=HEAP8[13453+1>>0]|0;HEAP8[$$3272+2>>0]=HEAP8[13453+2>>0]|0;HEAP8[$$3272+3>>0]=HEAP8[13453+3>>0]|0;HEAP8[$$3272+4>>0]=HEAP8[13453+4>>0]|0;
   $91 = ((($$3272)) + 4|0);
   $92 = (($$0216271) + 1)|0;
   $exitcond327 = ($92|0)==($4|0);
   if ($exitcond327) {
    break;
   } else {
    $$0216271 = $92;$$3272 = $91;
   }
  }
  $scevgep = (($$2$lcssa) + ($89)|0);
  HEAP8[$scevgep>>0] = 10;
  $90 = ($4|0)==(0);
  if ($90) {
   $94 = $89;
  } else {
   $$0213266 = 0;$$0214265 = 0;
   while(1) {
    $97 = (($10) + ($$0213266<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($1) + ($98<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    $103 = ($$0214265>>>0)<($102>>>0);
    $spec$select228 = $103 ? $102 : $$0214265;
    $104 = (($$0213266) + 1)|0;
    $exitcond326 = ($104|0)==($4|0);
    if ($exitcond326) {
     break;
    } else {
     $$0213266 = $104;$$0214265 = $spec$select228;
    }
   }
   $$4259 = ((($scevgep)) + 1|0);
   $95 = ($spec$select228|0)==(0);
   if ($95) {
    $$14 = $$4259;
    HEAP8[$$14>>0] = 0;
    STACKTOP = sp;return;
   }
   $96 = ($4|0)==(0);
   $$0211260 = 0;$$4261 = $$4259;
   while(1) {
    if ($96) {
     $$5$lcssa = $$4261;
    } else {
     $105 = (($$0211260) + 1)|0;
     $$0210253 = 0;$$5254 = $$4261;
     while(1) {
      $107 = (($10) + ($$0210253<<2)|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = (($1) + ($108<<2)|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = HEAP8[$110>>0]|0;
      $112 = $111&255;
      $113 = ($$0211260>>>0)<($112>>>0);
      if ($113) {
       $114 = (($110) + ($105)|0);
       $115 = HEAP8[$114>>0]|0;
       _fc_solve_card_stringify($115,$12,$8);
       HEAP32[$vararg_buffer21>>2] = $12;
       $116 = (_sprintf($$5254,13401,$vararg_buffer21)|0);
       $$pn = $116;
      } else {
       ;HEAP8[$$5254>>0]=HEAP8[13458>>0]|0;HEAP8[$$5254+1>>0]=HEAP8[13458+1>>0]|0;HEAP8[$$5254+2>>0]=HEAP8[13458+2>>0]|0;HEAP8[$$5254+3>>0]=HEAP8[13458+3>>0]|0;HEAP8[$$5254+4>>0]=HEAP8[13458+4>>0]|0;
       $$pn = 4;
      }
      $$6 = (($$5254) + ($$pn)|0);
      $117 = (($$0210253) + 1)|0;
      $exitcond324 = ($117|0)==($4|0);
      if ($exitcond324) {
       $$5$lcssa = $$6;
       break;
      } else {
       $$0210253 = $117;$$5254 = $$6;
      }
     }
    }
    HEAP8[$$5$lcssa>>0] = 10;
    $106 = (($$0211260) + 1)|0;
    $$4 = ((($$5$lcssa)) + 1|0);
    $exitcond325 = ($106|0)==($spec$select228|0);
    if ($exitcond325) {
     $$14 = $$4;
     break;
    } else {
     $$0211260 = $106;$$4261 = $$4;
    }
   }
   HEAP8[$$14>>0] = 0;
   STACKTOP = sp;return;
  }
 }
 $93 = (($$2$lcssa) + ($94)|0);
 $$4259336 = ((($93)) + 1|0);
 $$14 = $$4259336;
 HEAP8[$$14>>0] = 0;
 STACKTOP = sp;return;
}
function _rank2str_355($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 ? 4000 : 4064;
 $4 = (($3) + ($0<<2)|0);
 (_strcpy($1,$4)|0);
 return;
}
function _render_freecell_card($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0<<24>>24)==(0);
 if ($3) {
  HEAP8[$1>>0] = 0;
  return;
 } else {
  _fc_solve_card_stringify($0,$1,$2);
  return;
 }
}
function _fc_solve_pats__get_moves($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$07490 = 0, $$07585 = 0, $$07784 = 0, $$079$lcssa = 0, $$07993 = 0, $$08292 = 0, $$087 = 0, $$1 = 0, $$178 = 0, $$180 = 0, $$2$lcssa = 0, $$281 = 0, $$289 = 0, $$3 = 0, $$486 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $exitcond = 0, $exitcond100 = 0, $exitcond99 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = sp + 4|0;
 HEAP32[$3>>2] = 0;
 $5 = (_get_possible_moves($0,$4,$3)|0);
 $6 = HEAP8[$4>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $8 = (((($0)) + 2276|0) + ($5<<3)|0);
  $9 = ($5|0)>(0);
  if ($9) {
   $10 = ((($0)) + 2276|0);
   $$07993 = $5;$$08292 = $10;
   while(1) {
    $11 = (_prune_seahaven($0,$$08292)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     $14 = (_prune_redundant($0,$$08292,$1)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $$180 = $$07993;
     } else {
      $16 = (($$07993) + -1)|0;
      HEAP8[$$08292>>0] = 0;
      $$180 = $16;
     }
    } else {
     HEAP8[$$08292>>0] = 0;
     $13 = (($$07993) + -1)|0;
     $$180 = $13;
    }
    $17 = ((($$08292)) + 8|0);
    $18 = ($17>>>0)<($8>>>0);
    if ($18) {
     $$07993 = $$180;$$08292 = $17;
    } else {
     $$079$lcssa = $$180;
     break;
    }
   }
  } else {
   $$079$lcssa = $5;
  }
  _mark_irreversible($0,$$079$lcssa);
  $$281 = $$079$lcssa;
 } else {
  $$281 = $5;
 }
 $19 = ($$281|0)==(0);
 if ($19) {
  $20 = (_is_win($0)|0);
  if (!($20)) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  _win($0,$1);
  $21 = ((($0)) + 35640|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $27 = ((($0)) + 35656|0);
   HEAP32[$27>>2] = 0;
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  } else {
   $24 = ((($0)) + 35644|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + 1)|0;
   HEAP32[$24>>2] = $26;
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
 }
 if ($7) {
  $28 = ((($0)) + 2276|0);
  _prioritize($0,$28,$5);
 }
 $29 = $$281 << 3;
 $30 = (_fc_solve_pats__malloc($0,$29)|0);
 $31 = ($30|0)==(0|0);
 if ($31) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 HEAP32[$2>>2] = $$281;
 $32 = ($6<<24>>24)!=(0);
 $33 = HEAP32[$3>>2]|0;
 $34 = ($33|0)==(0);
 $or$cond = $32 | $34;
 if ($or$cond) {
  $35 = ($5|0)>(0);
  if (!($35)) {
   $$1 = $30;
   STACKTOP = sp;return ($$1|0);
  }
  $$07585 = 0;$$07784 = $30;
  while(1) {
   $36 = (((($0)) + 2276|0) + ($$07585<<3)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = ($37<<24>>24)==(0);
   if ($38) {
    $$178 = $$07784;
   } else {
    $39 = ((($$07784)) + 8|0);
    $40 = $36;
    $41 = $40;
    $42 = HEAPU8[$41>>0]|(HEAPU8[$41+1>>0]<<8)|(HEAPU8[$41+2>>0]<<16)|(HEAPU8[$41+3>>0]<<24);
    $43 = (($40) + 4)|0;
    $44 = $43;
    $45 = HEAPU8[$44>>0]|(HEAPU8[$44+1>>0]<<8)|(HEAPU8[$44+2>>0]<<16)|(HEAPU8[$44+3>>0]<<24);
    $46 = $$07784;
    $47 = $46;
    HEAP8[$47>>0]=$42&255;HEAP8[$47+1>>0]=($42>>8)&255;HEAP8[$47+2>>0]=($42>>16)&255;HEAP8[$47+3>>0]=$42>>24;
    $48 = (($46) + 4)|0;
    $49 = $48;
    HEAP8[$49>>0]=$45&255;HEAP8[$49+1>>0]=($45>>8)&255;HEAP8[$49+2>>0]=($45>>16)&255;HEAP8[$49+3>>0]=$45>>24;
    $$178 = $39;
   }
   $50 = (($$07585) + 1)|0;
   $exitcond = ($50|0)==($5|0);
   if ($exitcond) {
    $$1 = $30;
    break;
   } else {
    $$07585 = $50;$$07784 = $$178;
   }
  }
  STACKTOP = sp;return ($$1|0);
 }
 $51 = ($33|0)<($5|0);
 if ($51) {
  $$07490 = $33;$$289 = $30;
  while(1) {
   $53 = (((($0)) + 2276|0) + ($$07490<<3)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = ($54<<24>>24)==(0);
   if ($55) {
    $$3 = $$289;
   } else {
    $56 = ((($$289)) + 8|0);
    $57 = $53;
    $58 = $57;
    $59 = HEAPU8[$58>>0]|(HEAPU8[$58+1>>0]<<8)|(HEAPU8[$58+2>>0]<<16)|(HEAPU8[$58+3>>0]<<24);
    $60 = (($57) + 4)|0;
    $61 = $60;
    $62 = HEAPU8[$61>>0]|(HEAPU8[$61+1>>0]<<8)|(HEAPU8[$61+2>>0]<<16)|(HEAPU8[$61+3>>0]<<24);
    $63 = $$289;
    $64 = $63;
    HEAP8[$64>>0]=$59&255;HEAP8[$64+1>>0]=($59>>8)&255;HEAP8[$64+2>>0]=($59>>16)&255;HEAP8[$64+3>>0]=$59>>24;
    $65 = (($63) + 4)|0;
    $66 = $65;
    HEAP8[$66>>0]=$62&255;HEAP8[$66+1>>0]=($62>>8)&255;HEAP8[$66+2>>0]=($62>>16)&255;HEAP8[$66+3>>0]=$62>>24;
    $$3 = $56;
   }
   $67 = (($$07490) + 1)|0;
   $exitcond100 = ($67|0)==($5|0);
   if ($exitcond100) {
    $$2$lcssa = $$3;
    break;
   } else {
    $$07490 = $67;$$289 = $$3;
   }
  }
 } else {
  $$2$lcssa = $30;
 }
 $52 = ($33|0)>(0);
 if (!($52)) {
  $$1 = $30;
  STACKTOP = sp;return ($$1|0);
 }
 $$087 = 0;$$486 = $$2$lcssa;
 while(1) {
  $68 = (((($0)) + 2276|0) + ($$087<<3)|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $$5 = $$486;
  } else {
   $71 = ((($$486)) + 8|0);
   $72 = $68;
   $73 = $72;
   $74 = HEAPU8[$73>>0]|(HEAPU8[$73+1>>0]<<8)|(HEAPU8[$73+2>>0]<<16)|(HEAPU8[$73+3>>0]<<24);
   $75 = (($72) + 4)|0;
   $76 = $75;
   $77 = HEAPU8[$76>>0]|(HEAPU8[$76+1>>0]<<8)|(HEAPU8[$76+2>>0]<<16)|(HEAPU8[$76+3>>0]<<24);
   $78 = $$486;
   $79 = $78;
   HEAP8[$79>>0]=$74&255;HEAP8[$79+1>>0]=($74>>8)&255;HEAP8[$79+2>>0]=($74>>16)&255;HEAP8[$79+3>>0]=$74>>24;
   $80 = (($78) + 4)|0;
   $81 = $80;
   HEAP8[$81>>0]=$77&255;HEAP8[$81+1>>0]=($77>>8)&255;HEAP8[$81+2>>0]=($77>>16)&255;HEAP8[$81+3>>0]=$77>>24;
   $$5 = $71;
  }
  $82 = (($$087) + 1)|0;
  $exitcond99 = ($82|0)==($33|0);
  if ($exitcond99) {
   $$1 = $30;
   break;
  } else {
   $$087 = $82;$$486 = $$5;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function _get_possible_moves($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0286$lcssa = 0, $$0286373 = 0, $$0295372 = 0, $$0303365 = 0, $$0304360 = 0, $$0305354 = 0, $$0306349 = 0, $$0307345 = 0, $$0308341 = 0, $$0309333 = 0, $$0310335 = 0, $$0311337 = 0, $$10361 = 0, $$12 = 0, $$13 = 0, $$14$lcssa = 0, $$14355 = 0, $$15350 = 0, $$18 = 0, $$19 = 0;
 var $$20346 = 0, $$21342 = 0, $$23 = 0, $$24 = 0, $$25338 = 0, $$26 = 0, $$27 = 0, $$28334 = 0, $$29 = 0, $$30 = 0, $$3289$ph = 0, $$5291$lcssa = 0, $$5291366 = 0, $$8 = 0, $$8294$ph = 0, $$sroa$0232$0$copyload = 0, $$sroa$2$0$$sroa_idx = 0, $$sroa$2120$0$$sroa_idx = 0, $$sroa$2155$0$$sroa_idx = 0, $$sroa$2179$0$$sroa_idx = 0;
 var $$sroa$223$0$$sroa_idx = 0, $$sroa$240$0$$sroa_idx = 0, $$sroa$272$0$$sroa_idx = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3121$0$$sroa_idx = 0, $$sroa$3156$0$$sroa_idx = 0, $$sroa$3180$0$$sroa_idx = 0, $$sroa$324$0$$sroa_idx = 0, $$sroa$341$0$$sroa_idx = 0, $$sroa$373$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4122$0$$sroa_idx = 0, $$sroa$4157$0$$sroa_idx = 0, $$sroa$4181$0$$sroa_idx = 0, $$sroa$425$0$$sroa_idx = 0, $$sroa$442$0$$sroa_idx = 0, $$sroa$474$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$5123$0$$sroa_idx = 0, $$sroa$5158$0$$sroa_idx = 0;
 var $$sroa$5182$0$$sroa_idx = 0, $$sroa$526$0$$sroa_idx = 0, $$sroa$543$0$$sroa_idx = 0, $$sroa$575$0$$sroa_idx = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$6124$0$$sroa_idx = 0, $$sroa$6159$0$$sroa_idx = 0, $$sroa$6183$0$$sroa_idx = 0, $$sroa$627$0$$sroa_idx = 0, $$sroa$644$0$$sroa_idx = 0, $$sroa$676$0$$sroa_idx = 0, $$sroa$7$0$$sroa_idx = 0, $$sroa$7125$0$$sroa_idx = 0, $$sroa$7160$0$$sroa_idx = 0, $$sroa$7184$0$$sroa_idx = 0, $$sroa$7236$0$$sroa_idx = 0, $$sroa$7236$0$copyload = 0, $$sroa$728$0$$sroa_idx = 0, $$sroa$745$0$$sroa_idx = 0, $$sroa$777$0$$sroa_idx = 0;
 var $$sroa$8$0$$sroa_idx = 0, $$sroa$8126$0$$sroa_idx = 0, $$sroa$8161$0$$sroa_idx = 0, $$sroa$8185$0$$sroa_idx = 0, $$sroa$829$0$$sroa_idx = 0, $$sroa$846$0$$sroa_idx = 0, $$sroa$878$0$$sroa_idx = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $exitcond385 = 0, $exitcond386 = 0, $exitcond387 = 0, $exitcond388 = 0, $exitcond389 = 0, $exitcond390 = 0, $or$cond = 0, $or$cond379 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $$sroa$0232$0$copyload = HEAP8[$3>>0]|0;
 $$sroa$7236$0$$sroa_idx = ((($3)) + 1|0);
 $$sroa$7236$0$copyload = HEAP8[$$sroa$7236$0$$sroa_idx>>0]|0;
 $4 = ((($0)) + 2276|0);
 $5 = $$sroa$7236$0$copyload&255;
 $6 = ($$sroa$7236$0$copyload<<24>>24)==(0);
 L1: do {
  if ($6) {
   $$0286$lcssa = $4;
  } else {
   $$0286373 = $4;$$0295372 = 0;
   while(1) {
    $7 = (((($0)) + 820|0) + ($$0295372<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    $11 = ($9<<24>>24)==(0);
    if ($11) {
     $$3289$ph = $$0286373;
    } else {
     $12 = (($8) + ($10)|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = $13&255;
     $15 = $14 & 3;
     $16 = (2)?($14 >>> 2):($14);
     $17 = (((($0)) + 868|0) + ($15)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18&255;
     $20 = (($19) + 1)|0;
     $21 = ($16|0)==($20|0);
     if ($21) {
      $22 = ((($$0286373)) + 8|0);
      $23 = $$0295372&255;
      $24 = $15&255;
      $25 = ($9&255)>(1);
      if ($25) {
       $26 = (($10) + -1)|0;
       $27 = (($8) + ($26)|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28&255;
       $31 = $29;
      } else {
       $31 = 0;
      }
      $30 = $31&255;
      HEAP8[$$0286373>>0] = $13;
      $$sroa$2179$0$$sroa_idx = ((($$0286373)) + 1|0);
      HEAP8[$$sroa$2179$0$$sroa_idx>>0] = $23;
      $$sroa$3180$0$$sroa_idx = ((($$0286373)) + 2|0);
      HEAP8[$$sroa$3180$0$$sroa_idx>>0] = $24;
      $$sroa$4181$0$$sroa_idx = ((($$0286373)) + 3|0);
      HEAP8[$$sroa$4181$0$$sroa_idx>>0] = 3;
      $$sroa$5182$0$$sroa_idx = ((($$0286373)) + 4|0);
      HEAP8[$$sroa$5182$0$$sroa_idx>>0] = 1;
      $$sroa$6183$0$$sroa_idx = ((($$0286373)) + 5|0);
      HEAP8[$$sroa$6183$0$$sroa_idx>>0] = $30;
      $$sroa$7184$0$$sroa_idx = ((($$0286373)) + 6|0);
      HEAP8[$$sroa$7184$0$$sroa_idx>>0] = 0;
      $$sroa$8185$0$$sroa_idx = ((($$0286373)) + 7|0);
      HEAP8[$$sroa$8185$0$$sroa_idx>>0] = 0;
      $32 = (_good_automove($0,$15,$16)|0);
      if ($32) {
       break;
      } else {
       $$3289$ph = $22;
      }
     } else {
      $$3289$ph = $$0286373;
     }
    }
    $47 = (($$0295372) + 1)|0;
    $48 = ($47>>>0)<($5>>>0);
    if ($48) {
     $$0286373 = $$3289$ph;$$0295372 = $47;
    } else {
     $$0286$lcssa = $$3289$ph;
     break L1;
    }
   }
   HEAP8[$1>>0] = 1;
   $33 = $22;
   $34 = $4;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(8);
   if ($36) {
    $$8 = 1;
    return ($$8|0);
   }
   $37 = $$0286373;
   $38 = $37;
   $39 = HEAPU8[$38>>0]|(HEAPU8[$38+1>>0]<<8)|(HEAPU8[$38+2>>0]<<16)|(HEAPU8[$38+3>>0]<<24);
   $40 = (($37) + 4)|0;
   $41 = $40;
   $42 = HEAPU8[$41>>0]|(HEAPU8[$41+1>>0]<<8)|(HEAPU8[$41+2>>0]<<16)|(HEAPU8[$41+3>>0]<<24);
   $43 = $4;
   $44 = $43;
   HEAP8[$44>>0]=$39&255;HEAP8[$44+1>>0]=($39>>8)&255;HEAP8[$44+2>>0]=($39>>16)&255;HEAP8[$44+3>>0]=$39>>24;
   $45 = (($43) + 4)|0;
   $46 = $45;
   HEAP8[$46>>0]=$42&255;HEAP8[$46+1>>0]=($42>>8)&255;HEAP8[$46+2>>0]=($42>>16)&255;HEAP8[$46+3>>0]=$42>>24;
   $$8 = 1;
   return ($$8|0);
  }
 } while(0);
 $49 = $$sroa$0232$0$copyload&255;
 $50 = ($$sroa$0232$0$copyload<<24>>24)==(0);
 L18: do {
  if ($50) {
   $$5291$lcssa = $$0286$lcssa;
  } else {
   $$0303365 = 0;$$5291366 = $$0286$lcssa;
   while(1) {
    $51 = (((($0)) + 860|0) + ($$0303365)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = ($52<<24>>24)==(0);
    if ($54) {
     $$8294$ph = $$5291366;
    } else {
     $55 = $53 & 3;
     $56 = (2)?($53 >>> 2):($53);
     $57 = (((($0)) + 868|0) + ($55)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = (($59) + 1)|0;
     $61 = ($56|0)==($60|0);
     if ($61) {
      $62 = ((($$5291366)) + 8|0);
      $63 = $$0303365&255;
      $64 = $55&255;
      HEAP8[$$5291366>>0] = $52;
      $$sroa$2155$0$$sroa_idx = ((($$5291366)) + 1|0);
      HEAP8[$$sroa$2155$0$$sroa_idx>>0] = $63;
      $$sroa$3156$0$$sroa_idx = ((($$5291366)) + 2|0);
      HEAP8[$$sroa$3156$0$$sroa_idx>>0] = $64;
      $$sroa$4157$0$$sroa_idx = ((($$5291366)) + 3|0);
      HEAP8[$$sroa$4157$0$$sroa_idx>>0] = 2;
      $$sroa$5158$0$$sroa_idx = ((($$5291366)) + 4|0);
      HEAP8[$$sroa$5158$0$$sroa_idx>>0] = 1;
      $$sroa$6159$0$$sroa_idx = ((($$5291366)) + 5|0);
      HEAP8[$$sroa$6159$0$$sroa_idx>>0] = 0;
      $$sroa$7160$0$$sroa_idx = ((($$5291366)) + 6|0);
      HEAP8[$$sroa$7160$0$$sroa_idx>>0] = 0;
      $$sroa$8161$0$$sroa_idx = ((($$5291366)) + 7|0);
      HEAP8[$$sroa$8161$0$$sroa_idx>>0] = 0;
      $65 = (_good_automove($0,$55,$56)|0);
      if ($65) {
       break;
      } else {
       $$8294$ph = $62;
      }
     } else {
      $$8294$ph = $$5291366;
     }
    }
    $80 = (($$0303365) + 1)|0;
    $81 = ($80>>>0)<($49>>>0);
    if ($81) {
     $$0303365 = $80;$$5291366 = $$8294$ph;
    } else {
     $$5291$lcssa = $$8294$ph;
     break L18;
    }
   }
   HEAP8[$1>>0] = 1;
   $66 = $62;
   $67 = $4;
   $68 = (($66) - ($67))|0;
   $69 = ($68|0)==(8);
   if ($69) {
    $$8 = 1;
    return ($$8|0);
   }
   $70 = $$5291366;
   $71 = $70;
   $72 = HEAPU8[$71>>0]|(HEAPU8[$71+1>>0]<<8)|(HEAPU8[$71+2>>0]<<16)|(HEAPU8[$71+3>>0]<<24);
   $73 = (($70) + 4)|0;
   $74 = $73;
   $75 = HEAPU8[$74>>0]|(HEAPU8[$74+1>>0]<<8)|(HEAPU8[$74+2>>0]<<16)|(HEAPU8[$74+3>>0]<<24);
   $76 = $4;
   $77 = $76;
   HEAP8[$77>>0]=$72&255;HEAP8[$77+1>>0]=($72>>8)&255;HEAP8[$77+2>>0]=($72>>16)&255;HEAP8[$77+3>>0]=$72>>24;
   $78 = (($76) + 4)|0;
   $79 = $78;
   HEAP8[$79>>0]=$75&255;HEAP8[$79+1>>0]=($75>>8)&255;HEAP8[$79+2>>0]=($75>>16)&255;HEAP8[$79+3>>0]=$75>>24;
   $$8 = 1;
   return ($$8|0);
  }
 } while(0);
 HEAP8[$1>>0] = 0;
 $82 = $$5291$lcssa;
 $83 = $4;
 $84 = (($82) - ($83))|0;
 $85 = (3)?($84 >> 3):($84);
 HEAP32[$2>>2] = $85;
 $86 = ((($3)) + 3|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87 & 12;
 $89 = ($88<<24>>24)!=(4);
 $90 = (_calc_empty_col_idx($0,$5)|0);
 $91 = ($90|0)>(-1);
 $92 = ($$sroa$7236$0$copyload<<24>>24)!=(0);
 $or$cond = $91 & $92;
 if ($or$cond) {
  $93 = $90&255;
  $94 = ((($0)) + 2812|0);
  $$0304360 = 0;$$10361 = $$5291$lcssa;
  while(1) {
   $95 = (((($0)) + 820|0) + ($$0304360<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = ($97&255)>(1);
   if ($99) {
    $100 = (($96) + ($98)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = (_fcs_pats_is_king_only($89,$101)|0);
    if ($102) {
     $103 = ((($$10361)) + 8|0);
     $104 = $$0304360&255;
     $105 = (($98) + -1)|0;
     $106 = (($96) + ($105)|0);
     $107 = HEAP8[$106>>0]|0;
     $108 = HEAP32[$94>>2]|0;
     $109 = $108&255;
     HEAP8[$$10361>>0] = $101;
     $$sroa$2120$0$$sroa_idx = ((($$10361)) + 1|0);
     HEAP8[$$sroa$2120$0$$sroa_idx>>0] = $104;
     $$sroa$3121$0$$sroa_idx = ((($$10361)) + 2|0);
     HEAP8[$$sroa$3121$0$$sroa_idx>>0] = $93;
     $$sroa$4122$0$$sroa_idx = ((($$10361)) + 3|0);
     HEAP8[$$sroa$4122$0$$sroa_idx>>0] = 3;
     $$sroa$5123$0$$sroa_idx = ((($$10361)) + 4|0);
     HEAP8[$$sroa$5123$0$$sroa_idx>>0] = 3;
     $$sroa$6124$0$$sroa_idx = ((($$10361)) + 5|0);
     HEAP8[$$sroa$6124$0$$sroa_idx>>0] = $107;
     $$sroa$7125$0$$sroa_idx = ((($$10361)) + 6|0);
     HEAP8[$$sroa$7125$0$$sroa_idx>>0] = 0;
     $$sroa$8126$0$$sroa_idx = ((($$10361)) + 7|0);
     HEAP8[$$sroa$8126$0$$sroa_idx>>0] = $109;
     $$12 = $103;
    } else {
     $$12 = $$10361;
    }
   } else {
    $$12 = $$10361;
   }
   $110 = (($$0304360) + 1)|0;
   $exitcond390 = ($110|0)==($5|0);
   if ($exitcond390) {
    $$13 = $$12;
    break;
   } else {
    $$0304360 = $110;$$10361 = $$12;
   }
  }
 } else {
  $$13 = $$5291$lcssa;
 }
 $111 = ((($3)) + 4|0);
 $112 = HEAP8[$111>>0]|0;
 $113 = ((($3)) + 5|0);
 $114 = HEAP8[$113>>0]|0;
 $115 = ($$sroa$7236$0$copyload<<24>>24)==(0);
 if ($115) {
  $$14$lcssa = $$13;
 } else {
  $116 = ((($0)) + 2816|0);
  $$0305354 = 0;$$14355 = $$13;
  while(1) {
   $120 = (((($0)) + 820|0) + ($$0305354<<2)|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = ($122<<24>>24)==(0);
   if ($124) {
    $$19 = $$14355;
   } else {
    $125 = (($121) + ($123)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = (2)?($127 >>> 2):($127);
    $129 = $$0305354&255;
    $130 = ($122<<24>>24)==(1);
    $131 = (($123) + -1)|0;
    $132 = (($121) + ($131)|0);
    $$0306349 = 0;$$15350 = $$14355;
    while(1) {
     $133 = ($$0305354|0)==($$0306349|0);
     if ($133) {
      $$18 = $$15350;
     } else {
      $134 = (((($0)) + 820|0) + ($$0306349<<2)|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = HEAP8[$135>>0]|0;
      $137 = ($136<<24>>24)==(0);
      if ($137) {
       $$18 = $$15350;
      } else {
       $138 = $136&255;
       $139 = (($135) + ($138)|0);
       $140 = HEAP8[$139>>0]|0;
       $141 = $140&255;
       $142 = (2)?($141 >>> 2):($141);
       $143 = (($142) + -1)|0;
       $144 = ($128|0)==($143|0);
       if ($144) {
        $145 = (_fcs_pats_is_suitable($126,$140,$112,$114)|0);
        if ($145) {
         $146 = ((($$15350)) + 8|0);
         $147 = $$0306349&255;
         if ($130) {
          $151 = 0;
         } else {
          $148 = HEAP8[$132>>0]|0;
          $149 = $148&255;
          $151 = $149;
         }
         $150 = $151&255;
         $152 = HEAP32[$116>>2]|0;
         $153 = $152&255;
         HEAP8[$$15350>>0] = $126;
         $$sroa$272$0$$sroa_idx = ((($$15350)) + 1|0);
         HEAP8[$$sroa$272$0$$sroa_idx>>0] = $129;
         $$sroa$373$0$$sroa_idx = ((($$15350)) + 2|0);
         HEAP8[$$sroa$373$0$$sroa_idx>>0] = $147;
         $$sroa$474$0$$sroa_idx = ((($$15350)) + 3|0);
         HEAP8[$$sroa$474$0$$sroa_idx>>0] = 3;
         $$sroa$575$0$$sroa_idx = ((($$15350)) + 4|0);
         HEAP8[$$sroa$575$0$$sroa_idx>>0] = 3;
         $$sroa$676$0$$sroa_idx = ((($$15350)) + 5|0);
         HEAP8[$$sroa$676$0$$sroa_idx>>0] = $150;
         $$sroa$777$0$$sroa_idx = ((($$15350)) + 6|0);
         HEAP8[$$sroa$777$0$$sroa_idx>>0] = $140;
         $$sroa$878$0$$sroa_idx = ((($$15350)) + 7|0);
         HEAP8[$$sroa$878$0$$sroa_idx>>0] = $153;
         $$18 = $146;
        } else {
         $$18 = $$15350;
        }
       } else {
        $$18 = $$15350;
       }
      }
     }
     $154 = (($$0306349) + 1)|0;
     $exitcond388 = ($154|0)==($5|0);
     if ($exitcond388) {
      $$19 = $$18;
      break;
     } else {
      $$0306349 = $154;$$15350 = $$18;
     }
    }
   }
   $155 = (($$0305354) + 1)|0;
   $exitcond389 = ($155|0)==($5|0);
   if ($exitcond389) {
    $$14$lcssa = $$19;
    break;
   } else {
    $$0305354 = $155;$$14355 = $$19;
   }
  }
 }
 $117 = ($$sroa$0232$0$copyload<<24>>24)==(0);
 L60: do {
  if ($117) {
   $$30 = $$14$lcssa;
  } else {
   $118 = ($$sroa$7236$0$copyload<<24>>24)==(0);
   $119 = ((($0)) + 2820|0);
   $$0307345 = 0;$$20346 = $$14$lcssa;
   while(1) {
    $157 = (((($0)) + 860|0) + ($$0307345)|0);
    $158 = HEAP8[$157>>0]|0;
    $159 = ($158<<24>>24)==(0);
    $brmerge = $159 | $118;
    if ($brmerge) {
     $$24 = $$20346;
    } else {
     $160 = $158&255;
     $161 = (2)?($160 >>> 2):($160);
     $162 = $$0307345&255;
     $$0308341 = 0;$$21342 = $$20346;
     while(1) {
      $163 = (((($0)) + 820|0) + ($$0308341<<2)|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = HEAP8[$164>>0]|0;
      $166 = ($165<<24>>24)==(0);
      if ($166) {
       $$23 = $$21342;
      } else {
       $167 = $165&255;
       $168 = (($164) + ($167)|0);
       $169 = HEAP8[$168>>0]|0;
       $170 = $169&255;
       $171 = (2)?($170 >>> 2):($170);
       $172 = (($171) + -1)|0;
       $173 = ($161|0)==($172|0);
       if ($173) {
        $174 = (_fcs_pats_is_suitable($158,$169,$112,$114)|0);
        if ($174) {
         $175 = ((($$21342)) + 8|0);
         $176 = $$0308341&255;
         $177 = HEAP32[$119>>2]|0;
         $178 = $177&255;
         HEAP8[$$21342>>0] = $158;
         $$sroa$240$0$$sroa_idx = ((($$21342)) + 1|0);
         HEAP8[$$sroa$240$0$$sroa_idx>>0] = $162;
         $$sroa$341$0$$sroa_idx = ((($$21342)) + 2|0);
         HEAP8[$$sroa$341$0$$sroa_idx>>0] = $176;
         $$sroa$442$0$$sroa_idx = ((($$21342)) + 3|0);
         HEAP8[$$sroa$442$0$$sroa_idx>>0] = 2;
         $$sroa$543$0$$sroa_idx = ((($$21342)) + 4|0);
         HEAP8[$$sroa$543$0$$sroa_idx>>0] = 3;
         $$sroa$644$0$$sroa_idx = ((($$21342)) + 5|0);
         HEAP8[$$sroa$644$0$$sroa_idx>>0] = 0;
         $$sroa$745$0$$sroa_idx = ((($$21342)) + 6|0);
         HEAP8[$$sroa$745$0$$sroa_idx>>0] = $169;
         $$sroa$846$0$$sroa_idx = ((($$21342)) + 7|0);
         HEAP8[$$sroa$846$0$$sroa_idx>>0] = $178;
         $$23 = $175;
        } else {
         $$23 = $$21342;
        }
       } else {
        $$23 = $$21342;
       }
      }
      $179 = (($$0308341) + 1)|0;
      $exitcond386 = ($179|0)==($5|0);
      if ($exitcond386) {
       $$24 = $$23;
       break;
      } else {
       $$0308341 = $179;$$21342 = $$23;
      }
     }
    }
    $180 = (($$0307345) + 1)|0;
    $exitcond387 = ($180|0)==($49|0);
    if ($exitcond387) {
     break;
    } else {
     $$0307345 = $180;$$20346 = $$24;
    }
   }
   $156 = ($$sroa$0232$0$copyload<<24>>24)!=(0);
   $or$cond379 = $91 & $156;
   if ($or$cond379) {
    $181 = $90&255;
    $182 = ((($0)) + 2824|0);
    $$0311337 = 0;$$25338 = $$24;
    while(1) {
     $183 = (((($0)) + 860|0) + ($$0311337)|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = ($184<<24>>24)==(0);
     if ($185) {
      $$26 = $$25338;
     } else {
      $186 = (_fcs_pats_is_king_only($89,$184)|0);
      if ($186) {
       $187 = ((($$25338)) + 8|0);
       $188 = $$0311337&255;
       $189 = HEAP32[$182>>2]|0;
       $190 = $189&255;
       HEAP8[$$25338>>0] = $184;
       $$sroa$223$0$$sroa_idx = ((($$25338)) + 1|0);
       HEAP8[$$sroa$223$0$$sroa_idx>>0] = $188;
       $$sroa$324$0$$sroa_idx = ((($$25338)) + 2|0);
       HEAP8[$$sroa$324$0$$sroa_idx>>0] = $181;
       $$sroa$425$0$$sroa_idx = ((($$25338)) + 3|0);
       HEAP8[$$sroa$425$0$$sroa_idx>>0] = 2;
       $$sroa$526$0$$sroa_idx = ((($$25338)) + 4|0);
       HEAP8[$$sroa$526$0$$sroa_idx>>0] = 3;
       $$sroa$627$0$$sroa_idx = ((($$25338)) + 5|0);
       HEAP8[$$sroa$627$0$$sroa_idx>>0] = 0;
       $$sroa$728$0$$sroa_idx = ((($$25338)) + 6|0);
       HEAP8[$$sroa$728$0$$sroa_idx>>0] = 0;
       $$sroa$829$0$$sroa_idx = ((($$25338)) + 7|0);
       HEAP8[$$sroa$829$0$$sroa_idx>>0] = $190;
       $$26 = $187;
      } else {
       $$26 = $$25338;
      }
     }
     $191 = (($$0311337) + 1)|0;
     $exitcond385 = ($191|0)==($49|0);
     if ($exitcond385) {
      $$27 = $$26;
      break;
     } else {
      $$0311337 = $191;$$25338 = $$26;
     }
    }
   } else {
    $$27 = $$24;
   }
   $192 = ($$sroa$0232$0$copyload<<24>>24)==(0);
   if ($192) {
    $$30 = $$27;
   } else {
    $$0310335 = 0;
    while(1) {
     $193 = (((($0)) + 860|0) + ($$0310335)|0);
     $194 = HEAP8[$193>>0]|0;
     $195 = ($194<<24>>24)==(0);
     if ($195) {
      break;
     }
     $218 = (($$0310335) + 1)|0;
     $219 = ($218>>>0)<($49>>>0);
     if ($219) {
      $$0310335 = $218;
     } else {
      $$30 = $$27;
      break L60;
     }
    }
    $196 = ($$sroa$7236$0$copyload<<24>>24)==(0);
    if ($196) {
     $$30 = $$27;
    } else {
     $197 = $$0310335&255;
     $198 = ((($0)) + 2828|0);
     $$0309333 = 0;$$28334 = $$27;
     while(1) {
      $199 = (((($0)) + 820|0) + ($$0309333<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = HEAP8[$200>>0]|0;
      $202 = $201&255;
      $203 = ($201<<24>>24)==(0);
      if ($203) {
       $$29 = $$28334;
      } else {
       $204 = ((($$28334)) + 8|0);
       $205 = (($200) + ($202)|0);
       $206 = HEAP8[$205>>0]|0;
       $207 = $$0309333&255;
       $208 = ($201<<24>>24)==(1);
       if ($208) {
        $214 = 0;
       } else {
        $209 = (($202) + -1)|0;
        $210 = (($200) + ($209)|0);
        $211 = HEAP8[$210>>0]|0;
        $212 = $211&255;
        $214 = $212;
       }
       $213 = $214&255;
       $215 = HEAP32[$198>>2]|0;
       $216 = $215&255;
       HEAP8[$$28334>>0] = $206;
       $$sroa$2$0$$sroa_idx = ((($$28334)) + 1|0);
       HEAP8[$$sroa$2$0$$sroa_idx>>0] = $207;
       $$sroa$3$0$$sroa_idx = ((($$28334)) + 2|0);
       HEAP8[$$sroa$3$0$$sroa_idx>>0] = $197;
       $$sroa$4$0$$sroa_idx = ((($$28334)) + 3|0);
       HEAP8[$$sroa$4$0$$sroa_idx>>0] = 3;
       $$sroa$5$0$$sroa_idx = ((($$28334)) + 4|0);
       HEAP8[$$sroa$5$0$$sroa_idx>>0] = 2;
       $$sroa$6$0$$sroa_idx = ((($$28334)) + 5|0);
       HEAP8[$$sroa$6$0$$sroa_idx>>0] = $213;
       $$sroa$7$0$$sroa_idx = ((($$28334)) + 6|0);
       HEAP8[$$sroa$7$0$$sroa_idx>>0] = 0;
       $$sroa$8$0$$sroa_idx = ((($$28334)) + 7|0);
       HEAP8[$$sroa$8$0$$sroa_idx>>0] = $216;
       $$29 = $204;
      }
      $217 = (($$0309333) + 1)|0;
      $exitcond = ($217|0)==($5|0);
      if ($exitcond) {
       $$30 = $$29;
       break;
      } else {
       $$0309333 = $217;$$28334 = $$29;
      }
     }
    }
   }
  }
 } while(0);
 $220 = $$30;
 $221 = (($220) - ($83))|0;
 $222 = (3)?($221 >> 3):($221);
 $$8 = $222;
 return ($$8|0);
}
function _prune_seahaven($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$05871 = 0, $$06276 = 0, $$064 = 0, $$064$in75 = 0, $$172 = 0, $$2 = 0, $$6 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond2$demorgan = 0, $narrow = 0, $or$cond = 0, $or$cond67 = 0, $spec$select = 0, $spec$select70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $$sroa$0$0$copyload = HEAP8[$2>>0]|0;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 15;
 $6 = ($5<<24>>24)==(5);
 if (!($6)) {
  $$6 = 0;
  return ($$6|0);
 }
 $7 = ((($1)) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(3);
 if (!($9)) {
  $$6 = 0;
  return ($$6|0);
 }
 $10 = HEAP8[$1>>0]|0;
 $11 = $10&255;
 $12 = (2)?($11 >>> 2):($11);
 $13 = (($12) + 1)|0;
 $14 = $11 & 3;
 $15 = ((($1)) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = (((($0)) + 820|0) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $$6 = 0;
  return ($$6|0);
 }
 $$06276 = 0;$$064$in75 = $21;
 while(1) {
  $$064 = (($$064$in75) + -1)|0;
  $26 = (($19) + ($$064$in75)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $28 & 3;
  $30 = ($29|0)==($14|0);
  $31 = (2)?($28 >>> 2):($28);
  $32 = (($13) + ($$06276))|0;
  $33 = ($31|0)==($32|0);
  $narrow = $30 & $33;
  $spec$select = $narrow&1;
  $spec$select70 = (($$06276) + ($spec$select))|0;
  $34 = ($$064$in75|0)>(1);
  if ($34) {
   $$06276 = $spec$select70;$$064$in75 = $$064;
  } else {
   break;
  }
 }
 $23 = $$sroa$0$0$copyload&255;
 $24 = ($spec$select70>>>0)>($23>>>0);
 $25 = ($20<<24>>24)!=(0);
 $or$cond = $24 & $25;
 if (!($or$cond)) {
  $$6 = 0;
  return ($$6|0);
 }
 $$05871 = 0;$$172 = 0;
 while(1) {
  $35 = (($$05871) + 1)|0;
  $37 = (($19) + ($35)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $39 & 3;
  $41 = ($40|0)==($14|0);
  $42 = (2)?($39 >>> 2):($39);
  $43 = ($42>>>0)<($12>>>0);
  $or$cond67 = $41 & $43;
  $$2 = $or$cond67 ? 1 : $$172;
  $cond2$demorgan = $41 & $43;
  if ($cond2$demorgan) {
   $$6 = $$2;
   label = 10;
   break;
  }
  $36 = ($35>>>0)<($21>>>0);
  if ($36) {
   $$05871 = $35;$$172 = $$2;
  } else {
   $$6 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$6|0);
 }
 return (0)|0;
}
function _prune_redundant($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 22|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  return 0;
 } else {
  $6 = ((($2)) + 12|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = HEAP8[$1>>0]|0;
  $9 = ($7<<24>>24)==($8<<24>>24);
  $spec$select = $9&1;
  return ($spec$select|0);
 }
 return (0)|0;
}
function _mark_irreversible($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ((($2)) + 5|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ((($2)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 12;
 $10 = ($9<<24>>24)==(4);
 $11 = ((($0)) + 2832|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (((($0)) + 2276|0) + ($1<<3)|0);
 $14 = ($1|0)>(0);
 if (!($14)) {
  return;
 }
 $15 = ((($0)) + 2276|0);
 $$023 = $15;
 while(1) {
  $16 = (_is_irreversible_move($4,$6,$10,$$023)|0);
  if ($16) {
   $17 = ((($$023)) + 7|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = (($12) + ($19))|0;
   $21 = $20&255;
   HEAP8[$17>>0] = $21;
  }
  $22 = ((($$023)) + 8|0);
  $23 = ($22>>>0)<($13>>>0);
  if ($23) {
   $$023 = $22;
  } else {
   break;
  }
 }
 return;
}
function _is_win($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 868|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(13);
 if (!($3)) {
  return 0;
 }
 $4 = ((($0)) + 869|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(13);
 if (!($6)) {
  return 0;
 }
 $7 = ((($0)) + 870|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(13);
 if ($9) {
  $10 = ((($0)) + 871|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)==(13);
  return ($12|0);
 } else {
  return 0;
 }
 return (0)|0;
}
function _win($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02831 = 0, $$029 = 0, $$030 = 0, $$032 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 37668|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _free($3);
  HEAP32[$2>>2] = 0;
 }
 $$029 = 0;$$030 = $1;
 while(1) {
  $5 = ((($$030)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  $8 = (($$029) + 1)|0;
  if ($7) {
   break;
  } else {
   $$029 = $8;$$030 = $6;
  }
 }
 $9 = $$029 << 3;
 $10 = (_malloc($9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  return;
 }
 $12 = ((($1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = (($10) + ($$029<<3)|0);
  $$02831 = $15;$$032 = $1;$30 = $12;
  while(1) {
   $17 = ((($$02831)) + -8|0);
   $18 = ((($$032)) + 12|0);
   $19 = $18;
   $20 = $19;
   $21 = HEAPU8[$20>>0]|(HEAPU8[$20+1>>0]<<8)|(HEAPU8[$20+2>>0]<<16)|(HEAPU8[$20+3>>0]<<24);
   $22 = (($19) + 4)|0;
   $23 = $22;
   $24 = HEAPU8[$23>>0]|(HEAPU8[$23+1>>0]<<8)|(HEAPU8[$23+2>>0]<<16)|(HEAPU8[$23+3>>0]<<24);
   $25 = $17;
   $26 = $25;
   HEAP8[$26>>0]=$21&255;HEAP8[$26+1>>0]=($21>>8)&255;HEAP8[$26+2>>0]=($21>>16)&255;HEAP8[$26+3>>0]=$21>>24;
   $27 = (($25) + 4)|0;
   $28 = $27;
   HEAP8[$28>>0]=$24&255;HEAP8[$28+1>>0]=($24>>8)&255;HEAP8[$28+2>>0]=($24>>16)&255;HEAP8[$28+3>>0]=$24>>24;
   $29 = HEAP32[$30>>2]|0;
   $31 = ((($29)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0|0);
   if ($33) {
    break;
   } else {
    $$02831 = $17;$$032 = $29;$30 = $31;
   }
  }
 }
 HEAP32[$2>>2] = $10;
 $16 = ((($0)) + 37672|0);
 HEAP32[$16>>2] = $$029;
 return;
}
function _prioritize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0101121 = 0, $$0102136 = 0, $$0103125 = 0, $$0104135 = 0, $$0109130 = 0, $$0122 = 0, $$1$lcssa = 0, $$1131 = 0, $$2 = 0, $$5 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, $exitcond144 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $4 = sp + 32|0;
 $5 = HEAP32[$0>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($5)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 ;HEAP32[$3>>2]=4294967295|0;HEAP32[$3+4>>2]=4294967295|0;HEAP32[$3+8>>2]=4294967295|0;HEAP32[$3+12>>2]=4294967295|0;HEAP32[$3+16>>2]=4294967295|0;HEAP32[$3+20>>2]=4294967295|0;HEAP32[$3+24>>2]=4294967295|0;HEAP32[$3+28>>2]=4294967295|0;
 HEAP8[$4>>0] = 0;
 $6 = ((($0)) + 868|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(13);
 if (!($8)) {
  $9 = $7&255;
  $10 = (($9) + 1)|0;
  $11 = (_fcs_make_card_370($10,0)|0);
  HEAP8[$4>>0] = $11;
 }
 $12 = ((($4)) + 1|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($0)) + 869|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(13);
 if (!($15)) {
  $101 = $14&255;
  $102 = (($101) + 1)|0;
  $103 = (_fcs_make_card_370($102,1)|0);
  HEAP8[$12>>0] = $103;
 }
 $104 = ((($4)) + 2|0);
 HEAP8[$104>>0] = 0;
 $105 = ((($0)) + 870|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = ($106<<24>>24)==(13);
 if (!($107)) {
  $108 = $106&255;
  $109 = (($108) + 1)|0;
  $110 = (_fcs_make_card_370($109,2)|0);
  HEAP8[$104>>0] = $110;
 }
 $111 = ((($4)) + 3|0);
 HEAP8[$111>>0] = 0;
 $112 = ((($0)) + 871|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = ($113<<24>>24)==(13);
 if (!($114)) {
  $115 = $113&255;
  $116 = (($115) + 1)|0;
  $117 = (_fcs_make_card_370($116,3)|0);
  HEAP8[$111>>0] = $117;
 }
 $38 = $$sroa$3$0$copyload&255;
 $118 = ($$sroa$3$0$copyload<<24>>24)==(0);
 L13: do {
  if ($118) {
   $$5 = 0;
  } else {
   $$0102136 = 0;$$0104135 = 0;
   while(1) {
    $16 = (((($0)) + 820|0) + ($$0104135<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $$0102136;
    } else {
     $$0109130 = 0;$$1131 = $$0102136;
     while(1) {
      $21 = (($$0109130) + 1)|0;
      $22 = (($17) + ($21)|0);
      $23 = HEAP8[$22>>0]|0;
      $24 = $23 & 3;
      $25 = $24&255;
      $26 = (($4) + ($25)|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = ($27<<24>>24)==(0);
      do {
       if ($28) {
        $$2 = $$1131;
       } else {
        $29 = ($23<<24>>24)==($27<<24>>24);
        if (!($29)) {
         $30 = (_fcs_pats_next_card($27)|0);
         $31 = ($23<<24>>24)==($30<<24>>24);
         if (!($31)) {
          $$2 = $$1131;
          break;
         }
        }
        $32 = (($$1131) + 1)|0;
        $33 = (($3) + ($$1131<<2)|0);
        HEAP32[$33>>2] = $$0104135;
        $34 = ($32|0)==(8);
        if ($34) {
         $$5 = 8;
         break L13;
        } else {
         $$2 = $32;
        }
       }
      } while(0);
      $35 = ($21>>>0)<($19>>>0);
      if ($35) {
       $$0109130 = $21;$$1131 = $$2;
      } else {
       $$1$lcssa = $$2;
       break;
      }
     }
    }
    $36 = (($$0104135) + 1)|0;
    $37 = ($36>>>0)<($38>>>0);
    if ($37) {
     $$0102136 = $$1$lcssa;$$0104135 = $36;
    } else {
     $$5 = $$1$lcssa;
     break;
    }
   }
  }
 } while(0);
 $39 = (($1) + ($2<<3)|0);
 $40 = ($2|0)>(0);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $41 = ($$5|0)>(0);
 $42 = ((($0)) + 2800|0);
 $43 = ($$5|0)<(1);
 $44 = ((($0)) + 2808|0);
 $45 = ((($0)) + 2804|0);
 $$0103125 = $1;
 while(1) {
  $46 = HEAP8[$$0103125>>0]|0;
  $47 = ($46<<24>>24)==(0);
  if (!($47)) {
   $48 = ((($$0103125)) + 3|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = ($49<<24>>24)==(3);
   if ($50) {
    $51 = ((($$0103125)) + 1|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    if ($41) {
     $54 = ((($$0103125)) + 7|0);
     $$0101121 = 0;
     while(1) {
      $59 = (($3) + ($$0101121<<2)|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==($53|0);
      if ($61) {
       $62 = HEAP32[$42>>2]|0;
       $63 = HEAP8[$54>>0]|0;
       $64 = $63&255;
       $65 = (($62) + ($64))|0;
       $66 = $65&255;
       HEAP8[$54>>0] = $66;
      }
      $67 = (($$0101121) + 1)|0;
      $exitcond = ($67|0)==($$5|0);
      if ($exitcond) {
       break;
      } else {
       $$0101121 = $67;
      }
     }
    }
    $55 = (((($0)) + 820|0) + ($53<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP8[$56>>0]|0;
    $58 = ($57&255)>(1);
    if ($58) {
     $68 = $57&255;
     $69 = (($68) + -1)|0;
     $70 = (($56) + ($69)|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71 & 3;
     $73 = $72&255;
     $74 = (($4) + ($73)|0);
     $75 = HEAP8[$74>>0]|0;
     $76 = ($71<<24>>24)==($75<<24>>24);
     if ($76) {
      $77 = HEAP32[$45>>2]|0;
      $78 = ((($$0103125)) + 7|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = $79&255;
      $81 = (($77) + ($80))|0;
      $82 = $81&255;
      HEAP8[$78>>0] = $82;
     }
    }
   }
   $83 = ((($$0103125)) + 4|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = ($84<<24>>24)!=(3);
   $brmerge = $85 | $43;
   if (!($brmerge)) {
    $86 = ((($$0103125)) + 2|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&255;
    $89 = ((($$0103125)) + 7|0);
    $$0122 = 0;
    while(1) {
     $90 = (($3) + ($$0122<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==($88|0);
     if ($92) {
      $93 = HEAP32[$44>>2]|0;
      $94 = HEAP8[$89>>0]|0;
      $95 = $94&255;
      $96 = (($95) - ($93))|0;
      $97 = $96&255;
      HEAP8[$89>>0] = $97;
     }
     $98 = (($$0122) + 1)|0;
     $exitcond144 = ($98|0)==($$5|0);
     if ($exitcond144) {
      break;
     } else {
      $$0122 = $98;
     }
    }
   }
  }
  $99 = ((($$0103125)) + 8|0);
  $100 = ($99>>>0)<($39>>>0);
  if ($100) {
   $$0103125 = $99;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_pats__malloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<($1>>>0);
 if ($4) {
  $5 = ((($0)) + 35656|0);
  HEAP32[$5>>2] = -1;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = (_malloc($1)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = ((($0)) + 35656|0);
  HEAP32[$8>>2] = -1;
  $$1 = 0;
  return ($$1|0);
 } else {
  $9 = (($3) - ($1))|0;
  HEAP32[$2>>2] = $9;
  $$1 = $6;
  return ($$1|0);
 }
 return (0)|0;
}
function _fcs_make_card_370($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 << 2;
 $3 = $2 | $1;
 $4 = $3&255;
 return ($4|0);
}
function _fcs_pats_next_card($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 $2 = (($1) + 4)|0;
 $3 = $2&255;
 return ($3|0);
}
function _is_irreversible_move($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($3)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(1);
 if ($6) {
  $$3 = 1;
  return ($$3|0);
 }
 $7 = ((($3)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(3);
 if (!($9)) {
  $$3 = 0;
  return ($$3|0);
 }
 $10 = ((($3)) + 5|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  if (!($2)) {
   $$3 = 0;
   return ($$3|0);
  }
  $21 = HEAP8[$3>>0]|0;
  $22 = (_fcs_make_card_370(13,0)|0);
  $23 = ($21<<24>>24)==($22<<24>>24);
  if ($23) {
   $$3 = 0;
   return ($$3|0);
  }
 } else {
  $13 = $11&255;
  $14 = HEAP8[$3>>0]|0;
  $15 = $14&255;
  $16 = (2)?($15 >>> 2):($15);
  $17 = (2)?($13 >>> 2):($13);
  $18 = (($17) + -1)|0;
  $19 = ($16|0)==($18|0);
  if ($19) {
   $20 = (_fcs_pats_is_suitable($14,$11,$0,$1)|0);
   if ($20) {
    $$3 = 0;
    return ($$3|0);
   }
  }
 }
 $$3 = 1;
 return ($$3|0);
}
function _fcs_pats_is_suitable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1 ^ $0;
 $5 = $4 & $2;
 $6 = ($5<<24>>24)==($3<<24>>24);
 return ($6|0);
}
function _good_automove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02735 = 0, $$034 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 3;
 $7 = ($6<<24>>24)==(1);
 $8 = ($2|0)<(3);
 $or$cond = $8 | $7;
 if ($or$cond) {
  $32 = 1;
  return ($32|0);
 }
 $9 = $1 & 1;
 $10 = $9 ^ 1;
 $11 = (($2) + -1)|0;
 $$02735 = $10;
 while(1) {
  $14 = (((($0)) + 868|0) + ($$02735)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($11|0)>($16|0);
  $12 = (($$02735) + 2)|0;
  if ($17) {
   break;
  }
  $13 = ($12>>>0)<(4);
  if ($13) {
   $$02735 = $12;
  } else {
   $32 = 1;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($32|0);
 }
 $18 = (($2) + -2)|0;
 $$034 = $10;
 while(1) {
  $21 = (((($0)) + 868|0) + ($$034)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($18|0)>($23|0);
  $19 = (($$034) + 2)|0;
  if ($24) {
   $32 = 0;
   label = 9;
   break;
  }
  $20 = ($19>>>0)<(4);
  if ($20) {
   $$034 = $19;
  } else {
   break;
  }
 }
 if ((label|0) == 9) {
  return ($32|0);
 }
 $25 = (($1) + 2)|0;
 $26 = $25 & 3;
 $27 = (((($0)) + 868|0) + ($26)|0);
 $28 = (($2) + -3)|0;
 $29 = HEAP8[$27>>0]|0;
 $30 = $29&255;
 $31 = ($28|0)<=($30|0);
 $32 = $31;
 return ($32|0);
}
function _calc_empty_col_idx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$079 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $9 = -1;
  return ($9|0);
 }
 $$079 = 0;
 while(1) {
  $3 = (((($0)) + 820|0) + ($$079<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $9 = $$079;
   label = 5;
   break;
  }
  $7 = (($$079) + 1)|0;
  $8 = ($7|0)<($1|0);
  if ($8) {
   $$079 = $7;
  } else {
   $9 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($9|0);
 }
 return (0)|0;
}
function _fcs_pats_is_king_only($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & -4;
 $3 = ($2<<24>>24)==(52);
 $4 = $3 | $0;
 return ($4|0);
}
function _fc_solve_pats__sort_piles($0) {
 $0 = $0|0;
 var $$04757 = 0, $$04855 = 0, $$054 = 0, $$sink = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($1)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $2 = $$sroa$3$0$copyload&255;
 $3 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($3) {
  $4 = ((($0)) + 2156|0);
  HEAP32[$4>>2] = 0;
  return;
 }
 $$04757 = 0;
 while(1) {
  $5 = (((($0)) + 2236|0) + ($$04757<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)<(0);
  if ($7) {
   $8 = (_get_pilenum($0,$$04757)|0);
   HEAP32[$5>>2] = $8;
   $9 = ($8|0)<(0);
   if ($9) {
    label = 17;
    break;
   }
  }
  $10 = (($$04757) + 1)|0;
  $11 = ($10>>>0)<($2>>>0);
  if ($11) {
   $$04757 = $10;
  } else {
   break;
  }
 }
 if ((label|0) == 17) {
  return;
 }
 $12 = ((($0)) + 2156|0);
 HEAP32[$12>>2] = 0;
 $13 = ($$sroa$3$0$copyload&255)>(1);
 if (!($13)) {
  return;
 }
 $$04855 = 1;
 while(1) {
  $14 = (($$04855) + -1)|0;
  $15 = (((($0)) + 2156|0) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_wcmp($0,$16,$$04855)|0);
  $18 = ($17|0)<(0);
  L18: do {
   if ($18) {
    $19 = (((($0)) + 2156|0) + ($$04855<<2)|0);
    $$sink = $19;
    label = 15;
   } else {
    $$054 = $14;
    while(1) {
     $21 = (((($0)) + 2156|0) + ($$054<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($$054) + 1)|0;
     $24 = (((($0)) + 2156|0) + ($23<<2)|0);
     HEAP32[$24>>2] = $22;
     $25 = ($$054|0)==(0);
     if ($25) {
      $$sink = $21;
      label = 15;
      break L18;
     }
     $26 = (($$054) + -1)|0;
     $27 = (((($0)) + 2156|0) + ($26<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (_wcmp($0,$28,$$04855)|0);
     $30 = ($29|0)<(0);
     if ($30) {
      $$sink = $21;
      label = 15;
      break L18;
     }
     $20 = ($$054|0)>(0);
     if ($20) {
      $$054 = $26;
     } else {
      break;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   HEAP32[$$sink>>2] = $$04855;
  }
  $31 = (($$04855) + 1)|0;
  $exitcond = ($31|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$04855 = $31;
  }
 }
 return;
}
function _get_pilenum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$055 = 0, $$05559 = 0, $$05560 = 0, $$056$lcssa = 0, $$1 = 0, $$sink64 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (((($0)) + 2196|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3>>>0) % 4093)&-1;
 $5 = (((($0)) + 2876|0) + ($4<<2)|0);
 $6 = (((($0)) + 820|0) + ($1<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ((($7)) + 1|0);
 $$05559 = HEAP32[$5>>2]|0;
 $11 = ($$05559|0)==(0|0);
 L1: do {
  if ($11) {
   $$056$lcssa = 0;
   label = 6;
  } else {
   $$05560 = $$05559;
   while(1) {
    $12 = ((($$05560)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==($3|0);
    if ($14) {
     $15 = HEAP32[$$05560>>2]|0;
     $16 = (_memcmp($15,$10,$9)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      $$1 = $$05560;
      break L1;
     }
    }
    $18 = ((($$05560)) + 12|0);
    $$055 = HEAP32[$18>>2]|0;
    $19 = ($$055|0)==(0|0);
    if ($19) {
     $$056$lcssa = $$05560;
     label = 6;
     break;
    } else {
     $$05560 = $$055;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $20 = ((($0)) + 19248|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4096);
   if ($22) {
    $$0 = -1;
    return ($$0|0);
   }
   $23 = (_fc_solve_pats__malloc($0,16)|0);
   $24 = ($23|0)==(0|0);
   if ($24) {
    $$0 = -1;
    return ($$0|0);
   }
   $25 = (($9) + 1)|0;
   $26 = (_fc_solve_pats__malloc($0,$25)|0);
   HEAP32[$23>>2] = $26;
   $27 = ($26|0)==(0|0);
   if (!($27)) {
    _memcpy(($26|0),($10|0),($25|0))|0;
    $28 = HEAP32[$2>>2]|0;
    $29 = ((($23)) + 4|0);
    HEAP32[$29>>2] = $28;
    $30 = ((($23)) + 12|0);
    HEAP32[$30>>2] = 0;
    $31 = ($$056$lcssa|0)==(0|0);
    $32 = ((($$056$lcssa)) + 12|0);
    $$sink64 = $31 ? $5 : $32;
    HEAP32[$$sink64>>2] = $23;
    $33 = HEAP32[$20>>2]|0;
    $34 = (($33) + 1)|0;
    HEAP32[$20>>2] = $34;
    $35 = ((($23)) + 8|0);
    HEAP32[$35>>2] = $33;
    $36 = (((($0)) + 19252|0) + ($33<<2)|0);
    HEAP32[$36>>2] = $23;
    $$1 = $23;
    break;
   }
   _fc_solve_pats__release_373($0,$23);
   $$0 = -1;
   return ($$0|0);
  }
 } while(0);
 $37 = ((($$1)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $$0 = $38;
 return ($$0|0);
}
function _wcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink10 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 2836|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<(0);
 $$sink = $5 ? $2 : $1;
 $$sink10 = $5 ? $1 : $2;
 $6 = (((($0)) + 2236|0) + ($$sink<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (((($0)) + 2236|0) + ($$sink10<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 return ($10|0);
}
function _fc_solve_pats__release_373($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 16)|0;
 HEAP32[$2>>2] = $4;
 return;
}
function _fc_solve_pats__do_it($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 37688|0);
 $3 = ((($0)) + 37684|0);
 $4 = ((($0)) + 37676|0);
 $5 = ((($0)) + 37692|0);
 while(1) {
  $6 = HEAP32[$2>>2]|0;
  $7 = ($6|0)==(0|0);
  if ($7) {
   $8 = (_dequeue_position($0)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    label = 12;
    break;
   }
   HEAP32[$2>>2] = $8;
   $10 = HEAP32[$3>>2]|0;
   HEAP32[$10>>2] = $8;
   $11 = ((($10)) + 8|0);
   HEAP32[$11>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$5>>2] = 0;
  }
  $12 = (_solve_377($0,$1)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = HEAP32[$2>>2]|0;
   _free_position_recursive($0,$14);
  }
  $15 = HEAP8[$1>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if (!($16)) {
   HEAP32[$2>>2] = 0;
  }
  $17 = (_check_for_exceeded($0)|0);
  if ($17) {
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
 $18 = ((($0)) + 35656|0);
 HEAP32[$18>>2] = -1;
 STACKTOP = sp;return;
}
function _dequeue_position($0) {
 $0 = $0|0;
 var $$0 = 0, $$029$off0 = 0, $$1$off0 = 0, $$promoted = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select32 = 0, $spec$store$select = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 37664|0);
 $2 = ((($0)) + 37660|0);
 $3 = ((($0)) + 812|0);
 $$promoted = HEAP32[$1>>2]|0;
 $$029$off0 = 0;$5 = $$promoted;
 while(1) {
  $4 = (($5) + -1)|0;
  $6 = HEAP32[$2>>2]|0;
  $7 = ($5|0)>($6|0);
  if ($7) {
   $$1$off0 = $$029$off0;$13 = $4;
  } else {
   if ($$029$off0) {
    label = 13;
    break;
   }
   $8 = HEAP32[$3>>2]|0;
   $9 = (($6) + -1)|0;
   $10 = ($6|0)<(1);
   $spec$store$select = $10 ? $8 : $9;
   HEAP32[$2>>2] = $spec$store$select;
   $11 = ($spec$store$select|0)==(0);
   $spec$select = $$029$off0 | $11;
   $$1$off0 = $spec$select;$13 = $8;
  }
  $12 = (((($0)) + 12|0) + ($13<<2)|0);
  $14 = HEAP32[$12>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$029$off0 = $$1$off0;$5 = $13;
  } else {
   break;
  }
 }
 if ((label|0) == 13) {
  HEAP32[$1>>2] = $4;
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$1>>2] = $13;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$12>>2] = $16;
 $17 = HEAP32[$1>>2]|0;
 $18 = (((($0)) + 12|0) + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 L11: do {
  if ($20) {
   $21 = ((($0)) + 812|0);
   $23 = $17;
   while(1) {
    $22 = HEAP32[$21>>2]|0;
    $24 = ($23|0)==($22|0);
    $25 = ($22|0)>(0);
    $spec$select32 = $24 & $25;
    if (!($spec$select32)) {
     break L11;
    }
    $26 = (($22) + -1)|0;
    HEAP32[$21>>2] = $26;
    $27 = (($23) + -1)|0;
    HEAP32[$1>>2] = $27;
    $28 = HEAP32[$2>>2]|0;
    $29 = ($23|0)>($28|0);
    if (!($29)) {
     HEAP32[$2>>2] = $27;
    }
    $30 = HEAP32[$1>>2]|0;
    $31 = (((($0)) + 12|0) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     $23 = $30;
    } else {
     break;
    }
   }
  }
 } while(0);
 _unpack_position($0,$14);
 $$0 = $14;
 return ($$0|0);
}
function _solve_377($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0113$lcssa = 0, $$0113117 = 0, $$2 = 0, $$3 = 0, $$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 37692|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP8[$1>>0] = 0;
 $5 = ((($0)) + 37676|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 L1: do {
  if ($7) {
   $8 = ((($0)) + 37684|0);
   $9 = ((($0)) + 35656|0);
   $10 = ((($0)) + 35652|0);
   $11 = ((($0)) + 37680|0);
   $$0113117 = $4;$15 = $6;
   while(1) {
    $12 = (_check_for_exceeded($0)|0);
    if ($12) {
     break;
    }
    $13 = HEAP32[$8>>2]|0;
    $14 = (($13) + (($15*28)|0)|0);
    $16 = HEAP32[$14>>2]|0;
    $17 = HEAP32[$9>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($16)) + 8|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ((($20)) + 8|0);
     $22 = HEAP16[$21>>1]|0;
     $23 = ((($16)) + 22|0);
     $24 = HEAP16[$23>>1]|0;
     $25 = ($22<<16>>16)<($24<<16>>16);
     if ($25) {
      label = 7;
     } else {
      $28 = (((($13) + (($15*28)|0)|0)) + 8|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(0|0);
      do {
       if ($30) {
        $31 = (_fc_solve_pats__get_moves($0,$16,$2)|0);
        $32 = HEAP32[$8>>2]|0;
        $33 = HEAP32[$5>>2]|0;
        $34 = (((($32) + (($33*28)|0)|0)) + 8|0);
        HEAP32[$34>>2] = $31;
        $35 = ($31|0)==(0|0);
        if ($35) {
         $36 = (((($32) + (($33*28)|0)|0)) + 20|0);
         HEAP8[$36>>0] = 0;
         $37 = (($33) + -1)|0;
         HEAP32[$5>>2] = $37;
         $$2 = 1;
         break;
        } else {
         $38 = HEAP32[$2>>2]|0;
         $39 = $38&255;
         $40 = ((($16)) + 25|0);
         HEAP8[$40>>0] = $39;
         $41 = $38 & 255;
         $42 = (($31) + ($41<<3)|0);
         $43 = (((($32) + (($33*28)|0)|0)) + 12|0);
         HEAP32[$43>>2] = $42;
         $44 = HEAP32[$34>>2]|0;
         $45 = (((($32) + (($33*28)|0)|0)) + 16|0);
         HEAP32[$45>>2] = $44;
         $46 = (((($32) + (($33*28)|0)|0)) + 20|0);
         HEAP8[$46>>0] = 0;
         label = 13;
         break;
        }
       } else {
        $47 = (((($13) + (($15*28)|0)|0)) + 12|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = $29;
        $50 = (($48) - ($49))|0;
        $51 = (3)?($50 >> 3):($50);
        HEAP32[$2>>2] = $51;
        label = 13;
       }
      } while(0);
      do {
       if ((label|0) == 13) {
        label = 0;
        $52 = ($$0113117|0)==(1);
        if ($52) {
         $53 = HEAP32[$8>>2]|0;
         $54 = HEAP32[$5>>2]|0;
         $55 = (($54) + 1)|0;
         $56 = (((($53) + (($55*28)|0)|0)) + 20|0);
         $57 = HEAP8[$56>>0]|0;
         $58 = ($57<<24>>24)==(0);
         if ($58) {
          $60 = (((($53) + (($54*28)|0)|0)) + 24|0);
          $61 = HEAP32[$60>>2]|0;
          _free_position_non_recursive($0,$61);
         } else {
          $59 = (((($53) + (($54*28)|0)|0)) + 20|0);
          HEAP8[$59>>0] = 1;
         }
         $62 = HEAP32[$8>>2]|0;
         $63 = HEAP32[$5>>2]|0;
         $64 = (((($62) + (($63*28)|0)|0)) + 16|0);
         $65 = HEAP32[$64>>2]|0;
         _fc_solve_pats__undo_move($0,$65);
         $66 = HEAP32[$8>>2]|0;
         $67 = HEAP32[$5>>2]|0;
         $68 = (((($66) + (($67*28)|0)|0)) + 16|0);
         $69 = HEAP32[$68>>2]|0;
         $70 = ((($69)) + 8|0);
         HEAP32[$68>>2] = $70;
        }
        $71 = HEAP32[$8>>2]|0;
        $72 = HEAP32[$5>>2]|0;
        $73 = (((($71) + (($72*28)|0)|0)) + 16|0);
        $74 = HEAP32[$73>>2]|0;
        $75 = (((($71) + (($72*28)|0)|0)) + 12|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = ($74|0)==($76|0);
        if ($77) {
         $78 = (((($71) + (($72*28)|0)|0)) + 8|0);
         $79 = HEAP32[$78>>2]|0;
         $80 = HEAP32[$2>>2]|0;
         $81 = $80 << 3;
         _fc_solve_pats__release_378($0,$79,$81);
         $82 = HEAP32[$8>>2]|0;
         $83 = HEAP32[$5>>2]|0;
         $84 = (((($82) + (($83*28)|0)|0)) + 8|0);
         HEAP32[$84>>2] = 0;
         $85 = (($83) + -1)|0;
         HEAP32[$5>>2] = $85;
         $$2 = 1;
         break;
        }
        _freecell_solver_pats__make_move($0,$74);
        _fc_solve_pats__sort_piles($0);
        $86 = HEAP32[$8>>2]|0;
        $87 = HEAP32[$5>>2]|0;
        $88 = (((($86) + (($87*28)|0)|0)) + 16|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = (_fc_solve_pats__new_position($0,$16,$89)|0);
        $91 = HEAP32[$8>>2]|0;
        $92 = HEAP32[$5>>2]|0;
        $93 = (((($91) + (($92*28)|0)|0)) + 24|0);
        HEAP32[$93>>2] = $90;
        $94 = ($90|0)==(0|0);
        if ($94) {
         $95 = ((($16)) + 25|0);
         $96 = HEAP8[$95>>0]|0;
         $97 = (($96) + -1)<<24>>24;
         HEAP8[$95>>0] = $97;
         $98 = (((($91) + (($92*28)|0)|0)) + 16|0);
         $99 = HEAP32[$98>>2]|0;
         _fc_solve_pats__undo_move($0,$99);
         $100 = HEAP32[$8>>2]|0;
         $101 = HEAP32[$5>>2]|0;
         $102 = (((($100) + (($101*28)|0)|0)) + 16|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = ((($103)) + 8|0);
         HEAP32[$102>>2] = $104;
         $$2 = 0;
         break;
        }
        $105 = ((($90)) + 20|0);
        $106 = HEAP16[$105>>1]|0;
        $107 = ((($16)) + 20|0);
        $108 = HEAP16[$107>>1]|0;
        $109 = ($106<<16>>16)==($108<<16>>16);
        if ($109) {
         $110 = HEAP32[$2>>2]|0;
         $111 = HEAP32[$10>>2]|0;
         $112 = ($110|0)<($111|0);
         if (!($112)) {
          $127 = (((($91) + (($92*28)|0)|0)) + 16|0);
          $128 = HEAP32[$127>>2]|0;
          $129 = ((($128)) + 7|0);
          $130 = HEAP8[$129>>0]|0;
          $131 = $130 << 24 >> 24;
          _fc_solve_pats__queue_position($0,$90,$131);
          $132 = HEAP32[$8>>2]|0;
          $133 = HEAP32[$5>>2]|0;
          $134 = (((($132) + (($133*28)|0)|0)) + 16|0);
          $135 = HEAP32[$134>>2]|0;
          _fc_solve_pats__undo_move($0,$135);
          $136 = HEAP32[$8>>2]|0;
          $137 = HEAP32[$5>>2]|0;
          $138 = (((($136) + (($137*28)|0)|0)) + 20|0);
          HEAP8[$138>>0] = 1;
          $139 = (((($136) + (($137*28)|0)|0)) + 16|0);
          $140 = HEAP32[$139>>2]|0;
          $141 = ((($140)) + 8|0);
          HEAP32[$139>>2] = $141;
          $$2 = 0;
          break;
         }
        }
        $113 = (($92) + 1)|0;
        $114 = HEAP32[$11>>2]|0;
        $115 = ($113|0)<($114|0);
        $116 = (($114) + 16)|0;
        if (!($115)) {
         $117 = ($116*28)|0;
         HEAP32[$11>>2] = $116;
         $118 = HEAP32[$8>>2]|0;
         $119 = (_realloc($118,$117)|0);
         HEAP32[$8>>2] = $119;
        }
        $120 = HEAP32[$8>>2]|0;
        $121 = HEAP32[$5>>2]|0;
        $122 = (((($120) + (($121*28)|0)|0)) + 24|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = (($121) + 1)|0;
        $125 = (($120) + (($124*28)|0)|0);
        HEAP32[$125>>2] = $123;
        $126 = (((($120) + (($124*28)|0)|0)) + 8|0);
        HEAP32[$126>>2] = 0;
        HEAP32[$5>>2] = $124;
        $$2 = 0;
       }
      } while(0);
      $$pr = HEAP32[$5>>2]|0;
      $$3 = $$2;$142 = $$pr;
     }
    } else {
     label = 7;
    }
    if ((label|0) == 7) {
     label = 0;
     $26 = (((($13) + (($15*28)|0)|0)) + 20|0);
     HEAP8[$26>>0] = 0;
     $27 = (($15) + -1)|0;
     HEAP32[$5>>2] = $27;
     $$3 = 1;$142 = $27;
    }
    $143 = ($142|0)>(-1);
    if ($143) {
     $$0113117 = $$3;$15 = $142;
    } else {
     $$0113$lcssa = $$3;
     break L1;
    }
   }
   _wrap_up_solve($0,$$0113117);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$0113$lcssa = $4;
  }
 } while(0);
 HEAP8[$1>>0] = 1;
 _wrap_up_solve($0,$$0113$lcssa);
 $144 = ((($0)) + 37684|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = HEAP32[$5>>2]|0;
 $147 = (($146) + 1)|0;
 $148 = (((($145) + (($147*28)|0)|0)) + 20|0);
 $149 = HEAP8[$148>>0]|0;
 $150 = $149&255;
 $$0 = $150;
 STACKTOP = sp;return ($$0|0);
}
function _free_position_recursive($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 816|0);
 $$0 = $1;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$$0>>2] = $3;
  HEAP32[$2>>2] = $$0;
  $4 = ((($$0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   label = 4;
   break;
  }
  $7 = ((($5)) + 25|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = (($8) + -1)<<24>>24;
  HEAP8[$7>>0] = $9;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   $$0 = $5;
  } else {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return;
 }
}
function _check_for_exceeded($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 35656|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if (!($3)) {
  $10 = 0;
  return ($10|0);
 }
 $4 = ((($0)) + 2792|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(-1);
 if (!($6)) {
  $10 = 0;
  return ($10|0);
 }
 $7 = ((($0)) + 2788|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=($5|0);
 $10 = $9;
 return ($10|0);
}
function _wrap_up_solve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 37692|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _free_position_non_recursive($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 816|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 HEAP32[$2>>2] = $1;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 25|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($7) + -1)<<24>>24;
 HEAP8[$6>>0] = $8;
 return;
}
function _fc_solve_pats__undo_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($1)) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ((($1)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 switch ($7<<24>>24) {
 case 2:  {
  $8 = $5&255;
  $9 = (((($0)) + 860|0) + ($8)|0);
  $10 = HEAP8[$9>>0]|0;
  HEAP8[$9>>0] = 0;
  $$0 = $10;
  break;
 }
 case 3:  {
  $11 = ((($0)) + 820|0);
  $12 = $5&255;
  $13 = (_fcs_state_pop_col_card_387($11,$12)|0);
  _fc_solve_pats__hashpile_383($0,$12);
  $$0 = $13;
  break;
 }
 default: {
  $14 = $5&255;
  $15 = (((($0)) + 868|0) + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (_fcs_make_card_388($17,$14)|0);
  $19 = (($16) + -1)<<24>>24;
  HEAP8[$15>>0] = $19;
  $$0 = $18;
 }
 }
 $20 = ((($1)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)==(2);
 if ($22) {
  $23 = $3&255;
  $24 = (((($0)) + 860|0) + ($23)|0);
  HEAP8[$24>>0] = $$0;
  return;
 } else {
  $25 = ((($0)) + 820|0);
  $26 = $3&255;
  _fcs_state_push_384($25,$26,$$0);
  _fc_solve_pats__hashpile_383($0,$26);
  return;
 }
}
function _fc_solve_pats__release_378($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 HEAP32[$3>>2] = $5;
 return;
}
function _freecell_solver_pats__make_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($1)) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ((($1)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(2);
 $9 = $3&255;
 if ($8) {
  $10 = (((($0)) + 860|0) + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  HEAP8[$10>>0] = 0;
  $$0 = $11;
 } else {
  $12 = (((($0)) + 820|0) + ($9<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (($13) + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = (($14) + -1)<<24>>24;
  HEAP8[$13>>0] = $18;
  $19 = $18&255;
  $20 = (($19) + 1)|0;
  $21 = (($13) + ($20)|0);
  HEAP8[$21>>0] = 0;
  _fc_solve_pats__hashpile_383($0,$9);
  $$0 = $17;
 }
 $22 = ((($1)) + 4|0);
 $23 = HEAP8[$22>>0]|0;
 switch ($23<<24>>24) {
 case 2:  {
  $24 = $5&255;
  $25 = (((($0)) + 860|0) + ($24)|0);
  HEAP8[$25>>0] = $$0;
  return;
  break;
 }
 case 3:  {
  $26 = ((($0)) + 820|0);
  $27 = $5&255;
  _fcs_state_push_384($26,$27,$$0);
  _fc_solve_pats__hashpile_383($0,$27);
  return;
  break;
 }
 default: {
  $28 = $5&255;
  $29 = (((($0)) + 868|0) + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = (($30) + 1)<<24>>24;
  HEAP8[$29>>0] = $31;
  return;
 }
 }
}
function _fc_solve_pats__new_position($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$052$lcssa = 0, $$05257 = 0, $$053 = 0, $$054 = 0, $$058 = 0, $$15556 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $$sroa$0$0$copyload = HEAP8[$5>>0]|0;
 $6 = ($1|0)==(0|0);
 if ($6) {
  $11 = 0;
 } else {
  $7 = ((($1)) + 22|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = (($9) + 1)|0;
  $11 = $10;
 }
 $12 = (_fc_solve_pats__insert($0,$3,$11,$4)|0);
 switch ($12|0) {
 case 0:  {
  $13 = ((($0)) + 2788|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  break;
 }
 case 2:  {
  break;
 }
 default: {
  $$053 = 0;
  STACKTOP = sp;return ($$053|0);
 }
 }
 $16 = ((($0)) + 816|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = ((($0)) + 2872|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_fc_solve_pats__new_from_block($0,$21)|0);
  $23 = ($22|0)==(0|0);
  if ($23) {
   $$053 = 0;
   STACKTOP = sp;return ($$053|0);
  } else {
   $$054 = $22;
  }
 } else {
  $19 = HEAP32[$17>>2]|0;
  HEAP32[$16>>2] = $19;
  $$054 = $17;
 }
 HEAP32[$$054>>2] = 0;
 $24 = ((($$054)) + 4|0);
 HEAP32[$24>>2] = $1;
 $25 = HEAP32[$4>>2]|0;
 $26 = ((($$054)) + 8|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($$054)) + 12|0);
 $28 = $2;
 $29 = $28;
 $30 = HEAPU8[$29>>0]|(HEAPU8[$29+1>>0]<<8)|(HEAPU8[$29+2>>0]<<16)|(HEAPU8[$29+3>>0]<<24);
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAPU8[$32>>0]|(HEAPU8[$32+1>>0]<<8)|(HEAPU8[$32+2>>0]<<16)|(HEAPU8[$32+3>>0]<<24);
 $34 = $27;
 $35 = $34;
 HEAP8[$35>>0]=$30&255;HEAP8[$35+1>>0]=($30>>8)&255;HEAP8[$35+2>>0]=($30>>16)&255;HEAP8[$35+3>>0]=$30>>24;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP8[$37>>0]=$33&255;HEAP8[$37+1>>0]=($33>>8)&255;HEAP8[$37+2>>0]=($33>>16)&255;HEAP8[$37+3>>0]=$33>>24;
 $38 = HEAP32[$3>>2]|0;
 $39 = $38&65535;
 $40 = ((($$054)) + 20|0);
 HEAP16[$40>>1] = $39;
 $41 = $11&65535;
 $42 = ((($$054)) + 22|0);
 HEAP16[$42>>1] = $41;
 $43 = ((($$054)) + 25|0);
 HEAP8[$43>>0] = 0;
 $44 = $$sroa$0$0$copyload&255;
 $45 = ($$sroa$0$0$copyload<<24>>24)==(0);
 if ($45) {
  $$052$lcssa = 0;
 } else {
  $46 = ((($$054)) + 28|0);
  $$05257 = 0;$$058 = 0;$$15556 = $46;
  while(1) {
   $48 = (((($0)) + 860|0) + ($$058)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = ((($$15556)) + 1|0);
   HEAP8[$$15556>>0] = $49;
   $51 = HEAP8[$48>>0]|0;
   $52 = ($51<<24>>24)!=(0);
   $53 = $52&1;
   $spec$select = (($$05257) + ($53))|0;
   $54 = (($$058) + 1)|0;
   $exitcond = ($54|0)==($44|0);
   if ($exitcond) {
    break;
   } else {
    $$05257 = $spec$select;$$058 = $54;$$15556 = $50;
   }
  }
  $phitmp = $spec$select&255;
  $$052$lcssa = $phitmp;
 }
 $47 = ((($$054)) + 24|0);
 HEAP8[$47>>0] = $$052$lcssa;
 $$053 = $$054;
 STACKTOP = sp;return ($$053|0);
}
function _fc_solve_pats__queue_position($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 868|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($0)) + 869|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = (($8) + ($5))|0;
 $10 = ((($0)) + 870|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($9) + ($12))|0;
 $14 = ((($0)) + 871|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = (($13) + ($16))|0;
 $18 = ((($0)) + 2848|0);
 $19 = +HEAPF64[$18>>3];
 $20 = (+($17|0));
 $21 = $19 * $20;
 $22 = ((($0)) + 2856|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 + $21;
 $25 = $24 * $20;
 $26 = ((($0)) + 2864|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $27 + $25;
 $29 = $28 + 0.5;
 $30 = (+Math_floor((+$29)));
 $31 = (~~(($30)));
 $32 = (($31) + ($2))|0;
 $33 = ($32|0)<(99);
 $spec$select = $33 ? $32 : 99;
 $34 = ($spec$select|0)>(0);
 $$0 = $34 ? $spec$select : 0;
 $35 = ((($0)) + 812|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($$0|0)>($36|0);
 if ($37) {
  HEAP32[$35>>2] = $$0;
 }
 HEAP32[$1>>2] = 0;
 $38 = (((($0)) + 12|0) + ($$0<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if ($40) {
  HEAP32[$38>>2] = $1;
  $41 = (((($0)) + 412|0) + ($$0<<2)|0);
  $$sink = $41;
  HEAP32[$$sink>>2] = $1;
  return;
 }
 $42 = ((($0)) + 35648|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = ($43<<24>>24)==(0);
 if ($44) {
  $45 = (((($0)) + 412|0) + ($$0<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$46>>2] = $1;
  $$sink = $45;
  HEAP32[$$sink>>2] = $1;
  return;
 } else {
  HEAP32[$1>>2] = $39;
  $$sink = $38;
  HEAP32[$$sink>>2] = $1;
  return;
 }
}
function _fc_solve_pats__hashpile_383($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (((($0)) + 820|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) + 1)|0;
 $7 = (($3) + ($6)|0);
 HEAP8[$7>>0] = 0;
 $8 = ((($3)) + 1|0);
 $9 = (_fnv_hash_str_385($8)|0);
 $10 = (((($0)) + 2196|0) + ($1<<2)|0);
 HEAP32[$10>>2] = $9;
 $11 = (((($0)) + 2236|0) + ($1<<2)|0);
 HEAP32[$11>>2] = -1;
 return;
}
function _fcs_state_push_384($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($0) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = (($5) + 1)<<24>>24;
 HEAP8[$4>>0] = $6;
 $7 = $5&255;
 $8 = (($7) + 1)|0;
 $9 = (($4) + ($8)|0);
 HEAP8[$9>>0] = $2;
 return;
}
function _fnv_hash_str_385($0) {
 $0 = $0|0;
 var $$04$lcssa = 0, $$045 = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$04$lcssa = -2128831035;
  return ($$04$lcssa|0);
 }
 $$045 = -2128831035;$$06 = $0;$4 = $1;
 while(1) {
  $3 = ((($$06)) + 1|0);
  $5 = (_fnv_hash_386($4,$$045)|0);
  $6 = HEAP8[$3>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $$04$lcssa = $5;
   break;
  } else {
   $$045 = $5;$$06 = $3;$4 = $6;
  }
 }
 return ($$04$lcssa|0);
}
function _fnv_hash_386($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = Math_imul($1, 16777619)|0;
 $3 = $0&255;
 $4 = $2 ^ $3;
 return ($4|0);
}
function _fcs_state_pop_col_card_387($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($3) + ($5)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($4) + -1)<<24>>24;
 HEAP8[$3>>0] = $8;
 $9 = $8&255;
 $10 = (($9) + 1)|0;
 $11 = (($3) + ($10)|0);
 HEAP8[$11>>0] = 0;
 return ($7|0);
}
function _fcs_make_card_388($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 << 2;
 $3 = $2 | $1;
 $4 = $3&255;
 return ($4|0);
}
function _unpack_position($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06673 = 0, $$06778 = 0, $$06877 = 0, $$070 = 0, $$07176 = 0, $$072$off075 = 0, $$074 = 0, $$1 = 0, $$169 = 0, $$sroa$0$0$copyload = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond82 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $$sroa$0$0$copyload = HEAP8[$2>>0]|0;
 $$sroa$4$0$$sroa_idx = ((($2)) + 1|0);
 $$sroa$4$0$copyload = HEAP8[$$sroa$4$0$$sroa_idx>>0]|0;
 $3 = ((($1)) + 20|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 & 15;
 $7 = $6&255;
 $8 = ((($0)) + 868|0);
 HEAP8[$8>>0] = $7;
 $9 = (4)?($5 >>> 4):($5);
 $10 = $9 & 15;
 $11 = $10&255;
 $12 = ((($0)) + 869|0);
 HEAP8[$12>>0] = $11;
 $13 = (8)?($5 >>> 8):($5);
 $14 = $13 & 15;
 $15 = $14&255;
 $16 = ((($0)) + 870|0);
 HEAP8[$16>>0] = $15;
 $17 = (12)?(($4&65535) >>> 12):(($4&65535));
 $18 = $17&255;
 $19 = ((($0)) + 871|0);
 HEAP8[$19>>0] = $18;
 $20 = $$sroa$4$0$copyload&255;
 $21 = ($$sroa$4$0$copyload<<24>>24)==(0);
 if (!($21)) {
  $22 = ((($1)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 12|0);
  $$06778 = 0;$$06877 = $24;$$07176 = 0;$$072$off075 = 0;
  while(1) {
   if ($$072$off075) {
    $28 = $$06778 & 15;
    $29 = $28&255;
    $30 = $29 << 8;
    $31 = ((($$06877)) + 1|0);
    $32 = HEAP8[$$06877>>0]|0;
    $33 = $32&255;
    $34 = $30 | $33;
    $$070 = $34;$$1 = $$06778;$$169 = $31;
   } else {
    $35 = ((($$06877)) + 1|0);
    $36 = HEAP8[$$06877>>0]|0;
    $37 = $36&255;
    $38 = $37 << 4;
    $39 = ((($$06877)) + 2|0);
    $40 = HEAP8[$35>>0]|0;
    $41 = $40&255;
    $42 = (4)?($41 >>> 4):($41);
    $43 = $42 | $38;
    $$070 = $43;$$1 = $40;$$169 = $39;
   }
   $44 = $$072$off075 ^ 1;
   $45 = (((($0)) + 2236|0) + ($$07176<<2)|0);
   HEAP32[$45>>2] = $$070;
   $46 = (((($0)) + 19252|0) + ($$070<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (((($0)) + 820|0) + ($$07176<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 1|0);
   $51 = HEAP32[$47>>2]|0;
   $52 = (_strecpy($50,$51)|0);
   $53 = $52&255;
   HEAP8[$49>>0] = $53;
   $54 = ((($47)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (((($0)) + 2196|0) + ($$07176<<2)|0);
   HEAP32[$56>>2] = $55;
   $57 = (($$07176) + 1)|0;
   $exitcond82 = ($57|0)==($20|0);
   if ($exitcond82) {
    break;
   } else {
    $$06778 = $$1;$$06877 = $$169;$$07176 = $57;$$072$off075 = $44;
   }
  }
 }
 $25 = $$sroa$0$0$copyload&255;
 $26 = ($$sroa$0$0$copyload<<24>>24)==(0);
 if ($26) {
  return;
 }
 $27 = ((($1)) + 28|0);
 $$06673 = $27;$$074 = 0;
 while(1) {
  $58 = ((($$06673)) + 1|0);
  $59 = HEAP8[$$06673>>0]|0;
  $60 = (((($0)) + 860|0) + ($$074)|0);
  HEAP8[$60>>0] = $59;
  $61 = (($$074) + 1)|0;
  $exitcond = ($61|0)==($25|0);
  if ($exitcond) {
   break;
  } else {
   $$06673 = $58;$$074 = $61;
  }
 }
 return;
}
function _strecpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$036 = 0, $$045 = 0, $$07 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $$036 = $1;$$045 = $0;$$07 = 0;
 while(1) {
  $4 = ((($$045)) + 1|0);
  $5 = ((($$036)) + 1|0);
  $6 = (($$07) + 1)|0;
  $7 = HEAP8[$5>>0]|0;
  HEAP8[$4>>0] = $7;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $$0$lcssa = $6;
   break;
  } else {
   $$036 = $5;$$045 = $4;$$07 = $6;
  }
 }
 return ($$0$lcssa|0);
}
function _fc_solve_pats__insert($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 868|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ((($0)) + 869|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 4;
 $11 = (($10) + ($6))|0;
 $12 = ((($0)) + 870|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ((($0)) + 871|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 << 4;
 $19 = (($18) + ($14))|0;
 $20 = $19 << 8;
 $21 = $20 | $11;
 HEAP32[$1>>2] = $21;
 $22 = (_cluster_tree($0,$21)|0);
 $23 = ($22|0)==(0|0);
 if ($23) {
  $$1 = 3;
  return ($$1|0);
 }
 $24 = (_pack_position($0)|0);
 $25 = ($24|0)==(0|0);
 if ($25) {
  $$1 = 3;
  return ($$1|0);
 }
 $26 = ((($0)) + 2796|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[$26>>2] = $28;
 $29 = (_insert_node($0,$24,$2,$22,$3)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$1 = 0;
  return ($$1|0);
 }
 _give_back_block($0,$24);
 $$1 = $29;
 return ($$1|0);
}
function _cluster_tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$025$lcssa = 0, $$026 = 0, $$029 = 0, $$030 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = (($1|0) % 499)&-1;
 $3 = (((($0)) + 35660|0) + ($2<<2)|0);
 $$029 = HEAP32[$3>>2]|0;
 $4 = ($$029|0)==(0|0);
 L1: do {
  if ($4) {
   $$025$lcssa = 0;
  } else {
   $$030 = $$029;
   while(1) {
    $5 = ((($$030)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($1|0);
    if ($7) {
     $$026 = $$030;
     break;
    }
    $8 = ((($$030)) + 8|0);
    $$0 = HEAP32[$8>>2]|0;
    $9 = ($$0|0)==(0|0);
    if ($9) {
     $$025$lcssa = $$030;
     break L1;
    } else {
     $$030 = $$0;
    }
   }
   return ($$026|0);
  }
 } while(0);
 $10 = (_fc_solve_pats__malloc_395($0,12)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$026 = 0;
  return ($$026|0);
 }
 HEAP32[$10>>2] = 0;
 $12 = ((($10)) + 4|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($10)) + 8|0);
 HEAP32[$13>>2] = 0;
 $14 = ($$025$lcssa|0)==(0|0);
 if ($14) {
  HEAP32[$3>>2] = $10;
  $$026 = $10;
  return ($$026|0);
 } else {
  $15 = ((($$025$lcssa)) + 8|0);
  HEAP32[$15>>2] = $10;
  $$026 = $10;
  return ($$026|0);
 }
 return (0)|0;
}
function _pack_position($0) {
 $0 = $0|0;
 var $$0 = 0, $$03134 = 0, $$03233 = 0, $$1 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$3$0$copyload = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $$sroa$3$0$$sroa_idx = ((($1)) + 1|0);
 $$sroa$3$0$copyload = HEAP8[$$sroa$3$0$$sroa_idx>>0]|0;
 $2 = ((($0)) + 35636|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_fc_solve_pats__new_from_block($0,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = $$sroa$3$0$copyload&255;
 $7 = ($$sroa$3$0$copyload<<24>>24)==(0);
 if ($7) {
  $$0 = $4;
  return ($$0|0);
 }
 $8 = ((($4)) + 12|0);
 $$03134 = 0;$$03233 = $8;
 while(1) {
  $9 = (((($0)) + 2156|0) + ($$03134<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (((($0)) + 2236|0) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $$03134 & 1;
  $14 = ($13|0)==(0);
  if ($14) {
   $23 = (4)?($12 >>> 4):($12);
   $24 = $23&255;
   $25 = ((($$03233)) + 1|0);
   HEAP8[$$03233>>0] = $24;
   $26 = $12 << 4;
   $27 = $26&255;
   HEAP8[$25>>0] = $27;
   $$1 = $25;
  } else {
   $15 = (8)?($12 >>> 8):($12);
   $16 = ((($$03233)) + 1|0);
   $17 = HEAP8[$$03233>>0]|0;
   $18 = $17&255;
   $19 = $15 | $18;
   $20 = $19&255;
   HEAP8[$$03233>>0] = $20;
   $21 = $12&255;
   $22 = ((($$03233)) + 2|0);
   HEAP8[$16>>0] = $21;
   $$1 = $22;
  }
  $28 = (($$03134) + 1)|0;
  $exitcond = ($28|0)==($6|0);
  if ($exitcond) {
   $$0 = $4;
   break;
  } else {
   $$03134 = $28;$$03233 = $$1;
  }
 }
 return ($$0|0);
}
function _insert_node($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$039$lcssa = 0, $$03949 = 0, $$241$ph = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 12|0);
 $6 = $2&65535;
 $7 = ((($1)) + 8|0);
 HEAP16[$7>>1] = $6;
 $8 = ((($1)) + 4|0);
 HEAP32[$8>>2] = 0;
 HEAP32[$1>>2] = 0;
 HEAP32[$4>>2] = $1;
 $9 = HEAP32[$3>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$3>>2] = $1;
  $$3 = 0;
  return ($$3|0);
 }
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($9)) + 12|0);
 $14 = (_compare_piles($12,$5,$13)|0);
 $15 = ($14|0)==(0);
 L5: do {
  if ($15) {
   $$039$lcssa = $9;
  } else {
   $$03949 = $9;$16 = $14;
   while(1) {
    $17 = ($16|0)<(0);
    if ($17) {
     $18 = HEAP32[$$03949>>2]|0;
     $19 = ($18|0)==(0|0);
     if ($19) {
      label = 7;
      break;
     } else {
      $$241$ph = $18;
     }
    } else {
     $20 = ((($$03949)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      label = 9;
      break;
     } else {
      $$241$ph = $21;
     }
    }
    $24 = ((($$241$ph)) + 12|0);
    $25 = (_compare_piles($12,$5,$24)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $$039$lcssa = $$241$ph;
     break L5;
    } else {
     $$03949 = $$241$ph;$16 = $25;
    }
   }
   if ((label|0) == 7) {
    HEAP32[$$03949>>2] = $1;
    $$3 = 0;
    return ($$3|0);
   }
   else if ((label|0) == 9) {
    $23 = ((($$03949)) + 4|0);
    HEAP32[$23>>2] = $1;
    $$3 = 0;
    return ($$3|0);
   }
  }
 } while(0);
 $27 = ((($$039$lcssa)) + 8|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 $30 = ($29|0)>($2|0);
 if (!($30)) {
  $$3 = 1;
  return ($$3|0);
 }
 $31 = ((($0)) + 35648|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)==(0);
 if (!($33)) {
  $$3 = 1;
  return ($$3|0);
 }
 HEAP16[$27>>1] = $6;
 HEAP32[$4>>2] = $$039$lcssa;
 $$3 = 2;
 return ($$3|0);
}
function _give_back_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 37656|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $7 = $1;
 $8 = (($6) - ($7))|0;
 $9 = (0 - ($8))|0;
 $10 = (($5) + ($9)|0);
 HEAP32[$4>>2] = $10;
 $11 = ((($3)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($8))|0;
 HEAP32[$11>>2] = $13;
 return;
}
function _compare_piles($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_memcmp($1,$2,$0)|0);
 return ($3|0);
}
function _fc_solve_pats__new_from_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 37656|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<($1>>>0);
 do {
  if ($6) {
   $7 = (_fc_solve_pats__new_block($0)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $9 = HEAP32[$2>>2]|0;
    $10 = ((($7)) + 12|0);
    HEAP32[$10>>2] = $9;
    HEAP32[$2>>2] = $7;
    $$018 = $7;
    break;
   }
  } else {
   $$018 = $3;
  }
 } while(0);
 $11 = ((($$018)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($$018)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($1))|0;
 HEAP32[$13>>2] = $15;
 $16 = (($12) + ($1)|0);
 HEAP32[$11>>2] = $16;
 $$0 = $12;
 return ($$0|0);
}
function _fc_solve_pats__new_block($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_fc_solve_pats__malloc_395($0,16)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$1 = 0;
  return ($$1|0);
 }
 $3 = (_fc_solve_pats__malloc_395($0,131072)|0);
 HEAP32[$1>>2] = $3;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _fc_solve_pats__release_396($0,$1);
  $$1 = 0;
  return ($$1|0);
 } else {
  $5 = ((($1)) + 4|0);
  HEAP32[$5>>2] = $3;
  $6 = ((($1)) + 8|0);
  HEAP32[$6>>2] = 131072;
  $7 = ((($1)) + 12|0);
  HEAP32[$7>>2] = 0;
  $$1 = $1;
  return ($$1|0);
 }
 return (0)|0;
}
function _fc_solve_pats__malloc_395($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<($1>>>0);
 if ($4) {
  $5 = ((($0)) + 35656|0);
  HEAP32[$5>>2] = -1;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = (_malloc($1)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = ((($0)) + 35656|0);
  HEAP32[$8>>2] = -1;
  $$1 = 0;
  return ($$1|0);
 } else {
  $9 = (($3) - ($1))|0;
  HEAP32[$2>>2] = $9;
  $$1 = $6;
  return ($$1|0);
 }
 return (0)|0;
}
function _fc_solve_pats__release_396($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 16)|0;
 HEAP32[$2>>2] = $4;
 return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0;
 var $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0;
 var $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i17$i = 0, $$pre$i208 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre16$i$i = 0, $$sink = 0, $$sink325 = 0, $$sink326 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i207 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i213 = 0, $or$cond1$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond2$i214 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0;
 var $spec$select$i = 0, $spec$select$i205 = 0, $spec$select1$i = 0, $spec$select3$i = 0, $spec$select49$i = 0, $spec$select7$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = (3)?($6 >>> 3):($6);
   $8 = HEAP32[3660]|0;
   $9 = ($7)?($8 >>> $7):($8);
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (14680 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[3660] = $24;
     } else {
      $25 = HEAP32[(14656)>>2]|0;
      $26 = ($25>>>0)>($20>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(14648)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = (12)?($47 >>> 12):($47);
     $49 = $48 & 16;
     $50 = ($49)?($47 >>> $49):($47);
     $51 = (5)?($50 >>> 5):($50);
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = ($52)?($50 >>> $52):($50);
     $55 = (2)?($54 >>> 2):($54);
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = ($56)?($54 >>> $56):($54);
     $59 = (1)?($58 >>> 1):($58);
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = ($60)?($58 >>> $60):($58);
     $63 = (1)?($62 >>> 1):($62);
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = ($64)?($62 >>> $64):($62);
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (14680 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==($69|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[3660] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(14656)>>2]|0;
       $79 = ($78>>>0)>($73>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($71) + ($83)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(14660)>>2]|0;
      $93 = (3)?($37 >>> 3):($37);
      $94 = $93 << 1;
      $95 = (14680 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[3660] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(14656)>>2]|0;
       $104 = ($103>>>0)>($102>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(14648)>>2] = $84;
     HEAP32[(14660)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(14644)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = (12)?($112 >>> 12):($112);
     $114 = $113 & 16;
     $115 = ($114)?($112 >>> $114):($112);
     $116 = (5)?($115 >>> 5):($115);
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = ($117)?($115 >>> $117):($115);
     $120 = (2)?($119 >>> 2):($119);
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = ($121)?($119 >>> $121):($119);
     $124 = (1)?($123 >>> 1):($123);
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = ($125)?($123 >>> $125):($123);
     $128 = (1)?($127 >>> 1):($127);
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = ($129)?($127 >>> $129):($127);
     $132 = (($130) + ($131))|0;
     $133 = (14944 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $spec$select$i = $150 ? $149 : $$0191$i;
      $spec$select1$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $spec$select1$i;$$0191$i = $spec$select$i;
     }
     $151 = HEAP32[(14656)>>2]|0;
     $152 = ($151>>>0)>($$0190$i>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($153>>>0)>($$0190$i>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i$ph = $173;$$1196$i$ph = $172;
        }
       } else {
        $$1194$i$ph = $170;$$1196$i$ph = $169;
       }
       $$1194$i = $$1194$i$ph;$$1196$i = $$1196$i$ph;
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if ($177) {
         $178 = ((($$1194$i)) + 16|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = ($179|0)==(0|0);
         if ($180) {
          break;
         } else {
          $$1194$i$be = $179;$$1196$i$be = $178;
         }
        } else {
         $$1194$i$be = $176;$$1196$i$be = $175;
        }
        $$1194$i = $$1194$i$be;$$1196$i = $$1196$i$be;
       }
       $181 = ($151>>>0)>($$1196$i>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($151>>>0)>($161>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     L78: do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (14944 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       do {
        if ($187) {
         HEAP32[$185>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $188 = 1 << $184;
          $189 = $188 ^ -1;
          $190 = $108 & $189;
          HEAP32[(14644)>>2] = $190;
          break L78;
         }
        } else {
         $191 = HEAP32[(14656)>>2]|0;
         $192 = ($191>>>0)>($156>>>0);
         if ($192) {
          _abort();
          // unreachable;
         } else {
          $193 = ((($156)) + 16|0);
          $194 = HEAP32[$193>>2]|0;
          $195 = ($194|0)==($$0190$i|0);
          $196 = ((($156)) + 20|0);
          $$sink = $195 ? $193 : $196;
          HEAP32[$$sink>>2] = $$3$i;
          $197 = ($$3$i|0)==(0|0);
          if ($197) {
           break L78;
          } else {
           break;
          }
         }
        }
       } while(0);
       $198 = HEAP32[(14656)>>2]|0;
       $199 = ($198>>>0)>($$3$i>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($198>>>0)>($202>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(14656)>>2]|0;
        $211 = ($210>>>0)>($208>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(14660)>>2]|0;
       $229 = (3)?($37 >>> 3):($37);
       $230 = $229 << 1;
       $231 = (14680 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $232 & $8;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $232 | $8;
        HEAP32[3660] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(14656)>>2]|0;
        $239 = ($238>>>0)>($237>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(14648)>>2] = $$0191$i;
      HEAP32[(14660)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(14644)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = (8)?($245 >>> 8):($245);
     $251 = ($250|0)==(0);
     if ($251) {
      $$0357$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0357$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = (16)?($253 >>> 16):($253);
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = (16)?($257 >>> 16):($257);
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = (16)?($262 >>> 16):($262);
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = (15)?($267 >>> 15):($267);
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = ($271)?($246 >>> $271):($246);
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0357$i = $274;
      }
     }
     $275 = (14944 + ($$0357$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L122: do {
      if ($277) {
       $$2353$i = 0;$$3$i203 = 0;$$3348$i = $249;
       label = 85;
      } else {
       $278 = ($$0357$i|0)==(31);
       $279 = (1)?($$0357$i >>> 1):($$0357$i);
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0358$i = $282;$$0361$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$420$i$ph = $$0351$i;$$434919$i$ph = 0;$$535618$i$ph = $$0351$i;
          label = 89;
          break L122;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = (31)?($$0358$i >>> 31):($$0358$i);
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond2$i = $294 | $295;
        $$1362$i = $or$cond2$i ? $$0361$i : $290;
        $296 = ($293|0)==(0|0);
        $spec$select7$i = $$0358$i << 1;
        if ($296) {
         $$2353$i = $$1362$i;$$3$i203 = $$1341$i;$$3348$i = $$1346$i;
         label = 85;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0358$i = $spec$select7$i;$$0361$i = $$1362$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 85) {
      $297 = ($$2353$i|0)==(0|0);
      $298 = ($$3$i203|0)==(0|0);
      $or$cond$i = $297 & $298;
      if ($or$cond$i) {
       $299 = 2 << $$0357$i;
       $300 = (0 - ($299))|0;
       $301 = $299 | $300;
       $302 = $301 & $247;
       $303 = ($302|0)==(0);
       if ($303) {
        $$0197 = $246;
        break;
       }
       $304 = (0 - ($302))|0;
       $305 = $302 & $304;
       $306 = (($305) + -1)|0;
       $307 = (12)?($306 >>> 12):($306);
       $308 = $307 & 16;
       $309 = ($308)?($306 >>> $308):($306);
       $310 = (5)?($309 >>> 5):($309);
       $311 = $310 & 8;
       $312 = $311 | $308;
       $313 = ($311)?($309 >>> $311):($309);
       $314 = (2)?($313 >>> 2):($313);
       $315 = $314 & 4;
       $316 = $312 | $315;
       $317 = ($315)?($313 >>> $315):($313);
       $318 = (1)?($317 >>> 1):($317);
       $319 = $318 & 2;
       $320 = $316 | $319;
       $321 = ($319)?($317 >>> $319):($317);
       $322 = (1)?($321 >>> 1):($321);
       $323 = $322 & 1;
       $324 = $320 | $323;
       $325 = ($323)?($321 >>> $323):($321);
       $326 = (($324) + ($325))|0;
       $327 = (14944 + ($326<<2)|0);
       $328 = HEAP32[$327>>2]|0;
       $$3$i203218 = 0;$$4355$i = $328;
      } else {
       $$3$i203218 = $$3$i203;$$4355$i = $$2353$i;
      }
      $329 = ($$4355$i|0)==(0|0);
      if ($329) {
       $$4$lcssa$i = $$3$i203218;$$4349$lcssa$i = $$3348$i;
      } else {
       $$420$i$ph = $$3$i203218;$$434919$i$ph = $$3348$i;$$535618$i$ph = $$4355$i;
       label = 89;
      }
     }
     if ((label|0) == 89) {
      $$420$i = $$420$i$ph;$$434919$i = $$434919$i$ph;$$535618$i = $$535618$i$ph;
      while(1) {
       $330 = ((($$535618$i)) + 4|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $331 & -8;
       $333 = (($332) - ($246))|0;
       $334 = ($333>>>0)<($$434919$i>>>0);
       $spec$select$i205 = $334 ? $333 : $$434919$i;
       $spec$select3$i = $334 ? $$535618$i : $$420$i;
       $335 = ((($$535618$i)) + 16|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ($336|0)==(0|0);
       if ($337) {
        $338 = ((($$535618$i)) + 20|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = $339;
       } else {
        $340 = $336;
       }
       $341 = ($340|0)==(0|0);
       if ($341) {
        $$4$lcssa$i = $spec$select3$i;$$4349$lcssa$i = $spec$select$i205;
        break;
       } else {
        $$420$i = $spec$select3$i;$$434919$i = $spec$select$i205;$$535618$i = $340;
       }
      }
     }
     $342 = ($$4$lcssa$i|0)==(0|0);
     if ($342) {
      $$0197 = $246;
     } else {
      $343 = HEAP32[(14648)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($$4349$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(14656)>>2]|0;
       $347 = ($346>>>0)>($$4$lcssa$i>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($$4$lcssa$i) + ($246)|0);
       $349 = ($348>>>0)>($$4$lcssa$i>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($$4$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($$4$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($$4$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($$4$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($$4$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $$3371$i = 0;
           break;
          } else {
           $$1369$i$ph = $368;$$1373$i$ph = $367;
          }
         } else {
          $$1369$i$ph = $365;$$1373$i$ph = $364;
         }
         $$1369$i = $$1369$i$ph;$$1373$i = $$1373$i$ph;
         while(1) {
          $370 = ((($$1369$i)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = ((($$1369$i)) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            break;
           } else {
            $$1369$i$be = $374;$$1373$i$be = $373;
           }
          } else {
           $$1369$i$be = $371;$$1373$i$be = $370;
          }
          $$1369$i = $$1369$i$be;$$1373$i = $$1373$i$be;
         }
         $376 = ($346>>>0)>($$1373$i>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1373$i>>2] = 0;
          $$3371$i = $$1369$i;
          break;
         }
        } else {
         $355 = ((($$4$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($346>>>0)>($356>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($$4$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($$4$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $$3371$i = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       L176: do {
        if ($377) {
         $469 = $247;
        } else {
         $378 = ((($$4$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (14944 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($$4$lcssa$i|0)==($381|0);
         do {
          if ($382) {
           HEAP32[$380>>2] = $$3371$i;
           $cond$i207 = ($$3371$i|0)==(0|0);
           if ($cond$i207) {
            $383 = 1 << $379;
            $384 = $383 ^ -1;
            $385 = $247 & $384;
            HEAP32[(14644)>>2] = $385;
            $469 = $385;
            break L176;
           }
          } else {
           $386 = HEAP32[(14656)>>2]|0;
           $387 = ($386>>>0)>($351>>>0);
           if ($387) {
            _abort();
            // unreachable;
           } else {
            $388 = ((($351)) + 16|0);
            $389 = HEAP32[$388>>2]|0;
            $390 = ($389|0)==($$4$lcssa$i|0);
            $391 = ((($351)) + 20|0);
            $$sink325 = $390 ? $388 : $391;
            HEAP32[$$sink325>>2] = $$3371$i;
            $392 = ($$3371$i|0)==(0|0);
            if ($392) {
             $469 = $247;
             break L176;
            } else {
             break;
            }
           }
          }
         } while(0);
         $393 = HEAP32[(14656)>>2]|0;
         $394 = ($393>>>0)>($$3371$i>>>0);
         if ($394) {
          _abort();
          // unreachable;
         }
         $395 = ((($$3371$i)) + 24|0);
         HEAP32[$395>>2] = $351;
         $396 = ((($$4$lcssa$i)) + 16|0);
         $397 = HEAP32[$396>>2]|0;
         $398 = ($397|0)==(0|0);
         do {
          if (!($398)) {
           $399 = ($393>>>0)>($397>>>0);
           if ($399) {
            _abort();
            // unreachable;
           } else {
            $400 = ((($$3371$i)) + 16|0);
            HEAP32[$400>>2] = $397;
            $401 = ((($397)) + 24|0);
            HEAP32[$401>>2] = $$3371$i;
            break;
           }
          }
         } while(0);
         $402 = ((($$4$lcssa$i)) + 20|0);
         $403 = HEAP32[$402>>2]|0;
         $404 = ($403|0)==(0|0);
         if ($404) {
          $469 = $247;
         } else {
          $405 = HEAP32[(14656)>>2]|0;
          $406 = ($405>>>0)>($403>>>0);
          if ($406) {
           _abort();
           // unreachable;
          } else {
           $407 = ((($$3371$i)) + 20|0);
           HEAP32[$407>>2] = $403;
           $408 = ((($403)) + 24|0);
           HEAP32[$408>>2] = $$3371$i;
           $469 = $247;
           break;
          }
         }
        }
       } while(0);
       $409 = ($$4349$lcssa$i>>>0)<(16);
       L200: do {
        if ($409) {
         $410 = (($$4349$lcssa$i) + ($246))|0;
         $411 = $410 | 3;
         $412 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$412>>2] = $411;
         $413 = (($$4$lcssa$i) + ($410)|0);
         $414 = ((($413)) + 4|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $$4349$lcssa$i | 1;
         $420 = ((($348)) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = (($348) + ($$4349$lcssa$i)|0);
         HEAP32[$421>>2] = $$4349$lcssa$i;
         $422 = (3)?($$4349$lcssa$i >>> 3):($$4349$lcssa$i);
         $423 = ($$4349$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (14680 + ($424<<2)|0);
          $426 = HEAP32[3660]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[3660] = $430;
           $$pre$i208 = ((($425)) + 8|0);
           $$0367$i = $425;$$pre$phi$i209Z2D = $$pre$i208;
          } else {
           $431 = ((($425)) + 8|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(14656)>>2]|0;
           $434 = ($433>>>0)>($432>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$0367$i = $432;$$pre$phi$i209Z2D = $431;
           }
          }
          HEAP32[$$pre$phi$i209Z2D>>2] = $348;
          $435 = ((($$0367$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $436 = ((($348)) + 8|0);
          HEAP32[$436>>2] = $$0367$i;
          $437 = ((($348)) + 12|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = (8)?($$4349$lcssa$i >>> 8):($$4349$lcssa$i);
         $439 = ($438|0)==(0);
         if ($439) {
          $$0360$i = 0;
         } else {
          $440 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($440) {
           $$0360$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = (16)?($441 >>> 16):($441);
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = (16)?($445 >>> 16):($445);
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = (16)?($450 >>> 16):($450);
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = (15)?($455 >>> 15):($455);
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = ($459)?($$4349$lcssa$i >>> $459):($$4349$lcssa$i);
           $461 = $460 & 1;
           $462 = $461 | $458;
           $$0360$i = $462;
          }
         }
         $463 = (14944 + ($$0360$i<<2)|0);
         $464 = ((($348)) + 28|0);
         HEAP32[$464>>2] = $$0360$i;
         $465 = ((($348)) + 16|0);
         $466 = ((($465)) + 4|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = 1 << $$0360$i;
         $468 = $469 & $467;
         $470 = ($468|0)==(0);
         if ($470) {
          $471 = $469 | $467;
          HEAP32[(14644)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $472 = ((($348)) + 24|0);
          HEAP32[$472>>2] = $463;
          $473 = ((($348)) + 12|0);
          HEAP32[$473>>2] = $348;
          $474 = ((($348)) + 8|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($$4349$lcssa$i|0);
         L218: do {
          if ($479) {
           $$0343$lcssa$i = $475;
          } else {
           $480 = ($$0360$i|0)==(31);
           $481 = (1)?($$0360$i >>> 1):($$0360$i);
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $$4349$lcssa$i << $483;
           $$034217$i = $484;$$034316$i = $475;
           while(1) {
            $491 = (31)?($$034217$i >>> 31):($$034217$i);
            $492 = (((($$034316$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $$034217$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($$4349$lcssa$i|0);
            if ($490) {
             $$0343$lcssa$i = $487;
             break L218;
            } else {
             $$034217$i = $485;$$034316$i = $487;
            }
           }
           $494 = HEAP32[(14656)>>2]|0;
           $495 = ($494>>>0)>($492>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $496 = ((($348)) + 24|0);
            HEAP32[$496>>2] = $$034316$i;
            $497 = ((($348)) + 12|0);
            HEAP32[$497>>2] = $348;
            $498 = ((($348)) + 8|0);
            HEAP32[$498>>2] = $348;
            break L200;
           }
          }
         } while(0);
         $499 = ((($$0343$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(14656)>>2]|0;
         $502 = ($501>>>0)<=($$0343$lcssa$i>>>0);
         $503 = ($501>>>0)<=($500>>>0);
         $504 = $503 & $502;
         if ($504) {
          $505 = ((($500)) + 12|0);
          HEAP32[$505>>2] = $348;
          HEAP32[$499>>2] = $348;
          $506 = ((($348)) + 8|0);
          HEAP32[$506>>2] = $500;
          $507 = ((($348)) + 12|0);
          HEAP32[$507>>2] = $$0343$lcssa$i;
          $508 = ((($348)) + 24|0);
          HEAP32[$508>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $509 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $509;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $510 = HEAP32[(14648)>>2]|0;
 $511 = ($510>>>0)<($$0197>>>0);
 if (!($511)) {
  $512 = (($510) - ($$0197))|0;
  $513 = HEAP32[(14660)>>2]|0;
  $514 = ($512>>>0)>(15);
  if ($514) {
   $515 = (($513) + ($$0197)|0);
   HEAP32[(14660)>>2] = $515;
   HEAP32[(14648)>>2] = $512;
   $516 = $512 | 1;
   $517 = ((($515)) + 4|0);
   HEAP32[$517>>2] = $516;
   $518 = (($513) + ($510)|0);
   HEAP32[$518>>2] = $512;
   $519 = $$0197 | 3;
   $520 = ((($513)) + 4|0);
   HEAP32[$520>>2] = $519;
  } else {
   HEAP32[(14648)>>2] = 0;
   HEAP32[(14660)>>2] = 0;
   $521 = $510 | 3;
   $522 = ((($513)) + 4|0);
   HEAP32[$522>>2] = $521;
   $523 = (($513) + ($510)|0);
   $524 = ((($523)) + 4|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = ((($513)) + 8|0);
  $$0 = $527;
  STACKTOP = sp;return ($$0|0);
 }
 $528 = HEAP32[(14652)>>2]|0;
 $529 = ($528>>>0)>($$0197>>>0);
 if ($529) {
  $530 = (($528) - ($$0197))|0;
  HEAP32[(14652)>>2] = $530;
  $531 = HEAP32[(14664)>>2]|0;
  $532 = (($531) + ($$0197)|0);
  HEAP32[(14664)>>2] = $532;
  $533 = $530 | 1;
  $534 = ((($532)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = $$0197 | 3;
  $536 = ((($531)) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = ((($531)) + 8|0);
  $$0 = $537;
  STACKTOP = sp;return ($$0|0);
 }
 $538 = HEAP32[3778]|0;
 $539 = ($538|0)==(0);
 if ($539) {
  HEAP32[(15120)>>2] = 4096;
  HEAP32[(15116)>>2] = 4096;
  HEAP32[(15124)>>2] = -1;
  HEAP32[(15128)>>2] = -1;
  HEAP32[(15132)>>2] = 0;
  HEAP32[(15084)>>2] = 0;
  $540 = $1;
  $541 = $540 & -16;
  $542 = $541 ^ 1431655768;
  HEAP32[3778] = $542;
  $546 = 4096;
 } else {
  $$pre$i210 = HEAP32[(15120)>>2]|0;
  $546 = $$pre$i210;
 }
 $543 = (($$0197) + 48)|0;
 $544 = (($$0197) + 47)|0;
 $545 = (($546) + ($544))|0;
 $547 = (0 - ($546))|0;
 $548 = $545 & $547;
 $549 = ($548>>>0)>($$0197>>>0);
 if (!($549)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $550 = HEAP32[(15080)>>2]|0;
 $551 = ($550|0)==(0);
 if (!($551)) {
  $552 = HEAP32[(15072)>>2]|0;
  $553 = (($552) + ($548))|0;
  $554 = ($553>>>0)<=($552>>>0);
  $555 = ($553>>>0)>($550>>>0);
  $or$cond1$i = $554 | $555;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $556 = HEAP32[(15084)>>2]|0;
 $557 = $556 & 4;
 $558 = ($557|0)==(0);
 L257: do {
  if ($558) {
   $559 = HEAP32[(14664)>>2]|0;
   $560 = ($559|0)==(0|0);
   L259: do {
    if ($560) {
     label = 173;
    } else {
     $$0$i$i = (15088);
     while(1) {
      $561 = HEAP32[$$0$i$i>>2]|0;
      $562 = ($561>>>0)>($559>>>0);
      if (!($562)) {
       $563 = ((($$0$i$i)) + 4|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = (($561) + ($564)|0);
       $566 = ($565>>>0)>($559>>>0);
       if ($566) {
        break;
       }
      }
      $567 = ((($$0$i$i)) + 8|0);
      $568 = HEAP32[$567>>2]|0;
      $569 = ($568|0)==(0|0);
      if ($569) {
       label = 173;
       break L259;
      } else {
       $$0$i$i = $568;
      }
     }
     $592 = (($545) - ($528))|0;
     $593 = $592 & $547;
     $594 = ($593>>>0)<(2147483647);
     if ($594) {
      $595 = ((($$0$i$i)) + 4|0);
      $596 = (_sbrk(($593|0))|0);
      $597 = HEAP32[$$0$i$i>>2]|0;
      $598 = HEAP32[$595>>2]|0;
      $599 = (($597) + ($598)|0);
      $600 = ($596|0)==($599|0);
      if ($600) {
       $601 = ($596|0)==((-1)|0);
       if ($601) {
        $$2234243136$i = $593;
       } else {
        $$723947$i = $593;$$748$i = $596;
        label = 190;
        break L257;
       }
      } else {
       $$2247$ph$i = $596;$$2253$ph$i = $593;
       label = 181;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $570 = (_sbrk(0)|0);
     $571 = ($570|0)==((-1)|0);
     if ($571) {
      $$2234243136$i = 0;
     } else {
      $572 = $570;
      $573 = HEAP32[(15116)>>2]|0;
      $574 = (($573) + -1)|0;
      $575 = $574 & $572;
      $576 = ($575|0)==(0);
      $577 = (($574) + ($572))|0;
      $578 = (0 - ($573))|0;
      $579 = $577 & $578;
      $580 = (($579) - ($572))|0;
      $581 = $576 ? 0 : $580;
      $spec$select49$i = (($581) + ($548))|0;
      $582 = HEAP32[(15072)>>2]|0;
      $583 = (($spec$select49$i) + ($582))|0;
      $584 = ($spec$select49$i>>>0)>($$0197>>>0);
      $585 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i213 = $584 & $585;
      if ($or$cond$i213) {
       $586 = HEAP32[(15080)>>2]|0;
       $587 = ($586|0)==(0);
       if (!($587)) {
        $588 = ($583>>>0)<=($582>>>0);
        $589 = ($583>>>0)>($586>>>0);
        $or$cond2$i214 = $588 | $589;
        if ($or$cond2$i214) {
         $$2234243136$i = 0;
         break;
        }
       }
       $590 = (_sbrk(($spec$select49$i|0))|0);
       $591 = ($590|0)==($570|0);
       if ($591) {
        $$723947$i = $spec$select49$i;$$748$i = $570;
        label = 190;
        break L257;
       } else {
        $$2247$ph$i = $590;$$2253$ph$i = $spec$select49$i;
        label = 181;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $602 = (0 - ($$2253$ph$i))|0;
     $603 = ($$2247$ph$i|0)!=((-1)|0);
     $604 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $604 & $603;
     $605 = ($543>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $605 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $615 = ($$2247$ph$i|0)==((-1)|0);
      if ($615) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 190;
       break L257;
      }
     }
     $606 = HEAP32[(15120)>>2]|0;
     $607 = (($544) - ($$2253$ph$i))|0;
     $608 = (($607) + ($606))|0;
     $609 = (0 - ($606))|0;
     $610 = $608 & $609;
     $611 = ($610>>>0)<(2147483647);
     if (!($611)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L257;
     }
     $612 = (_sbrk(($610|0))|0);
     $613 = ($612|0)==((-1)|0);
     if ($613) {
      (_sbrk(($602|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $614 = (($610) + ($$2253$ph$i))|0;
      $$723947$i = $614;$$748$i = $$2247$ph$i;
      label = 190;
      break L257;
     }
    }
   } while(0);
   $616 = HEAP32[(15084)>>2]|0;
   $617 = $616 | 4;
   HEAP32[(15084)>>2] = $617;
   $$4236$i = $$2234243136$i;
   label = 188;
  } else {
   $$4236$i = 0;
   label = 188;
  }
 } while(0);
 if ((label|0) == 188) {
  $618 = ($548>>>0)<(2147483647);
  if ($618) {
   $619 = (_sbrk(($548|0))|0);
   $620 = (_sbrk(0)|0);
   $621 = ($619|0)!=((-1)|0);
   $622 = ($620|0)!=((-1)|0);
   $or$cond5$i = $621 & $622;
   $623 = ($619>>>0)<($620>>>0);
   $or$cond8$i = $623 & $or$cond5$i;
   $624 = $620;
   $625 = $619;
   $626 = (($624) - ($625))|0;
   $627 = (($$0197) + 40)|0;
   $628 = ($626>>>0)>($627>>>0);
   $spec$select9$i = $628 ? $626 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $629 = ($619|0)==((-1)|0);
   $not$$i = $628 ^ 1;
   $630 = $629 | $not$$i;
   $or$cond50$i = $630 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $619;
    label = 190;
   }
  }
 }
 if ((label|0) == 190) {
  $631 = HEAP32[(15072)>>2]|0;
  $632 = (($631) + ($$723947$i))|0;
  HEAP32[(15072)>>2] = $632;
  $633 = HEAP32[(15076)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(15076)>>2] = $632;
  }
  $635 = HEAP32[(14664)>>2]|0;
  $636 = ($635|0)==(0|0);
  L294: do {
   if ($636) {
    $637 = HEAP32[(14656)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($$748$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(14656)>>2] = $$748$i;
    }
    HEAP32[(15088)>>2] = $$748$i;
    HEAP32[(15092)>>2] = $$723947$i;
    HEAP32[(15100)>>2] = 0;
    $640 = HEAP32[3778]|0;
    HEAP32[(14676)>>2] = $640;
    HEAP32[(14672)>>2] = -1;
    HEAP32[(14692)>>2] = (14680);
    HEAP32[(14688)>>2] = (14680);
    HEAP32[(14700)>>2] = (14688);
    HEAP32[(14696)>>2] = (14688);
    HEAP32[(14708)>>2] = (14696);
    HEAP32[(14704)>>2] = (14696);
    HEAP32[(14716)>>2] = (14704);
    HEAP32[(14712)>>2] = (14704);
    HEAP32[(14724)>>2] = (14712);
    HEAP32[(14720)>>2] = (14712);
    HEAP32[(14732)>>2] = (14720);
    HEAP32[(14728)>>2] = (14720);
    HEAP32[(14740)>>2] = (14728);
    HEAP32[(14736)>>2] = (14728);
    HEAP32[(14748)>>2] = (14736);
    HEAP32[(14744)>>2] = (14736);
    HEAP32[(14756)>>2] = (14744);
    HEAP32[(14752)>>2] = (14744);
    HEAP32[(14764)>>2] = (14752);
    HEAP32[(14760)>>2] = (14752);
    HEAP32[(14772)>>2] = (14760);
    HEAP32[(14768)>>2] = (14760);
    HEAP32[(14780)>>2] = (14768);
    HEAP32[(14776)>>2] = (14768);
    HEAP32[(14788)>>2] = (14776);
    HEAP32[(14784)>>2] = (14776);
    HEAP32[(14796)>>2] = (14784);
    HEAP32[(14792)>>2] = (14784);
    HEAP32[(14804)>>2] = (14792);
    HEAP32[(14800)>>2] = (14792);
    HEAP32[(14812)>>2] = (14800);
    HEAP32[(14808)>>2] = (14800);
    HEAP32[(14820)>>2] = (14808);
    HEAP32[(14816)>>2] = (14808);
    HEAP32[(14828)>>2] = (14816);
    HEAP32[(14824)>>2] = (14816);
    HEAP32[(14836)>>2] = (14824);
    HEAP32[(14832)>>2] = (14824);
    HEAP32[(14844)>>2] = (14832);
    HEAP32[(14840)>>2] = (14832);
    HEAP32[(14852)>>2] = (14840);
    HEAP32[(14848)>>2] = (14840);
    HEAP32[(14860)>>2] = (14848);
    HEAP32[(14856)>>2] = (14848);
    HEAP32[(14868)>>2] = (14856);
    HEAP32[(14864)>>2] = (14856);
    HEAP32[(14876)>>2] = (14864);
    HEAP32[(14872)>>2] = (14864);
    HEAP32[(14884)>>2] = (14872);
    HEAP32[(14880)>>2] = (14872);
    HEAP32[(14892)>>2] = (14880);
    HEAP32[(14888)>>2] = (14880);
    HEAP32[(14900)>>2] = (14888);
    HEAP32[(14896)>>2] = (14888);
    HEAP32[(14908)>>2] = (14896);
    HEAP32[(14904)>>2] = (14896);
    HEAP32[(14916)>>2] = (14904);
    HEAP32[(14912)>>2] = (14904);
    HEAP32[(14924)>>2] = (14912);
    HEAP32[(14920)>>2] = (14912);
    HEAP32[(14932)>>2] = (14920);
    HEAP32[(14928)>>2] = (14920);
    HEAP32[(14940)>>2] = (14928);
    HEAP32[(14936)>>2] = (14928);
    $641 = (($$723947$i) + -40)|0;
    $642 = ((($$748$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$748$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(14664)>>2] = $649;
    HEAP32[(14652)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($$748$i) + ($641)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(15128)>>2]|0;
    HEAP32[(14668)>>2] = $655;
   } else {
    $$024372$i = (15088);
    while(1) {
     $656 = HEAP32[$$024372$i>>2]|0;
     $657 = ((($$024372$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$748$i|0)==($659|0);
     if ($660) {
      label = 199;
      break;
     }
     $661 = ((($$024372$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024372$i = $662;
     }
    }
    if ((label|0) == 199) {
     $664 = ((($$024372$i)) + 4|0);
     $665 = ((($$024372$i)) + 12|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = $666 & 8;
     $668 = ($667|0)==(0);
     if ($668) {
      $669 = ($656>>>0)<=($635>>>0);
      $670 = ($$748$i>>>0)>($635>>>0);
      $or$cond51$i = $670 & $669;
      if ($or$cond51$i) {
       $671 = (($658) + ($$723947$i))|0;
       HEAP32[$664>>2] = $671;
       $672 = HEAP32[(14652)>>2]|0;
       $673 = (($672) + ($$723947$i))|0;
       $674 = ((($635)) + 8|0);
       $675 = $674;
       $676 = $675 & 7;
       $677 = ($676|0)==(0);
       $678 = (0 - ($675))|0;
       $679 = $678 & 7;
       $680 = $677 ? 0 : $679;
       $681 = (($635) + ($680)|0);
       $682 = (($673) - ($680))|0;
       HEAP32[(14664)>>2] = $681;
       HEAP32[(14652)>>2] = $682;
       $683 = $682 | 1;
       $684 = ((($681)) + 4|0);
       HEAP32[$684>>2] = $683;
       $685 = (($635) + ($673)|0);
       $686 = ((($685)) + 4|0);
       HEAP32[$686>>2] = 40;
       $687 = HEAP32[(15128)>>2]|0;
       HEAP32[(14668)>>2] = $687;
       break;
      }
     }
    }
    $688 = HEAP32[(14656)>>2]|0;
    $689 = ($$748$i>>>0)<($688>>>0);
    if ($689) {
     HEAP32[(14656)>>2] = $$748$i;
     $752 = $$748$i;
    } else {
     $752 = $688;
    }
    $690 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (15088);
    while(1) {
     $691 = HEAP32[$$124471$i>>2]|0;
     $692 = ($691|0)==($690|0);
     if ($692) {
      label = 207;
      break;
     }
     $693 = ((($$124471$i)) + 8|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = ($694|0)==(0|0);
     if ($695) {
      break;
     } else {
      $$124471$i = $694;
     }
    }
    if ((label|0) == 207) {
     $696 = ((($$124471$i)) + 12|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = $697 & 8;
     $699 = ($698|0)==(0);
     if ($699) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $700 = ((($$124471$i)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = (($701) + ($$723947$i))|0;
      HEAP32[$700>>2] = $702;
      $703 = ((($$748$i)) + 8|0);
      $704 = $703;
      $705 = $704 & 7;
      $706 = ($705|0)==(0);
      $707 = (0 - ($704))|0;
      $708 = $707 & 7;
      $709 = $706 ? 0 : $708;
      $710 = (($$748$i) + ($709)|0);
      $711 = ((($690)) + 8|0);
      $712 = $711;
      $713 = $712 & 7;
      $714 = ($713|0)==(0);
      $715 = (0 - ($712))|0;
      $716 = $715 & 7;
      $717 = $714 ? 0 : $716;
      $718 = (($690) + ($717)|0);
      $719 = $718;
      $720 = $710;
      $721 = (($719) - ($720))|0;
      $722 = (($710) + ($$0197)|0);
      $723 = (($721) - ($$0197))|0;
      $724 = $$0197 | 3;
      $725 = ((($710)) + 4|0);
      HEAP32[$725>>2] = $724;
      $726 = ($635|0)==($718|0);
      L317: do {
       if ($726) {
        $727 = HEAP32[(14652)>>2]|0;
        $728 = (($727) + ($723))|0;
        HEAP32[(14652)>>2] = $728;
        HEAP32[(14664)>>2] = $722;
        $729 = $728 | 1;
        $730 = ((($722)) + 4|0);
        HEAP32[$730>>2] = $729;
       } else {
        $731 = HEAP32[(14660)>>2]|0;
        $732 = ($731|0)==($718|0);
        if ($732) {
         $733 = HEAP32[(14648)>>2]|0;
         $734 = (($733) + ($723))|0;
         HEAP32[(14648)>>2] = $734;
         HEAP32[(14660)>>2] = $722;
         $735 = $734 | 1;
         $736 = ((($722)) + 4|0);
         HEAP32[$736>>2] = $735;
         $737 = (($722) + ($734)|0);
         HEAP32[$737>>2] = $734;
         break;
        }
        $738 = ((($718)) + 4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = $739 & 3;
        $741 = ($740|0)==(1);
        if ($741) {
         $742 = $739 & -8;
         $743 = (3)?($739 >>> 3):($739);
         $744 = ($739>>>0)<(256);
         L325: do {
          if ($744) {
           $745 = ((($718)) + 8|0);
           $746 = HEAP32[$745>>2]|0;
           $747 = ((($718)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = $743 << 1;
           $750 = (14680 + ($749<<2)|0);
           $751 = ($746|0)==($750|0);
           do {
            if (!($751)) {
             $753 = ($752>>>0)>($746>>>0);
             if ($753) {
              _abort();
              // unreachable;
             }
             $754 = ((($746)) + 12|0);
             $755 = HEAP32[$754>>2]|0;
             $756 = ($755|0)==($718|0);
             if ($756) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $757 = ($748|0)==($746|0);
           if ($757) {
            $758 = 1 << $743;
            $759 = $758 ^ -1;
            $760 = HEAP32[3660]|0;
            $761 = $760 & $759;
            HEAP32[3660] = $761;
            break;
           }
           $762 = ($748|0)==($750|0);
           do {
            if ($762) {
             $$pre16$i$i = ((($748)) + 8|0);
             $$pre$phi17$i$iZ2D = $$pre16$i$i;
            } else {
             $763 = ($752>>>0)>($748>>>0);
             if ($763) {
              _abort();
              // unreachable;
             }
             $764 = ((($748)) + 8|0);
             $765 = HEAP32[$764>>2]|0;
             $766 = ($765|0)==($718|0);
             if ($766) {
              $$pre$phi17$i$iZ2D = $764;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $767 = ((($746)) + 12|0);
           HEAP32[$767>>2] = $748;
           HEAP32[$$pre$phi17$i$iZ2D>>2] = $746;
          } else {
           $768 = ((($718)) + 24|0);
           $769 = HEAP32[$768>>2]|0;
           $770 = ((($718)) + 12|0);
           $771 = HEAP32[$770>>2]|0;
           $772 = ($771|0)==($718|0);
           do {
            if ($772) {
             $782 = ((($718)) + 16|0);
             $783 = ((($782)) + 4|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==(0|0);
             if ($785) {
              $786 = HEAP32[$782>>2]|0;
              $787 = ($786|0)==(0|0);
              if ($787) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i$ph = $786;$$1292$i$i$ph = $782;
              }
             } else {
              $$1290$i$i$ph = $784;$$1292$i$i$ph = $783;
             }
             $$1290$i$i = $$1290$i$i$ph;$$1292$i$i = $$1292$i$i$ph;
             while(1) {
              $788 = ((($$1290$i$i)) + 20|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $791 = ((($$1290$i$i)) + 16|0);
               $792 = HEAP32[$791>>2]|0;
               $793 = ($792|0)==(0|0);
               if ($793) {
                break;
               } else {
                $$1290$i$i$be = $792;$$1292$i$i$be = $791;
               }
              } else {
               $$1290$i$i$be = $789;$$1292$i$i$be = $788;
              }
              $$1290$i$i = $$1290$i$i$be;$$1292$i$i = $$1292$i$i$be;
             }
             $794 = ($752>>>0)>($$1292$i$i>>>0);
             if ($794) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $773 = ((($718)) + 8|0);
             $774 = HEAP32[$773>>2]|0;
             $775 = ($752>>>0)>($774>>>0);
             if ($775) {
              _abort();
              // unreachable;
             }
             $776 = ((($774)) + 12|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777|0)==($718|0);
             if (!($778)) {
              _abort();
              // unreachable;
             }
             $779 = ((($771)) + 8|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($718|0);
             if ($781) {
              HEAP32[$776>>2] = $771;
              HEAP32[$779>>2] = $774;
              $$3$i$i = $771;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $795 = ($769|0)==(0|0);
           if ($795) {
            break;
           }
           $796 = ((($718)) + 28|0);
           $797 = HEAP32[$796>>2]|0;
           $798 = (14944 + ($797<<2)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ($799|0)==($718|0);
           do {
            if ($800) {
             HEAP32[$798>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $801 = 1 << $797;
             $802 = $801 ^ -1;
             $803 = HEAP32[(14644)>>2]|0;
             $804 = $803 & $802;
             HEAP32[(14644)>>2] = $804;
             break L325;
            } else {
             $805 = HEAP32[(14656)>>2]|0;
             $806 = ($805>>>0)>($769>>>0);
             if ($806) {
              _abort();
              // unreachable;
             } else {
              $807 = ((($769)) + 16|0);
              $808 = HEAP32[$807>>2]|0;
              $809 = ($808|0)==($718|0);
              $810 = ((($769)) + 20|0);
              $$sink326 = $809 ? $807 : $810;
              HEAP32[$$sink326>>2] = $$3$i$i;
              $811 = ($$3$i$i|0)==(0|0);
              if ($811) {
               break L325;
              } else {
               break;
              }
             }
            }
           } while(0);
           $812 = HEAP32[(14656)>>2]|0;
           $813 = ($812>>>0)>($$3$i$i>>>0);
           if ($813) {
            _abort();
            // unreachable;
           }
           $814 = ((($$3$i$i)) + 24|0);
           HEAP32[$814>>2] = $769;
           $815 = ((($718)) + 16|0);
           $816 = HEAP32[$815>>2]|0;
           $817 = ($816|0)==(0|0);
           do {
            if (!($817)) {
             $818 = ($812>>>0)>($816>>>0);
             if ($818) {
              _abort();
              // unreachable;
             } else {
              $819 = ((($$3$i$i)) + 16|0);
              HEAP32[$819>>2] = $816;
              $820 = ((($816)) + 24|0);
              HEAP32[$820>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $821 = ((($815)) + 4|0);
           $822 = HEAP32[$821>>2]|0;
           $823 = ($822|0)==(0|0);
           if ($823) {
            break;
           }
           $824 = HEAP32[(14656)>>2]|0;
           $825 = ($824>>>0)>($822>>>0);
           if ($825) {
            _abort();
            // unreachable;
           } else {
            $826 = ((($$3$i$i)) + 20|0);
            HEAP32[$826>>2] = $822;
            $827 = ((($822)) + 24|0);
            HEAP32[$827>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $828 = (($718) + ($742)|0);
         $829 = (($742) + ($723))|0;
         $$0$i16$i = $828;$$0286$i$i = $829;
        } else {
         $$0$i16$i = $718;$$0286$i$i = $723;
        }
        $830 = ((($$0$i16$i)) + 4|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = $831 & -2;
        HEAP32[$830>>2] = $832;
        $833 = $$0286$i$i | 1;
        $834 = ((($722)) + 4|0);
        HEAP32[$834>>2] = $833;
        $835 = (($722) + ($$0286$i$i)|0);
        HEAP32[$835>>2] = $$0286$i$i;
        $836 = (3)?($$0286$i$i >>> 3):($$0286$i$i);
        $837 = ($$0286$i$i>>>0)<(256);
        if ($837) {
         $838 = $836 << 1;
         $839 = (14680 + ($838<<2)|0);
         $840 = HEAP32[3660]|0;
         $841 = 1 << $836;
         $842 = $840 & $841;
         $843 = ($842|0)==(0);
         do {
          if ($843) {
           $844 = $840 | $841;
           HEAP32[3660] = $844;
           $$pre$i17$i = ((($839)) + 8|0);
           $$0294$i$i = $839;$$pre$phi$i18$iZ2D = $$pre$i17$i;
          } else {
           $845 = ((($839)) + 8|0);
           $846 = HEAP32[$845>>2]|0;
           $847 = HEAP32[(14656)>>2]|0;
           $848 = ($847>>>0)>($846>>>0);
           if (!($848)) {
            $$0294$i$i = $846;$$pre$phi$i18$iZ2D = $845;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $722;
         $849 = ((($$0294$i$i)) + 12|0);
         HEAP32[$849>>2] = $722;
         $850 = ((($722)) + 8|0);
         HEAP32[$850>>2] = $$0294$i$i;
         $851 = ((($722)) + 12|0);
         HEAP32[$851>>2] = $839;
         break;
        }
        $852 = (8)?($$0286$i$i >>> 8):($$0286$i$i);
        $853 = ($852|0)==(0);
        do {
         if ($853) {
          $$0295$i$i = 0;
         } else {
          $854 = ($$0286$i$i>>>0)>(16777215);
          if ($854) {
           $$0295$i$i = 31;
           break;
          }
          $855 = (($852) + 1048320)|0;
          $856 = (16)?($855 >>> 16):($855);
          $857 = $856 & 8;
          $858 = $852 << $857;
          $859 = (($858) + 520192)|0;
          $860 = (16)?($859 >>> 16):($859);
          $861 = $860 & 4;
          $862 = $861 | $857;
          $863 = $858 << $861;
          $864 = (($863) + 245760)|0;
          $865 = (16)?($864 >>> 16):($864);
          $866 = $865 & 2;
          $867 = $862 | $866;
          $868 = (14 - ($867))|0;
          $869 = $863 << $866;
          $870 = (15)?($869 >>> 15):($869);
          $871 = (($868) + ($870))|0;
          $872 = $871 << 1;
          $873 = (($871) + 7)|0;
          $874 = ($873)?($$0286$i$i >>> $873):($$0286$i$i);
          $875 = $874 & 1;
          $876 = $875 | $872;
          $$0295$i$i = $876;
         }
        } while(0);
        $877 = (14944 + ($$0295$i$i<<2)|0);
        $878 = ((($722)) + 28|0);
        HEAP32[$878>>2] = $$0295$i$i;
        $879 = ((($722)) + 16|0);
        $880 = ((($879)) + 4|0);
        HEAP32[$880>>2] = 0;
        HEAP32[$879>>2] = 0;
        $881 = HEAP32[(14644)>>2]|0;
        $882 = 1 << $$0295$i$i;
        $883 = $881 & $882;
        $884 = ($883|0)==(0);
        if ($884) {
         $885 = $881 | $882;
         HEAP32[(14644)>>2] = $885;
         HEAP32[$877>>2] = $722;
         $886 = ((($722)) + 24|0);
         HEAP32[$886>>2] = $877;
         $887 = ((($722)) + 12|0);
         HEAP32[$887>>2] = $722;
         $888 = ((($722)) + 8|0);
         HEAP32[$888>>2] = $722;
         break;
        }
        $889 = HEAP32[$877>>2]|0;
        $890 = ((($889)) + 4|0);
        $891 = HEAP32[$890>>2]|0;
        $892 = $891 & -8;
        $893 = ($892|0)==($$0286$i$i|0);
        L410: do {
         if ($893) {
          $$0288$lcssa$i$i = $889;
         } else {
          $894 = ($$0295$i$i|0)==(31);
          $895 = (1)?($$0295$i$i >>> 1):($$0295$i$i);
          $896 = (25 - ($895))|0;
          $897 = $894 ? 0 : $896;
          $898 = $$0286$i$i << $897;
          $$028711$i$i = $898;$$028810$i$i = $889;
          while(1) {
           $905 = (31)?($$028711$i$i >>> 31):($$028711$i$i);
           $906 = (((($$028810$i$i)) + 16|0) + ($905<<2)|0);
           $901 = HEAP32[$906>>2]|0;
           $907 = ($901|0)==(0|0);
           if ($907) {
            break;
           }
           $899 = $$028711$i$i << 1;
           $900 = ((($901)) + 4|0);
           $902 = HEAP32[$900>>2]|0;
           $903 = $902 & -8;
           $904 = ($903|0)==($$0286$i$i|0);
           if ($904) {
            $$0288$lcssa$i$i = $901;
            break L410;
           } else {
            $$028711$i$i = $899;$$028810$i$i = $901;
           }
          }
          $908 = HEAP32[(14656)>>2]|0;
          $909 = ($908>>>0)>($906>>>0);
          if ($909) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$906>>2] = $722;
           $910 = ((($722)) + 24|0);
           HEAP32[$910>>2] = $$028810$i$i;
           $911 = ((($722)) + 12|0);
           HEAP32[$911>>2] = $722;
           $912 = ((($722)) + 8|0);
           HEAP32[$912>>2] = $722;
           break L317;
          }
         }
        } while(0);
        $913 = ((($$0288$lcssa$i$i)) + 8|0);
        $914 = HEAP32[$913>>2]|0;
        $915 = HEAP32[(14656)>>2]|0;
        $916 = ($915>>>0)<=($$0288$lcssa$i$i>>>0);
        $917 = ($915>>>0)<=($914>>>0);
        $918 = $917 & $916;
        if ($918) {
         $919 = ((($914)) + 12|0);
         HEAP32[$919>>2] = $722;
         HEAP32[$913>>2] = $722;
         $920 = ((($722)) + 8|0);
         HEAP32[$920>>2] = $914;
         $921 = ((($722)) + 12|0);
         HEAP32[$921>>2] = $$0288$lcssa$i$i;
         $922 = ((($722)) + 24|0);
         HEAP32[$922>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $1059 = ((($710)) + 8|0);
      $$0 = $1059;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (15088);
    while(1) {
     $923 = HEAP32[$$0$i$i$i>>2]|0;
     $924 = ($923>>>0)>($635>>>0);
     if (!($924)) {
      $925 = ((($$0$i$i$i)) + 4|0);
      $926 = HEAP32[$925>>2]|0;
      $927 = (($923) + ($926)|0);
      $928 = ($927>>>0)>($635>>>0);
      if ($928) {
       break;
      }
     }
     $929 = ((($$0$i$i$i)) + 8|0);
     $930 = HEAP32[$929>>2]|0;
     $$0$i$i$i = $930;
    }
    $931 = ((($927)) + -47|0);
    $932 = ((($931)) + 8|0);
    $933 = $932;
    $934 = $933 & 7;
    $935 = ($934|0)==(0);
    $936 = (0 - ($933))|0;
    $937 = $936 & 7;
    $938 = $935 ? 0 : $937;
    $939 = (($931) + ($938)|0);
    $940 = ((($635)) + 16|0);
    $941 = ($939>>>0)<($940>>>0);
    $942 = $941 ? $635 : $939;
    $943 = ((($942)) + 8|0);
    $944 = ((($942)) + 24|0);
    $945 = (($$723947$i) + -40)|0;
    $946 = ((($$748$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($$748$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(14664)>>2] = $953;
    HEAP32[(14652)>>2] = $954;
    $955 = $954 | 1;
    $956 = ((($953)) + 4|0);
    HEAP32[$956>>2] = $955;
    $957 = (($$748$i) + ($945)|0);
    $958 = ((($957)) + 4|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[(15128)>>2]|0;
    HEAP32[(14668)>>2] = $959;
    $960 = ((($942)) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$943>>2]=HEAP32[(15088)>>2]|0;HEAP32[$943+4>>2]=HEAP32[(15088)+4>>2]|0;HEAP32[$943+8>>2]=HEAP32[(15088)+8>>2]|0;HEAP32[$943+12>>2]=HEAP32[(15088)+12>>2]|0;
    HEAP32[(15088)>>2] = $$748$i;
    HEAP32[(15092)>>2] = $$723947$i;
    HEAP32[(15100)>>2] = 0;
    HEAP32[(15096)>>2] = $943;
    $962 = $944;
    while(1) {
     $961 = ((($962)) + 4|0);
     HEAP32[$961>>2] = 7;
     $963 = ((($962)) + 8|0);
     $964 = ($963>>>0)<($927>>>0);
     if ($964) {
      $962 = $961;
     } else {
      break;
     }
    }
    $965 = ($942|0)==($635|0);
    if (!($965)) {
     $966 = $942;
     $967 = $635;
     $968 = (($966) - ($967))|0;
     $969 = HEAP32[$960>>2]|0;
     $970 = $969 & -2;
     HEAP32[$960>>2] = $970;
     $971 = $968 | 1;
     $972 = ((($635)) + 4|0);
     HEAP32[$972>>2] = $971;
     HEAP32[$942>>2] = $968;
     $973 = (3)?($968 >>> 3):($968);
     $974 = ($968>>>0)<(256);
     if ($974) {
      $975 = $973 << 1;
      $976 = (14680 + ($975<<2)|0);
      $977 = HEAP32[3660]|0;
      $978 = 1 << $973;
      $979 = $977 & $978;
      $980 = ($979|0)==(0);
      if ($980) {
       $981 = $977 | $978;
       HEAP32[3660] = $981;
       $$pre$i$i = ((($976)) + 8|0);
       $$0211$i$i = $976;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $982 = ((($976)) + 8|0);
       $983 = HEAP32[$982>>2]|0;
       $984 = HEAP32[(14656)>>2]|0;
       $985 = ($984>>>0)>($983>>>0);
       if ($985) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $983;$$pre$phi$i$iZ2D = $982;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $986 = ((($$0211$i$i)) + 12|0);
      HEAP32[$986>>2] = $635;
      $987 = ((($635)) + 8|0);
      HEAP32[$987>>2] = $$0211$i$i;
      $988 = ((($635)) + 12|0);
      HEAP32[$988>>2] = $976;
      break;
     }
     $989 = (8)?($968 >>> 8):($968);
     $990 = ($989|0)==(0);
     if ($990) {
      $$0212$i$i = 0;
     } else {
      $991 = ($968>>>0)>(16777215);
      if ($991) {
       $$0212$i$i = 31;
      } else {
       $992 = (($989) + 1048320)|0;
       $993 = (16)?($992 >>> 16):($992);
       $994 = $993 & 8;
       $995 = $989 << $994;
       $996 = (($995) + 520192)|0;
       $997 = (16)?($996 >>> 16):($996);
       $998 = $997 & 4;
       $999 = $998 | $994;
       $1000 = $995 << $998;
       $1001 = (($1000) + 245760)|0;
       $1002 = (16)?($1001 >>> 16):($1001);
       $1003 = $1002 & 2;
       $1004 = $999 | $1003;
       $1005 = (14 - ($1004))|0;
       $1006 = $1000 << $1003;
       $1007 = (15)?($1006 >>> 15):($1006);
       $1008 = (($1005) + ($1007))|0;
       $1009 = $1008 << 1;
       $1010 = (($1008) + 7)|0;
       $1011 = ($1010)?($968 >>> $1010):($968);
       $1012 = $1011 & 1;
       $1013 = $1012 | $1009;
       $$0212$i$i = $1013;
      }
     }
     $1014 = (14944 + ($$0212$i$i<<2)|0);
     $1015 = ((($635)) + 28|0);
     HEAP32[$1015>>2] = $$0212$i$i;
     $1016 = ((($635)) + 20|0);
     HEAP32[$1016>>2] = 0;
     HEAP32[$940>>2] = 0;
     $1017 = HEAP32[(14644)>>2]|0;
     $1018 = 1 << $$0212$i$i;
     $1019 = $1017 & $1018;
     $1020 = ($1019|0)==(0);
     if ($1020) {
      $1021 = $1017 | $1018;
      HEAP32[(14644)>>2] = $1021;
      HEAP32[$1014>>2] = $635;
      $1022 = ((($635)) + 24|0);
      HEAP32[$1022>>2] = $1014;
      $1023 = ((($635)) + 12|0);
      HEAP32[$1023>>2] = $635;
      $1024 = ((($635)) + 8|0);
      HEAP32[$1024>>2] = $635;
      break;
     }
     $1025 = HEAP32[$1014>>2]|0;
     $1026 = ((($1025)) + 4|0);
     $1027 = HEAP32[$1026>>2]|0;
     $1028 = $1027 & -8;
     $1029 = ($1028|0)==($968|0);
     L451: do {
      if ($1029) {
       $$0207$lcssa$i$i = $1025;
      } else {
       $1030 = ($$0212$i$i|0)==(31);
       $1031 = (1)?($$0212$i$i >>> 1):($$0212$i$i);
       $1032 = (25 - ($1031))|0;
       $1033 = $1030 ? 0 : $1032;
       $1034 = $968 << $1033;
       $$02065$i$i = $1034;$$02074$i$i = $1025;
       while(1) {
        $1041 = (31)?($$02065$i$i >>> 31):($$02065$i$i);
        $1042 = (((($$02074$i$i)) + 16|0) + ($1041<<2)|0);
        $1037 = HEAP32[$1042>>2]|0;
        $1043 = ($1037|0)==(0|0);
        if ($1043) {
         break;
        }
        $1035 = $$02065$i$i << 1;
        $1036 = ((($1037)) + 4|0);
        $1038 = HEAP32[$1036>>2]|0;
        $1039 = $1038 & -8;
        $1040 = ($1039|0)==($968|0);
        if ($1040) {
         $$0207$lcssa$i$i = $1037;
         break L451;
        } else {
         $$02065$i$i = $1035;$$02074$i$i = $1037;
        }
       }
       $1044 = HEAP32[(14656)>>2]|0;
       $1045 = ($1044>>>0)>($1042>>>0);
       if ($1045) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1042>>2] = $635;
        $1046 = ((($635)) + 24|0);
        HEAP32[$1046>>2] = $$02074$i$i;
        $1047 = ((($635)) + 12|0);
        HEAP32[$1047>>2] = $635;
        $1048 = ((($635)) + 8|0);
        HEAP32[$1048>>2] = $635;
        break L294;
       }
      }
     } while(0);
     $1049 = ((($$0207$lcssa$i$i)) + 8|0);
     $1050 = HEAP32[$1049>>2]|0;
     $1051 = HEAP32[(14656)>>2]|0;
     $1052 = ($1051>>>0)<=($$0207$lcssa$i$i>>>0);
     $1053 = ($1051>>>0)<=($1050>>>0);
     $1054 = $1053 & $1052;
     if ($1054) {
      $1055 = ((($1050)) + 12|0);
      HEAP32[$1055>>2] = $635;
      HEAP32[$1049>>2] = $635;
      $1056 = ((($635)) + 8|0);
      HEAP32[$1056>>2] = $1050;
      $1057 = ((($635)) + 12|0);
      HEAP32[$1057>>2] = $$0207$lcssa$i$i;
      $1058 = ((($635)) + 24|0);
      HEAP32[$1058>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(14652)>>2]|0;
  $1061 = ($1060>>>0)>($$0197>>>0);
  if ($1061) {
   $1062 = (($1060) - ($$0197))|0;
   HEAP32[(14652)>>2] = $1062;
   $1063 = HEAP32[(14664)>>2]|0;
   $1064 = (($1063) + ($$0197)|0);
   HEAP32[(14664)>>2] = $1064;
   $1065 = $1062 | 1;
   $1066 = ((($1064)) + 4|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $$0197 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $$0 = $1069;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0;
 var $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $$pre443 = 0, $$pre445 = 0, $$sink = 0, $$sink456 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond419 = 0, $cond420 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(14656)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(14660)>>2]|0;
   $20 = ($19|0)==($16|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;$113 = $16;
     break;
    }
    $109 = (($16) + ($17)|0);
    $110 = ((($16)) + 4|0);
    $111 = $17 | 1;
    $112 = $106 & -2;
    HEAP32[(14648)>>2] = $17;
    HEAP32[$105>>2] = $112;
    HEAP32[$110>>2] = $111;
    HEAP32[$109>>2] = $17;
    return;
   }
   $21 = (3)?($13 >>> 3):($13);
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (14680 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($3>>>0)>($24>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[3660]|0;
     $38 = $37 & $36;
     HEAP32[3660] = $38;
     $$1 = $16;$$1380 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre445 = ((($26)) + 8|0);
     $$pre$phi446Z2D = $$pre445;
    } else {
     $40 = ($3>>>0)>($26>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi446Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi446Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385$ph = $63;$$1388$ph = $59;
      }
     } else {
      $$1385$ph = $61;$$1388$ph = $60;
     }
     $$1385 = $$1385$ph;$$1388 = $$1388$ph;
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if ($67) {
       $68 = ((($$1385)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($69|0)==(0|0);
       if ($70) {
        break;
       } else {
        $$1385$be = $69;$$1388$be = $68;
       }
      } else {
       $$1385$be = $66;$$1388$be = $65;
      }
      $$1385 = $$1385$be;$$1388 = $$1388$be;
     }
     $71 = ($3>>>0)>($$1388>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($3>>>0)>($51>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (14944 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==($16|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond419 = ($$3|0)==(0|0);
      if ($cond419) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(14644)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(14644)>>2] = $81;
       $$1 = $16;$$1380 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(14656)>>2]|0;
      $83 = ($82>>>0)>($46>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($85|0)==($16|0);
       $87 = ((($46)) + 20|0);
       $$sink = $86 ? $84 : $87;
       HEAP32[$$sink>>2] = $$3;
       $88 = ($$3|0)==(0|0);
       if ($88) {
        $$1 = $16;$$1380 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $89 = HEAP32[(14656)>>2]|0;
    $90 = ($89>>>0)>($$3>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($89>>>0)>($93>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;$113 = $16;
    } else {
     $101 = HEAP32[(14656)>>2]|0;
     $102 = ($101>>>0)>($99>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;$113 = $2;
  }
 } while(0);
 $114 = ($113>>>0)<($10>>>0);
 if (!($114)) {
  _abort();
  // unreachable;
 }
 $115 = ((($10)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 & 1;
 $118 = ($117|0)==(0);
 if ($118) {
  _abort();
  // unreachable;
 }
 $119 = $116 & 2;
 $120 = ($119|0)==(0);
 if ($120) {
  $121 = HEAP32[(14664)>>2]|0;
  $122 = ($121|0)==($10|0);
  if ($122) {
   $123 = HEAP32[(14652)>>2]|0;
   $124 = (($123) + ($$1380))|0;
   HEAP32[(14652)>>2] = $124;
   HEAP32[(14664)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = HEAP32[(14660)>>2]|0;
   $128 = ($$1|0)==($127|0);
   if (!($128)) {
    return;
   }
   HEAP32[(14660)>>2] = 0;
   HEAP32[(14648)>>2] = 0;
   return;
  }
  $129 = HEAP32[(14660)>>2]|0;
  $130 = ($129|0)==($10|0);
  if ($130) {
   $131 = HEAP32[(14648)>>2]|0;
   $132 = (($131) + ($$1380))|0;
   HEAP32[(14648)>>2] = $132;
   HEAP32[(14660)>>2] = $113;
   $133 = $132 | 1;
   $134 = ((($$1)) + 4|0);
   HEAP32[$134>>2] = $133;
   $135 = (($113) + ($132)|0);
   HEAP32[$135>>2] = $132;
   return;
  }
  $136 = $116 & -8;
  $137 = (($136) + ($$1380))|0;
  $138 = (3)?($116 >>> 3):($116);
  $139 = ($116>>>0)<(256);
  L111: do {
   if ($139) {
    $140 = ((($10)) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ((($10)) + 12|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $138 << 1;
    $145 = (14680 + ($144<<2)|0);
    $146 = ($141|0)==($145|0);
    if (!($146)) {
     $147 = HEAP32[(14656)>>2]|0;
     $148 = ($147>>>0)>($141>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($141)) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($10|0);
     if (!($151)) {
      _abort();
      // unreachable;
     }
    }
    $152 = ($143|0)==($141|0);
    if ($152) {
     $153 = 1 << $138;
     $154 = $153 ^ -1;
     $155 = HEAP32[3660]|0;
     $156 = $155 & $154;
     HEAP32[3660] = $156;
     break;
    }
    $157 = ($143|0)==($145|0);
    if ($157) {
     $$pre443 = ((($143)) + 8|0);
     $$pre$phi444Z2D = $$pre443;
    } else {
     $158 = HEAP32[(14656)>>2]|0;
     $159 = ($158>>>0)>($143>>>0);
     if ($159) {
      _abort();
      // unreachable;
     }
     $160 = ((($143)) + 8|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($161|0)==($10|0);
     if ($162) {
      $$pre$phi444Z2D = $160;
     } else {
      _abort();
      // unreachable;
     }
    }
    $163 = ((($141)) + 12|0);
    HEAP32[$163>>2] = $143;
    HEAP32[$$pre$phi444Z2D>>2] = $141;
   } else {
    $164 = ((($10)) + 24|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ((($10)) + 12|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)==($10|0);
    do {
     if ($168) {
      $179 = ((($10)) + 16|0);
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)==(0|0);
      if ($182) {
       $183 = HEAP32[$179>>2]|0;
       $184 = ($183|0)==(0|0);
       if ($184) {
        $$3398 = 0;
        break;
       } else {
        $$1396$ph = $183;$$1400$ph = $179;
       }
      } else {
       $$1396$ph = $181;$$1400$ph = $180;
      }
      $$1396 = $$1396$ph;$$1400 = $$1400$ph;
      while(1) {
       $185 = ((($$1396)) + 20|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($186|0)==(0|0);
       if ($187) {
        $188 = ((($$1396)) + 16|0);
        $189 = HEAP32[$188>>2]|0;
        $190 = ($189|0)==(0|0);
        if ($190) {
         break;
        } else {
         $$1396$be = $189;$$1400$be = $188;
        }
       } else {
        $$1396$be = $186;$$1400$be = $185;
       }
       $$1396 = $$1396$be;$$1400 = $$1400$be;
      }
      $191 = HEAP32[(14656)>>2]|0;
      $192 = ($191>>>0)>($$1400>>>0);
      if ($192) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $169 = ((($10)) + 8|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = HEAP32[(14656)>>2]|0;
      $172 = ($171>>>0)>($170>>>0);
      if ($172) {
       _abort();
       // unreachable;
      }
      $173 = ((($170)) + 12|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ($174|0)==($10|0);
      if (!($175)) {
       _abort();
       // unreachable;
      }
      $176 = ((($167)) + 8|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==($10|0);
      if ($178) {
       HEAP32[$173>>2] = $167;
       HEAP32[$176>>2] = $170;
       $$3398 = $167;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $193 = ($165|0)==(0|0);
    if (!($193)) {
     $194 = ((($10)) + 28|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (14944 + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = ($197|0)==($10|0);
     do {
      if ($198) {
       HEAP32[$196>>2] = $$3398;
       $cond420 = ($$3398|0)==(0|0);
       if ($cond420) {
        $199 = 1 << $195;
        $200 = $199 ^ -1;
        $201 = HEAP32[(14644)>>2]|0;
        $202 = $201 & $200;
        HEAP32[(14644)>>2] = $202;
        break L111;
       }
      } else {
       $203 = HEAP32[(14656)>>2]|0;
       $204 = ($203>>>0)>($165>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($165)) + 16|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = ($206|0)==($10|0);
        $208 = ((($165)) + 20|0);
        $$sink456 = $207 ? $205 : $208;
        HEAP32[$$sink456>>2] = $$3398;
        $209 = ($$3398|0)==(0|0);
        if ($209) {
         break L111;
        } else {
         break;
        }
       }
      }
     } while(0);
     $210 = HEAP32[(14656)>>2]|0;
     $211 = ($210>>>0)>($$3398>>>0);
     if ($211) {
      _abort();
      // unreachable;
     }
     $212 = ((($$3398)) + 24|0);
     HEAP32[$212>>2] = $165;
     $213 = ((($10)) + 16|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($214|0)==(0|0);
     do {
      if (!($215)) {
       $216 = ($210>>>0)>($214>>>0);
       if ($216) {
        _abort();
        // unreachable;
       } else {
        $217 = ((($$3398)) + 16|0);
        HEAP32[$217>>2] = $214;
        $218 = ((($214)) + 24|0);
        HEAP32[$218>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $219 = ((($213)) + 4|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($220|0)==(0|0);
     if (!($221)) {
      $222 = HEAP32[(14656)>>2]|0;
      $223 = ($222>>>0)>($220>>>0);
      if ($223) {
       _abort();
       // unreachable;
      } else {
       $224 = ((($$3398)) + 20|0);
       HEAP32[$224>>2] = $220;
       $225 = ((($220)) + 24|0);
       HEAP32[$225>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $226 = $137 | 1;
  $227 = ((($$1)) + 4|0);
  HEAP32[$227>>2] = $226;
  $228 = (($113) + ($137)|0);
  HEAP32[$228>>2] = $137;
  $229 = HEAP32[(14660)>>2]|0;
  $230 = ($$1|0)==($229|0);
  if ($230) {
   HEAP32[(14648)>>2] = $137;
   return;
  } else {
   $$2 = $137;
  }
 } else {
  $231 = $116 & -2;
  HEAP32[$115>>2] = $231;
  $232 = $$1380 | 1;
  $233 = ((($$1)) + 4|0);
  HEAP32[$233>>2] = $232;
  $234 = (($113) + ($$1380)|0);
  HEAP32[$234>>2] = $$1380;
  $$2 = $$1380;
 }
 $235 = (3)?($$2 >>> 3):($$2);
 $236 = ($$2>>>0)<(256);
 if ($236) {
  $237 = $235 << 1;
  $238 = (14680 + ($237<<2)|0);
  $239 = HEAP32[3660]|0;
  $240 = 1 << $235;
  $241 = $239 & $240;
  $242 = ($241|0)==(0);
  if ($242) {
   $243 = $239 | $240;
   HEAP32[3660] = $243;
   $$pre = ((($238)) + 8|0);
   $$0401 = $238;$$pre$phiZ2D = $$pre;
  } else {
   $244 = ((($238)) + 8|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = HEAP32[(14656)>>2]|0;
   $247 = ($246>>>0)>($245>>>0);
   if ($247) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $245;$$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $248 = ((($$0401)) + 12|0);
  HEAP32[$248>>2] = $$1;
  $249 = ((($$1)) + 8|0);
  HEAP32[$249>>2] = $$0401;
  $250 = ((($$1)) + 12|0);
  HEAP32[$250>>2] = $238;
  return;
 }
 $251 = (8)?($$2 >>> 8):($$2);
 $252 = ($251|0)==(0);
 if ($252) {
  $$0394 = 0;
 } else {
  $253 = ($$2>>>0)>(16777215);
  if ($253) {
   $$0394 = 31;
  } else {
   $254 = (($251) + 1048320)|0;
   $255 = (16)?($254 >>> 16):($254);
   $256 = $255 & 8;
   $257 = $251 << $256;
   $258 = (($257) + 520192)|0;
   $259 = (16)?($258 >>> 16):($258);
   $260 = $259 & 4;
   $261 = $260 | $256;
   $262 = $257 << $260;
   $263 = (($262) + 245760)|0;
   $264 = (16)?($263 >>> 16):($263);
   $265 = $264 & 2;
   $266 = $261 | $265;
   $267 = (14 - ($266))|0;
   $268 = $262 << $265;
   $269 = (15)?($268 >>> 15):($268);
   $270 = (($267) + ($269))|0;
   $271 = $270 << 1;
   $272 = (($270) + 7)|0;
   $273 = ($272)?($$2 >>> $272):($$2);
   $274 = $273 & 1;
   $275 = $274 | $271;
   $$0394 = $275;
  }
 }
 $276 = (14944 + ($$0394<<2)|0);
 $277 = ((($$1)) + 28|0);
 HEAP32[$277>>2] = $$0394;
 $278 = ((($$1)) + 16|0);
 $279 = ((($$1)) + 20|0);
 HEAP32[$279>>2] = 0;
 HEAP32[$278>>2] = 0;
 $280 = HEAP32[(14644)>>2]|0;
 $281 = 1 << $$0394;
 $282 = $280 & $281;
 $283 = ($282|0)==(0);
 L197: do {
  if ($283) {
   $284 = $280 | $281;
   HEAP32[(14644)>>2] = $284;
   HEAP32[$276>>2] = $$1;
   $285 = ((($$1)) + 24|0);
   HEAP32[$285>>2] = $276;
   $286 = ((($$1)) + 12|0);
   HEAP32[$286>>2] = $$1;
   $287 = ((($$1)) + 8|0);
   HEAP32[$287>>2] = $$1;
  } else {
   $288 = HEAP32[$276>>2]|0;
   $289 = ((($288)) + 4|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $290 & -8;
   $292 = ($291|0)==($$2|0);
   L200: do {
    if ($292) {
     $$0382$lcssa = $288;
    } else {
     $293 = ($$0394|0)==(31);
     $294 = (1)?($$0394 >>> 1):($$0394);
     $295 = (25 - ($294))|0;
     $296 = $293 ? 0 : $295;
     $297 = $$2 << $296;
     $$0381438 = $297;$$0382437 = $288;
     while(1) {
      $304 = (31)?($$0381438 >>> 31):($$0381438);
      $305 = (((($$0382437)) + 16|0) + ($304<<2)|0);
      $300 = HEAP32[$305>>2]|0;
      $306 = ($300|0)==(0|0);
      if ($306) {
       break;
      }
      $298 = $$0381438 << 1;
      $299 = ((($300)) + 4|0);
      $301 = HEAP32[$299>>2]|0;
      $302 = $301 & -8;
      $303 = ($302|0)==($$2|0);
      if ($303) {
       $$0382$lcssa = $300;
       break L200;
      } else {
       $$0381438 = $298;$$0382437 = $300;
      }
     }
     $307 = HEAP32[(14656)>>2]|0;
     $308 = ($307>>>0)>($305>>>0);
     if ($308) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$305>>2] = $$1;
      $309 = ((($$1)) + 24|0);
      HEAP32[$309>>2] = $$0382437;
      $310 = ((($$1)) + 12|0);
      HEAP32[$310>>2] = $$1;
      $311 = ((($$1)) + 8|0);
      HEAP32[$311>>2] = $$1;
      break L197;
     }
    }
   } while(0);
   $312 = ((($$0382$lcssa)) + 8|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = HEAP32[(14656)>>2]|0;
   $315 = ($314>>>0)<=($$0382$lcssa>>>0);
   $316 = ($314>>>0)<=($313>>>0);
   $317 = $316 & $315;
   if ($317) {
    $318 = ((($313)) + 12|0);
    HEAP32[$318>>2] = $$1;
    HEAP32[$312>>2] = $$1;
    $319 = ((($$1)) + 8|0);
    HEAP32[$319>>2] = $313;
    $320 = ((($$1)) + 12|0);
    HEAP32[$320>>2] = $$0382$lcssa;
    $321 = ((($$1)) + 24|0);
    HEAP32[$321>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $322 = HEAP32[(14672)>>2]|0;
 $323 = (($322) + -1)|0;
 HEAP32[(14672)>>2] = $323;
 $324 = ($323|0)==(0);
 if (!($324)) {
  return;
 }
 $$0211$in$i = (15096);
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $325 = ($$0211$i|0)==(0|0);
  $326 = ((($$0211$i)) + 8|0);
  if ($325) {
   break;
  } else {
   $$0211$in$i = $326;
  }
 }
 HEAP32[(14672)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $spec$select = $7 ? $3 : -1;
   $$0 = $spec$select;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1271$be = 0, $$1271$ph = 0, $$1274 = 0, $$1274$be = 0, $$1274$ph = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $or$cond$not = 0, $or$cond5 = 0, $storemerge = 0, $storemerge3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(14656)>>2]|0;
 $7 = ($6>>>0)<=($0>>>0);
 $8 = $3 & 3;
 $9 = ($8|0)!=(1);
 $or$cond$not = $9 & $7;
 $10 = ($5>>>0)>($0>>>0);
 $or$cond5 = $or$cond$not & $10;
 if (!($or$cond5)) {
  _abort();
  // unreachable;
 }
 $11 = ((($5)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)==(0);
 if ($14) {
  _abort();
  // unreachable;
 }
 $15 = ($8|0)==(0);
 if ($15) {
  $16 = ($1>>>0)<(256);
  if ($16) {
   $$2 = 0;
   return ($$2|0);
  }
  $17 = (($1) + 4)|0;
  $18 = ($4>>>0)<($17>>>0);
  if (!($18)) {
   $19 = (($4) - ($1))|0;
   $20 = HEAP32[(15120)>>2]|0;
   $21 = $20 << 1;
   $22 = ($19>>>0)>($21>>>0);
   if (!($22)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $23 = ($4>>>0)<($1>>>0);
 if (!($23)) {
  $24 = (($4) - ($1))|0;
  $25 = ($24>>>0)>(15);
  if (!($25)) {
   $$2 = $0;
   return ($$2|0);
  }
  $26 = (($0) + ($1)|0);
  $27 = $3 & 1;
  $28 = $27 | $1;
  $29 = $28 | 2;
  HEAP32[$2>>2] = $29;
  $30 = ((($26)) + 4|0);
  $31 = $24 | 3;
  HEAP32[$30>>2] = $31;
  $32 = HEAP32[$11>>2]|0;
  $33 = $32 | 1;
  HEAP32[$11>>2] = $33;
  _dispose_chunk($26,$24);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(14664)>>2]|0;
 $35 = ($34|0)==($5|0);
 if ($35) {
  $36 = HEAP32[(14652)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(14664)>>2] = $40;
  HEAP32[(14652)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(14660)>>2]|0;
 $47 = ($46|0)==($5|0);
 if ($47) {
  $48 = HEAP32[(14648)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($0) + ($49)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge3 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge3 = 0;
  }
  HEAP32[(14648)>>2] = $storemerge3;
  HEAP32[(14660)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $12 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $12 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = (3)?($12 >>> 3):($12);
 $77 = ($12>>>0)<(256);
 L49: do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (14680 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($6>>>0)>($79>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[3660]|0;
    $93 = $92 & $91;
    HEAP32[3660] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($6>>>0)>($81>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271$ph = $118;$$1274$ph = $114;
      }
     } else {
      $$1271$ph = $116;$$1274$ph = $115;
     }
     $$1271 = $$1271$ph;$$1274 = $$1274$ph;
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       $123 = ((($$1271)) + 16|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ($124|0)==(0|0);
       if ($125) {
        break;
       } else {
        $$1271$be = $124;$$1274$be = $123;
       }
      } else {
       $$1271$be = $121;$$1274$be = $120;
      }
      $$1271 = $$1271$be;$$1274 = $$1274$be;
     }
     $126 = ($6>>>0)>($$1274>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($6>>>0)>($106>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (14944 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)==($5|0);
    do {
     if ($132) {
      HEAP32[$130>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $133 = 1 << $129;
       $134 = $133 ^ -1;
       $135 = HEAP32[(14644)>>2]|0;
       $136 = $135 & $134;
       HEAP32[(14644)>>2] = $136;
       break L49;
      }
     } else {
      $137 = HEAP32[(14656)>>2]|0;
      $138 = ($137>>>0)>($101>>>0);
      if ($138) {
       _abort();
       // unreachable;
      } else {
       $139 = ((($101)) + 16|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($140|0)==($5|0);
       $142 = ((($101)) + 20|0);
       $$sink = $141 ? $139 : $142;
       HEAP32[$$sink>>2] = $$3;
       $143 = ($$3|0)==(0|0);
       if ($143) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $144 = HEAP32[(14656)>>2]|0;
    $145 = ($144>>>0)>($$3>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($144>>>0)>($148>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(14656)>>2]|0;
     $157 = ($156>>>0)>($154>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $161 | $73;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($0) + ($73)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0;
 var $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $$pre27 = 0, $$pre29 = 0, $$sink = 0, $$sink41 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0;
 var $cond17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(14656)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(14660)>>2]|0;
   $16 = ($15|0)==($11|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $102 & -2;
    HEAP32[(14648)>>2] = $12;
    HEAP32[$101>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$2>>2] = $12;
    return;
   }
   $17 = (3)?($7 >>> 3):($7);
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (14680 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($13>>>0)>($20>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[3660]|0;
     $34 = $33 & $32;
     HEAP32[3660] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre29 = ((($22)) + 8|0);
     $$pre$phi30Z2D = $$pre29;
    } else {
     $36 = ($13>>>0)>($22>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi30Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi30Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424$ph = $59;$$1427$ph = $55;
      }
     } else {
      $$1424$ph = $57;$$1427$ph = $56;
     }
     $$1424 = $$1424$ph;$$1427 = $$1427$ph;
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $64 = ((($$1424)) + 16|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($65|0)==(0|0);
       if ($66) {
        break;
       } else {
        $$1424$be = $65;$$1427$be = $64;
       }
      } else {
       $$1424$be = $62;$$1427$be = $61;
      }
      $$1424 = $$1424$be;$$1427 = $$1427$be;
     }
     $67 = ($13>>>0)>($$1427>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($13>>>0)>($47>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (14944 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==($11|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(14644)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(14644)>>2] = $77;
       $$1 = $11;$$1416 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(14656)>>2]|0;
      $79 = ($78>>>0)>($42>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($11|0);
       $83 = ((($42)) + 20|0);
       $$sink = $82 ? $80 : $83;
       HEAP32[$$sink>>2] = $$3;
       $84 = ($$3|0)==(0|0);
       if ($84) {
        $$1 = $11;$$1416 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $85 = HEAP32[(14656)>>2]|0;
    $86 = ($85>>>0)>($$3>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($85>>>0)>($89>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(14656)>>2]|0;
     $98 = ($97>>>0)>($95>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $108 = HEAP32[(14656)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(14664)>>2]|0;
  $115 = ($114|0)==($2|0);
  if ($115) {
   $116 = HEAP32[(14652)>>2]|0;
   $117 = (($116) + ($$1416))|0;
   HEAP32[(14652)>>2] = $117;
   HEAP32[(14664)>>2] = $$1;
   $118 = $117 | 1;
   $119 = ((($$1)) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[(14660)>>2]|0;
   $121 = ($$1|0)==($120|0);
   if (!($121)) {
    return;
   }
   HEAP32[(14660)>>2] = 0;
   HEAP32[(14648)>>2] = 0;
   return;
  }
  $122 = HEAP32[(14660)>>2]|0;
  $123 = ($122|0)==($2|0);
  if ($123) {
   $124 = HEAP32[(14648)>>2]|0;
   $125 = (($124) + ($$1416))|0;
   HEAP32[(14648)>>2] = $125;
   HEAP32[(14660)>>2] = $$1;
   $126 = $125 | 1;
   $127 = ((($$1)) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$1) + ($125)|0);
   HEAP32[$128>>2] = $125;
   return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$1416))|0;
  $131 = (3)?($111 >>> 3):($111);
  $132 = ($111>>>0)<(256);
  L99: do {
   if ($132) {
    $133 = ((($2)) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ((($2)) + 12|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = (14680 + ($137<<2)|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($108>>>0)>($134>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = ((($134)) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($2|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[3660]|0;
     $148 = $147 & $146;
     HEAP32[3660] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre27 = ((($136)) + 8|0);
     $$pre$phi28Z2D = $$pre27;
    } else {
     $150 = ($108>>>0)>($136>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = ((($136)) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($2|0);
     if ($153) {
      $$pre$phi28Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = ((($134)) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi28Z2D>>2] = $134;
   } else {
    $155 = ((($2)) + 24|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ((($2)) + 12|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($2|0);
    do {
     if ($159) {
      $169 = ((($2)) + 16|0);
      $170 = ((($169)) + 4|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($171|0)==(0|0);
      if ($172) {
       $173 = HEAP32[$169>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $$3433 = 0;
        break;
       } else {
        $$1431$ph = $173;$$1435$ph = $169;
       }
      } else {
       $$1431$ph = $171;$$1435$ph = $170;
      }
      $$1431 = $$1431$ph;$$1435 = $$1435$ph;
      while(1) {
       $175 = ((($$1431)) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if ($177) {
        $178 = ((($$1431)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1431$be = $179;$$1435$be = $178;
        }
       } else {
        $$1431$be = $176;$$1435$be = $175;
       }
       $$1431 = $$1431$be;$$1435 = $$1435$be;
      }
      $181 = ($108>>>0)>($$1435>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $160 = ((($2)) + 8|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($108>>>0)>($161>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = ((($161)) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($2|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = ((($158)) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($2|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $$3433 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $183 = ((($2)) + 28|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (14944 + ($184<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)==($2|0);
     do {
      if ($187) {
       HEAP32[$185>>2] = $$3433;
       $cond17 = ($$3433|0)==(0|0);
       if ($cond17) {
        $188 = 1 << $184;
        $189 = $188 ^ -1;
        $190 = HEAP32[(14644)>>2]|0;
        $191 = $190 & $189;
        HEAP32[(14644)>>2] = $191;
        break L99;
       }
      } else {
       $192 = HEAP32[(14656)>>2]|0;
       $193 = ($192>>>0)>($156>>>0);
       if ($193) {
        _abort();
        // unreachable;
       } else {
        $194 = ((($156)) + 16|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = ($195|0)==($2|0);
        $197 = ((($156)) + 20|0);
        $$sink41 = $196 ? $194 : $197;
        HEAP32[$$sink41>>2] = $$3433;
        $198 = ($$3433|0)==(0|0);
        if ($198) {
         break L99;
        } else {
         break;
        }
       }
      }
     } while(0);
     $199 = HEAP32[(14656)>>2]|0;
     $200 = ($199>>>0)>($$3433>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = ((($$3433)) + 24|0);
     HEAP32[$201>>2] = $156;
     $202 = ((($2)) + 16|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = ($199>>>0)>($203>>>0);
       if ($205) {
        _abort();
        // unreachable;
       } else {
        $206 = ((($$3433)) + 16|0);
        HEAP32[$206>>2] = $203;
        $207 = ((($203)) + 24|0);
        HEAP32[$207>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $208 = ((($202)) + 4|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($209|0)==(0|0);
     if (!($210)) {
      $211 = HEAP32[(14656)>>2]|0;
      $212 = ($211>>>0)>($209>>>0);
      if ($212) {
       _abort();
       // unreachable;
      } else {
       $213 = ((($$3433)) + 20|0);
       HEAP32[$213>>2] = $209;
       $214 = ((($209)) + 24|0);
       HEAP32[$214>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $215 = $130 | 1;
  $216 = ((($$1)) + 4|0);
  HEAP32[$216>>2] = $215;
  $217 = (($$1) + ($130)|0);
  HEAP32[$217>>2] = $130;
  $218 = HEAP32[(14660)>>2]|0;
  $219 = ($$1|0)==($218|0);
  if ($219) {
   HEAP32[(14648)>>2] = $130;
   return;
  } else {
   $$2 = $130;
  }
 } else {
  $220 = $111 & -2;
  HEAP32[$110>>2] = $220;
  $221 = $$1416 | 1;
  $222 = ((($$1)) + 4|0);
  HEAP32[$222>>2] = $221;
  $223 = (($$1) + ($$1416)|0);
  HEAP32[$223>>2] = $$1416;
  $$2 = $$1416;
 }
 $224 = (3)?($$2 >>> 3):($$2);
 $225 = ($$2>>>0)<(256);
 if ($225) {
  $226 = $224 << 1;
  $227 = (14680 + ($226<<2)|0);
  $228 = HEAP32[3660]|0;
  $229 = 1 << $224;
  $230 = $228 & $229;
  $231 = ($230|0)==(0);
  if ($231) {
   $232 = $228 | $229;
   HEAP32[3660] = $232;
   $$pre = ((($227)) + 8|0);
   $$0436 = $227;$$pre$phiZ2D = $$pre;
  } else {
   $233 = ((($227)) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = HEAP32[(14656)>>2]|0;
   $236 = ($235>>>0)>($234>>>0);
   if ($236) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $234;$$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $237 = ((($$0436)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$0436;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $227;
  return;
 }
 $240 = (8)?($$2 >>> 8):($$2);
 $241 = ($240|0)==(0);
 if ($241) {
  $$0429 = 0;
 } else {
  $242 = ($$2>>>0)>(16777215);
  if ($242) {
   $$0429 = 31;
  } else {
   $243 = (($240) + 1048320)|0;
   $244 = (16)?($243 >>> 16):($243);
   $245 = $244 & 8;
   $246 = $240 << $245;
   $247 = (($246) + 520192)|0;
   $248 = (16)?($247 >>> 16):($247);
   $249 = $248 & 4;
   $250 = $249 | $245;
   $251 = $246 << $249;
   $252 = (($251) + 245760)|0;
   $253 = (16)?($252 >>> 16):($252);
   $254 = $253 & 2;
   $255 = $250 | $254;
   $256 = (14 - ($255))|0;
   $257 = $251 << $254;
   $258 = (15)?($257 >>> 15):($257);
   $259 = (($256) + ($258))|0;
   $260 = $259 << 1;
   $261 = (($259) + 7)|0;
   $262 = ($261)?($$2 >>> $261):($$2);
   $263 = $262 & 1;
   $264 = $263 | $260;
   $$0429 = $264;
  }
 }
 $265 = (14944 + ($$0429<<2)|0);
 $266 = ((($$1)) + 28|0);
 HEAP32[$266>>2] = $$0429;
 $267 = ((($$1)) + 16|0);
 $268 = ((($$1)) + 20|0);
 HEAP32[$268>>2] = 0;
 HEAP32[$267>>2] = 0;
 $269 = HEAP32[(14644)>>2]|0;
 $270 = 1 << $$0429;
 $271 = $269 & $270;
 $272 = ($271|0)==(0);
 if ($272) {
  $273 = $269 | $270;
  HEAP32[(14644)>>2] = $273;
  HEAP32[$265>>2] = $$1;
  $274 = ((($$1)) + 24|0);
  HEAP32[$274>>2] = $265;
  $275 = ((($$1)) + 12|0);
  HEAP32[$275>>2] = $$1;
  $276 = ((($$1)) + 8|0);
  HEAP32[$276>>2] = $$1;
  return;
 }
 $277 = HEAP32[$265>>2]|0;
 $278 = ((($277)) + 4|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = $279 & -8;
 $281 = ($280|0)==($$2|0);
 L189: do {
  if ($281) {
   $$0418$lcssa = $277;
  } else {
   $282 = ($$0429|0)==(31);
   $283 = (1)?($$0429 >>> 1):($$0429);
   $284 = (25 - ($283))|0;
   $285 = $282 ? 0 : $284;
   $286 = $$2 << $285;
   $$041722 = $286;$$041821 = $277;
   while(1) {
    $293 = (31)?($$041722 >>> 31):($$041722);
    $294 = (((($$041821)) + 16|0) + ($293<<2)|0);
    $289 = HEAP32[$294>>2]|0;
    $295 = ($289|0)==(0|0);
    if ($295) {
     break;
    }
    $287 = $$041722 << 1;
    $288 = ((($289)) + 4|0);
    $290 = HEAP32[$288>>2]|0;
    $291 = $290 & -8;
    $292 = ($291|0)==($$2|0);
    if ($292) {
     $$0418$lcssa = $289;
     break L189;
    } else {
     $$041722 = $287;$$041821 = $289;
    }
   }
   $296 = HEAP32[(14656)>>2]|0;
   $297 = ($296>>>0)>($294>>>0);
   if ($297) {
    _abort();
    // unreachable;
   }
   HEAP32[$294>>2] = $$1;
   $298 = ((($$1)) + 24|0);
   HEAP32[$298>>2] = $$041821;
   $299 = ((($$1)) + 12|0);
   HEAP32[$299>>2] = $$1;
   $300 = ((($$1)) + 8|0);
   HEAP32[$300>>2] = $$1;
   return;
  }
 } while(0);
 $301 = ((($$0418$lcssa)) + 8|0);
 $302 = HEAP32[$301>>2]|0;
 $303 = HEAP32[(14656)>>2]|0;
 $304 = ($303>>>0)<=($$0418$lcssa>>>0);
 $305 = ($303>>>0)<=($302>>>0);
 $306 = $305 & $304;
 if (!($306)) {
  _abort();
  // unreachable;
 }
 $307 = ((($302)) + 12|0);
 HEAP32[$307>>2] = $$1;
 HEAP32[$301>>2] = $$1;
 $308 = ((($$1)) + 8|0);
 HEAP32[$308>>2] = $302;
 $309 = ((($$1)) + 12|0);
 HEAP32[$309>>2] = $$0418$lcssa;
 $310 = ((($$1)) + 24|0);
 HEAP32[$310>>2] = 0;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15200|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 4;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$030 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$030 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1 = $$0$lcssa;$$128 = $$025$lcssa;
   label = 10;
  } else {
   $$1 = $1;$$128 = $0;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $31 = HEAP8[$$1>>0]|0;
  HEAP8[$$128>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$030 = $$128;
  } else {
   $$22934 = $$128;$$235 = $$1;
   while(1) {
    $33 = ((($$235)) + 1|0);
    $34 = ((($$22934)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$030 = $34;
     break;
    } else {
     $$22934 = $34;$$235 = $33;
    }
   }
  }
 }
 return ($$030|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9080|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=9324; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 7]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((6192 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 13517;$$2256 = $spec$select295;$$4266 = $spec$select;$276 = $240;$278 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = (getTempRet0() | 0);
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 13517;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 13517 : (13519);
       $spec$select296 = $266 ? $$ : (13518);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 13517;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 13517;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 13527 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_700($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 13517;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = (4)?($$1236 >>> 4):($$1236);
      $237 = (13517 + ($236)|0);
      $spec$select293 = $or$cond278 ? 13517 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$276 = $225;$278 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$276 = $271;$278 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 13517;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_700($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $277 = ($276|0)!=(0);
     $279 = ($278|0)!=(0);
     $280 = $277 | $279;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_700($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_700($0,32,$$2261,$341,$$6268);
    _out($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_700($0,48,$$2261,$341,$343);
    _pad_700($0,48,$spec$select284,$339,0);
    _out($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_700($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $353 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $354 = ($353>>>0)<(10);
      if ($354) {
       $$3317 = $353;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (6656 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_535()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad_700($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_701($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_701($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 13534;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (13535) : (13540);
  $spec$select565 = $19 ? $$ : (13537);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 13553 : 13557;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 13580 : 13561;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_700($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_700($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = (31)?($63 >> 31):($63);
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (6656 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_700($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_700($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_700($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_700($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$134 = $$pr;
    while(1) {
     $135 = ($134|0)<(29);
     $136 = $135 ? $134 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $153 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$153>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $154 = ($153>>>0)>($$2483>>>0);
        if ($154) {
         $$3501676 = $153;
        } else {
         $$3501$lcssa = $153;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$134 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = ($168)?(1000000000 >>> $168):(1000000000);
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = ($168)?($176 >>> $168):($176);
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = (2)?($191 >> 2):($191);
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = (2)?($200 >> 2):($200);
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = (2)?($216 >> 2):($216);
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = (1)?($$1533$lcssa >>> 1):($$1533$lcssa);
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = (2)?($260 >> 2):($260);
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $272 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$272>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $273 = ($272>>>0)>($$9>>>0);
      if ($273) {
       $$9507625 = $272;
      } else {
       $$9507$lcssa = $272;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = (2)?($297 >> 2):($297);
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = (3)?($4 >>> 3):($4);
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = (31)?($$5521 >> 31):($$5521);
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_700($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_700($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,13565,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_700($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,13565,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_700($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_700($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS_701($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_298()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = (6)?($1 >>> 6):($1);
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = (12)?($1 >>> 12):($1);
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = (6)?($1 >>> 6):($1);
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = (18)?($1 >>> 18):($1);
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = (12)?($1 >>> 12):($1);
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = (6)?($1 >>> 6):($1);
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_298() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_535() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (6672 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 6768;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 6768;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = (2)?($1 >>> 2):($1);
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = (2)?($10 >>> 2):($10);
     $24 = (2)?($13 >>> 2):($13);
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = (1)?($$094 >>> 1):($$094);
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 7]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $22 = (($$03846) + -1)|0;
      $24 = (($0) + ($22)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $23 = ($22|0)==(0);
      if ($23) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $22;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 7]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$$lcssa = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$$lcssa = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$$lcssa = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $$lcssa&255;
  $16 = HEAP8[$$0$lcssa>>0]|0;
  $17 = $16&255;
  $18 = (($15) - ($17))|0;
  $$020 = $18;
 }
 return ($$020|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_744()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_744() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(13567,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(13567,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 5;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 4;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 2;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 1;
   $40 = HEAP32[(15140)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((15204|0));
 return (15212|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((15204|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 1]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2269]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[2269]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 7]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 7]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$05963 = 0, $$06065 = 0, $$06164 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond72 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $15 = $6;
 } else {
  $15 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $16 = ($15|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $18 = ($7|0)==(0);
  L11: do {
   if ($18) {
    $$1 = $0;
    label = 17;
   } else {
    $19 = ((($2)) + 4|0);
    $20 = ((($2)) + 8|0);
    $$06065 = $7;$$06164 = $0;
    while(1) {
     $21 = HEAP32[$19>>2]|0;
     $22 = HEAP32[$20>>2]|0;
     $23 = $21;
     $24 = (($22) - ($23))|0;
     $25 = (_memchr($21,10,$24)|0);
     $26 = ($25|0)==(0|0);
     $27 = $25;
     $28 = (1 - ($23))|0;
     $29 = (($28) + ($27))|0;
     $30 = $26 ? $24 : $29;
     $31 = ($30>>>0)<($$06065>>>0);
     $32 = $31 ? $30 : $$06065;
     (_memcpy(($$06164|0),($21|0),($32|0))|0);
     $33 = HEAP32[$19>>2]|0;
     $34 = (($33) + ($32)|0);
     HEAP32[$19>>2] = $34;
     $35 = (($$06164) + ($32)|0);
     $36 = (($$06065) - ($32))|0;
     $37 = ($36|0)!=(0);
     $or$cond = $26 & $37;
     if (!($or$cond)) {
      $$1 = $35;
      label = 17;
      break L11;
     }
     $38 = HEAP32[$20>>2]|0;
     $39 = ($34>>>0)<($38>>>0);
     if ($39) {
      $40 = ((($34)) + 1|0);
      HEAP32[$19>>2] = $40;
      $41 = HEAP8[$34>>0]|0;
      $42 = $41&255;
      $50 = $42;
     } else {
      $43 = (___uflow($2)|0);
      $44 = ($43|0)<(0);
      if ($44) {
       break;
      } else {
       $50 = $43;
      }
     }
     $49 = $50&255;
     $51 = ((($35)) + 1|0);
     HEAP8[$35>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)==(10);
     $53 = (($36) + -1)|0;
     $54 = ($53|0)==(0);
     $or$cond72 = $52 | $54;
     if ($or$cond72) {
      $$1 = $51;
      label = 17;
      break L11;
     } else {
      $$06065 = $53;$$06164 = $51;
     }
    }
    $45 = ($35|0)==($0|0);
    if ($45) {
     $$05963 = 0;
    } else {
     $46 = HEAP32[$2>>2]|0;
     $47 = $46 & 16;
     $48 = ($47|0)==(0);
     if ($48) {
      $$05963 = 0;
     } else {
      $$1 = $35;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $55 = ($0|0)==(0|0);
   if ($55) {
    $$05963 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$05963 = $0;
   }
  }
  $56 = ($15|0)==(0);
  if ($56) {
   $$0 = $$05963;
  } else {
   ___unlockfile($2);
   $$0 = $$05963;
  }
 }
 return ($$0|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 6;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read_779($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0266$lcssa = 0, $$0266409 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph$ph = 0, $$0280$ph = 0, $$0280$ph$ph = 0, $$0285419 = 0, $$0288411 = 0, $$0290416 = 0, $$0294 = 0, $$0295 = 0, $$0308414 = 0, $$10 = 0, $$10318 = 0, $$11 = 0, $$12 = 0, $$1267 = 0;
 var $$1271 = 0, $$1274 = 0, $$1281 = 0, $$1286 = 0, $$1291 = 0, $$1309 = 0, $$2 = 0, $$2275 = 0, $$2278$ph = 0, $$2282 = 0, $$2282$ph = 0, $$2287 = 0, $$2292 = 0, $$2310$ph = 0, $$3$lcssa = 0, $$3283 = 0, $$3293 = 0, $$3408 = 0, $$4 = 0, $$4284 = 0;
 var $$5 = 0, $$5313 = 0, $$6 = 0, $$6302 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$8 = 0, $$8316 = 0, $$9 = 0, $$9317 = 0, $$not = 0, $$old4 = 0, $$ph$ph = 0, $$pr = 0, $$pr332 = 0, $$pre = 0, $$pre$phi493Z2D = 0, $$pre$phiZ2D = 0, $$pre485 = 0;
 var $$pre487 = 0, $$pre488 = 0, $$pre490 = 0, $$pre492 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor335 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond321 = 0, $or$cond5 = 0, $spec$select = 0, $spec$select319 = 0, $spec$select320 = 0, $spec$select322 = 0, $spec$select323 = 0, $spec$select324 = 0, $spec$select325 = 0, $spec$select326 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 264|0;
 $4 = sp;
 $5 = sp + 260|0;
 $6 = sp + 272|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $319 = $10;
 } else {
  $319 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3293 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $$0273420 = $1;$$0285419 = 0;$$0290416 = 0;$$0308414 = 0;$22 = $11;$321 = 0;
   L6: while(1) {
    $21 = $22&255;
    $23 = (_isspace($21)|0);
    $24 = ($23|0)==(0);
    L8: do {
     if ($24) {
      $51 = HEAP8[$$0273420>>0]|0;
      $52 = ($51<<24>>24)==(37);
      L10: do {
       if ($52) {
        $53 = ((($$0273420)) + 1|0);
        $54 = HEAP8[$53>>0]|0;
        L12: do {
         switch ($54<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $75 = ((($$0273420)) + 2|0);
          $$0295 = 0;$$2275 = $75;
          break;
         }
         default: {
          $76 = $54&255;
          $77 = (_isdigit($76)|0);
          $78 = ($77|0)==(0);
          if (!($78)) {
           $79 = ((($$0273420)) + 2|0);
           $80 = HEAP8[$79>>0]|0;
           $81 = ($80<<24>>24)==(36);
           if ($81) {
            $82 = HEAP8[$53>>0]|0;
            $83 = $82&255;
            $84 = (($83) + -48)|0;
            $85 = (_arg_n_736($2,$84)|0);
            $86 = ((($$0273420)) + 3|0);
            $$0295 = $85;$$2275 = $86;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $87 = $arglist_current;
          $88 = ((0) + 4|0);
          $expanded1 = $88;
          $expanded = (($expanded1) - 1)|0;
          $89 = (($87) + ($expanded))|0;
          $90 = ((0) + 4|0);
          $expanded5 = $90;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $91 = $89 & $expanded3;
          $92 = $91;
          $93 = HEAP32[$92>>2]|0;
          $arglist_next = ((($92)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0295 = $93;$$2275 = $53;
         }
         }
        } while(0);
        $94 = HEAP8[$$2275>>0]|0;
        $95 = $94&255;
        $96 = (_isdigit($95)|0);
        $97 = ($96|0)==(0);
        if ($97) {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;
        } else {
         $$0266409 = 0;$$3408 = $$2275;
         while(1) {
          $98 = ($$0266409*10)|0;
          $99 = HEAP8[$$3408>>0]|0;
          $100 = $99&255;
          $101 = (($98) + -48)|0;
          $102 = (($101) + ($100))|0;
          $103 = ((($$3408)) + 1|0);
          $104 = HEAP8[$103>>0]|0;
          $105 = $104&255;
          $106 = (_isdigit($105)|0);
          $107 = ($106|0)==(0);
          if ($107) {
           $$0266$lcssa = $102;$$3$lcssa = $103;
           break;
          } else {
           $$0266409 = $102;$$3408 = $103;
          }
         }
        }
        $108 = HEAP8[$$3$lcssa>>0]|0;
        $109 = ($108<<24>>24)==(109);
        $110 = ((($$3$lcssa)) + 1|0);
        if ($109) {
         $111 = ($$0295|0)!=(0|0);
         $112 = $111&1;
         $$pr = HEAP8[$110>>0]|0;
         $$pre488 = ((($$3$lcssa)) + 2|0);
         $$0270 = $112;$$1309 = 0;$$4 = $110;$$pre$phiZ2D = $$pre488;$113 = $$pr;$324 = 0;
        } else {
         $$0270 = 0;$$1309 = $$0308414;$$4 = $$3$lcssa;$$pre$phiZ2D = $110;$113 = $108;$324 = $321;
        }
        switch ($113<<24>>24) {
        case 104:  {
         $114 = HEAP8[$$pre$phiZ2D>>0]|0;
         $115 = ($114<<24>>24)==(104);
         $116 = ((($$4)) + 2|0);
         $spec$select323 = $115 ? $116 : $$pre$phiZ2D;
         $spec$select324 = $115 ? -2 : -1;
         $$0268 = $spec$select324;$$5 = $spec$select323;
         break;
        }
        case 108:  {
         $117 = HEAP8[$$pre$phiZ2D>>0]|0;
         $118 = ($117<<24>>24)==(108);
         $119 = ((($$4)) + 2|0);
         $spec$select325 = $118 ? $119 : $$pre$phiZ2D;
         $spec$select326 = $118 ? 3 : 1;
         $$0268 = $spec$select326;$$5 = $spec$select325;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $$pre$phiZ2D;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $$pre$phiZ2D;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $$pre$phiZ2D;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$8316 = $$1309;$325 = $324;
         label = 143;
         break L6;
        }
        }
        $120 = HEAP8[$$5>>0]|0;
        $121 = $120&255;
        $122 = $121 & 47;
        $123 = ($122|0)==(3);
        $124 = $121 | 32;
        $spec$select = $123 ? $124 : $121;
        $spec$select319 = $123 ? 1 : $$0268;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $125 = ($$0266$lcssa|0)>(1);
         $spec$select320 = $125 ? $$0266$lcssa : 1;
         $$1267 = $spec$select320;$$1286 = $$0285419;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1286 = $$0285419;
         break;
        }
        case 110:  {
         $126 = ($$0285419|0)<(0);
         $127 = $126 << 31 >> 31;
         _store_int_737($$0295,$spec$select319,$$0285419,$127);
         $$12 = $$5;$$1291 = $$0290416;$$2287 = $$0285419;$$7315 = $$1309;$322 = $324;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $128 = HEAP32[$13>>2]|0;
          $129 = HEAP32[$14>>2]|0;
          $130 = ($128>>>0)<($129>>>0);
          if ($130) {
           $131 = ((($128)) + 1|0);
           HEAP32[$13>>2] = $131;
           $132 = HEAP8[$128>>0]|0;
           $133 = $132&255;
           $135 = $133;
          } else {
           $134 = (___shgetc($0)|0);
           $135 = $134;
          }
          $136 = (_isspace($135)|0);
          $137 = ($136|0)==(0);
          if ($137) {
           break;
          }
         }
         $138 = HEAP32[$14>>2]|0;
         $139 = ($138|0)==(0|0);
         if ($139) {
          $$pre485 = HEAP32[$13>>2]|0;
          $147 = $$pre485;
         } else {
          $140 = HEAP32[$13>>2]|0;
          $141 = ((($140)) + -1|0);
          HEAP32[$13>>2] = $141;
          $142 = $141;
          $147 = $142;
         }
         $143 = HEAP32[$15>>2]|0;
         $144 = HEAP32[$16>>2]|0;
         $145 = (($143) + ($$0285419))|0;
         $146 = (($145) + ($147))|0;
         $148 = (($146) - ($144))|0;
         $$1267 = $$0266$lcssa;$$1286 = $148;
        }
        }
        ___shlim($0,$$1267);
        $149 = HEAP32[$13>>2]|0;
        $150 = HEAP32[$14>>2]|0;
        $151 = ($149>>>0)<($150>>>0);
        if ($151) {
         $152 = ((($149)) + 1|0);
         HEAP32[$13>>2] = $152;
         $155 = $150;
        } else {
         $153 = (___shgetc($0)|0);
         $154 = ($153|0)<(0);
         if ($154) {
          $$8316 = $$1309;$325 = $324;
          label = 143;
          break L6;
         }
         $$pr332 = HEAP32[$14>>2]|0;
         $155 = $$pr332;
        }
        $156 = ($155|0)==(0|0);
        if (!($156)) {
         $157 = HEAP32[$13>>2]|0;
         $158 = ((($157)) + -1|0);
         HEAP32[$13>>2] = $158;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $159 = ($spec$select|0)==(99);
          $160 = $spec$select | 16;
          $161 = ($160|0)==(115);
          L61: do {
           if ($161) {
            $162 = ($spec$select|0)==(115);
            (_memset(($4|0),-1,257)|0);
            HEAP8[$4>>0] = 0;
            if ($162) {
             HEAP8[$18>>0] = 0;
             ;HEAP16[$17>>1]=0|0;HEAP16[$17+2>>1]=0|0;HEAP8[$17+4>>0]=0|0;
             $$10 = $$5;
            } else {
             $$10 = $$5;
            }
           } else {
            $163 = ((($$5)) + 1|0);
            $164 = HEAP8[$163>>0]|0;
            $165 = ($164<<24>>24)==(94);
            $166 = ((($$5)) + 2|0);
            $$0294 = $165&1;
            $$6 = $165 ? $166 : $163;
            (_memset(($4|0),($$0294|0),257)|0);
            HEAP8[$4>>0] = 0;
            $167 = HEAP8[$$6>>0]|0;
            switch ($167<<24>>24) {
            case 45:  {
             $168 = ((($$6)) + 1|0);
             $169 = $$0294 ^ 1;
             $170 = $169&255;
             HEAP8[$19>>0] = $170;
             $$7 = $168;$$pre$phi493Z2D = $170;
             break;
            }
            case 93:  {
             $171 = ((($$6)) + 1|0);
             $172 = $$0294 ^ 1;
             $173 = $172&255;
             HEAP8[$20>>0] = $173;
             $$7 = $171;$$pre$phi493Z2D = $173;
             break;
            }
            default: {
             $$pre490 = $$0294 ^ 1;
             $$pre492 = $$pre490&255;
             $$7 = $$6;$$pre$phi493Z2D = $$pre492;
            }
            }
            $$8 = $$7;
            while(1) {
             $174 = HEAP8[$$8>>0]|0;
             L72: do {
              switch ($174<<24>>24) {
              case 0:  {
               $$8316 = $$1309;$325 = $324;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $$10 = $$8;
               break L61;
               break;
              }
              case 45:  {
               $175 = ((($$8)) + 1|0);
               $176 = HEAP8[$175>>0]|0;
               switch ($176<<24>>24) {
               case 93: case 0:  {
                $$9 = $$8;$187 = 45;
                break L72;
                break;
               }
               default: {
               }
               }
               $177 = ((($$8)) + -1|0);
               $178 = HEAP8[$177>>0]|0;
               $179 = ($178&255)<($176&255);
               if ($179) {
                $180 = $178&255;
                $$0288411 = $180;
                while(1) {
                 $181 = (($$0288411) + 1)|0;
                 $182 = (($4) + ($181)|0);
                 HEAP8[$182>>0] = $$pre$phi493Z2D;
                 $183 = HEAP8[$175>>0]|0;
                 $184 = $183&255;
                 $185 = ($181>>>0)<($184>>>0);
                 if ($185) {
                  $$0288411 = $181;
                 } else {
                  $$9 = $175;$187 = $183;
                  break;
                 }
                }
               } else {
                $$9 = $175;$187 = $176;
               }
               break;
              }
              default: {
               $$9 = $$8;$187 = $174;
              }
              }
             } while(0);
             $186 = $187&255;
             $188 = (($186) + 1)|0;
             $189 = (($4) + ($188)|0);
             HEAP8[$189>>0] = $$pre$phi493Z2D;
             $190 = ((($$9)) + 1|0);
             $$8 = $190;
            }
           }
          } while(0);
          $191 = (($$1267) + 1)|0;
          $192 = $159 ? $191 : 31;
          $193 = ($spec$select319|0)==(1);
          $194 = ($$0270|0)!=(0);
          L80: do {
           if ($193) {
            if ($194) {
             $195 = $192 << 2;
             $196 = (_malloc($195)|0);
             $197 = ($196|0)==(0|0);
             if ($197) {
              $$8316 = 0;$325 = 0;
              label = 143;
              break L6;
             } else {
              $327 = $196;
             }
            } else {
             $327 = $$0295;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph$ph = $192;$$0280$ph$ph = 0;$$ph$ph = $327;
            L85: while(1) {
             $198 = ($$ph$ph|0)==(0|0);
             $$0280$ph = $$0280$ph$ph;
             while(1) {
              L89: while(1) {
               $199 = HEAP32[$13>>2]|0;
               $200 = HEAP32[$14>>2]|0;
               $201 = ($199>>>0)<($200>>>0);
               if ($201) {
                $202 = ((($199)) + 1|0);
                HEAP32[$13>>2] = $202;
                $203 = HEAP8[$199>>0]|0;
                $204 = $203&255;
                $207 = $204;
               } else {
                $205 = (___shgetc($0)|0);
                $207 = $205;
               }
               $206 = (($207) + 1)|0;
               $208 = (($4) + ($206)|0);
               $209 = HEAP8[$208>>0]|0;
               $210 = ($209<<24>>24)==(0);
               if ($210) {
                break L85;
               }
               $211 = $207&255;
               HEAP8[$6>>0] = $211;
               $212 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($212|0) {
               case -1:  {
                $$8316 = 0;$325 = $$ph$ph;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($198) {
               $$1281 = $$0280$ph;
              } else {
               $213 = (($$ph$ph) + ($$0280$ph<<2)|0);
               $214 = (($$0280$ph) + 1)|0;
               $215 = HEAP32[$5>>2]|0;
               HEAP32[$213>>2] = $215;
               $$1281 = $214;
              }
              $216 = ($$1281|0)==($$0276$ph$ph|0);
              $or$cond = $194 & $216;
              if ($or$cond) {
               break;
              } else {
               $$0280$ph = $$1281;
              }
             }
             $factor335 = $$0276$ph$ph << 1;
             $217 = $factor335 | 1;
             $218 = $217 << 2;
             $219 = (_realloc($$ph$ph,$218)|0);
             $220 = ($219|0)==(0|0);
             if ($220) {
              $$8316 = 0;$325 = $$ph$ph;
              label = 143;
              break L6;
             } else {
              $$0276$ph$ph = $217;$$0280$ph$ph = $$1281;$$ph$ph = $219;
             }
            }
            $221 = (_mbsinit($3)|0);
            $222 = ($221|0)==(0);
            if ($222) {
             $$8316 = 0;$325 = $$ph$ph;
             label = 143;
             break L6;
            } else {
             $$4284 = $$0280$ph;$$5313 = 0;$$6302 = $$ph$ph;$328 = $$ph$ph;
            }
           } else {
            if ($194) {
             $223 = (_malloc($192)|0);
             $224 = ($223|0)==(0|0);
             if ($224) {
              $$8316 = 0;$325 = 0;
              label = 143;
              break L6;
             }
             $$2278$ph = $192;$$2282$ph = 0;$$2310$ph = $223;
             while(1) {
              $$2282 = $$2282$ph;
              while(1) {
               $225 = HEAP32[$13>>2]|0;
               $226 = HEAP32[$14>>2]|0;
               $227 = ($225>>>0)<($226>>>0);
               if ($227) {
                $228 = ((($225)) + 1|0);
                HEAP32[$13>>2] = $228;
                $229 = HEAP8[$225>>0]|0;
                $230 = $229&255;
                $233 = $230;
               } else {
                $231 = (___shgetc($0)|0);
                $233 = $231;
               }
               $232 = (($233) + 1)|0;
               $234 = (($4) + ($232)|0);
               $235 = HEAP8[$234>>0]|0;
               $236 = ($235<<24>>24)==(0);
               if ($236) {
                $$4284 = $$2282;$$5313 = $$2310$ph;$$6302 = 0;$328 = 0;
                break L80;
               }
               $237 = $233&255;
               $238 = (($$2282) + 1)|0;
               $239 = (($$2310$ph) + ($$2282)|0);
               HEAP8[$239>>0] = $237;
               $240 = ($238|0)==($$2278$ph|0);
               if ($240) {
                break;
               } else {
                $$2282 = $238;
               }
              }
              $factor = $$2278$ph << 1;
              $241 = $factor | 1;
              $242 = (_realloc($$2310$ph,$241)|0);
              $243 = ($242|0)==(0|0);
              if ($243) {
               $$8316 = $$2310$ph;$325 = 0;
               label = 143;
               break L6;
              } else {
               $$2278$ph = $241;$$2282$ph = $238;$$2310$ph = $242;
              }
             }
            }
            $244 = ($$0295|0)==(0|0);
            if ($244) {
             while(1) {
              $260 = HEAP32[$13>>2]|0;
              $261 = HEAP32[$14>>2]|0;
              $262 = ($260>>>0)<($261>>>0);
              if ($262) {
               $263 = ((($260)) + 1|0);
               HEAP32[$13>>2] = $263;
               $264 = HEAP8[$260>>0]|0;
               $265 = $264&255;
               $268 = $265;
              } else {
               $266 = (___shgetc($0)|0);
               $268 = $266;
              }
              $267 = (($268) + 1)|0;
              $269 = (($4) + ($267)|0);
              $270 = HEAP8[$269>>0]|0;
              $271 = ($270<<24>>24)==(0);
              if ($271) {
               $$4284 = 0;$$5313 = 0;$$6302 = 0;$328 = 0;
               break L80;
              }
             }
            }
            $$3283 = 0;
            while(1) {
             $245 = HEAP32[$13>>2]|0;
             $246 = HEAP32[$14>>2]|0;
             $247 = ($245>>>0)<($246>>>0);
             if ($247) {
              $248 = ((($245)) + 1|0);
              HEAP32[$13>>2] = $248;
              $249 = HEAP8[$245>>0]|0;
              $250 = $249&255;
              $253 = $250;
             } else {
              $251 = (___shgetc($0)|0);
              $253 = $251;
             }
             $252 = (($253) + 1)|0;
             $254 = (($4) + ($252)|0);
             $255 = HEAP8[$254>>0]|0;
             $256 = ($255<<24>>24)==(0);
             if ($256) {
              $$4284 = $$3283;$$5313 = $$0295;$$6302 = 0;$328 = 0;
              break L80;
             }
             $257 = $253&255;
             $258 = (($$3283) + 1)|0;
             $259 = (($$0295) + ($$3283)|0);
             HEAP8[$259>>0] = $257;
             $$3283 = $258;
            }
           }
          } while(0);
          $272 = HEAP32[$14>>2]|0;
          $273 = ($272|0)==(0|0);
          if ($273) {
           $$pre487 = HEAP32[$13>>2]|0;
           $280 = $$pre487;
          } else {
           $274 = HEAP32[$13>>2]|0;
           $275 = ((($274)) + -1|0);
           HEAP32[$13>>2] = $275;
           $276 = $275;
           $280 = $276;
          }
          $277 = HEAP32[$15>>2]|0;
          $278 = HEAP32[$16>>2]|0;
          $279 = (($280) - ($278))|0;
          $281 = (($279) + ($277))|0;
          $282 = ($281|0)==(0);
          if ($282) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290416;$318 = $328;
           break L6;
          }
          $$not = $159 ^ 1;
          $283 = ($281|0)==($$1267|0);
          $or$cond321 = $283 | $$not;
          if (!($or$cond321)) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290416;$318 = $328;
           break L6;
          }
          do {
           if ($194) {
            if ($193) {
             HEAP32[$$0295>>2] = $$6302;
             break;
            } else {
             HEAP32[$$0295>>2] = $$5313;
             break;
            }
           }
          } while(0);
          if ($159) {
           $$11 = $$10;$$6314 = $$5313;$326 = $328;
          } else {
           $284 = ($$6302|0)==(0|0);
           if (!($284)) {
            $285 = (($$6302) + ($$4284<<2)|0);
            HEAP32[$285>>2] = 0;
           }
           $286 = ($$5313|0)==(0|0);
           if ($286) {
            $$11 = $$10;$$6314 = 0;$326 = $328;
            break L59;
           }
           $287 = (($$5313) + ($$4284)|0);
           HEAP8[$287>>0] = 0;
           $$11 = $$10;$$6314 = $$5313;$326 = $328;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $298 = (+___floatscan($0,$spec$select319,0));
          $299 = HEAP32[$15>>2]|0;
          $300 = HEAP32[$13>>2]|0;
          $301 = HEAP32[$16>>2]|0;
          $302 = (($301) - ($300))|0;
          $303 = ($299|0)==($302|0);
          if ($303) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290416;$318 = $324;
           break L6;
          }
          $304 = ($$0295|0)==(0|0);
          if ($304) {
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
          } else {
           switch ($spec$select319|0) {
           case 0:  {
            $305 = $298;
            HEAPF32[$$0295>>2] = $305;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$$0295>>3] = $298;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$$0295>>3] = $298;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           default: {
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $$11 = $$5;$$6314 = $$1309;$326 = $324;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $288 = (___intscan($0,$$0272,0,-1,-1)|0);
          $289 = (getTempRet0() | 0);
          $290 = HEAP32[$15>>2]|0;
          $291 = HEAP32[$13>>2]|0;
          $292 = HEAP32[$16>>2]|0;
          $293 = (($292) - ($291))|0;
          $294 = ($290|0)==($293|0);
          if ($294) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290416;$318 = $324;
           break L6;
          }
          $295 = ($spec$select|0)==(112);
          $296 = ($$0295|0)!=(0|0);
          $or$cond3 = $296 & $295;
          if ($or$cond3) {
           $297 = $288;
           HEAP32[$$0295>>2] = $297;
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
           break;
          } else {
           _store_int_737($$0295,$spec$select319,$288,$289);
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
           break;
          }
         }
        } while(0);
        $306 = HEAP32[$15>>2]|0;
        $307 = HEAP32[$13>>2]|0;
        $308 = HEAP32[$16>>2]|0;
        $309 = (($306) + ($$1286))|0;
        $310 = (($309) + ($307))|0;
        $311 = (($310) - ($308))|0;
        $312 = ($$0295|0)!=(0|0);
        $313 = $312&1;
        $spec$select322 = (($$0290416) + ($313))|0;
        $$12 = $$11;$$1291 = $spec$select322;$$2287 = $311;$$7315 = $$6314;$322 = $326;
        break L8;
       }
      } while(0);
      $55 = $52&1;
      $56 = (($$0273420) + ($55)|0);
      ___shlim($0,0);
      $57 = HEAP32[$13>>2]|0;
      $58 = HEAP32[$14>>2]|0;
      $59 = ($57>>>0)<($58>>>0);
      if ($59) {
       $60 = ((($57)) + 1|0);
       HEAP32[$13>>2] = $60;
       $61 = HEAP8[$57>>0]|0;
       $62 = $61&255;
       $66 = $62;
      } else {
       $63 = (___shgetc($0)|0);
       $66 = $63;
      }
      $64 = HEAP8[$56>>0]|0;
      $65 = $64&255;
      $67 = ($66|0)==($65|0);
      if (!($67)) {
       label = 23;
       break L6;
      }
      $74 = (($$0285419) + 1)|0;
      $$12 = $56;$$1291 = $$0290416;$$2287 = $74;$$7315 = $$0308414;$322 = $321;
     } else {
      $$1274 = $$0273420;
      while(1) {
       $25 = ((($$1274)) + 1|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = $26&255;
       $28 = (_isspace($27)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        break;
       } else {
        $$1274 = $25;
       }
      }
      ___shlim($0,0);
      while(1) {
       $30 = HEAP32[$13>>2]|0;
       $31 = HEAP32[$14>>2]|0;
       $32 = ($30>>>0)<($31>>>0);
       if ($32) {
        $33 = ((($30)) + 1|0);
        HEAP32[$13>>2] = $33;
        $34 = HEAP8[$30>>0]|0;
        $35 = $34&255;
        $37 = $35;
       } else {
        $36 = (___shgetc($0)|0);
        $37 = $36;
       }
       $38 = (_isspace($37)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        break;
       }
      }
      $40 = HEAP32[$14>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $$pre = HEAP32[$13>>2]|0;
       $49 = $$pre;
      } else {
       $42 = HEAP32[$13>>2]|0;
       $43 = ((($42)) + -1|0);
       HEAP32[$13>>2] = $43;
       $44 = $43;
       $49 = $44;
      }
      $45 = HEAP32[$15>>2]|0;
      $46 = HEAP32[$16>>2]|0;
      $47 = (($45) + ($$0285419))|0;
      $48 = (($47) + ($49))|0;
      $50 = (($48) - ($46))|0;
      $$12 = $$1274;$$1291 = $$0290416;$$2287 = $50;$$7315 = $$0308414;$322 = $321;
     }
    } while(0);
    $314 = ((($$12)) + 1|0);
    $315 = HEAP8[$314>>0]|0;
    $316 = ($315<<24>>24)==(0);
    if ($316) {
     $$3293 = $$1291;
     break L4;
    } else {
     $$0273420 = $314;$$0285419 = $$2287;$$0290416 = $$1291;$$0308414 = $$7315;$22 = $315;$321 = $322;
    }
   }
   if ((label|0) == 23) {
    $68 = HEAP32[$14>>2]|0;
    $69 = ($68|0)==(0|0);
    if (!($69)) {
     $70 = HEAP32[$13>>2]|0;
     $71 = ((($70)) + -1|0);
     HEAP32[$13>>2] = $71;
    }
    $72 = ($66|0)>(-1);
    $73 = ($$0290416|0)!=(0);
    $or$cond5 = $73 | $72;
    if ($or$cond5) {
     $$3293 = $$0290416;
     break;
    } else {
     $$1271 = 0;$$9317 = $$0308414;$323 = $321;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $$old4 = ($$0290416|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$9317 = $$8316;$323 = $325;
     label = 144;
    } else {
     $$10318 = $$8316;$$2 = $$0270;$$2292 = $$0290416;$318 = $325;
    }
   }
   if ((label|0) == 144) {
    $$10318 = $$9317;$$2 = $$1271;$$2292 = -1;$318 = $323;
   }
   $317 = ($$2|0)==(0);
   if ($317) {
    $$3293 = $$2292;
   } else {
    _free($$10318);
    _free($318);
    $$3293 = $$2292;
   }
  }
 } while(0);
 $320 = ($319|0)==(0);
 if (!($320)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3293|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($7|0)==($39|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _arg_n_736($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int_737($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $spec$select = $5 ? 15216 : $3;
 $6 = HEAP32[$spec$select>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $spec$select47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$spec$select47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_311()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$spec$select47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 19;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (5984 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = (3)?($34 >>> 3):($34);
      $36 = (($35) + -16)|0;
      $37 = (26)?($$04051 >> 26):($$04051);
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 19;
       break L1;
      }
      $41 = $$04051 << 6;
      $42 = (($34) + -128)|0;
      $43 = $42 | $41;
      $44 = (($$04350) + -1)|0;
      $45 = ($43|0)<(0);
      if ($45) {
       $$03952$pn = $$03952;$47 = $43;$53 = $44;
       while(1) {
        $56 = ((($$03952$pn)) + 1|0);
        $57 = ($53|0)==(0);
        if ($57) {
         $$2 = $47;
         break L14;
        }
        $49 = HEAP8[$56>>0]|0;
        $58 = $49 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         label = 19;
         break L1;
        }
        $46 = $47 << 6;
        $48 = $49&255;
        $50 = (($48) + -128)|0;
        $51 = $50 | $46;
        $52 = (($53) + -1)|0;
        $54 = ($51|0)<(0);
        if ($54) {
         $$03952$pn = $56;$47 = $51;$53 = $52;
        } else {
         $$lcssa = $52;$$lcssa56 = $51;
         break;
        }
       }
      } else {
       $$lcssa = $44;$$lcssa56 = $43;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select47>>2] = $$lcssa56;
      $55 = (($2) - ($$lcssa))|0;
      $$0 = $55;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $60 = (___errno_location()|0);
  HEAP32[$60>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 22;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((8609) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((8609) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$92 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = (getTempRet0() | 0);
         $93 = ($92|0)<(0);
         $94 = $93 << 31 >> 31;
         $95 = $92 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
         $103 = (getTempRet0() | 0);
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$92 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$264 = $103;$266 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$264 = 0;$266 = $73;
       }
      } else {
       $$1158 = $$0157;$264 = 0;$266 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = (5)?($123 >>> 5):($123);
      $125 = $124 & 7;
      $126 = (13584 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((8609) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((8609) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = (getTempRet0() | 0);
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = (getTempRet0() | 0);
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((8609) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((8609) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((8609) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = (getTempRet0() | 0);
      $$7190 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $296;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = (getTempRet0() | 0);
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = (getTempRet0() | 0);
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((8609) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$208 = $226;$210 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((8609) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((8609) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 34;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$264 = $4;$266 = $3;
    } else {
     $$1158 = $$0157;$264 = $294;$266 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $265 = ($264>>>0)<($4>>>0);
   $267 = ($266>>>0)<($3>>>0);
   $268 = ($264|0)==($4|0);
   $269 = $268 & $267;
   $270 = $265 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 34;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = (getTempRet0() | 0);
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($264>>>0)>($4>>>0);
    $280 = ($266>>>0)>($3>>>0);
    $281 = ($264|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 34;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $266 ^ $$1158;
   $288 = $264 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = (getTempRet0() | 0);
   $291 = $290;$292 = $289;
  }
 } while(0);
 setTempRet0(($291) | 0);
 return ($292|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond124 = 0, $or$cond5 = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0102 = -149;$$0103 = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 default: {
  $$0111 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0110 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0110 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0110 = 1;
    }
    }
   } while(0);
   $$0104122 = 0;$$1123 = $$0;
   while(1) {
    $26 = $$1123 | 32;
    $27 = (13571 + ($$0104122)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$1$lcssa = $$1123;$trunc = $$0104122;
     break;
    }
    $31 = ($$0104122>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1123;
     }
    } while(0);
    $39 = (($$0104122) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0104122 = $39;$$1123 = $$2;
    } else {
     $$1$lcssa = $$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($trunc>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($trunc|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($trunc|0)==(0);
     L34: do {
      if ($57) {
       $$2106120 = 0;$$3121 = $$1$lcssa;
       while(1) {
        $58 = $$3121 | 32;
        $59 = (13580 + ($$2106120)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3107 = $$2106120;$$5 = $$3121;
         break L34;
        }
        $63 = ($$2106120>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$3>>2]|0;
          $65 = HEAP32[$4>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$3>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3121;
         }
        } while(0);
        $71 = (($$2106120) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2106120 = $71;$$3121 = $$4;
        } else {
         $$3107 = 3;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3107 = $trunc;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3107|0) {
     case 3:  {
      $73 = HEAP32[$3>>2]|0;
      $74 = HEAP32[$4>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$3>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if (!($81)) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0111 = nan;
        break L4;
       }
       $84 = HEAP32[$3>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$3>>2] = $85;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while(1) {
       $86 = HEAP32[$3>>2]|0;
       $87 = HEAP32[$4>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$3>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4108) + 1)|0;
       $$4108 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0111 = nan;
       break L4;
      }
      $102 = HEAP32[$4>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$3>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$3>>2] = $105;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0111 = 0.0;
       break L4;
      }
      $107 = ($$4108|0)==(0);
      if ($107) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$3>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$3>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0111 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      if ($118) {
       $119 = HEAP32[$3>>2]|0;
       $120 = HEAP32[$4>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$3>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $127 = $124;
       } else {
        $125 = (___shgetc($0)|0);
        $127 = $125;
       }
       $126 = $127 | 32;
       $128 = ($126|0)==(120);
       if ($128) {
        $129 = (+_hexfloat($0,$$0103,$$0102,$$0110,$2));
        $$0111 = $129;
        break L4;
       }
       $130 = HEAP32[$4>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        $$6 = 48;
       } else {
        $132 = HEAP32[$3>>2]|0;
        $133 = ((($132)) + -1|0);
        HEAP32[$3>>2] = $133;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $134 = (+_decfloat($0,$$6,$$0103,$$0102,$$0110,$2));
      $$0111 = $134;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$4>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$3>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$3>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0111 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($trunc>>>0)>(3);
    $or$cond124 = $48 & $49;
    if ($or$cond124) {
     $$1105118 = $trunc;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1105118) + -1)|0;
      $53 = ($52>>>0)>(3);
      if ($53) {
       $$1105118 = $52;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0110|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0111 = $56;
  }
 } while(0);
 return (+$$0111);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $not$ = 0, $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0$ph = $12;
 } else {
  $13 = (___shgetc($0)|0);
  $$0$ph = $13;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$212 = 0;$213 = 0;
   break L5;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0$be = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $$0$be = $20;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $28 = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $28 = $27;
  }
  $29 = ($28|0)==(48);
  if ($29) {
   $37 = 0;$38 = 0;
   while(1) {
    $30 = HEAP32[$5>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$5>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $41 = $35;
    } else {
     $36 = (___shgetc($0)|0);
     $41 = $36;
    }
    $39 = (_i64Add(($37|0),($38|0),-1,-1)|0);
    $40 = (getTempRet0() | 0);
    $42 = ($41|0)==(48);
    if ($42) {
     $37 = $39;$38 = $40;
    } else {
     $$1149$ph = 1;$$3$ph = $41;$$3146$ph = 1;$212 = $39;$213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $28;$$3146$ph = $$0143;$212 = 0;$213 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$51 = 0;$53 = 0;$96 = $212;$98 = $213;
 while(1) {
  $43 = (($$3) + -48)|0;
  $44 = ($43>>>0)<(10);
  $$pre = $$3 | 32;
  if ($44) {
   label = 24;
  } else {
   $45 = (($$pre) + -97)|0;
   $46 = ($45>>>0)<(6);
   $47 = ($$3|0)==(46);
   $or$cond6 = $47 | $46;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) {
    $48 = ($$1149|0)==(0);
    if ($48) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$214 = $53;$215 = $51;$216 = $53;$217 = $51;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $49 = ($$3|0)>(57);
   $50 = (($$pre) + -87)|0;
   $$0133 = $49 ? $50 : $43;
   $52 = ($51|0)<(0);
   $54 = ($53>>>0)<(8);
   $55 = ($51|0)==(0);
   $56 = $55 & $54;
   $57 = $52 | $56;
   do {
    if ($57) {
     $58 = $$0163 << 4;
     $59 = (($$0133) + ($58))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $59;
    } else {
     $60 = ($51|0)<(0);
     $61 = ($53>>>0)<(14);
     $62 = ($51|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if ($64) {
      $65 = (+($$0133|0));
      $66 = $$0155 * 0.0625;
      $67 = $66 * $65;
      $68 = $$0158 + $67;
      $$1152 = $$0151;$$1156 = $66;$$1159 = $68;$$1164 = $$0163;
      break;
     } else {
      $69 = ($$0133|0)==(0);
      $70 = ($$0151|0)!=(0);
      $or$cond = $70 | $69;
      $71 = $$0155 * 0.5;
      $72 = $$0158 + $71;
      $spec$select175 = $or$cond ? $$0158 : $72;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $73 = (_i64Add(($53|0),($51|0),1,0)|0);
   $74 = (getTempRet0() | 0);
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$214 = $96;$215 = $98;$216 = $73;$217 = $74;
  }
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$7>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   $78 = ((($75)) + 1|0);
   HEAP32[$5>>2] = $78;
   $79 = HEAP8[$75>>0]|0;
   $80 = $79&255;
   $$3$be = $80;
  } else {
   $81 = (___shgetc($0)|0);
   $$3$be = $81;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$51 = $217;$53 = $216;$96 = $214;$98 = $215;
 }
 $82 = ($$3146|0)==(0);
 do {
  if ($82) {
   $83 = HEAP32[$7>>2]|0;
   $84 = ($83|0)==(0|0);
   if (!($84)) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + -1|0);
    HEAP32[$5>>2] = $86;
   }
   $87 = ($4|0)==(0);
   if ($87) {
    ___shlim($0,0);
   } else {
    if (!($84)) {
     $88 = HEAP32[$5>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$5>>2] = $89;
     $90 = ($$1149|0)==(0);
     $brmerge = $90 | $84;
     if (!($brmerge)) {
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + -1|0);
      HEAP32[$5>>2] = $92;
     }
    }
   }
   $93 = (+($3|0));
   $94 = $93 * 0.0;
   $$0169 = $94;
  } else {
   $95 = ($$1149|0)==(0);
   $97 = $95 ? $53 : $96;
   $99 = $95 ? $51 : $98;
   $100 = ($51|0)<(0);
   $101 = ($53>>>0)<(8);
   $102 = ($51|0)==(0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $$3166185 = $$0163;$106 = $53;$107 = $51;
    while(1) {
     $105 = $$3166185 << 4;
     $108 = (_i64Add(($106|0),($107|0),1,0)|0);
     $109 = (getTempRet0() | 0);
     $110 = ($107|0)<(0);
     $111 = ($106>>>0)<(7);
     $112 = ($107|0)==(0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $$3166185 = $105;$106 = $108;$107 = $109;
     } else {
      $$3166$lcssa = $105;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $115 = $$3$lcssa | 32;
   $116 = ($115|0)==(112);
   if ($116) {
    $117 = (_scanexp($0,$4)|0);
    $118 = (getTempRet0() | 0);
    $119 = ($117|0)==(0);
    $120 = ($118|0)==(-2147483648);
    $121 = $119 & $120;
    if ($121) {
     $122 = ($4|0)==(0);
     if ($122) {
      ___shlim($0,0);
      $$0169 = 0.0;
      break;
     }
     $123 = HEAP32[$7>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $135 = 0;$136 = 0;
     } else {
      $125 = HEAP32[$5>>2]|0;
      $126 = ((($125)) + -1|0);
      HEAP32[$5>>2] = $126;
      $135 = 0;$136 = 0;
     }
    } else {
     $135 = $117;$136 = $118;
    }
   } else {
    $127 = HEAP32[$7>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $135 = 0;$136 = 0;
    } else {
     $129 = HEAP32[$5>>2]|0;
     $130 = ((($129)) + -1|0);
     HEAP32[$5>>2] = $130;
     $135 = 0;$136 = 0;
    }
   }
   $131 = (_bitshift64Shl(($97|0),($99|0),2)|0);
   $132 = (getTempRet0() | 0);
   $133 = (_i64Add(($131|0),($132|0),-32,-1)|0);
   $134 = (getTempRet0() | 0);
   $137 = (_i64Add(($133|0),($134|0),($135|0),($136|0))|0);
   $138 = (getTempRet0() | 0);
   $139 = ($$3166$lcssa|0)==(0);
   if ($139) {
    $140 = (+($3|0));
    $141 = $140 * 0.0;
    $$0169 = $141;
    break;
   }
   $142 = (0 - ($2))|0;
   $143 = ($142|0)<(0);
   $144 = $143 << 31 >> 31;
   $145 = ($138|0)>($144|0);
   $146 = ($137>>>0)>($142>>>0);
   $147 = ($138|0)==($144|0);
   $148 = $147 & $146;
   $149 = $145 | $148;
   if ($149) {
    $150 = (___errno_location()|0);
    HEAP32[$150>>2] = 34;
    $151 = (+($3|0));
    $152 = $151 * 1.7976931348623157E+308;
    $153 = $152 * 1.7976931348623157E+308;
    $$0169 = $153;
    break;
   }
   $154 = (($2) + -106)|0;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = ($138|0)<($156|0);
   $158 = ($137>>>0)<($154>>>0);
   $159 = ($138|0)==($156|0);
   $160 = $159 & $158;
   $161 = $157 | $160;
   if ($161) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0169 = $165;
    break;
   }
   $166 = ($$3166$lcssa|0)>(-1);
   if ($166) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$171 = $137;$172 = $138;
    while(1) {
     $167 = !($$3161181 >= 0.5);
     $168 = $$4167180 << 1;
     $169 = $$3161181 + -1.0;
     $not$ = $167 ^ 1;
     $170 = $not$&1;
     $$5168 = $168 | $170;
     $$pn = $167 ? $$3161181 : $169;
     $$4162 = $$3161181 + $$pn;
     $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
     $174 = (getTempRet0() | 0);
     $175 = ($$5168|0)>(-1);
     if ($175) {
      $$3161181 = $$4162;$$4167180 = $$5168;$171 = $173;$172 = $174;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$182 = $173;$183 = $174;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$182 = $137;$183 = $138;
   }
   $176 = ($1|0)<(0);
   $177 = $176 << 31 >> 31;
   $178 = ($2|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = (_i64Subtract(32,0,($2|0),($179|0))|0);
   $181 = (getTempRet0() | 0);
   $184 = (_i64Add(($180|0),($181|0),($182|0),($183|0))|0);
   $185 = (getTempRet0() | 0);
   $186 = ($185|0)<($177|0);
   $187 = ($184>>>0)<($1>>>0);
   $188 = ($185|0)==($177|0);
   $189 = $188 & $187;
   $190 = $186 | $189;
   if ($190) {
    $191 = ($184|0)>(0);
    if ($191) {
     $$0170 = $184;
     label = 65;
    } else {
     $$0170174 = 0;$195 = 84;
     label = 67;
    }
   } else {
    $$0170 = $1;
    label = 65;
   }
   if ((label|0) == 65) {
    $192 = ($$0170|0)<(53);
    $193 = (84 - ($$0170))|0;
    if ($192) {
     $$0170174 = $$0170;$195 = $193;
     label = 67;
    } else {
     $$pre203 = (+($3|0));
     $$0154 = 0.0;$$0170173 = $$0170;$$pre$phi204Z2D = $$pre203;
    }
   }
   if ((label|0) == 67) {
    $194 = (+($3|0));
    $196 = (+_scalbn(1.0,$195));
    $197 = (+_copysignl($196,$194));
    $$0154 = $197;$$0170173 = $$0170174;$$pre$phi204Z2D = $194;
   }
   $198 = ($$0170173|0)<(32);
   $199 = $$3161$lcssa != 0.0;
   $or$cond4 = $199 & $198;
   $200 = $$4167$lcssa & 1;
   $201 = ($200|0)==(0);
   $or$cond172 = $201 & $or$cond4;
   $202 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($202))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $203 = (+($$6>>>0));
   $204 = $$pre$phi204Z2D * $203;
   $205 = $$0154 + $204;
   $206 = $$5 * $$pre$phi204Z2D;
   $207 = $206 + $205;
   $208 = $207 - $$0154;
   $209 = $208 != 0.0;
   if (!($209)) {
    $210 = (___errno_location()|0);
    HEAP32[$210>>2] = 34;
   }
   $211 = (+_scalbnl($208,$182));
   $$0169 = $211;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$neg448 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond416 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $7 = (($3) + ($2))|0;
 $8 = (0 - ($7))|0;
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 100|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$375 = 0;$376 = 0;
   break L1;
  }
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$9>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0324$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0324$be = $17;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$9>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $25 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $25 = $24;
  }
  $26 = ($25|0)==(48);
  if ($26) {
   $27 = 0;$28 = 0;
   while(1) {
    $29 = (_i64Add(($27|0),($28|0),-1,-1)|0);
    $30 = (getTempRet0() | 0);
    $31 = HEAP32[$9>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = ((($31)) + 1|0);
     HEAP32[$9>>2] = $34;
     $35 = HEAP8[$31>>0]|0;
     $36 = $35&255;
     $38 = $36;
    } else {
     $37 = (___shgetc($0)|0);
     $38 = $37;
    }
    $39 = ($38|0)==(48);
    if ($39) {
     $27 = $29;$28 = $30;
    } else {
     $$0390 = 1;$$2 = $38;$$2395 = 1;$375 = $29;$376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $25;$$2395 = $$0393;$375 = 0;$376 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $40 = (($$2) + -48)|0;
 $41 = ($40>>>0)<(10);
 $42 = ($$2|0)==(46);
 $43 = $42 | $41;
 L22: do {
  if ($43) {
   $44 = ((($6)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$377 = $42;$378 = $40;$379 = $375;$380 = $376;$47 = 0;$48 = 0;
   L24: while(1) {
    do {
     if ($377) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $47;$382 = $48;$383 = $47;$384 = $48;
      } else {
       break L24;
      }
     } else {
      $46 = ($$0340502|0)<(125);
      $49 = (_i64Add(($47|0),($48|0),1,0)|0);
      $50 = (getTempRet0() | 0);
      $51 = ($$3504|0)!=(48);
      if (!($46)) {
       if (!($51)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
        break;
       }
       $61 = HEAP32[$44>>2]|0;
       $62 = $61 | 1;
       HEAP32[$44>>2] = $62;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
       break;
      }
      $spec$select = $51 ? $49 : $$0398499;
      $52 = ($$0336503|0)==(0);
      $53 = (($6) + ($$0340502<<2)|0);
      if ($52) {
       $storemerge446 = $378;
      } else {
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54*10)|0;
       $56 = (($$3504) + -48)|0;
       $57 = (($56) + ($55))|0;
       $storemerge446 = $57;
      }
      HEAP32[$53>>2] = $storemerge446;
      $58 = (($$0336503) + 1)|0;
      $59 = ($58|0)==(9);
      $60 = $59&1;
      $spec$select410 = (($$0340502) + ($60))|0;
      $spec$select411 = $59 ? 0 : $58;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
     }
    } while(0);
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$10>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$9>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $71 = $68;
    } else {
     $69 = (___shgetc($0)|0);
     $71 = $69;
    }
    $70 = (($71) + -48)|0;
    $72 = ($70>>>0)<(10);
    $73 = ($71|0)==(46);
    $74 = $73 | $72;
    if ($74) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $71;$377 = $73;$378 = $70;$379 = $381;$380 = $382;$47 = $383;$48 = $384;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $71;$$3396$lcssa = $$4397;$76 = $381;$77 = $383;$79 = $382;$80 = $384;
     label = 31;
     break L22;
    }
   }
   $45 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$385 = $47;$386 = $48;$387 = $379;$388 = $380;$389 = $45;
   label = 39;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$76 = $375;$77 = 0;$79 = $376;$80 = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $75 = ($$1391$lcssa|0)==(0);
   $78 = $75 ? $77 : $76;
   $81 = $75 ? $80 : $79;
   $82 = ($$3396$lcssa|0)!=(0);
   $83 = $$3$lcssa | 32;
   $84 = ($83|0)==(101);
   $or$cond414 = $82 & $84;
   if (!($or$cond414)) {
    $99 = ($$3$lcssa|0)>(-1);
    if ($99) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$385 = $77;$386 = $80;$387 = $78;$388 = $81;$389 = $82;
     label = 39;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$390 = $77;$391 = $80;$392 = $82;$393 = $78;$394 = $81;
     label = 41;
     break;
    }
   }
   $85 = (_scanexp($0,$5)|0);
   $86 = (getTempRet0() | 0);
   $87 = ($85|0)==(0);
   $88 = ($86|0)==(-2147483648);
   $89 = $87 & $88;
   if ($89) {
    $90 = ($5|0)==(0);
    if ($90) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $91 = HEAP32[$10>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $95 = 0;$96 = 0;
    } else {
     $93 = HEAP32[$9>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$9>>2] = $94;
     $95 = 0;$96 = 0;
    }
   } else {
    $95 = $85;$96 = $86;
   }
   $97 = (_i64Add(($95|0),($96|0),($78|0),($81|0))|0);
   $98 = (getTempRet0() | 0);
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$109 = $97;$111 = $77;$112 = $98;$114 = $80;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $100 = HEAP32[$10>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$390 = $385;$391 = $386;$392 = $389;$393 = $387;$394 = $388;
   label = 41;
  } else {
   $102 = HEAP32[$9>>2]|0;
   $103 = ((($102)) + -1|0);
   HEAP32[$9>>2] = $103;
   if ($389) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$109 = $387;$111 = $385;$112 = $388;$114 = $386;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($392) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$109 = $393;$111 = $390;$112 = $394;$114 = $391;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $104 = (___errno_location()|0);
   HEAP32[$104>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $105 = HEAP32[$6>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (+($4|0));
    $108 = $107 * 0.0;
    $$1 = $108;
    break;
   }
   $110 = ($109|0)==($111|0);
   $113 = ($112|0)==($114|0);
   $115 = $110 & $113;
   $116 = ($114|0)<(0);
   $117 = ($111>>>0)<(10);
   $118 = ($114|0)==(0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   $or$cond = $120 & $115;
   if ($or$cond) {
    $121 = ($2|0)>(30);
    $122 = ($2)?($105 >>> $2):($105);
    $123 = ($122|0)==(0);
    $or$cond416 = $121 | $123;
    if ($or$cond416) {
     $124 = (+($4|0));
     $125 = (+($105>>>0));
     $126 = $124 * $125;
     $$1 = $126;
     break;
    }
   }
   $127 = (($3|0) / -2)&-1;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = ($112|0)>($129|0);
   $131 = ($109>>>0)>($127>>>0);
   $132 = ($112|0)==($129|0);
   $133 = $132 & $131;
   $134 = $130 | $133;
   if ($134) {
    $135 = (___errno_location()|0);
    HEAP32[$135>>2] = 34;
    $136 = (+($4|0));
    $137 = $136 * 1.7976931348623157E+308;
    $138 = $137 * 1.7976931348623157E+308;
    $$1 = $138;
    break;
   }
   $139 = (($3) + -106)|0;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = ($112|0)<($141|0);
   $143 = ($109>>>0)<($139>>>0);
   $144 = ($112|0)==($141|0);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    $147 = (___errno_location()|0);
    HEAP32[$147>>2] = 34;
    $148 = (+($4|0));
    $149 = $148 * 2.2250738585072014E-308;
    $150 = $149 * 2.2250738585072014E-308;
    $$1 = $150;
    break;
   }
   $151 = ($$0336453|0)==(0);
   if ($151) {
    $$3343 = $$0340457;
   } else {
    $152 = ($$0336453|0)<(9);
    if ($152) {
     $153 = (($6) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$153>>2]|0;
     $$3339493 = $$0336453;$155 = $$promoted;
     while(1) {
      $154 = ($155*10)|0;
      $156 = (($$3339493) + 1)|0;
      $157 = ($$3339493|0)<(8);
      if ($157) {
       $$3339493 = $156;$155 = $154;
      } else {
       break;
      }
     }
     HEAP32[$153>>2] = $154;
    }
    $158 = (($$0340457) + 1)|0;
    $$3343 = $158;
   }
   $159 = ($$0398463|0)<(9);
   if ($159) {
    $160 = ($$0398463|0)<=($109|0);
    $161 = ($109|0)<(18);
    $or$cond3 = $160 & $161;
    if ($or$cond3) {
     $162 = ($109|0)==(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $$1 = $166;
      break;
     }
     $167 = ($109|0)<(9);
     if ($167) {
      $168 = (+($4|0));
      $169 = HEAP32[$6>>2]|0;
      $170 = (+($169>>>0));
      $171 = $168 * $170;
      $172 = (8 - ($109))|0;
      $173 = (8576 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (+($174|0));
      $176 = $171 / $175;
      $$1 = $176;
      break;
     }
     $$neg447 = Math_imul($109, -3)|0;
     $$neg448 = (($2) + 27)|0;
     $177 = (($$neg448) + ($$neg447))|0;
     $178 = ($177|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $179 = ($177)?($$pre >>> $177):($$pre);
     $180 = ($179|0)==(0);
     $or$cond559 = $178 | $180;
     if ($or$cond559) {
      $181 = (+($4|0));
      $182 = (+($$pre>>>0));
      $183 = $181 * $182;
      $184 = (($109) + -10)|0;
      $185 = (8576 + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (+($186|0));
      $188 = $183 * $187;
      $$1 = $188;
      break;
     }
    }
   }
   $189 = (($109|0) % 9)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $109;
   } else {
    $191 = ($109|0)>(-1);
    $192 = (($189) + 9)|0;
    $193 = $191 ? $189 : $192;
    $194 = (8 - ($193))|0;
    $195 = (8576 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($$3343|0)==(0);
    if ($197) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $109;
    } else {
     $198 = (1000000000 / ($196|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $109;$$4344485 = 0;
     while(1) {
      $199 = (($6) + ($$4344485<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200>>>0) / ($196>>>0))&-1;
      $202 = Math_imul($201, $196)|0;
      $203 = (($200) - ($202))|0;
      $204 = (($201) + ($$0335486))|0;
      HEAP32[$199>>2] = $204;
      $205 = Math_imul($198, $203)|0;
      $206 = ($$4344485|0)==($$0345484|0);
      $207 = ($204|0)==(0);
      $or$cond417 = $206 & $207;
      $208 = (($$0345484) + 1)|0;
      $209 = $208 & 127;
      $210 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $210 : $$0381483;
      $spec$select440 = $or$cond417 ? $209 : $$0345484;
      $211 = (($$4344485) + 1)|0;
      $212 = ($211|0)==($$3343|0);
      if ($212) {
       break;
      } else {
       $$0335486 = $205;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $211;
      }
     }
     $213 = ($205|0)==(0);
     if ($213) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $214 = (($6) + ($$3343<<2)|0);
      $215 = (($$3343) + 1)|0;
      HEAP32[$214>>2] = $205;
      $$0345$lcssa540 = $spec$select440;$$0367 = $215;$$0381$lcssa539 = $spec$select439;
     }
    }
    $216 = (9 - ($193))|0;
    $217 = (($216) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $217;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L104: while(1) {
    $218 = ($$3384$ph578|0)<(18);
    $219 = ($$3384$ph578|0)==(18);
    $220 = (($6) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($218)) {
      if (!($219)) {
       $$5386$ph = $$3384$ph578;
       break L104;
      }
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221>>>0)<(9007199);
      if (!($222)) {
       $$5386$ph = 18;
       break L104;
      }
     }
     $223 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $223;
     while(1) {
      $$5 = $$5$in & 127;
      $224 = (($6) + ($$5<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (_bitshift64Shl(($225|0),0,29)|0);
      $227 = (getTempRet0() | 0);
      $228 = (_i64Add(($226|0),($227|0),($$0329|0),0)|0);
      $229 = (getTempRet0() | 0);
      $230 = ($229>>>0)>(0);
      $231 = ($228>>>0)>(1000000000);
      $232 = ($229|0)==(0);
      $233 = $232 & $231;
      $234 = $230 | $233;
      if ($234) {
       $235 = (___udivdi3(($228|0),($229|0),1000000000,0)|0);
       $236 = (getTempRet0() | 0);
       $237 = (___muldi3(($235|0),($236|0),1000000000,0)|0);
       $238 = (getTempRet0() | 0);
       $239 = (_i64Subtract(($228|0),($229|0),($237|0),($238|0))|0);
       $240 = (getTempRet0() | 0);
       $$1330 = $235;$$sink$off0 = $239;
      } else {
       $$1330 = 0;$$sink$off0 = $228;
      }
      HEAP32[$224>>2] = $$sink$off0;
      $241 = (($$3370) + 127)|0;
      $242 = $241 & 127;
      $243 = ($$5|0)!=($242|0);
      $244 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $243 | $244;
      $245 = ($$sink$off0|0)==(0);
      $spec$select419 = $245 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $246 = (($$5) + -1)|0;
      if ($244) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $246;
      }
     }
     $247 = (($$0376) + -29)|0;
     $248 = ($$1330|0)==(0);
     if ($248) {
      $$0376 = $247;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $249 = (($$3384$ph578) + 9)|0;
    $250 = (($$3348$ph580) + 127)|0;
    $251 = $250 & 127;
    $252 = ($251|0)==($spec$select441|0);
    $253 = (($spec$select441) + 127)|0;
    $254 = $253 & 127;
    $255 = (($spec$select441) + 126)|0;
    $256 = $255 & 127;
    $257 = (($6) + ($256<<2)|0);
    if ($252) {
     $258 = (($6) + ($254<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$257>>2]|0;
     $261 = $260 | $259;
     HEAP32[$257>>2] = $261;
     $$5372 = $254;
    } else {
     $$5372 = $$3370;
    }
    $262 = (($6) + ($251<<2)|0);
    HEAP32[$262>>2] = $$1330;
    $$0376$ph = $247;$$2369$ph579 = $$5372;$$3348$ph580 = $251;$$3384$ph578 = $249;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L123: while(1) {
    $299 = (($$7374$ph$ph) + 1)|0;
    $296 = $299 & 127;
    $300 = (($$7374$ph$ph) + 127)|0;
    $301 = $300 & 127;
    $302 = (($6) + ($301<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $294 = ($$5386$ph576|0)==(18);
     $295 = ($$5386$ph576|0)>(27);
     $spec$select420 = $295 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $263 = (($$0331476) + ($$5350))|0;
       $264 = $263 & 127;
       $265 = ($264|0)==($$7374$ph$ph|0);
       if ($265) {
        label = 92;
        break;
       }
       $266 = (($6) + ($264<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (9448 + ($$0331476<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267>>>0)<($269>>>0);
       if ($270) {
        label = 92;
        break;
       }
       $271 = ($267>>>0)>($269>>>0);
       if ($271) {
        break;
       }
       $272 = (($$0331476) + 1)|0;
       $273 = ($272>>>0)<(2);
       if ($273) {
        $$0331476 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($294) {
        break L123;
       }
      }
      $274 = (($spec$select420) + ($$1377))|0;
      $275 = ($$5350|0)==($$7374$ph$ph|0);
      if ($275) {
       $$1377 = $274;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $276 = 1 << $spec$select420;
     $277 = (($276) + -1)|0;
     $278 = ($spec$select420)?(1000000000 >>> $spec$select420):(1000000000);
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $279 = (($6) + ($$6479<<2)|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280 & $277;
      $282 = ($spec$select420)?($280 >>> $spec$select420):($280);
      $283 = (($282) + ($$0327480))|0;
      HEAP32[$279>>2] = $283;
      $284 = Math_imul($281, $278)|0;
      $285 = ($$6479|0)==($$6351478|0);
      $286 = ($283|0)==(0);
      $or$cond421 = $285 & $286;
      $287 = (($$6351478) + 1)|0;
      $288 = $287 & 127;
      $289 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $289 : $$6387477;
      $spec$select443 = $or$cond421 ? $288 : $$6351478;
      $290 = (($$6479) + 1)|0;
      $291 = $290 & 127;
      $292 = ($291|0)==($$7374$ph$ph|0);
      if ($292) {
       break;
      } else {
       $$0327480 = $284;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $291;
      }
     }
     $293 = ($284|0)==(0);
     if (!($293)) {
      $297 = ($296|0)==($spec$select443|0);
      if (!($297)) {
       break;
      }
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 | 1;
      HEAP32[$302>>2] = $304;
     }
     $$1377$ph = $274;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $298 = (($6) + ($$7374$ph$ph<<2)|0);
    HEAP32[$298>>2] = $284;
    $$1377$ph$ph = $274;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $296;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $305 = (($$4475) + ($$5350))|0;
    $306 = $305 & 127;
    $307 = ($306|0)==($$10473|0);
    $308 = (($$10473) + 1)|0;
    $309 = $308 & 127;
    if ($307) {
     $310 = (($309) + -1)|0;
     $311 = (($6) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $$11 = $309;
    } else {
     $$11 = $$10473;
    }
    $312 = $$0360474 * 1.0E+9;
    $313 = (($6) + ($306<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (+($314>>>0));
    $316 = $312 + $315;
    $317 = (($$4475) + 1)|0;
    $exitcond = ($317|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $316;$$10473 = $$11;$$4475 = $317;
    }
   }
   $318 = (+($4|0));
   $319 = $316 * $318;
   $320 = (($$1377) + 53)|0;
   $321 = (($320) - ($3))|0;
   $322 = ($321|0)<($2|0);
   $323 = ($321|0)>(0);
   $spec$store$select = $323 ? $321 : 0;
   $$0328 = $322 ? $spec$store$select : $2;
   $324 = ($$0328|0)<(53);
   if ($324) {
    $325 = (105 - ($$0328))|0;
    $326 = (+_scalbn(1.0,$325));
    $327 = (+_copysignl($326,$319));
    $328 = (53 - ($$0328))|0;
    $329 = (+_scalbn(1.0,$328));
    $330 = (+_fmodl($319,$329));
    $331 = $319 - $330;
    $332 = $327 + $331;
    $$0355 = $327;$$0356 = $330;$$1361 = $332;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $319;
   }
   $333 = (($$5350) + 2)|0;
   $334 = $333 & 127;
   $335 = ($334|0)==($$11|0);
   if ($335) {
    $$3359 = $$0356;
   } else {
    $336 = (($6) + ($334<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337>>>0)<(500000000);
    do {
     if ($338) {
      $339 = ($337|0)==(0);
      if ($339) {
       $340 = (($$5350) + 3)|0;
       $341 = $340 & 127;
       $342 = ($341|0)==($$11|0);
       if ($342) {
        $$1357 = $$0356;
        break;
       }
      }
      $343 = $318 * 0.25;
      $344 = $343 + $$0356;
      $$1357 = $344;
     } else {
      $345 = ($337|0)==(500000000);
      if (!($345)) {
       $346 = $318 * 0.75;
       $347 = $346 + $$0356;
       $$1357 = $347;
       break;
      }
      $348 = (($$5350) + 3)|0;
      $349 = $348 & 127;
      $350 = ($349|0)==($$11|0);
      if ($350) {
       $351 = $318 * 0.5;
       $352 = $351 + $$0356;
       $$1357 = $352;
       break;
      } else {
       $353 = $318 * 0.75;
       $354 = $353 + $$0356;
       $$1357 = $354;
       break;
      }
     }
    } while(0);
    $355 = (53 - ($$0328))|0;
    $356 = ($355|0)>(1);
    if ($356) {
     $357 = (+_fmodl($$1357,1.0));
     $358 = $357 != 0.0;
     if ($358) {
      $$3359 = $$1357;
     } else {
      $359 = $$1357 + 1.0;
      $$3359 = $359;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $360 = $$1361 + $$3359;
   $361 = $360 - $$0355;
   $362 = $320 & 2147483647;
   $363 = (-2 - ($7))|0;
   $364 = ($362|0)>($363|0);
   do {
    if ($364) {
     $365 = (+Math_abs((+$361)));
     $366 = !($365 >= 9007199254740992.0);
     $367 = $361 * 0.5;
     $not$ = $366 ^ 1;
     $368 = $not$&1;
     $$3379 = (($$1377) + ($368))|0;
     $$2362 = $366 ? $361 : $367;
     $369 = (($$3379) + 50)|0;
     $370 = ($369|0)>($8|0);
     if (!($370)) {
      $371 = ($$0328|0)!=($321|0);
      $narrow = $371 | $366;
      $$2366$v = $322 & $narrow;
      $372 = $$3359 != 0.0;
      $or$cond9 = $372 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     $373 = (___errno_location()|0);
     HEAP32[$373>>2] = 34;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $361;$$4380 = $$1377;
    }
   } while(0);
   $374 = (+_scalbnl($$3363,$$4380));
   $$1 = $374;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pr = 0, $$pre = 0, $$pre$phi69Z2D = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $100 = 0;$99 = -2147483648;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    label = 14;
   }
  } else {
   $$0 = $13;$$049 = $22;$$pre$phi69Z2D = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($11) + -48)|0;
  $$0 = 0;$$049 = $11;$$pre$phi69Z2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $29 = ($$pre$phi69Z2D>>>0)>(9);
  if ($29) {
   label = 14;
  } else {
   $$04858 = 0;$$157 = $$049;
   while(1) {
    $33 = ($$04858*10)|0;
    $34 = (($$157) + -48)|0;
    $35 = (($34) + ($33))|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = HEAP32[$4>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $39 = ((($36)) + 1|0);
     HEAP32[$2>>2] = $39;
     $40 = HEAP8[$36>>0]|0;
     $41 = $40&255;
     $44 = $41;
    } else {
     $42 = (___shgetc($0)|0);
     $44 = $42;
    }
    $43 = (($44) + -48)|0;
    $45 = ($43>>>0)<(10);
    $46 = ($35|0)<(214748364);
    $47 = $45 & $46;
    if ($47) {
     $$04858 = $35;$$157 = $44;
    } else {
     break;
    }
   }
   $48 = ($35|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = ($43>>>0)<(10);
   if ($50) {
    $$251 = $44;$51 = $35;$52 = $49;
    while(1) {
     $53 = (___muldi3(($51|0),($52|0),10,0)|0);
     $54 = (getTempRet0() | 0);
     $55 = ($$251|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = (_i64Add(($$251|0),($56|0),-48,-1)|0);
     $58 = (getTempRet0() | 0);
     $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
     $60 = (getTempRet0() | 0);
     $61 = HEAP32[$2>>2]|0;
     $62 = HEAP32[$4>>2]|0;
     $63 = ($61>>>0)<($62>>>0);
     if ($63) {
      $64 = ((($61)) + 1|0);
      HEAP32[$2>>2] = $64;
      $65 = HEAP8[$61>>0]|0;
      $66 = $65&255;
      $69 = $66;
     } else {
      $67 = (___shgetc($0)|0);
      $69 = $67;
     }
     $68 = (($69) + -48)|0;
     $70 = ($68>>>0)<(10);
     $71 = ($60|0)<(21474836);
     $72 = ($59>>>0)<(2061584302);
     $73 = ($60|0)==(21474836);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = $70 & $75;
     if ($76) {
      $$251 = $69;$51 = $59;$52 = $60;
     } else {
      break;
     }
    }
    $77 = ($68>>>0)<(10);
    if ($77) {
     while(1) {
      $78 = HEAP32[$2>>2]|0;
      $79 = HEAP32[$4>>2]|0;
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $81 = ((($78)) + 1|0);
       HEAP32[$2>>2] = $81;
       $82 = HEAP8[$78>>0]|0;
       $83 = $82&255;
       $86 = $83;
      } else {
       $84 = (___shgetc($0)|0);
       $86 = $84;
      }
      $85 = (($86) + -48)|0;
      $87 = ($85>>>0)<(10);
      if (!($87)) {
       $93 = $59;$94 = $60;
       break;
      }
     }
    } else {
     $93 = $59;$94 = $60;
    }
   } else {
    $93 = $35;$94 = $49;
   }
   $88 = HEAP32[$4>>2]|0;
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    $90 = HEAP32[$2>>2]|0;
    $91 = ((($90)) + -1|0);
    HEAP32[$2>>2] = $91;
   }
   $92 = ($$0|0)==(0);
   $95 = (_i64Subtract(0,0,($93|0),($94|0))|0);
   $96 = (getTempRet0() | 0);
   $97 = $92 ? $93 : $95;
   $98 = $92 ? $94 : $96;
   $100 = $97;$99 = $98;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$4>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if ($30) {
   $100 = 0;$99 = -2147483648;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$2>>2] = $32;
   $100 = 0;$99 = -2147483648;
  }
 }
 setTempRet0(($99) | 0);
 return ($100|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = (getTempRet0() | 0);
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = (getTempRet0() | 0);
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_512($1)|0);
   $19 = (getTempRet0() | 0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = (getTempRet0() | 0);
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = (getTempRet0() | 0);
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = (getTempRet0() | 0);
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = (getTempRet0() | 0);
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = (getTempRet0() | 0);
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = (getTempRet0() | 0);
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = (getTempRet0() | 0);
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = (getTempRet0() | 0);
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$100 = $92;$158 = $97;$159 = $87;$160 = $88;$98 = $91;
      while(1) {
       if ($158) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = (getTempRet0() | 0);
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = (getTempRet0() | 0);
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$100 = $111;$158 = $116;$159 = $106;$160 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $123 = $119;$125 = $117;
     }
    } else {
     $123 = $157;$125 = $156;
    }
    $124 = ($123>>>0)<(1048576);
    $126 = ($125>>>0)<(0);
    $127 = ($123|0)==(1048576);
    $128 = $127 & $126;
    $129 = $124 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = (getTempRet0() | 0);
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = (getTempRet0() | 0);
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = (getTempRet0() | 0);
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = (getTempRet0() | 0);
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_512($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function ___pthread_self_311() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 7]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 7]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = (31)?($26 >> 31):($26);
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $spec$select = $11 ? $$027 : $2;
 (_memcpy(($1|0),($4|0),($spec$select|0))|0);
 $12 = (($4) + ($spec$select)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($spec$select|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 7]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 7]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)==(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $0 : $17;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$214 = 0, $$neg13 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1 = 0;$$112 = $$011;$$pre$phiZ2D = $7;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$pre16 = $$pre << 24 >> 24;
  $$1 = $$0;$$112 = $5;$$pre$phiZ2D = $$pre16;
 }
 $8 = (_isdigit($$pre$phiZ2D)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$214 = $$112;
  while(1) {
   $10 = ($$01015*10)|0;
   $11 = ((($$214)) + 1|0);
   $12 = HEAP8[$$214>>0]|0;
   $13 = $12 << 24 >> 24;
   $$neg13 = (($10) + 48)|0;
   $14 = (($$neg13) - ($13))|0;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = (_isdigit($16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$010$lcssa = $14;
    break;
   } else {
    $$01015 = $14;$$214 = $11;
   }
  }
 }
 $19 = ($$1|0)==(0);
 $20 = (0 - ($$010$lcssa))|0;
 $21 = $19 ? $20 : $$010$lcssa;
 return ($21|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _atof($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_strtod($0,0));
 return (+$1);
}
function _atol($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$214 = 0, $$neg13 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1 = 0;$$112 = $$011;$$pre$phiZ2D = $7;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$pre16 = $$pre << 24 >> 24;
  $$1 = $$0;$$112 = $5;$$pre$phiZ2D = $$pre16;
 }
 $8 = (_isdigit($$pre$phiZ2D)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$214 = $$112;
  while(1) {
   $10 = ($$01015*10)|0;
   $11 = ((($$214)) + 1|0);
   $12 = HEAP8[$$214>>0]|0;
   $13 = $12 << 24 >> 24;
   $$neg13 = (($10) + 48)|0;
   $14 = (($$neg13) - ($13))|0;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = (_isdigit($16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$010$lcssa = $14;
    break;
   } else {
    $$01015 = $14;$$214 = $11;
   }
  }
 }
 $19 = ($$1|0)==(0);
 $20 = (0 - ($$010$lcssa))|0;
 $21 = $19 ? $20 : $$010$lcssa;
 return ($21|0);
}
function _atoll($0) {
 $0 = $0|0;
 var $$0 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$213 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre15 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1 = 0;$$112 = $$011;$$pre$phiZ2D = $7;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$pre15 = $$pre << 24 >> 24;
  $$1 = $$0;$$112 = $5;$$pre$phiZ2D = $$pre15;
 }
 $8 = (_isdigit($$pre$phiZ2D)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $27 = 0;$28 = 0;
 } else {
  $$213 = $$112;$10 = 0;$11 = 0;
  while(1) {
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = ((($$213)) + 1|0);
   $15 = HEAP8[$$213>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = (($16) + -48)|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = (_i64Subtract(($12|0),($13|0),($17|0),($19|0))|0);
   $21 = (getTempRet0() | 0);
   $22 = HEAP8[$14>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = (_isdigit($23)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $27 = $20;$28 = $21;
    break;
   } else {
    $$213 = $14;$10 = $20;$11 = $21;
   }
  }
 }
 $26 = ($$1|0)==(0);
 $29 = (_i64Subtract(0,0,($27|0),($28|0))|0);
 $30 = (getTempRet0() | 0);
 $31 = $26 ? $29 : $27;
 $32 = $26 ? $30 : $28;
 setTempRet0(($32) | 0);
 return ($31|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03754 = 0, $$038$lcssa = 0, $$03867 = 0, $$039$lcssa = 0, $$03966 = 0, $$042$lcssa = 0, $$04265 = 0, $$055 = 0, $$1$lcssa = 0, $$140 = 0, $$143 = 0, $$153 = 0, $$2 = 0, $$24147 = 0, $$24446 = 0, $$345 = 0, $$348 = 0, $$4 = 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond64 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond64 = $10 & $9;
   if ($or$cond64) {
    $$03867 = $2;$$03966 = $1;$$04265 = $0;
    while(1) {
     $11 = HEAP8[$$03966>>0]|0;
     HEAP8[$$04265>>0] = $11;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$345 = $$04265;$$4 = $$03867;
      break L1;
     }
     $13 = (($$03867) + -1)|0;
     $14 = ((($$03966)) + 1|0);
     $15 = ((($$04265)) + 1|0);
     $16 = $14;
     $17 = $16 & 3;
     $18 = ($17|0)!=(0);
     $19 = ($13|0)!=(0);
     $or$cond = $19 & $18;
     if ($or$cond) {
      $$03867 = $13;$$03966 = $14;$$04265 = $15;
     } else {
      $$038$lcssa = $13;$$039$lcssa = $14;$$042$lcssa = $15;$$lcssa = $19;
      break;
     }
    }
   } else {
    $$038$lcssa = $2;$$039$lcssa = $1;$$042$lcssa = $0;$$lcssa = $10;
   }
   if ($$lcssa) {
    $$pr = HEAP8[$$039$lcssa>>0]|0;
    $20 = ($$pr<<24>>24)==(0);
    if ($20) {
     $$345 = $$042$lcssa;$$4 = $$038$lcssa;
    } else {
     $21 = ($$038$lcssa>>>0)>(3);
     L11: do {
      if ($21) {
       $$03754 = $$042$lcssa;$$055 = $$039$lcssa;$$153 = $$038$lcssa;
       while(1) {
        $22 = HEAP32[$$055>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$0$lcssa = $$055;$$037$lcssa = $$03754;$$1$lcssa = $$153;
         break L11;
        }
        HEAP32[$$03754>>2] = $22;
        $28 = (($$153) + -4)|0;
        $29 = ((($$055)) + 4|0);
        $30 = ((($$03754)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$03754 = $30;$$055 = $29;$$153 = $28;
        } else {
         $$0$lcssa = $29;$$037$lcssa = $30;$$1$lcssa = $28;
         break;
        }
       }
      } else {
       $$0$lcssa = $$039$lcssa;$$037$lcssa = $$042$lcssa;$$1$lcssa = $$038$lcssa;
      }
     } while(0);
     $$140 = $$0$lcssa;$$143 = $$037$lcssa;$$2 = $$1$lcssa;
     label = 13;
    }
   } else {
    $$345 = $$042$lcssa;$$4 = 0;
   }
  } else {
   $$140 = $1;$$143 = $0;$$2 = $2;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $32 = ($$2|0)==(0);
   if ($32) {
    $$345 = $$143;$$4 = 0;
   } else {
    $$24147 = $$140;$$24446 = $$143;$$348 = $$2;
    while(1) {
     $33 = HEAP8[$$24147>>0]|0;
     HEAP8[$$24446>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$345 = $$24446;$$4 = $$348;
      break L17;
     }
     $35 = (($$348) + -1)|0;
     $36 = ((($$24147)) + 1|0);
     $37 = ((($$24446)) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$345 = $37;$$4 = 0;
      break;
     } else {
      $$24147 = $36;$$24446 = $37;$$348 = $35;
     }
    }
   }
  }
 } while(0);
 (_memset(($$345|0),0,($$4|0))|0);
 return ($$345|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strncasecmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$02125 = 0, $$02227 = 0, $$02227$in = 0, $$023 = 0, $$026 = 0, $$pre$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$023 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$24 = 0;
   } else {
    $6 = $4&255;
    $$02125 = $0;$$02227$in = $2;$$026 = $1;$10 = $4;$12 = $6;
    while(1) {
     $$02227 = (($$02227$in) + -1)|0;
     $7 = HEAP8[$$026>>0]|0;
     $8 = ($7<<24>>24)!=(0);
     $9 = ($$02227|0)!=(0);
     $or$cond = $9 & $8;
     if (!($or$cond)) {
      $$0$lcssa = $$026;$24 = $10;
      break L3;
     }
     $11 = ($10<<24>>24)==($7<<24>>24);
     if (!($11)) {
      $13 = (_tolower($12)|0);
      $14 = HEAP8[$$026>>0]|0;
      $15 = $14&255;
      $16 = (_tolower($15)|0);
      $17 = ($13|0)==($16|0);
      if (!($17)) {
       break;
      }
     }
     $18 = ((($$02125)) + 1|0);
     $19 = ((($$026)) + 1|0);
     $20 = HEAP8[$18>>0]|0;
     $21 = $20&255;
     $22 = ($20<<24>>24)==(0);
     if ($22) {
      $$0$lcssa = $19;$24 = 0;
      break L3;
     } else {
      $$02125 = $18;$$02227$in = $$02227;$$026 = $19;$10 = $20;$12 = $21;
     }
    }
    $$pre$pre = HEAP8[$$02125>>0]|0;
    $$0$lcssa = $$026;$24 = $$pre$pre;
   }
  } while(0);
  $23 = $24&255;
  $25 = (_tolower($23)|0);
  $26 = HEAP8[$$0$lcssa>>0]|0;
  $27 = $26&255;
  $28 = (_tolower($27)|0);
  $29 = (($25) - ($28))|0;
  $$023 = $29;
 }
 return ($$023|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _toupper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_islower($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 95;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 7]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $37 = ($36|0)==(0);
   if (!($37)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($36|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 7]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _vasprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $4 = (_vsnprintf(0,0,$1,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = (($4) + 1)|0;
  $7 = (_malloc($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   $9 = (_vsnprintf($7,$6,$1,$2)|0);
   $$0 = $9;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function ___emscripten_environ_constructor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___buildEnvironment((15220|0));
 return;
}
function __get_environ() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15220|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&0](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(3);
}
function b4(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(4);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,___stdout_write,___stdio_seek,_sn_write,___stdio_write,___stdio_read,_do_read_779,b1];
var FUNCTION_TABLE_iiiiiiii = [b2];
var FUNCTION_TABLE_viii = [b3,_fc_solve_sfs_move_top_stack_cards_to_founds,_fc_solve_sfs_move_freecell_cards_to_founds,_fc_solve_sfs_move_freecell_cards_on_top_of_stacks,_fc_solve_sfs_move_non_top_stack_cards_to_founds,_fc_solve_sfs_move_stack_cards_to_different_stacks,_fc_solve_sfs_move_stack_cards_to_a_parent_on_the_same_stack,_fc_solve_sfs_move_sequences_to_free_stacks,_fc_solve_sfs_move_freecell_cards_to_empty_stack,_fc_solve_sfs_move_cards_to_a_different_parent,_fc_solve_sfs_empty_stack_into_freecells,_fc_solve_sfs_atomic_move_card_to_empty_stack,_fc_solve_sfs_atomic_move_card_to_parent,_fc_solve_sfs_atomic_move_card_to_freecell,_fc_solve_sfs_atomic_move_freecell_card_to_parent,_fc_solve_sfs_atomic_move_freecell_card_to_empty_stack,_fc_solve_sfs_simple_simon_move_sequence_to_founds,_fc_solve_sfs_simple_simon_move_sequence_to_true_parent,_fc_solve_sfs_simple_simon_move_whole_stack_sequence_to_false_parent,_fc_solve_sfs_simple_simon_move_sequence_to_true_parent_with_some_cards_above,_fc_solve_sfs_simple_simon_move_sequence_with_some_cards_above_to_true_parent,_fc_solve_sfs_simple_simon_move_sequence_with_junk_seq_above_to_true_parent_with_some_cards_above,_fc_solve_sfs_simple_simon_move_whole_stack_sequence_to_false_parent_with_some_cards_above,_fc_solve_sfs_simple_simon_move_sequence_to_parent_on_the_same_stack,_fc_solve_sfs_simple_simon_move_sequence_to_false_parent,_fc_solve_sfs_move_fc_to_empty_and_put_on_top,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_viiiiii = [b4,_iter_handler_wrapper];

  return { ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_environ: __get_environ, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fc_solve__hll_ms_rand__get_singleton: _fc_solve__hll_ms_rand__get_singleton, _fc_solve__hll_ms_rand__init: _fc_solve__hll_ms_rand__init, _fc_solve__hll_ms_rand__mod_rand: _fc_solve__hll_ms_rand__mod_rand, _fc_solve_find_deal_in_range: _fc_solve_find_deal_in_range, _fc_solve_moves_processed_gen: _fc_solve_moves_processed_gen, _fc_solve_pats__do_it: _fc_solve_pats__do_it, _fc_solve_user__find_deal__alloc: _fc_solve_user__find_deal__alloc, _fc_solve_user__find_deal__fill: _fc_solve_user__find_deal__fill, _fc_solve_user__find_deal__free: _fc_solve_user__find_deal__free, _fc_solve_user__find_deal__run: _fc_solve_user__find_deal__run, _fflush: _fflush, _free: _free, _freecell_solver_set_stored_states_trimming_limit: _freecell_solver_set_stored_states_trimming_limit, _freecell_solver_user_alloc: _freecell_solver_user_alloc, _freecell_solver_user_apply_preset: _freecell_solver_user_apply_preset, _freecell_solver_user_cmd_line_parse_args: _freecell_solver_user_cmd_line_parse_args, _freecell_solver_user_cmd_line_parse_args_with_file_nesting_count: _freecell_solver_user_cmd_line_parse_args_with_file_nesting_count, _freecell_solver_user_cmd_line_read_cmd_line_preset: _freecell_solver_user_cmd_line_read_cmd_line_preset, _freecell_solver_user_current_state_as_string: _freecell_solver_user_current_state_as_string, _freecell_solver_user_current_state_stringify: _freecell_solver_user_current_state_stringify, _freecell_solver_user_free: _freecell_solver_user_free, _freecell_solver_user_get_current_depth: _freecell_solver_user_get_current_depth, _freecell_solver_user_get_current_soft_thread_name: _freecell_solver_user_get_current_soft_thread_name, _freecell_solver_user_get_invalid_state_error_into_string: _freecell_solver_user_get_invalid_state_error_into_string, _freecell_solver_user_get_invalid_state_error_string: _freecell_solver_user_get_invalid_state_error_string, _freecell_solver_user_get_last_error_string: _freecell_solver_user_get_last_error_string, _freecell_solver_user_get_lib_version: _freecell_solver_user_get_lib_version, _freecell_solver_user_get_limit_iterations: _freecell_solver_user_get_limit_iterations, _freecell_solver_user_get_max_num_decks: _freecell_solver_user_get_max_num_decks, _freecell_solver_user_get_max_num_freecells: _freecell_solver_user_get_max_num_freecells, _freecell_solver_user_get_max_num_stacks: _freecell_solver_user_get_max_num_stacks, _freecell_solver_user_get_moves_left: _freecell_solver_user_get_moves_left, _freecell_solver_user_get_moves_sequence: _freecell_solver_user_get_moves_sequence, _freecell_solver_user_get_next_move: _freecell_solver_user_get_next_move, _freecell_solver_user_get_num_freecells: _freecell_solver_user_get_num_freecells, _freecell_solver_user_get_num_soft_threads_in_instance: _freecell_solver_user_get_num_soft_threads_in_instance, _freecell_solver_user_get_num_stacks: _freecell_solver_user_get_num_stacks, _freecell_solver_user_get_num_states_in_collection: _freecell_solver_user_get_num_states_in_collection, _freecell_solver_user_get_num_states_in_collection_long: _freecell_solver_user_get_num_states_in_collection_long, _freecell_solver_user_get_num_times: _freecell_solver_user_get_num_times, _freecell_solver_user_get_num_times_long: _freecell_solver_user_get_num_times_long, _freecell_solver_user_iter_state_as_string: _freecell_solver_user_iter_state_as_string, _freecell_solver_user_iter_state_stringify: _freecell_solver_user_iter_state_stringify, _freecell_solver_user_limit_current_instance_iterations: _freecell_solver_user_limit_current_instance_iterations, _freecell_solver_user_limit_depth: _freecell_solver_user_limit_depth, _freecell_solver_user_limit_iterations: _freecell_solver_user_limit_iterations, _freecell_solver_user_limit_iterations_long: _freecell_solver_user_limit_iterations_long, _freecell_solver_user_limit_num_states_in_collection: _freecell_solver_user_limit_num_states_in_collection, _freecell_solver_user_limit_num_states_in_collection_long: _freecell_solver_user_limit_num_states_in_collection_long, _freecell_solver_user_move_to_string: _freecell_solver_user_move_to_string, _freecell_solver_user_move_to_string_w_state: _freecell_solver_user_move_to_string_w_state, _freecell_solver_user_next_flare: _freecell_solver_user_next_flare, _freecell_solver_user_next_hard_thread: _freecell_solver_user_next_hard_thread, _freecell_solver_user_next_instance: _freecell_solver_user_next_instance, _freecell_solver_user_next_soft_thread: _freecell_solver_user_next_soft_thread, _freecell_solver_user_recycle: _freecell_solver_user_recycle, _freecell_solver_user_reset: _freecell_solver_user_reset, _freecell_solver_user_resume_solution: _freecell_solver_user_resume_solution, _freecell_solver_user_set_a_star_weight: _freecell_solver_user_set_a_star_weight, _freecell_solver_user_set_calc_real_depth: _freecell_solver_user_set_calc_real_depth, _freecell_solver_user_set_depth_tests_order: _freecell_solver_user_set_depth_tests_order, _freecell_solver_user_set_empty_stacks_filled_by: _freecell_solver_user_set_empty_stacks_filled_by, _freecell_solver_user_set_flare_name: _freecell_solver_user_set_flare_name, _freecell_solver_user_set_flares_choice: _freecell_solver_user_set_flares_choice, _freecell_solver_user_set_flares_iters_factor: _freecell_solver_user_set_flares_iters_factor, _freecell_solver_user_set_flares_plan: _freecell_solver_user_set_flares_plan, _freecell_solver_user_set_game: _freecell_solver_user_set_game, _freecell_solver_user_set_hard_thread_prelude: _freecell_solver_user_set_hard_thread_prelude, _freecell_solver_user_set_iter_handler: _freecell_solver_user_set_iter_handler, _freecell_solver_user_set_iter_handler_long: _freecell_solver_user_set_iter_handler_long, _freecell_solver_user_set_num_decks: _freecell_solver_user_set_num_decks, _freecell_solver_user_set_num_freecells: _freecell_solver_user_set_num_freecells, _freecell_solver_user_set_num_stacks: _freecell_solver_user_set_num_stacks, _freecell_solver_user_set_optimization_scan_tests_order: _freecell_solver_user_set_optimization_scan_tests_order, _freecell_solver_user_set_patsolve_x_param: _freecell_solver_user_set_patsolve_x_param, _freecell_solver_user_set_patsolve_y_param: _freecell_solver_user_set_patsolve_y_param, _freecell_solver_user_set_pruning: _freecell_solver_user_set_pruning, _freecell_solver_user_set_random_seed: _freecell_solver_user_set_random_seed, _freecell_solver_user_set_reparent_states: _freecell_solver_user_set_reparent_states, _freecell_solver_user_set_scans_synergy: _freecell_solver_user_set_scans_synergy, _freecell_solver_user_set_sequence_move: _freecell_solver_user_set_sequence_move, _freecell_solver_user_set_sequences_are_built_by_type: _freecell_solver_user_set_sequences_are_built_by_type, _freecell_solver_user_set_soft_thread_name: _freecell_solver_user_set_soft_thread_name, _freecell_solver_user_set_soft_thread_step: _freecell_solver_user_set_soft_thread_step, _freecell_solver_user_set_solution_optimization: _freecell_solver_user_set_solution_optimization, _freecell_solver_user_set_solving_method: _freecell_solver_user_set_solving_method, _freecell_solver_user_set_tests_order: _freecell_solver_user_set_tests_order, _freecell_solver_user_solve_board: _freecell_solver_user_solve_board, _freecell_solver_user_stringify_move_ptr: _freecell_solver_user_stringify_move_ptr, _freecell_solver_user_stringify_move_w_state: _freecell_solver_user_stringify_move_w_state, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viii: dynCall_viii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____emscripten_environ_constructor = asm["___emscripten_environ_constructor"]; asm["___emscripten_environ_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____emscripten_environ_constructor.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___get_environ = asm["__get_environ"]; asm["__get_environ"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_environ.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fc_solve__hll_ms_rand__get_singleton = asm["_fc_solve__hll_ms_rand__get_singleton"]; asm["_fc_solve__hll_ms_rand__get_singleton"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve__hll_ms_rand__get_singleton.apply(null, arguments);
};

var real__fc_solve__hll_ms_rand__init = asm["_fc_solve__hll_ms_rand__init"]; asm["_fc_solve__hll_ms_rand__init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve__hll_ms_rand__init.apply(null, arguments);
};

var real__fc_solve__hll_ms_rand__mod_rand = asm["_fc_solve__hll_ms_rand__mod_rand"]; asm["_fc_solve__hll_ms_rand__mod_rand"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve__hll_ms_rand__mod_rand.apply(null, arguments);
};

var real__fc_solve_find_deal_in_range = asm["_fc_solve_find_deal_in_range"]; asm["_fc_solve_find_deal_in_range"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_find_deal_in_range.apply(null, arguments);
};

var real__fc_solve_moves_processed_gen = asm["_fc_solve_moves_processed_gen"]; asm["_fc_solve_moves_processed_gen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_moves_processed_gen.apply(null, arguments);
};

var real__fc_solve_pats__do_it = asm["_fc_solve_pats__do_it"]; asm["_fc_solve_pats__do_it"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_pats__do_it.apply(null, arguments);
};

var real__fc_solve_user__find_deal__alloc = asm["_fc_solve_user__find_deal__alloc"]; asm["_fc_solve_user__find_deal__alloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_user__find_deal__alloc.apply(null, arguments);
};

var real__fc_solve_user__find_deal__fill = asm["_fc_solve_user__find_deal__fill"]; asm["_fc_solve_user__find_deal__fill"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_user__find_deal__fill.apply(null, arguments);
};

var real__fc_solve_user__find_deal__free = asm["_fc_solve_user__find_deal__free"]; asm["_fc_solve_user__find_deal__free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_user__find_deal__free.apply(null, arguments);
};

var real__fc_solve_user__find_deal__run = asm["_fc_solve_user__find_deal__run"]; asm["_fc_solve_user__find_deal__run"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_user__find_deal__run.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__freecell_solver_set_stored_states_trimming_limit = asm["_freecell_solver_set_stored_states_trimming_limit"]; asm["_freecell_solver_set_stored_states_trimming_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_set_stored_states_trimming_limit.apply(null, arguments);
};

var real__freecell_solver_user_alloc = asm["_freecell_solver_user_alloc"]; asm["_freecell_solver_user_alloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_alloc.apply(null, arguments);
};

var real__freecell_solver_user_apply_preset = asm["_freecell_solver_user_apply_preset"]; asm["_freecell_solver_user_apply_preset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_apply_preset.apply(null, arguments);
};

var real__freecell_solver_user_cmd_line_parse_args = asm["_freecell_solver_user_cmd_line_parse_args"]; asm["_freecell_solver_user_cmd_line_parse_args"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_cmd_line_parse_args.apply(null, arguments);
};

var real__freecell_solver_user_cmd_line_parse_args_with_file_nesting_count = asm["_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count"]; asm["_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_cmd_line_parse_args_with_file_nesting_count.apply(null, arguments);
};

var real__freecell_solver_user_cmd_line_read_cmd_line_preset = asm["_freecell_solver_user_cmd_line_read_cmd_line_preset"]; asm["_freecell_solver_user_cmd_line_read_cmd_line_preset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_cmd_line_read_cmd_line_preset.apply(null, arguments);
};

var real__freecell_solver_user_current_state_as_string = asm["_freecell_solver_user_current_state_as_string"]; asm["_freecell_solver_user_current_state_as_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_current_state_as_string.apply(null, arguments);
};

var real__freecell_solver_user_current_state_stringify = asm["_freecell_solver_user_current_state_stringify"]; asm["_freecell_solver_user_current_state_stringify"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_current_state_stringify.apply(null, arguments);
};

var real__freecell_solver_user_free = asm["_freecell_solver_user_free"]; asm["_freecell_solver_user_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_free.apply(null, arguments);
};

var real__freecell_solver_user_get_current_depth = asm["_freecell_solver_user_get_current_depth"]; asm["_freecell_solver_user_get_current_depth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_current_depth.apply(null, arguments);
};

var real__freecell_solver_user_get_current_soft_thread_name = asm["_freecell_solver_user_get_current_soft_thread_name"]; asm["_freecell_solver_user_get_current_soft_thread_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_current_soft_thread_name.apply(null, arguments);
};

var real__freecell_solver_user_get_invalid_state_error_into_string = asm["_freecell_solver_user_get_invalid_state_error_into_string"]; asm["_freecell_solver_user_get_invalid_state_error_into_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_invalid_state_error_into_string.apply(null, arguments);
};

var real__freecell_solver_user_get_invalid_state_error_string = asm["_freecell_solver_user_get_invalid_state_error_string"]; asm["_freecell_solver_user_get_invalid_state_error_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_invalid_state_error_string.apply(null, arguments);
};

var real__freecell_solver_user_get_last_error_string = asm["_freecell_solver_user_get_last_error_string"]; asm["_freecell_solver_user_get_last_error_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_last_error_string.apply(null, arguments);
};

var real__freecell_solver_user_get_lib_version = asm["_freecell_solver_user_get_lib_version"]; asm["_freecell_solver_user_get_lib_version"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_lib_version.apply(null, arguments);
};

var real__freecell_solver_user_get_limit_iterations = asm["_freecell_solver_user_get_limit_iterations"]; asm["_freecell_solver_user_get_limit_iterations"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_limit_iterations.apply(null, arguments);
};

var real__freecell_solver_user_get_max_num_decks = asm["_freecell_solver_user_get_max_num_decks"]; asm["_freecell_solver_user_get_max_num_decks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_max_num_decks.apply(null, arguments);
};

var real__freecell_solver_user_get_max_num_freecells = asm["_freecell_solver_user_get_max_num_freecells"]; asm["_freecell_solver_user_get_max_num_freecells"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_max_num_freecells.apply(null, arguments);
};

var real__freecell_solver_user_get_max_num_stacks = asm["_freecell_solver_user_get_max_num_stacks"]; asm["_freecell_solver_user_get_max_num_stacks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_max_num_stacks.apply(null, arguments);
};

var real__freecell_solver_user_get_moves_left = asm["_freecell_solver_user_get_moves_left"]; asm["_freecell_solver_user_get_moves_left"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_moves_left.apply(null, arguments);
};

var real__freecell_solver_user_get_moves_sequence = asm["_freecell_solver_user_get_moves_sequence"]; asm["_freecell_solver_user_get_moves_sequence"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_moves_sequence.apply(null, arguments);
};

var real__freecell_solver_user_get_next_move = asm["_freecell_solver_user_get_next_move"]; asm["_freecell_solver_user_get_next_move"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_next_move.apply(null, arguments);
};

var real__freecell_solver_user_get_num_freecells = asm["_freecell_solver_user_get_num_freecells"]; asm["_freecell_solver_user_get_num_freecells"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_freecells.apply(null, arguments);
};

var real__freecell_solver_user_get_num_soft_threads_in_instance = asm["_freecell_solver_user_get_num_soft_threads_in_instance"]; asm["_freecell_solver_user_get_num_soft_threads_in_instance"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_soft_threads_in_instance.apply(null, arguments);
};

var real__freecell_solver_user_get_num_stacks = asm["_freecell_solver_user_get_num_stacks"]; asm["_freecell_solver_user_get_num_stacks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_stacks.apply(null, arguments);
};

var real__freecell_solver_user_get_num_states_in_collection = asm["_freecell_solver_user_get_num_states_in_collection"]; asm["_freecell_solver_user_get_num_states_in_collection"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_states_in_collection.apply(null, arguments);
};

var real__freecell_solver_user_get_num_states_in_collection_long = asm["_freecell_solver_user_get_num_states_in_collection_long"]; asm["_freecell_solver_user_get_num_states_in_collection_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_states_in_collection_long.apply(null, arguments);
};

var real__freecell_solver_user_get_num_times = asm["_freecell_solver_user_get_num_times"]; asm["_freecell_solver_user_get_num_times"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_times.apply(null, arguments);
};

var real__freecell_solver_user_get_num_times_long = asm["_freecell_solver_user_get_num_times_long"]; asm["_freecell_solver_user_get_num_times_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_times_long.apply(null, arguments);
};

var real__freecell_solver_user_iter_state_as_string = asm["_freecell_solver_user_iter_state_as_string"]; asm["_freecell_solver_user_iter_state_as_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_iter_state_as_string.apply(null, arguments);
};

var real__freecell_solver_user_iter_state_stringify = asm["_freecell_solver_user_iter_state_stringify"]; asm["_freecell_solver_user_iter_state_stringify"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_iter_state_stringify.apply(null, arguments);
};

var real__freecell_solver_user_limit_current_instance_iterations = asm["_freecell_solver_user_limit_current_instance_iterations"]; asm["_freecell_solver_user_limit_current_instance_iterations"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_current_instance_iterations.apply(null, arguments);
};

var real__freecell_solver_user_limit_depth = asm["_freecell_solver_user_limit_depth"]; asm["_freecell_solver_user_limit_depth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_depth.apply(null, arguments);
};

var real__freecell_solver_user_limit_iterations = asm["_freecell_solver_user_limit_iterations"]; asm["_freecell_solver_user_limit_iterations"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_iterations.apply(null, arguments);
};

var real__freecell_solver_user_limit_iterations_long = asm["_freecell_solver_user_limit_iterations_long"]; asm["_freecell_solver_user_limit_iterations_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_iterations_long.apply(null, arguments);
};

var real__freecell_solver_user_limit_num_states_in_collection = asm["_freecell_solver_user_limit_num_states_in_collection"]; asm["_freecell_solver_user_limit_num_states_in_collection"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_num_states_in_collection.apply(null, arguments);
};

var real__freecell_solver_user_limit_num_states_in_collection_long = asm["_freecell_solver_user_limit_num_states_in_collection_long"]; asm["_freecell_solver_user_limit_num_states_in_collection_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_num_states_in_collection_long.apply(null, arguments);
};

var real__freecell_solver_user_move_to_string = asm["_freecell_solver_user_move_to_string"]; asm["_freecell_solver_user_move_to_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_move_to_string.apply(null, arguments);
};

var real__freecell_solver_user_move_to_string_w_state = asm["_freecell_solver_user_move_to_string_w_state"]; asm["_freecell_solver_user_move_to_string_w_state"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_move_to_string_w_state.apply(null, arguments);
};

var real__freecell_solver_user_next_flare = asm["_freecell_solver_user_next_flare"]; asm["_freecell_solver_user_next_flare"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_next_flare.apply(null, arguments);
};

var real__freecell_solver_user_next_hard_thread = asm["_freecell_solver_user_next_hard_thread"]; asm["_freecell_solver_user_next_hard_thread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_next_hard_thread.apply(null, arguments);
};

var real__freecell_solver_user_next_instance = asm["_freecell_solver_user_next_instance"]; asm["_freecell_solver_user_next_instance"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_next_instance.apply(null, arguments);
};

var real__freecell_solver_user_next_soft_thread = asm["_freecell_solver_user_next_soft_thread"]; asm["_freecell_solver_user_next_soft_thread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_next_soft_thread.apply(null, arguments);
};

var real__freecell_solver_user_recycle = asm["_freecell_solver_user_recycle"]; asm["_freecell_solver_user_recycle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_recycle.apply(null, arguments);
};

var real__freecell_solver_user_reset = asm["_freecell_solver_user_reset"]; asm["_freecell_solver_user_reset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_reset.apply(null, arguments);
};

var real__freecell_solver_user_resume_solution = asm["_freecell_solver_user_resume_solution"]; asm["_freecell_solver_user_resume_solution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_resume_solution.apply(null, arguments);
};

var real__freecell_solver_user_set_a_star_weight = asm["_freecell_solver_user_set_a_star_weight"]; asm["_freecell_solver_user_set_a_star_weight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_a_star_weight.apply(null, arguments);
};

var real__freecell_solver_user_set_calc_real_depth = asm["_freecell_solver_user_set_calc_real_depth"]; asm["_freecell_solver_user_set_calc_real_depth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_calc_real_depth.apply(null, arguments);
};

var real__freecell_solver_user_set_depth_tests_order = asm["_freecell_solver_user_set_depth_tests_order"]; asm["_freecell_solver_user_set_depth_tests_order"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_depth_tests_order.apply(null, arguments);
};

var real__freecell_solver_user_set_empty_stacks_filled_by = asm["_freecell_solver_user_set_empty_stacks_filled_by"]; asm["_freecell_solver_user_set_empty_stacks_filled_by"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_empty_stacks_filled_by.apply(null, arguments);
};

var real__freecell_solver_user_set_flare_name = asm["_freecell_solver_user_set_flare_name"]; asm["_freecell_solver_user_set_flare_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_flare_name.apply(null, arguments);
};

var real__freecell_solver_user_set_flares_choice = asm["_freecell_solver_user_set_flares_choice"]; asm["_freecell_solver_user_set_flares_choice"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_flares_choice.apply(null, arguments);
};

var real__freecell_solver_user_set_flares_iters_factor = asm["_freecell_solver_user_set_flares_iters_factor"]; asm["_freecell_solver_user_set_flares_iters_factor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_flares_iters_factor.apply(null, arguments);
};

var real__freecell_solver_user_set_flares_plan = asm["_freecell_solver_user_set_flares_plan"]; asm["_freecell_solver_user_set_flares_plan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_flares_plan.apply(null, arguments);
};

var real__freecell_solver_user_set_game = asm["_freecell_solver_user_set_game"]; asm["_freecell_solver_user_set_game"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_game.apply(null, arguments);
};

var real__freecell_solver_user_set_hard_thread_prelude = asm["_freecell_solver_user_set_hard_thread_prelude"]; asm["_freecell_solver_user_set_hard_thread_prelude"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_hard_thread_prelude.apply(null, arguments);
};

var real__freecell_solver_user_set_iter_handler = asm["_freecell_solver_user_set_iter_handler"]; asm["_freecell_solver_user_set_iter_handler"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_iter_handler.apply(null, arguments);
};

var real__freecell_solver_user_set_iter_handler_long = asm["_freecell_solver_user_set_iter_handler_long"]; asm["_freecell_solver_user_set_iter_handler_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_iter_handler_long.apply(null, arguments);
};

var real__freecell_solver_user_set_num_decks = asm["_freecell_solver_user_set_num_decks"]; asm["_freecell_solver_user_set_num_decks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_num_decks.apply(null, arguments);
};

var real__freecell_solver_user_set_num_freecells = asm["_freecell_solver_user_set_num_freecells"]; asm["_freecell_solver_user_set_num_freecells"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_num_freecells.apply(null, arguments);
};

var real__freecell_solver_user_set_num_stacks = asm["_freecell_solver_user_set_num_stacks"]; asm["_freecell_solver_user_set_num_stacks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_num_stacks.apply(null, arguments);
};

var real__freecell_solver_user_set_optimization_scan_tests_order = asm["_freecell_solver_user_set_optimization_scan_tests_order"]; asm["_freecell_solver_user_set_optimization_scan_tests_order"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_optimization_scan_tests_order.apply(null, arguments);
};

var real__freecell_solver_user_set_patsolve_x_param = asm["_freecell_solver_user_set_patsolve_x_param"]; asm["_freecell_solver_user_set_patsolve_x_param"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_patsolve_x_param.apply(null, arguments);
};

var real__freecell_solver_user_set_patsolve_y_param = asm["_freecell_solver_user_set_patsolve_y_param"]; asm["_freecell_solver_user_set_patsolve_y_param"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_patsolve_y_param.apply(null, arguments);
};

var real__freecell_solver_user_set_pruning = asm["_freecell_solver_user_set_pruning"]; asm["_freecell_solver_user_set_pruning"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_pruning.apply(null, arguments);
};

var real__freecell_solver_user_set_random_seed = asm["_freecell_solver_user_set_random_seed"]; asm["_freecell_solver_user_set_random_seed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_random_seed.apply(null, arguments);
};

var real__freecell_solver_user_set_reparent_states = asm["_freecell_solver_user_set_reparent_states"]; asm["_freecell_solver_user_set_reparent_states"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_reparent_states.apply(null, arguments);
};

var real__freecell_solver_user_set_scans_synergy = asm["_freecell_solver_user_set_scans_synergy"]; asm["_freecell_solver_user_set_scans_synergy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_scans_synergy.apply(null, arguments);
};

var real__freecell_solver_user_set_sequence_move = asm["_freecell_solver_user_set_sequence_move"]; asm["_freecell_solver_user_set_sequence_move"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_sequence_move.apply(null, arguments);
};

var real__freecell_solver_user_set_sequences_are_built_by_type = asm["_freecell_solver_user_set_sequences_are_built_by_type"]; asm["_freecell_solver_user_set_sequences_are_built_by_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_sequences_are_built_by_type.apply(null, arguments);
};

var real__freecell_solver_user_set_soft_thread_name = asm["_freecell_solver_user_set_soft_thread_name"]; asm["_freecell_solver_user_set_soft_thread_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_soft_thread_name.apply(null, arguments);
};

var real__freecell_solver_user_set_soft_thread_step = asm["_freecell_solver_user_set_soft_thread_step"]; asm["_freecell_solver_user_set_soft_thread_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_soft_thread_step.apply(null, arguments);
};

var real__freecell_solver_user_set_solution_optimization = asm["_freecell_solver_user_set_solution_optimization"]; asm["_freecell_solver_user_set_solution_optimization"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_solution_optimization.apply(null, arguments);
};

var real__freecell_solver_user_set_solving_method = asm["_freecell_solver_user_set_solving_method"]; asm["_freecell_solver_user_set_solving_method"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_solving_method.apply(null, arguments);
};

var real__freecell_solver_user_set_tests_order = asm["_freecell_solver_user_set_tests_order"]; asm["_freecell_solver_user_set_tests_order"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_tests_order.apply(null, arguments);
};

var real__freecell_solver_user_solve_board = asm["_freecell_solver_user_solve_board"]; asm["_freecell_solver_user_solve_board"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_solve_board.apply(null, arguments);
};

var real__freecell_solver_user_stringify_move_ptr = asm["_freecell_solver_user_stringify_move_ptr"]; asm["_freecell_solver_user_stringify_move_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_stringify_move_ptr.apply(null, arguments);
};

var real__freecell_solver_user_stringify_move_w_state = asm["_freecell_solver_user_stringify_move_w_state"]; asm["_freecell_solver_user_stringify_move_w_state"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_stringify_move_w_state.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = asm["___emscripten_environ_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_environ = Module["__get_environ"] = asm["__get_environ"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fc_solve__hll_ms_rand__get_singleton = Module["_fc_solve__hll_ms_rand__get_singleton"] = asm["_fc_solve__hll_ms_rand__get_singleton"];
var _fc_solve__hll_ms_rand__init = Module["_fc_solve__hll_ms_rand__init"] = asm["_fc_solve__hll_ms_rand__init"];
var _fc_solve__hll_ms_rand__mod_rand = Module["_fc_solve__hll_ms_rand__mod_rand"] = asm["_fc_solve__hll_ms_rand__mod_rand"];
var _fc_solve_find_deal_in_range = Module["_fc_solve_find_deal_in_range"] = asm["_fc_solve_find_deal_in_range"];
var _fc_solve_moves_processed_gen = Module["_fc_solve_moves_processed_gen"] = asm["_fc_solve_moves_processed_gen"];
var _fc_solve_pats__do_it = Module["_fc_solve_pats__do_it"] = asm["_fc_solve_pats__do_it"];
var _fc_solve_user__find_deal__alloc = Module["_fc_solve_user__find_deal__alloc"] = asm["_fc_solve_user__find_deal__alloc"];
var _fc_solve_user__find_deal__fill = Module["_fc_solve_user__find_deal__fill"] = asm["_fc_solve_user__find_deal__fill"];
var _fc_solve_user__find_deal__free = Module["_fc_solve_user__find_deal__free"] = asm["_fc_solve_user__find_deal__free"];
var _fc_solve_user__find_deal__run = Module["_fc_solve_user__find_deal__run"] = asm["_fc_solve_user__find_deal__run"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _freecell_solver_set_stored_states_trimming_limit = Module["_freecell_solver_set_stored_states_trimming_limit"] = asm["_freecell_solver_set_stored_states_trimming_limit"];
var _freecell_solver_user_alloc = Module["_freecell_solver_user_alloc"] = asm["_freecell_solver_user_alloc"];
var _freecell_solver_user_apply_preset = Module["_freecell_solver_user_apply_preset"] = asm["_freecell_solver_user_apply_preset"];
var _freecell_solver_user_cmd_line_parse_args = Module["_freecell_solver_user_cmd_line_parse_args"] = asm["_freecell_solver_user_cmd_line_parse_args"];
var _freecell_solver_user_cmd_line_parse_args_with_file_nesting_count = Module["_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count"] = asm["_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count"];
var _freecell_solver_user_cmd_line_read_cmd_line_preset = Module["_freecell_solver_user_cmd_line_read_cmd_line_preset"] = asm["_freecell_solver_user_cmd_line_read_cmd_line_preset"];
var _freecell_solver_user_current_state_as_string = Module["_freecell_solver_user_current_state_as_string"] = asm["_freecell_solver_user_current_state_as_string"];
var _freecell_solver_user_current_state_stringify = Module["_freecell_solver_user_current_state_stringify"] = asm["_freecell_solver_user_current_state_stringify"];
var _freecell_solver_user_free = Module["_freecell_solver_user_free"] = asm["_freecell_solver_user_free"];
var _freecell_solver_user_get_current_depth = Module["_freecell_solver_user_get_current_depth"] = asm["_freecell_solver_user_get_current_depth"];
var _freecell_solver_user_get_current_soft_thread_name = Module["_freecell_solver_user_get_current_soft_thread_name"] = asm["_freecell_solver_user_get_current_soft_thread_name"];
var _freecell_solver_user_get_invalid_state_error_into_string = Module["_freecell_solver_user_get_invalid_state_error_into_string"] = asm["_freecell_solver_user_get_invalid_state_error_into_string"];
var _freecell_solver_user_get_invalid_state_error_string = Module["_freecell_solver_user_get_invalid_state_error_string"] = asm["_freecell_solver_user_get_invalid_state_error_string"];
var _freecell_solver_user_get_last_error_string = Module["_freecell_solver_user_get_last_error_string"] = asm["_freecell_solver_user_get_last_error_string"];
var _freecell_solver_user_get_lib_version = Module["_freecell_solver_user_get_lib_version"] = asm["_freecell_solver_user_get_lib_version"];
var _freecell_solver_user_get_limit_iterations = Module["_freecell_solver_user_get_limit_iterations"] = asm["_freecell_solver_user_get_limit_iterations"];
var _freecell_solver_user_get_max_num_decks = Module["_freecell_solver_user_get_max_num_decks"] = asm["_freecell_solver_user_get_max_num_decks"];
var _freecell_solver_user_get_max_num_freecells = Module["_freecell_solver_user_get_max_num_freecells"] = asm["_freecell_solver_user_get_max_num_freecells"];
var _freecell_solver_user_get_max_num_stacks = Module["_freecell_solver_user_get_max_num_stacks"] = asm["_freecell_solver_user_get_max_num_stacks"];
var _freecell_solver_user_get_moves_left = Module["_freecell_solver_user_get_moves_left"] = asm["_freecell_solver_user_get_moves_left"];
var _freecell_solver_user_get_moves_sequence = Module["_freecell_solver_user_get_moves_sequence"] = asm["_freecell_solver_user_get_moves_sequence"];
var _freecell_solver_user_get_next_move = Module["_freecell_solver_user_get_next_move"] = asm["_freecell_solver_user_get_next_move"];
var _freecell_solver_user_get_num_freecells = Module["_freecell_solver_user_get_num_freecells"] = asm["_freecell_solver_user_get_num_freecells"];
var _freecell_solver_user_get_num_soft_threads_in_instance = Module["_freecell_solver_user_get_num_soft_threads_in_instance"] = asm["_freecell_solver_user_get_num_soft_threads_in_instance"];
var _freecell_solver_user_get_num_stacks = Module["_freecell_solver_user_get_num_stacks"] = asm["_freecell_solver_user_get_num_stacks"];
var _freecell_solver_user_get_num_states_in_collection = Module["_freecell_solver_user_get_num_states_in_collection"] = asm["_freecell_solver_user_get_num_states_in_collection"];
var _freecell_solver_user_get_num_states_in_collection_long = Module["_freecell_solver_user_get_num_states_in_collection_long"] = asm["_freecell_solver_user_get_num_states_in_collection_long"];
var _freecell_solver_user_get_num_times = Module["_freecell_solver_user_get_num_times"] = asm["_freecell_solver_user_get_num_times"];
var _freecell_solver_user_get_num_times_long = Module["_freecell_solver_user_get_num_times_long"] = asm["_freecell_solver_user_get_num_times_long"];
var _freecell_solver_user_iter_state_as_string = Module["_freecell_solver_user_iter_state_as_string"] = asm["_freecell_solver_user_iter_state_as_string"];
var _freecell_solver_user_iter_state_stringify = Module["_freecell_solver_user_iter_state_stringify"] = asm["_freecell_solver_user_iter_state_stringify"];
var _freecell_solver_user_limit_current_instance_iterations = Module["_freecell_solver_user_limit_current_instance_iterations"] = asm["_freecell_solver_user_limit_current_instance_iterations"];
var _freecell_solver_user_limit_depth = Module["_freecell_solver_user_limit_depth"] = asm["_freecell_solver_user_limit_depth"];
var _freecell_solver_user_limit_iterations = Module["_freecell_solver_user_limit_iterations"] = asm["_freecell_solver_user_limit_iterations"];
var _freecell_solver_user_limit_iterations_long = Module["_freecell_solver_user_limit_iterations_long"] = asm["_freecell_solver_user_limit_iterations_long"];
var _freecell_solver_user_limit_num_states_in_collection = Module["_freecell_solver_user_limit_num_states_in_collection"] = asm["_freecell_solver_user_limit_num_states_in_collection"];
var _freecell_solver_user_limit_num_states_in_collection_long = Module["_freecell_solver_user_limit_num_states_in_collection_long"] = asm["_freecell_solver_user_limit_num_states_in_collection_long"];
var _freecell_solver_user_move_to_string = Module["_freecell_solver_user_move_to_string"] = asm["_freecell_solver_user_move_to_string"];
var _freecell_solver_user_move_to_string_w_state = Module["_freecell_solver_user_move_to_string_w_state"] = asm["_freecell_solver_user_move_to_string_w_state"];
var _freecell_solver_user_next_flare = Module["_freecell_solver_user_next_flare"] = asm["_freecell_solver_user_next_flare"];
var _freecell_solver_user_next_hard_thread = Module["_freecell_solver_user_next_hard_thread"] = asm["_freecell_solver_user_next_hard_thread"];
var _freecell_solver_user_next_instance = Module["_freecell_solver_user_next_instance"] = asm["_freecell_solver_user_next_instance"];
var _freecell_solver_user_next_soft_thread = Module["_freecell_solver_user_next_soft_thread"] = asm["_freecell_solver_user_next_soft_thread"];
var _freecell_solver_user_recycle = Module["_freecell_solver_user_recycle"] = asm["_freecell_solver_user_recycle"];
var _freecell_solver_user_reset = Module["_freecell_solver_user_reset"] = asm["_freecell_solver_user_reset"];
var _freecell_solver_user_resume_solution = Module["_freecell_solver_user_resume_solution"] = asm["_freecell_solver_user_resume_solution"];
var _freecell_solver_user_set_a_star_weight = Module["_freecell_solver_user_set_a_star_weight"] = asm["_freecell_solver_user_set_a_star_weight"];
var _freecell_solver_user_set_calc_real_depth = Module["_freecell_solver_user_set_calc_real_depth"] = asm["_freecell_solver_user_set_calc_real_depth"];
var _freecell_solver_user_set_depth_tests_order = Module["_freecell_solver_user_set_depth_tests_order"] = asm["_freecell_solver_user_set_depth_tests_order"];
var _freecell_solver_user_set_empty_stacks_filled_by = Module["_freecell_solver_user_set_empty_stacks_filled_by"] = asm["_freecell_solver_user_set_empty_stacks_filled_by"];
var _freecell_solver_user_set_flare_name = Module["_freecell_solver_user_set_flare_name"] = asm["_freecell_solver_user_set_flare_name"];
var _freecell_solver_user_set_flares_choice = Module["_freecell_solver_user_set_flares_choice"] = asm["_freecell_solver_user_set_flares_choice"];
var _freecell_solver_user_set_flares_iters_factor = Module["_freecell_solver_user_set_flares_iters_factor"] = asm["_freecell_solver_user_set_flares_iters_factor"];
var _freecell_solver_user_set_flares_plan = Module["_freecell_solver_user_set_flares_plan"] = asm["_freecell_solver_user_set_flares_plan"];
var _freecell_solver_user_set_game = Module["_freecell_solver_user_set_game"] = asm["_freecell_solver_user_set_game"];
var _freecell_solver_user_set_hard_thread_prelude = Module["_freecell_solver_user_set_hard_thread_prelude"] = asm["_freecell_solver_user_set_hard_thread_prelude"];
var _freecell_solver_user_set_iter_handler = Module["_freecell_solver_user_set_iter_handler"] = asm["_freecell_solver_user_set_iter_handler"];
var _freecell_solver_user_set_iter_handler_long = Module["_freecell_solver_user_set_iter_handler_long"] = asm["_freecell_solver_user_set_iter_handler_long"];
var _freecell_solver_user_set_num_decks = Module["_freecell_solver_user_set_num_decks"] = asm["_freecell_solver_user_set_num_decks"];
var _freecell_solver_user_set_num_freecells = Module["_freecell_solver_user_set_num_freecells"] = asm["_freecell_solver_user_set_num_freecells"];
var _freecell_solver_user_set_num_stacks = Module["_freecell_solver_user_set_num_stacks"] = asm["_freecell_solver_user_set_num_stacks"];
var _freecell_solver_user_set_optimization_scan_tests_order = Module["_freecell_solver_user_set_optimization_scan_tests_order"] = asm["_freecell_solver_user_set_optimization_scan_tests_order"];
var _freecell_solver_user_set_patsolve_x_param = Module["_freecell_solver_user_set_patsolve_x_param"] = asm["_freecell_solver_user_set_patsolve_x_param"];
var _freecell_solver_user_set_patsolve_y_param = Module["_freecell_solver_user_set_patsolve_y_param"] = asm["_freecell_solver_user_set_patsolve_y_param"];
var _freecell_solver_user_set_pruning = Module["_freecell_solver_user_set_pruning"] = asm["_freecell_solver_user_set_pruning"];
var _freecell_solver_user_set_random_seed = Module["_freecell_solver_user_set_random_seed"] = asm["_freecell_solver_user_set_random_seed"];
var _freecell_solver_user_set_reparent_states = Module["_freecell_solver_user_set_reparent_states"] = asm["_freecell_solver_user_set_reparent_states"];
var _freecell_solver_user_set_scans_synergy = Module["_freecell_solver_user_set_scans_synergy"] = asm["_freecell_solver_user_set_scans_synergy"];
var _freecell_solver_user_set_sequence_move = Module["_freecell_solver_user_set_sequence_move"] = asm["_freecell_solver_user_set_sequence_move"];
var _freecell_solver_user_set_sequences_are_built_by_type = Module["_freecell_solver_user_set_sequences_are_built_by_type"] = asm["_freecell_solver_user_set_sequences_are_built_by_type"];
var _freecell_solver_user_set_soft_thread_name = Module["_freecell_solver_user_set_soft_thread_name"] = asm["_freecell_solver_user_set_soft_thread_name"];
var _freecell_solver_user_set_soft_thread_step = Module["_freecell_solver_user_set_soft_thread_step"] = asm["_freecell_solver_user_set_soft_thread_step"];
var _freecell_solver_user_set_solution_optimization = Module["_freecell_solver_user_set_solution_optimization"] = asm["_freecell_solver_user_set_solution_optimization"];
var _freecell_solver_user_set_solving_method = Module["_freecell_solver_user_set_solving_method"] = asm["_freecell_solver_user_set_solving_method"];
var _freecell_solver_user_set_tests_order = Module["_freecell_solver_user_set_tests_order"] = asm["_freecell_solver_user_set_tests_order"];
var _freecell_solver_user_solve_board = Module["_freecell_solver_user_solve_board"] = asm["_freecell_solver_user_solve_board"];
var _freecell_solver_user_stringify_move_ptr = Module["_freecell_solver_user_stringify_move_ptr"] = asm["_freecell_solver_user_stringify_move_ptr"];
var _freecell_solver_user_stringify_move_w_state = Module["_freecell_solver_user_stringify_move_w_state"] = asm["_freecell_solver_user_stringify_move_w_state"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

Module["intArrayFromString"] = intArrayFromString;
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["cwrap"] = cwrap;
Module["setValue"] = setValue;
Module["getValue"] = getValue;
Module["allocate"] = allocate;
Module["getMemory"] = getMemory;
Module["Pointer_stringify"] = Pointer_stringify;
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS"] = FS;
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
Module["ALLOC_STACK"] = ALLOC_STACK;
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (Module['calledRun']) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}





  return Module;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = Module;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return Module; });
    else if (typeof exports === 'object')
      exports["Module"] = Module;
            return Module;
    };
});
