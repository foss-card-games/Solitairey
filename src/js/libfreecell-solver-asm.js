if (typeof define !== 'function') {
    var define = require('amdefine')(module);
}

define(function () {
    return function(Module) {

var Module = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(Module) {
  Module = Module || {};

// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'fc-solve', true, true);
Module['FS_createPath']('/fc-solve', 'share', true, true);
Module['FS_createPath']('/fc-solve/share', 'freecell-solver', true, true);
Module['FS_createPath']('/fc-solve/share/freecell-solver', 'presets', true, true);
var fileData0 = [];
fileData0.push.apply(fileData0, [100, 105, 114, 61, 47, 102, 99, 45, 115, 111, 108, 118, 101, 47, 115, 104, 97, 114, 101, 47, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 47, 112, 114, 101, 115, 101, 116, 115, 47, 10, 110, 97, 109, 101, 61, 97, 98, 114, 97, 45, 107, 97, 100, 97, 98, 114, 97, 10, 110, 97, 109, 101, 61, 97, 107, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 97, 98, 114, 97, 45, 107, 97, 100, 97, 98, 114, 97, 46, 115, 104, 10, 110, 97, 109, 101, 61, 97, 109, 97, 116, 101, 117, 114, 45, 115, 116, 97, 114, 10, 110, 97, 109, 101, 61, 97, 115, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 97, 109, 97, 116, 101, 117, 114, 45, 115, 116, 97, 114, 46, 115, 104, 10, 110, 97, 109, 101, 61, 98, 108, 117, 101, 45, 121, 111, 110, 100, 101, 114, 10, 110, 97, 109, 101, 61, 98, 121, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 98, 108, 117, 101, 45, 121, 111, 110, 100, 101, 114, 46, 115, 104, 10, 110, 97, 109, 101, 61, 99, 104, 105, 108, 100, 114, 101, 110, 45, 112, 108, 97, 121, 105, 110, 103, 45, 98, 97, 108, 108, 10, 110, 97, 109, 101, 61, 99, 112, 98, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 99, 104, 105, 108, 100, 114, 101, 110, 45, 112, 108, 97, 121, 105, 110, 103, 45, 98, 97, 108, 108, 46, 115, 104, 10, 110, 97, 109, 101, 61, 99, 111, 110, 115, 112, 105, 114, 97, 99, 121, 45, 116, 104, 101, 111, 114, 121, 10, 110, 97, 109, 101, 61, 99, 116, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 99, 111, 110, 115, 112, 105, 114, 97, 99, 121, 45, 116, 104, 101, 111, 114, 121, 46, 115, 104, 10, 110, 97, 109, 101, 61, 99, 111, 111, 107, 105, 101, 45, 109, 111, 110, 115, 116, 101, 114, 10, 110, 97, 109, 101, 61, 99, 109, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 99, 111, 111, 107, 105, 101, 45, 109, 111, 110, 115, 116, 101, 114, 46, 115, 104, 10, 110, 97, 109, 101, 61, 99, 111, 111, 108, 45, 106, 105, 118, 101, 115, 10, 110, 97, 109, 101, 61, 99, 106, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 99, 111, 111, 108, 45, 106, 105, 118, 101, 115, 46, 115, 104, 10, 110, 97, 109, 101, 61, 99, 114, 111, 111, 107, 101, 100, 45, 110, 111, 115, 101, 10, 110, 97, 109, 101, 61, 99, 110, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 99, 114, 111, 111, 107, 101, 100, 45, 110, 111, 115, 101, 46, 115, 104, 10, 110, 97, 109, 101, 61, 101, 110, 108, 105, 103, 104, 116, 101, 110, 101, 100, 45, 111, 115, 116, 114, 105, 99, 104, 10, 110, 97, 109, 101, 61, 101, 111, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 101, 110, 108, 105, 103, 104, 116, 101, 110, 101, 100, 45, 111, 115, 116, 114, 105, 99, 104, 46, 115, 104, 10, 110, 97, 109, 101, 61, 102, 111, 111, 108, 115, 45, 103, 111, 108, 100, 10, 110, 97, 109, 101, 61, 102, 103, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 102, 111, 111, 108, 115, 45, 103, 111, 108, 100, 46, 115, 104, 10, 110, 97, 109, 101, 61, 102, 111, 115, 115, 45, 110, 101, 115, 115, 121, 10, 110, 97, 109, 101, 61, 102, 110, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 102, 111, 115, 115, 45, 110, 101, 115, 115, 121, 46, 115, 104, 10, 110, 97, 109, 101, 61, 103, 111, 111, 100, 45, 105, 110, 116, 101, 110, 116, 105, 111, 110, 115, 10, 110, 97, 109, 101, 61, 103, 105, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 108, 32, 99, 111, 111, 108, 45, 106, 105, 118, 101, 115, 32, 45, 110, 105, 32, 45, 108, 32, 102, 111, 111, 108, 115, 45, 103, 111, 108, 100, 10, 110, 97, 109, 101, 61, 103, 111, 111, 101, 121, 45, 117, 110, 107, 110, 111, 119, 110, 45, 116, 104, 105, 110, 103, 10, 110, 97, 109, 101, 61, 103, 117, 116, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 103, 111, 111, 101, 121, 45, 117, 110, 107, 110, 111, 119, 110, 45, 116, 104, 105, 110, 103, 46, 115, 104, 10, 110, 97, 109, 101, 61, 104, 101, 108, 108, 111, 45, 119, 111, 114, 108, 100, 10, 110, 97, 109, 101, 61, 104, 119, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 104, 101, 108, 108, 111, 45, 119, 111, 114, 108, 100, 46, 115, 104, 10, 110, 97, 109, 101, 61, 106, 111, 104, 110, 45, 103, 97, 108, 116, 45, 108, 105, 110, 101, 10, 110, 97, 109, 101, 61, 106, 103, 108, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 54, 44, 106, 111, 104, 110, 95, 103, 97, 108, 116, 95, 108, 105, 110, 101, 45, 53, 48, 48, 46, 115, 104, 10, 110, 97, 109, 101, 61, 108, 111, 111, 107, 105, 110, 103, 45, 103, 108, 97, 115, 115, 10, 110, 97, 109, 101, 61, 108, 103, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 108, 111, 111, 107, 105, 110, 103, 45, 103, 108, 97, 115, 115, 46, 115, 104, 10, 110, 97, 109, 101, 61, 109, 97, 108, 105, 99, 105, 111, 117, 115, 108, 121, 45, 111, 98, 115, 99, 117, 114, 101, 10, 110, 97, 109, 101, 61, 109, 111, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 109, 97, 108, 105, 99, 105, 111, 117, 115, 108, 121, 45, 111, 98, 115, 99, 117, 114, 101, 46, 115, 104, 10, 110, 97, 109, 101, 61, 109, 105, 99, 114, 111, 45, 102, 105, 110, 97, 110, 99, 101, 10, 110, 97, 109, 101, 61, 109, 102, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 109, 105, 99, 114, 111, 45, 102, 105, 110, 97, 110, 99, 101, 46, 115, 104, 10, 110, 97, 109, 101, 61, 109, 105, 99, 114, 111, 45, 102, 105, 110, 97, 110, 99, 101, 45, 105, 109, 112, 114, 111, 118, 101, 100, 10, 110, 97, 109, 101, 61, 109, 102, 105, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 109, 105, 99, 114, 111, 45, 102, 105, 110, 97, 110, 99, 101, 45, 105, 109, 112, 114, 111, 118, 101, 100, 46, 115, 104, 10, 110, 97, 109, 101, 61, 111, 110, 101, 45, 98, 105, 103, 45, 102, 97, 109, 105, 108, 121, 10, 110, 97, 109, 101, 61, 111, 98, 102, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 111, 110, 101, 45, 98, 105, 103, 45, 102, 97, 109, 105, 108, 121, 46, 115, 104, 10, 110, 97, 109, 101, 61, 113, 117, 97, 108, 105, 102, 105, 101, 100, 45, 115, 101, 101, 100, 10, 110, 97, 109, 101, 61, 113, 115, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 113, 117, 97, 108, 105, 102, 105, 101, 100, 45, 115, 101, 101, 100, 46, 115, 104, 10, 110, 97, 109, 101, 61, 113, 117, 97, 108, 105, 102, 105, 101, 100, 45, 115, 101, 101, 100, 45, 105, 109, 112, 114, 111, 118, 101, 100, 10, 110, 97, 109, 101, 61, 113, 115, 105, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 108, 32, 113, 117, 97, 108, 105, 102, 105, 101, 100, 45, 115, 101, 101, 100, 32, 45, 102, 105, 102, 32, 53, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 99, 104, 111, 105, 99, 101, 32, 102, 99, 112, 114, 111, 10, 110, 97, 109, 101, 61, 114, 105, 110, 45, 116, 105, 110, 45, 116, 105, 110, 10, 110, 97, 109, 101, 61, 114, 116, 116, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 114, 105, 110, 45, 116, 105, 110, 45, 116, 105, 110, 46, 115, 104, 10, 110, 97, 109, 101, 61, 115, 101, 110, 116, 105, 101, 110, 116, 45, 112, 101, 97, 114, 108, 115, 10, 110, 97, 109, 101, 61, 115, 112, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 115, 101, 110, 116, 105, 101, 110, 116, 45, 112, 101, 97, 114, 108, 115, 46, 115, 104, 10, 110, 97, 109, 101, 61, 115, 97, 110, 100, 45, 115, 116, 111, 110, 101, 10, 110, 97, 109, 101, 61, 115, 115, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 115, 97, 110, 100, 45, 115, 116, 111, 110, 101, 46, 115, 104, 10, 110, 97, 109, 101, 61, 115, 108, 105, 99, 107, 45, 114, 111, 99, 107, 10, 110, 97, 109, 101, 61, 115, 114, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 108, 32, 103, 111, 111, 101, 121, 45, 117, 110, 107, 110, 111, 119, 110, 45, 116, 104, 105, 110, 103, 32, 45, 110, 105, 32, 45, 108, 32, 115, 97, 110, 100, 45, 115, 116, 111, 110, 101, 10, 110, 97, 109, 101, 61, 116, 101, 97, 45, 102, 111, 114, 45, 116, 119, 111, 10, 110, 97, 109, 101, 61, 116, 102, 116, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 116, 101, 97, 45, 102, 111, 114, 45, 116, 119, 111, 46, 115, 104, 10, 110, 97, 109, 101, 61, 116, 104, 101, 45, 108, 97, 115, 116, 45, 109, 111, 104, 105, 99, 97, 110, 10, 110, 97, 109, 101, 61, 116, 108, 109, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 103, 32, 115, 105, 109, 112, 108, 101, 95, 115, 105, 109, 111, 110, 32, 45, 116, 111, 32, 97, 98, 99, 100, 101, 102, 103, 104, 32, 45, 110, 105, 32, 45, 116, 111, 32, 97, 98, 99, 100, 101, 102, 103, 104, 105, 10, 110, 97, 109, 101, 61, 116, 104, 114, 101, 101, 45, 101, 105, 103, 104, 116, 121, 10, 110, 97, 109, 101, 61, 116, 101, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 116, 104, 114, 101, 101, 45, 101, 105, 103, 104, 116, 121, 46, 115, 104, 10, 110, 97, 109, 101, 61, 116, 111, 111, 110, 115, 45, 102, 111, 114, 45, 116, 119, 101, 110, 116, 121, 45, 115, 111, 109, 101, 116, 104, 105, 110, 103, 115, 10, 110, 97, 109, 101, 61, 116, 102, 116, 115, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 116, 111, 111, 110, 115, 45, 102, 111, 114, 45, 116, 119, 101, 110, 116, 121, 45, 115, 111, 109, 101, 116, 104, 105, 110, 103, 115, 46, 115, 104, 10, 110, 97, 109, 101, 61, 116, 104, 101, 45, 105, 103, 108, 117, 45, 99, 97, 98, 97, 108, 10, 110, 97, 109, 101, 61, 116, 105, 99, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 116, 104, 101, 45, 105, 103, 108, 117, 45, 99, 97, 98, 97, 108, 46, 115, 104, 10, 110, 97, 109, 101, 61, 118, 105, 100, 101, 111, 45, 101, 100, 105, 116, 105, 110, 103, 10, 110, 97, 109, 101, 61, 118, 101, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 118, 105, 100, 101, 111, 45, 101, 100, 105, 116, 105, 110, 103, 46, 115, 104, 10, 110, 97, 109, 101, 61, 121, 101, 108, 108, 111, 119, 45, 98, 114, 105, 99, 107, 45, 114, 111, 97, 100, 10, 110, 97, 109, 101, 61, 121, 98, 114, 10, 99, 111, 109, 109, 97, 110, 100, 61, 45, 45, 114, 101, 97, 100, 45, 102, 114, 111, 109, 45, 102, 105, 108, 101, 32, 52, 44, 121, 101, 108, 108, 111, 119, 45, 98, 114, 105, 99, 107, 45, 114, 111, 97, 100, 46, 115, 104, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver', 'presetrc', fileData0, true, true, false);
var fileData1 = [];
fileData1.push.apply(fileData1, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 35, 32, 65, 98, 114, 97, 32, 75, 97, 100, 97, 98, 114, 97, 10, 35, 32, 84, 104, 105, 115, 32, 112, 114, 101, 115, 101, 116, 32, 119, 97, 115, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 98, 121, 32, 116, 104, 101, 32, 70, 67, 83, 32, 80, 114, 101, 115, 101, 116, 32, 71, 101, 110, 101, 114, 97, 116, 105, 111, 110, 32, 83, 121, 115, 116, 101, 109, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 48, 48, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 50, 44, 55, 48, 48, 64, 53, 44, 51, 53, 48, 64, 49, 50, 44, 49, 48, 53, 48, 64, 57, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 48, 44, 49, 48, 53, 48, 64, 53, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 49, 50, 44, 55, 48, 48, 64, 50, 44, 55, 48, 48, 64, 49, 44, 55, 48, 48, 64, 52, 44, 55, 48, 48, 64, 49, 50, 44, 49, 52, 48, 48, 64, 50, 44, 55, 48, 48, 64, 57, 44, 51, 53, 48, 64, 49, 48, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 52, 44, 55, 48, 48, 64, 50, 44, 53, 50, 53, 48, 64, 53, 44, 49, 48, 53, 48, 64, 49, 48, 44, 49, 55, 53, 48, 64, 51, 44, 49, 52, 48, 48, 64, 49, 44, 49, 52, 48, 48, 64, 49, 48, 44, 53, 54, 48, 48, 64, 49, 44, 52, 57, 48, 48, 64, 49, 50, 44, 50, 51, 52, 53, 48, 64, 50, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'abra-kadabra.sh', fileData1, true, true, false);
var fileData2 = [];
fileData2.push.apply(fileData2, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 34, 48, 91, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 51, 44, 91, 48, 49, 56, 55, 52, 54, 53, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 32, 34, 50, 54, 44, 91, 48, 49, 51, 52, 53, 56, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 57, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 51, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 56, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 48, 44, 51, 56, 48, 64, 50, 50, 44, 55, 54, 48, 64, 50, 51, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 49, 50, 44, 55, 54, 48, 64, 49, 56, 44, 49, 53, 50, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 50, 52, 44, 50, 50, 56, 48, 64, 49, 48, 44, 50, 50, 56, 48, 64, 50, 52, 44, 52, 53, 54, 48, 64, 49, 50, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'amateur-star.sh', fileData2, true, true, false);
var fileData3 = [];
fileData3.push.apply(fileData3, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 50, 56, 48, 64, 50, 44, 51, 57, 52, 64, 57, 44, 49, 48, 49, 64, 50, 44, 51, 57, 52, 64, 53, 44, 49, 56, 54, 64, 50, 44, 51, 57, 54, 64, 49, 48, 44, 51, 52, 53, 64, 49, 50, 44, 50, 53, 55, 64, 57, 44, 49, 54, 51, 64, 50, 44, 53, 49, 54, 64, 49, 53, 44, 51, 53, 55, 64, 51, 44, 51, 52, 54, 64, 50, 44, 51, 52, 50, 64, 49, 56, 44, 54, 57, 49, 64, 53, 44, 51, 55, 52, 64, 50, 48, 44, 51, 50, 56, 64, 49, 49, 44, 51, 53, 48, 64, 50, 48, 44, 51, 48, 53, 64, 49, 50, 44, 51, 53, 50, 64, 57, 44, 50, 54, 53, 64, 52, 44, 51, 52, 57, 64, 49, 48, 44, 51, 48, 54, 64, 49, 56, 44, 51, 52, 50, 64, 52, 44, 51, 53, 48, 64, 57, 44, 56, 54, 51, 64, 49, 49, 44, 51, 53, 48, 64, 57, 44, 49, 49, 52, 64, 52, 44, 49, 55, 55, 64, 50, 48, 44, 54, 57, 55, 64, 49, 56, 44, 55, 56, 51, 64, 49, 54, 44, 51, 53, 48, 64, 49, 56, 44, 53, 56, 55, 64, 49, 48, 44, 49, 53, 56, 53, 64, 49, 50, 44, 49, 55, 53, 48, 64, 49, 56, 44, 51, 55, 54, 64, 50, 48, 44, 56, 48, 49, 64, 49, 55, 44, 54, 56, 48, 64, 50, 48, 44, 49, 53, 49, 51, 64, 49, 48, 44, 49, 51, 50, 56, 64, 49, 49, 44, 52, 51, 52, 57, 64, 49, 50, 44, 52, 53, 53, 48, 64, 50, 48, 44, 52, 57, 48, 48, 64, 49, 55, 44, 54, 51, 48, 48, 64, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'blue-yonder.sh', fileData3, true, true, false);
var fileData4 = [];
fileData4.push.apply(fileData4, [35, 33, 47, 98, 105, 110, 47, 98, 97, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 102, 99, 45, 112, 114, 111, 45, 114, 97, 110, 103, 101, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'children-playing-ball.sh', fileData4, true, true, false);
var fileData5 = [];
fileData5.push.apply(fileData5, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 35, 32, 84, 104, 105, 115, 32, 115, 99, 97, 110, 32, 105, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 97, 115, 45, 109, 111, 100, 105, 102, 105, 101, 100, 45, 49, 54, 46, 115, 104, 32, 105, 110, 32, 115, 99, 114, 105, 112, 116, 115, 47, 84, 69, 83, 84, 95, 79, 80, 84, 73, 77, 73, 90, 65, 84, 73, 79, 78, 83, 46, 10, 35, 32, 87, 104, 97, 116, 32, 104, 97, 112, 112, 101, 110, 115, 32, 105, 115, 32, 116, 104, 97, 116, 32, 119, 101, 32, 115, 101, 97, 114, 99, 104, 101, 100, 32, 102, 111, 114, 32, 115, 99, 97, 110, 115, 32, 116, 111, 32, 113, 117, 105, 99, 107, 108, 121, 32, 115, 111, 108, 118, 101, 32, 98, 111, 97, 114, 100, 115, 32, 119, 105, 116, 104, 32, 97, 10, 35, 32, 108, 97, 114, 103, 101, 32, 110, 117, 109, 98, 101, 114, 32, 111, 102, 32, 105, 116, 101, 114, 97, 116, 105, 111, 110, 115, 46, 10, 35, 10, 35, 32, 73, 116, 32, 105, 115, 32, 110, 97, 109, 101, 100, 32, 34, 67, 111, 110, 115, 112, 105, 114, 97, 99, 121, 32, 84, 104, 101, 111, 114, 121, 34, 32, 116, 111, 32, 99, 111, 109, 109, 101, 109, 111, 114, 97, 116, 101, 32, 116, 104, 101, 32, 74, 101, 119, 105, 115, 104, 32, 104, 111, 108, 105, 100, 97, 121, 32, 111, 102, 10, 35, 32, 80, 117, 114, 105, 109, 32, 116, 104, 97, 116, 32, 99, 111, 105, 110, 99, 105, 100, 101, 100, 32, 119, 105, 116, 104, 32, 105, 116, 115, 32, 109, 105, 110, 116, 105, 110, 103, 44, 32, 98, 121, 32, 105, 110, 115, 112, 105, 114, 97, 116, 105, 111, 110, 32, 102, 114, 111, 109, 10, 35, 32, 104, 116, 116, 112, 58, 47, 47, 115, 104, 108, 111, 109, 105, 102, 46, 108, 105, 118, 101, 106, 111, 117, 114, 110, 97, 108, 46, 99, 111, 109, 47, 54, 50, 50, 52, 51, 46, 104, 116, 109, 108, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 34, 48, 91, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 51, 44, 91, 48, 49, 56, 55, 52, 54, 53, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 32, 34, 50, 54, 44, 91, 48, 49, 51, 52, 53, 56, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 51, 34, 32, 45, 100, 116, 111, 50, 32, 34, 54, 44, 48, 49, 91, 50, 52, 51, 53, 93, 61, 97, 115, 119, 40, 51, 44, 50, 48, 44, 49, 48, 44, 48, 44, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 110, 101, 119, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 54, 56, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 53, 52, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 54, 56, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 55, 48, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 52, 57, 56, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 50, 51, 52, 53, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 52, 49, 55, 57, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 65, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 56, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 56, 54, 57, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 66, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 51, 48, 56, 48, 54, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 67, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 57, 56, 51, 54, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 68, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 49, 53, 50, 51, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 69, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 52, 52, 50, 53, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 70, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 57, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 51, 54, 54, 64, 115, 70, 44, 51, 56, 48, 64, 53, 44, 50, 48, 48, 64, 115, 49, 44, 49, 50, 48, 64, 115, 50, 44, 50, 48, 48, 64, 110, 101, 119, 44, 50, 50, 50, 64, 115, 69, 44, 50, 50, 53, 64, 115, 68, 44, 49, 51, 56, 64, 115, 65, 44, 50, 54, 54, 64, 115, 66, 44, 49, 55, 52, 64, 115, 67, 44, 57, 53, 64, 115, 57, 44, 51, 56, 48, 64, 51, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 56, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 48, 44, 51, 56, 48, 64, 50, 50, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 49, 50, 44, 55, 54, 48, 64, 49, 56, 44, 49, 53, 50, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 50, 52, 44, 50, 50, 56, 48, 64, 49, 48, 44, 50, 50, 56, 48, 64, 50, 52, 44, 52, 53, 54, 48, 64, 49, 50, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'conspiracy-theory.sh', fileData5, true, true, false);
var fileData6 = [];
fileData6.push.apply(fileData6, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 35, 32, 84, 104, 105, 115, 32, 115, 99, 97, 110, 32, 105, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 111, 98, 102, 32, 115, 99, 97, 110, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 34, 48, 91, 49, 50, 52, 93, 61, 97, 115, 119, 40, 49, 41, 106, 91, 51, 54, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 54, 32, 45, 116, 111, 32, 48, 106, 50, 54, 91, 51, 52, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 106, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 53, 54, 106, 56, 57, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 106, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 106, 50, 51, 52, 32, 45, 100, 116, 111, 50, 32, 34, 50, 49, 44, 48, 49, 54, 91, 50, 51, 52, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 106, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 48, 49, 91, 56, 106, 52, 54, 53, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 50, 32, 34, 50, 54, 44, 50, 54, 91, 48, 49, 51, 52, 53, 56, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 51, 34, 32, 45, 100, 116, 111, 50, 32, 34, 54, 44, 48, 49, 91, 50, 52, 51, 53, 93, 61, 97, 115, 119, 40, 51, 44, 50, 48, 44, 49, 48, 44, 48, 44, 49, 41, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 110, 101, 119, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 56, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 56, 54, 57, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 66, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 57, 56, 51, 54, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 68, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 57, 44, 48, 49, 50, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 52, 52, 50, 53, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 70, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 51, 51, 54, 50, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 71, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 49, 56, 50, 57, 54, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 72, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 106, 91, 51, 53, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 57, 44, 91, 48, 49, 50, 93, 106, 91, 52, 54, 56, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 53, 44, 91, 48, 49, 50, 51, 52, 54, 106, 56, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 49, 48, 52, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 73, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 50, 57, 53, 64, 50, 52, 44, 50, 51, 48, 64, 53, 44, 50, 56, 48, 64, 57, 44, 52, 49, 50, 64, 115, 73, 44, 52, 48, 48, 64, 115, 70, 44, 52, 57, 48, 64, 115, 72, 44, 52, 50, 56, 64, 115, 71, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 50, 56, 49, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 55, 54, 64, 53, 44, 50, 48, 48, 64, 110, 101, 119, 44, 50, 50, 53, 64, 115, 68, 44, 50, 54, 54, 64, 115, 66, 44, 51, 56, 48, 64, 50, 52, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'cookie-monster.sh', fileData6, true, true, false);
var fileData7 = [];
fileData7.push.apply(fileData7, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 35, 32, 84, 104, 101, 32, 34, 67, 111, 111, 108, 32, 74, 105, 118, 101, 115, 34, 32, 80, 114, 101, 115, 101, 116, 10, 35, 32, 65, 110, 32, 97, 117, 116, 111, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 112, 114, 101, 115, 101, 116, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 57, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 49, 56, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 50, 44, 49, 48, 53, 48, 64, 57, 44, 55, 48, 48, 64, 49, 56, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 53, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 48, 44, 49, 48, 53, 48, 64, 49, 54, 44, 51, 53, 48, 64, 50, 44, 55, 48, 48, 64, 52, 44, 51, 53, 48, 64, 49, 48, 44, 49, 48, 53, 48, 64, 50, 44, 49, 52, 48, 48, 64, 51, 44, 51, 53, 48, 64, 49, 56, 44, 49, 55, 53, 48, 64, 53, 44, 51, 53, 48, 64, 49, 54, 44, 51, 53, 48, 64, 49, 56, 44, 55, 48, 48, 64, 52, 44, 49, 48, 53, 48, 64, 49, 50, 44, 50, 52, 53, 48, 64, 53, 44, 49, 52, 48, 48, 64, 49, 56, 44, 49, 48, 53, 48, 64, 50, 44, 49, 52, 48, 48, 64, 49, 48, 44, 54, 51, 48, 48, 64, 49, 44, 52, 57, 48, 48, 64, 49, 50, 44, 56, 48, 53, 48, 64, 49, 56, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'cool-jives.sh', fileData7, true, true, false);
var fileData8 = [];
fileData8.push.apply(fileData8, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 35, 32, 34, 67, 114, 111, 111, 107, 101, 100, 32, 78, 111, 115, 101, 34, 10, 35, 32, 84, 104, 105, 115, 32, 105, 115, 32, 116, 104, 101, 32, 102, 105, 114, 115, 116, 32, 97, 116, 111, 109, 105, 99, 32, 109, 111, 118, 101, 115, 32, 112, 114, 101, 115, 101, 116, 32, 116, 104, 97, 116, 32, 119, 97, 115, 32, 114, 101, 99, 111, 114, 100, 101, 100, 46, 10, 35, 32, 73, 116, 32, 99, 97, 110, 32, 115, 111, 108, 118, 101, 32, 116, 104, 101, 32, 77, 83, 32, 51, 50, 48, 48, 48, 32, 105, 110, 32, 50, 55, 53, 44, 54, 54, 50, 44, 50, 57, 54, 32, 105, 116, 101, 114, 97, 116, 105, 111, 110, 115, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 55, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 48, 48, 48, 64, 48, 44, 51, 48, 48, 48, 64, 49, 49, 44, 51, 48, 48, 48, 64, 50, 44, 51, 48, 48, 48, 64, 57, 44, 51, 48, 48, 48, 64, 49, 48, 44, 51, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 52, 44, 51, 48, 48, 48, 64, 48, 44, 51, 48, 48, 48, 64, 49, 44, 51, 48, 48, 48, 64, 49, 48, 44, 51, 48, 48, 48, 64, 49, 49, 44, 51, 48, 48, 48, 64, 50, 44, 51, 48, 48, 48, 64, 48, 44, 51, 48, 48, 48, 64, 49, 44, 51, 48, 48, 48, 64, 54, 44, 51, 48, 48, 48, 64, 49, 44, 51, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 57, 44, 51, 48, 48, 48, 64, 50, 44, 51, 48, 48, 48, 64, 52, 44, 51, 48, 48, 48, 64, 48, 44, 51, 48, 48, 48, 64, 52, 44, 51, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 54, 44, 51, 48, 48, 48, 64, 57, 44, 51, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 52, 44, 54, 48, 48, 48, 64, 57, 44, 49, 50, 48, 48, 48, 64, 49, 48, 44, 54, 48, 48, 48, 64, 49, 44, 51, 48, 48, 48, 64, 54, 44, 54, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 54, 44, 51, 48, 48, 48, 64, 57, 44, 54, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 54, 44, 57, 48, 48, 48, 64, 49, 49, 44, 54, 48, 48, 48, 64, 49, 44, 49, 50, 48, 48, 48, 64, 48, 44, 49, 50, 48, 48, 48, 64, 51, 44, 51, 48, 48, 48, 64, 52, 44, 54, 48, 48, 48, 64, 57, 44, 54, 48, 48, 48, 64, 49, 44, 51, 51, 48, 48, 48, 64, 50, 44, 49, 50, 48, 48, 48, 64, 57, 44, 57, 48, 48, 48, 64, 49, 49, 44, 54, 48, 48, 48, 64, 48, 44, 54, 48, 48, 48, 64, 52, 44, 54, 48, 48, 48, 64, 50, 44, 50, 52, 48, 48, 48, 64, 52, 44, 57, 48, 48, 48, 64, 54, 44, 52, 53, 48, 48, 48, 64, 48, 44, 57, 48, 48, 48, 64, 49, 44, 50, 49, 48, 48, 48, 64, 51, 44, 57, 48, 48, 48, 64, 52, 44, 50, 49, 48, 48, 48, 64, 53, 44, 51, 51, 48, 48, 48, 64, 54, 44, 49, 56, 48, 48, 48, 64, 51, 44, 50, 49, 48, 48, 48, 64, 57, 44, 52, 50, 48, 48, 48, 64, 49, 48, 44, 52, 50, 48, 48, 48, 64, 48, 44, 52, 50, 48, 48, 48, 64, 51, 44, 54, 54, 48, 48, 48, 64, 50, 44, 49, 50, 51, 48, 48, 48, 64, 51, 44, 49, 50, 57, 48, 48, 48, 64, 54, 44, 56, 49, 48, 48, 48, 64, 52, 44, 49, 51, 50, 48, 48, 48, 64, 53, 44, 49, 54, 53, 48, 48, 48, 64, 49, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'crooked-nose.sh', fileData8, true, true, false);
var fileData9 = [];
fileData9.push.apply(fileData9, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 53, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 55, 64, 50, 52, 44, 51, 54, 55, 64, 53, 44, 52, 51, 49, 64, 57, 44, 51, 53, 55, 64, 49, 48, 44, 51, 52, 52, 64, 50, 52, 44, 51, 53, 49, 64, 51, 44, 51, 52, 53, 64, 53, 44, 51, 52, 53, 64, 49, 50, 44, 51, 53, 48, 64, 57, 44, 51, 51, 54, 64, 49, 56, 44, 54, 48, 55, 64, 52, 44, 51, 52, 56, 64, 50, 52, 44, 56, 53, 51, 64, 49, 55, 44, 52, 51, 55, 64, 53, 44, 51, 53, 56, 64, 50, 48, 44, 51, 48, 48, 64, 49, 49, 44, 51, 53, 48, 64, 50, 48, 44, 51, 52, 55, 64, 49, 53, 44, 52, 53, 51, 64, 49, 48, 44, 53, 54, 57, 64, 50, 48, 44, 50, 49, 57, 64, 50, 50, 44, 50, 50, 54, 64, 50, 49, 44, 49, 50, 51, 64, 49, 50, 44, 55, 48, 48, 64, 50, 52, 44, 51, 50, 56, 64, 57, 44, 54, 51, 53, 64, 49, 48, 44, 57, 51, 51, 64, 49, 56, 44, 54, 50, 57, 64, 50, 49, 44, 50, 55, 49, 64, 49, 56, 44, 50, 52, 51, 64, 57, 44, 49, 54, 54, 64, 49, 50, 44, 51, 53, 48, 64, 53, 44, 50, 55, 48, 64, 50, 53, 44, 51, 48, 49, 64, 49, 49, 44, 49, 52, 57, 55, 64, 49, 50, 44, 57, 50, 48, 64, 49, 53, 44, 51, 53, 48, 64, 50, 52, 44, 49, 52, 48, 48, 64, 49, 48, 44, 51, 56, 49, 51, 64, 50, 52, 44, 52, 52, 53, 51, 64, 49, 50, 44, 52, 55, 49, 50, 64, 49, 55, 44, 53, 54, 54, 55, 64, 50, 53, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'enlightened-ostrich.sh', fileData9, true, true, false);
var fileData10 = [];
fileData10.push.apply(fileData10, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 35, 32, 70, 111, 111, 108, 39, 115, 32, 71, 111, 108, 100, 32, 45, 32, 97, 32, 99, 111, 109, 112, 117, 116, 101, 114, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 115, 99, 97, 110, 32, 111, 102, 32, 97, 116, 111, 109, 105, 99, 32, 109, 111, 118, 101, 115, 46, 10, 35, 32, 84, 97, 107, 101, 115, 32, 50, 53, 54, 44, 52, 52, 50, 44, 57, 49, 54, 32, 73, 116, 101, 114, 97, 116, 105, 111, 110, 115, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 68, 93, 91, 67, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 48, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 55, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 68, 67, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 65, 66, 67, 48, 49, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 69, 65, 66, 67, 68, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 66, 68, 65, 69, 67, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 49, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 51, 44, 49, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 57, 44, 49, 48, 48, 48, 64, 52, 44, 49, 48, 48, 48, 64, 57, 44, 49, 48, 48, 48, 64, 51, 44, 49, 48, 48, 48, 64, 52, 44, 50, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 48, 44, 50, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 49, 52, 44, 50, 48, 48, 48, 64, 49, 49, 44, 49, 48, 48, 48, 64, 49, 52, 44, 49, 48, 48, 48, 64, 51, 44, 49, 48, 48, 48, 64, 49, 49, 44, 49, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 48, 44, 50, 48, 48, 48, 64, 52, 44, 50, 48, 48, 48, 64, 49, 48, 44, 49, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 50, 44, 50, 48, 48, 48, 64, 49, 48, 44, 49, 48, 48, 48, 64, 48, 44, 50, 48, 48, 48, 64, 49, 49, 44, 50, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 49, 48, 44, 49, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 49, 48, 44, 50, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 57, 44, 49, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 49, 52, 44, 51, 48, 48, 48, 64, 56, 44, 49, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 49, 52, 44, 49, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 49, 48, 44, 51, 48, 48, 48, 64, 54, 44, 50, 48, 48, 48, 64, 52, 44, 49, 48, 48, 48, 64, 50, 44, 50, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 50, 44, 49, 48, 48, 48, 64, 49, 49, 44, 50, 48, 48, 48, 64, 54, 44, 49, 48, 48, 48, 64, 48, 44, 53, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 48, 44, 50, 48, 48, 48, 64, 49, 44, 49, 48, 48, 48, 64, 50, 44, 51, 48, 48, 48, 64, 51, 44, 49, 48, 48, 48, 64, 49, 48, 44, 49, 48, 48, 48, 64, 49, 52, 44, 50, 48, 48, 48, 64, 54, 44, 49, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 50, 44, 50, 48, 48, 48, 64, 49, 49, 44, 54, 48, 48, 48, 64, 56, 44, 56, 48, 48, 48, 64, 57, 44, 51, 48, 48, 48, 64, 49, 44, 50, 48, 48, 48, 64, 49, 48, 44, 50, 48, 48, 48, 64, 49, 52, 44, 51, 48, 48, 48, 64, 49, 53, 44, 52, 48, 48, 48, 64, 48, 44, 49, 48, 48, 48, 64, 56, 44, 49, 48, 48, 48, 64, 49, 48, 44, 49, 48, 48, 48, 64, 49, 52, 44, 55, 48, 48, 48, 64, 48, 44, 49, 52, 48, 48, 48, 64, 50, 44, 54, 48, 48, 48, 64, 51, 44, 55, 48, 48, 48, 64, 52, 44, 49, 48, 48, 48, 64, 56, 44, 52, 48, 48, 48, 64, 57, 44, 50, 48, 48, 48, 64, 49, 53, 44, 50, 48, 48, 48, 64, 54, 44, 52, 48, 48, 48, 64, 51, 44, 50, 48, 48, 48, 64, 52, 44, 51, 48, 48, 48, 64, 49, 53, 44, 50, 48, 48, 48, 64, 48, 44, 54, 48, 48, 48, 64, 49, 44, 50, 48, 48, 48, 64, 52, 44, 52, 48, 48, 48, 64, 54, 44, 52, 48, 48, 48, 64, 57, 44, 52, 48, 48, 48, 64, 49, 52, 44, 55, 48, 48, 48, 64, 56, 44, 51, 48, 48, 48, 64, 48, 44, 51, 48, 48, 48, 64, 49, 44, 53, 48, 48, 48, 64, 50, 44, 51, 48, 48, 48, 64, 51, 44, 52, 48, 48, 48, 64, 57, 44, 56, 48, 48, 48, 64, 49, 48, 44, 57, 48, 48, 48, 64, 51, 44, 53, 48, 48, 48, 64, 56, 44, 55, 48, 48, 48, 64, 49, 49, 44, 49, 49, 48, 48, 48, 64, 49, 50, 44, 49, 50, 48, 48, 48, 64, 48, 44, 56, 48, 48, 48, 64, 51, 44, 49, 49, 48, 48, 48, 64, 57, 44, 57, 48, 48, 48, 64, 49, 53, 44, 55, 48, 48, 48, 64, 50, 44, 49, 50, 48, 48, 48, 64, 56, 44, 49, 54, 48, 48, 48, 64, 53, 44, 56, 48, 48, 48, 64, 49, 51, 44, 49, 56, 48, 48, 48, 64, 48, 44, 57, 48, 48, 48, 64, 49, 53, 44, 49, 50, 48, 48, 48, 64, 49, 48, 44, 49, 54, 48, 48, 48, 64, 48, 44, 49, 52, 48, 48, 48, 64, 51, 44, 49, 54, 48, 48, 48, 64, 57, 44, 50, 54, 48, 48, 48, 64, 52, 44, 50, 51, 48, 48, 48, 64, 51, 44, 52, 50, 48, 48, 48, 64, 54, 44, 50, 50, 48, 48, 48, 64, 56, 44, 50, 55, 48, 48, 48, 64, 49, 48, 44, 51, 56, 48, 48, 48, 64, 55, 44, 52, 49, 48, 48, 48, 64, 48, 44, 52, 50, 48, 48, 48, 64, 51, 44, 56, 52, 48, 48, 48, 64, 49, 51, 44, 54, 49, 48, 48, 48, 64, 49, 53, 44, 49, 53, 57, 48, 48, 48, 64, 53, 44, 57, 48, 48, 48, 48, 64, 57, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'fools-gold.sh', fileData10, true, true, false);
var fileData11 = [];
fileData11.push.apply(fileData11, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 53, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 55, 64, 50, 52, 44, 51, 54, 55, 64, 53, 44, 52, 51, 49, 64, 57, 44, 51, 53, 55, 64, 49, 48, 44, 51, 52, 52, 64, 50, 52, 44, 51, 53, 49, 64, 51, 44, 51, 52, 53, 64, 53, 44, 51, 52, 53, 64, 49, 50, 44, 51, 53, 48, 64, 57, 44, 51, 51, 54, 64, 49, 56, 44, 54, 48, 55, 64, 52, 44, 51, 52, 56, 64, 50, 52, 44, 56, 53, 51, 64, 49, 55, 44, 52, 51, 55, 64, 53, 44, 51, 53, 56, 64, 50, 48, 44, 51, 48, 48, 64, 49, 49, 44, 51, 53, 48, 64, 50, 48, 44, 51, 52, 55, 64, 49, 53, 44, 52, 53, 51, 64, 49, 48, 44, 53, 54, 57, 64, 50, 48, 44, 50, 49, 57, 64, 50, 50, 44, 50, 50, 54, 64, 50, 49, 44, 49, 50, 51, 64, 49, 50, 44, 55, 48, 48, 64, 50, 52, 44, 51, 50, 56, 64, 57, 44, 54, 51, 53, 64, 49, 48, 44, 57, 51, 51, 64, 49, 56, 44, 54, 50, 57, 64, 50, 49, 44, 50, 55, 49, 64, 49, 56, 44, 50, 52, 51, 64, 57, 44, 49, 54, 54, 64, 49, 50, 44, 51, 53, 48, 64, 53, 44, 50, 55, 48, 64, 50, 53, 44, 51, 48, 49, 64, 49, 49, 44, 49, 52, 57, 55, 64, 49, 50, 44, 57, 50, 48, 64, 49, 53, 44, 51, 53, 48, 64, 50, 52, 44, 49, 52, 48, 48, 64, 49, 48, 44, 51, 56, 49, 51, 64, 50, 52, 44, 52, 52, 53, 51, 64, 49, 50, 44, 52, 55, 49, 50, 64, 49, 55, 44, 53, 54, 54, 55, 64, 50, 53, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'foss-nessy.sh', fileData11, true, true, false);
var fileData12 = [];
fileData12.push.apply(fileData12, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 53, 48, 64, 49, 56, 44, 51, 53, 48, 64, 49, 54, 44, 49, 49, 50, 48, 48, 64, 49, 56, 44, 51, 53, 48, 64, 49, 49, 44, 49, 48, 53, 48, 64, 49, 54, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 53, 44, 50, 56, 48, 48, 64, 49, 56, 44, 49, 48, 53, 48, 64, 49, 54, 44, 51, 53, 48, 64, 49, 56, 44, 49, 52, 48, 48, 64, 49, 54, 44, 51, 53, 48, 64, 57, 44, 49, 52, 48, 48, 64, 49, 49, 44, 55, 48, 48, 64, 57, 44, 49, 48, 53, 48, 64, 53, 44, 51, 53, 48, 64, 50, 44, 49, 52, 48, 48, 64, 53, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 50, 44, 55, 48, 48, 64, 57, 44, 55, 48, 48, 64, 50, 44, 50, 56, 48, 48, 64, 57, 44, 55, 48, 48, 64, 52, 44, 55, 48, 48, 64, 49, 55, 44, 55, 48, 48, 64, 49, 44, 49, 48, 53, 48, 64, 49, 49, 44, 49, 55, 53, 48, 64, 53, 44, 50, 52, 49, 53, 48, 64, 49, 44, 51, 53, 48, 48, 48, 64, 49, 56, 44, 51, 54, 55, 53, 48, 64, 49, 54, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'gooey-unknown-thing.sh', fileData12, true, true, false);
var fileData13 = [];
fileData13.push.apply(fileData13, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 54, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'hello-world.sh', fileData13, true, true, false);
var fileData14 = [];
fileData14.push.apply(fileData14, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 32, 32, 32, 32, 45, 45, 116, 111, 116, 97, 108, 45, 105, 116, 101, 114, 97, 116, 105, 111, 110, 115, 45, 108, 105, 109, 105, 116, 32, 51, 48, 48, 48, 48, 48, 48, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 32, 32, 32, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'john_galt_line-500.sh', fileData14, true, true, false);
var fileData15 = [];
fileData15.push.apply(fileData15, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 35, 32, 84, 104, 105, 115, 32, 115, 99, 97, 110, 32, 105, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 99, 109, 32, 115, 99, 97, 110, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 106, 50, 51, 52, 32, 45, 100, 116, 111, 50, 32, 34, 51, 51, 44, 48, 49, 54, 91, 50, 51, 52, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 91, 49, 50, 52, 93, 61, 97, 115, 119, 40, 49, 41, 106, 91, 51, 54, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 53, 44, 48, 49, 54, 91, 50, 51, 52, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 54, 32, 45, 116, 111, 32, 48, 106, 50, 54, 91, 51, 52, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 106, 91, 51, 53, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 57, 44, 91, 48, 49, 50, 93, 106, 91, 52, 54, 56, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 53, 44, 91, 48, 49, 50, 51, 52, 54, 106, 56, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 49, 48, 52, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 73, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 57, 44, 48, 49, 50, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 52, 52, 50, 53, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 70, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 49, 56, 50, 57, 54, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 72, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 51, 51, 54, 50, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 71, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 106, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 48, 49, 91, 56, 106, 52, 54, 53, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 50, 32, 34, 50, 54, 44, 50, 54, 91, 48, 49, 51, 52, 53, 56, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 53, 54, 106, 56, 57, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 51, 34, 32, 45, 100, 116, 111, 50, 32, 34, 54, 44, 48, 49, 91, 50, 52, 51, 53, 93, 61, 97, 115, 119, 40, 51, 44, 50, 48, 44, 49, 48, 44, 48, 44, 49, 41, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 106, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 110, 101, 119, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 57, 56, 51, 54, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 68, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 106, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 106, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 106, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 56, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 106, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 56, 54, 57, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 66, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 50, 52, 53, 64, 50, 52, 44, 50, 51, 48, 64, 53, 44, 50, 56, 48, 64, 57, 44, 52, 49, 50, 64, 115, 73, 44, 52, 48, 48, 64, 115, 70, 44, 52, 57, 48, 64, 115, 72, 44, 52, 50, 56, 64, 115, 71, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 50, 56, 49, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 55, 54, 64, 53, 44, 50, 48, 48, 64, 110, 101, 119, 44, 50, 50, 53, 64, 115, 68, 44, 50, 54, 54, 64, 115, 66, 44, 51, 56, 48, 64, 50, 52, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'looking-glass.sh', fileData15, true, true, false);
var fileData16 = [];
fileData16.push.apply(fileData16, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 53, 44, 52, 44, 48, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 55, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 48, 44, 91, 51, 52, 50, 93, 48, 49, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 52, 48, 44, 50, 44, 52, 48, 44, 48, 44, 52, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 53, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 54, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 57, 57, 44, 50, 44, 54, 53, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 102, 111, 111, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 55, 48, 44, 48, 44, 48, 44, 50, 44, 57, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 44, 82, 117, 110, 58, 56, 56, 52, 56, 64, 50, 49, 44, 82, 117, 110, 58, 54, 50, 56, 50, 64, 50, 50, 44, 82, 117, 110, 58, 53, 48, 50, 48, 64, 50, 51, 44, 82, 117, 110, 58, 50, 49, 50, 56, 64, 50, 52, 44, 82, 117, 110, 58, 54, 56, 51, 51, 64, 50, 53, 44, 82, 117, 110, 58, 55, 50, 57, 48, 64, 50, 54, 44, 82, 117, 110, 58, 54, 54, 49, 57, 64, 50, 55, 44, 82, 117, 110, 58, 51, 55, 57, 55, 64, 50, 56, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 50, 57, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 51, 48, 44, 82, 117, 110, 58, 51, 49, 56, 52, 64, 51, 49, 44, 82, 117, 110, 58, 51, 48, 48, 48, 64, 102, 111, 111, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'maliciously-obscure.sh', fileData16, true, true, false);
var fileData17 = [];
fileData17.push.apply(fileData17, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 53, 44, 52, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 55, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 48, 44, 91, 51, 52, 50, 93, 48, 49, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 52, 48, 44, 50, 44, 52, 48, 44, 48, 44, 52, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 53, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 54, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 57, 57, 44, 50, 44, 54, 53, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 102, 111, 111, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 55, 48, 44, 48, 44, 48, 44, 50, 44, 57, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 53, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 50, 53, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 50, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 44, 82, 117, 110, 58, 56, 56, 52, 56, 64, 50, 49, 44, 82, 117, 110, 58, 54, 50, 56, 50, 64, 50, 50, 44, 82, 117, 110, 58, 53, 48, 50, 48, 64, 50, 51, 44, 82, 117, 110, 58, 50, 49, 50, 56, 64, 50, 52, 44, 82, 117, 110, 58, 54, 56, 51, 51, 64, 50, 53, 44, 82, 117, 110, 58, 55, 50, 57, 48, 64, 50, 54, 44, 82, 117, 110, 58, 54, 54, 49, 57, 64, 50, 55, 44, 82, 117, 110, 58, 51, 55, 57, 55, 64, 50, 56, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 50, 57, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 51, 48, 44, 82, 117, 110, 58, 51, 49, 56, 52, 64, 51, 49, 44, 82, 117, 110, 58, 51, 48, 48, 48, 64, 102, 111, 111, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 49, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'micro-finance-improved.sh', fileData17, true, true, false);
var fileData18 = [];
fileData18.push.apply(fileData18, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 53, 44, 52, 44, 48, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 55, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 48, 44, 91, 51, 52, 50, 93, 48, 49, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 52, 48, 44, 50, 44, 52, 48, 44, 48, 44, 52, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 53, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 54, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 57, 57, 44, 50, 44, 54, 53, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 102, 111, 111, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 55, 48, 44, 48, 44, 48, 44, 50, 44, 57, 48, 48, 48, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 53, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 50, 53, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 50, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 92, 10, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 44, 82, 117, 110, 58, 56, 56, 52, 56, 64, 50, 49, 44, 82, 117, 110, 58, 54, 50, 56, 50, 64, 50, 50, 44, 82, 117, 110, 58, 53, 48, 50, 48, 64, 50, 51, 44, 82, 117, 110, 58, 50, 49, 50, 56, 64, 50, 52, 44, 82, 117, 110, 58, 54, 56, 51, 51, 64, 50, 53, 44, 82, 117, 110, 58, 55, 50, 57, 48, 64, 50, 54, 44, 82, 117, 110, 58, 54, 54, 49, 57, 64, 50, 55, 44, 82, 117, 110, 58, 51, 55, 57, 55, 64, 50, 56, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 50, 57, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 51, 48, 44, 82, 117, 110, 58, 51, 49, 56, 52, 64, 51, 49, 44, 82, 117, 110, 58, 51, 48, 48, 48, 64, 102, 111, 111, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 49, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'micro-finance.sh', fileData18, true, true, false);
var fileData19 = [];
fileData19.push.apply(fileData19, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 35, 32, 84, 104, 105, 115, 32, 115, 99, 97, 110, 32, 105, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 99, 116, 45, 109, 111, 100, 49, 51, 46, 115, 104, 32, 105, 110, 32, 115, 99, 114, 105, 112, 116, 115, 47, 84, 69, 83, 84, 95, 79, 80, 84, 73, 77, 73, 90, 65, 84, 73, 79, 78, 83, 32, 46, 10, 35, 32, 73, 116, 115, 32, 110, 97, 109, 101, 32, 105, 115, 32, 100, 101, 114, 105, 118, 101, 100, 32, 102, 114, 111, 109, 32, 104, 116, 116, 112, 115, 58, 47, 47, 119, 119, 119, 46, 121, 111, 117, 116, 117, 98, 101, 46, 99, 111, 109, 47, 119, 97, 116, 99, 104, 63, 118, 61, 68, 78, 113, 49, 98, 107, 114, 87, 106, 98, 107, 32, 105, 110, 10, 35, 32, 109, 101, 109, 111, 114, 121, 32, 111, 102, 32, 67, 104, 114, 105, 115, 116, 105, 110, 97, 32, 71, 114, 105, 109, 109, 105, 101, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 34, 48, 91, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 97, 115, 119, 40, 49, 41, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 61, 97, 115, 119, 40, 49, 44, 48, 44, 48, 44, 48, 44, 48, 44, 48, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 32, 45, 100, 116, 111, 32, 34, 49, 51, 44, 91, 48, 49, 56, 55, 52, 54, 53, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 100, 116, 111, 32, 34, 50, 54, 44, 91, 48, 49, 51, 52, 53, 56, 55, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 48, 49, 50, 51, 34, 32, 45, 100, 116, 111, 50, 32, 34, 54, 44, 48, 49, 91, 50, 52, 51, 53, 93, 61, 97, 115, 119, 40, 51, 44, 50, 48, 44, 49, 48, 44, 48, 44, 49, 41, 34, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 110, 101, 119, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 54, 56, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 53, 52, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 56, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 51, 56, 54, 57, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 66, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 57, 56, 51, 54, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 68, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 49, 53, 50, 51, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 69, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 55, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 52, 52, 50, 53, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 70, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 32, 45, 115, 101, 101, 100, 32, 51, 51, 54, 50, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 71, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 53, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 56, 50, 57, 54, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 72, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 91, 50, 51, 52, 53, 55, 93, 34, 32, 45, 100, 116, 111, 50, 32, 34, 49, 48, 44, 91, 48, 49, 50, 51, 93, 91, 52, 53, 54, 55, 93, 34, 32, 45, 115, 101, 101, 100, 32, 49, 48, 52, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 115, 73, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 57, 44, 52, 49, 52, 64, 115, 73, 44, 51, 54, 54, 64, 115, 70, 44, 52, 57, 48, 64, 115, 72, 44, 52, 50, 56, 64, 115, 71, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 53, 44, 50, 48, 48, 64, 115, 49, 44, 50, 48, 48, 64, 110, 101, 119, 44, 50, 50, 50, 64, 115, 69, 44, 50, 50, 53, 64, 115, 68, 44, 50, 54, 54, 64, 115, 66, 44, 51, 56, 48, 64, 51, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 56, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'one-big-family.sh', fileData19, true, true, false);
var fileData20 = [];
fileData20.push.apply(fileData20, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 53, 44, 52, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 55, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 48, 44, 91, 51, 52, 50, 93, 48, 49, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 52, 48, 44, 50, 44, 52, 48, 44, 48, 44, 52, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 53, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 54, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 57, 57, 44, 50, 44, 54, 53, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 102, 111, 111, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 55, 48, 44, 48, 44, 48, 44, 50, 44, 57, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 53, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 50, 53, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 50, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 113, 117, 105, 99, 107, 95, 115, 97, 110, 100, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 114, 97, 110, 100, 40, 41, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 61, 114, 97, 110, 100, 40, 41, 34, 32, 45, 100, 116, 111, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 101, 110, 99, 114, 117, 115, 116, 101, 100, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 34, 49, 44, 48, 44, 48, 44, 48, 44, 49, 34, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 55, 54, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 32, 92, 10, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 44, 82, 117, 110, 58, 56, 56, 52, 56, 64, 50, 49, 44, 82, 117, 110, 58, 54, 50, 56, 50, 64, 50, 50, 44, 82, 117, 110, 58, 53, 48, 50, 48, 64, 50, 51, 44, 82, 117, 110, 58, 50, 49, 50, 56, 64, 50, 52, 44, 82, 117, 110, 58, 54, 56, 51, 51, 64, 50, 53, 44, 82, 117, 110, 58, 55, 50, 57, 48, 64, 50, 54, 44, 82, 117, 110, 58, 54, 54, 49, 57, 64, 50, 55, 44, 82, 117, 110, 58, 51, 55, 57, 55, 64, 50, 56, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 50, 57, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 51, 48, 44, 82, 117, 110, 58, 51, 49, 56, 52, 64, 51, 49, 44, 82, 117, 110, 58, 51, 48, 48, 48, 64, 102, 111, 111, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 49, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 113, 117, 105, 99, 107, 95, 115, 97, 110, 100, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 101, 110, 99, 114, 117, 115, 116, 101, 100, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'qualified-seed.sh', fileData20, true, true, false);
var fileData21 = [];
fileData21.push.apply(fileData21, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'rin-tin-tin.sh', fileData21, true, true, false);
var fileData22 = [];
fileData22.push.apply(fileData22, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 55, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 68, 67, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 65, 66, 67, 48, 49, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 69, 65, 66, 67, 68, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 66, 68, 65, 69, 67, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 49, 48, 53, 48, 64, 53, 44, 51, 53, 48, 64, 54, 44, 50, 53, 50, 48, 48, 64, 53, 44, 51, 53, 48, 64, 54, 44, 51, 57, 53, 53, 48, 64, 53, 44, 51, 53, 48, 64, 54, 44, 50, 49, 48, 48, 48, 64, 53, 44, 51, 53, 48, 64, 48, 44, 49, 55, 53, 48, 64, 53, 44, 51, 53, 48, 64, 54, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 54, 44, 49, 49, 53, 53, 48, 64, 53, 44, 51, 53, 48, 64, 49, 52, 44, 49, 52, 48, 48, 64, 54, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 54, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 54, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 49, 44, 51, 53, 48, 64, 50, 44, 55, 48, 48, 64, 54, 44, 51, 53, 48, 64, 57, 44, 55, 48, 48, 64, 54, 44, 51, 53, 48, 64, 49, 49, 44, 55, 48, 48, 64, 54, 44, 51, 53, 48, 64, 49, 48, 44, 52, 53, 53, 48, 64, 54, 44, 51, 53, 48, 64, 48, 44, 51, 53, 48, 48, 64, 54, 44, 51, 53, 48, 64, 49, 52, 44, 49, 52, 48, 48, 64, 54, 44, 51, 53, 48, 64, 49, 53, 44, 49, 48, 53, 48, 64, 54, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 48, 44, 51, 53, 48, 64, 49, 50, 44, 57, 52, 53, 48, 64, 54, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 49, 52, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 49, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 48, 44, 55, 48, 48, 64, 49, 53, 44, 55, 48, 48, 64, 49, 52, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 49, 52, 44, 49, 52, 48, 48, 64, 54, 44, 51, 53, 48, 64, 48, 44, 51, 53, 48, 64, 49, 44, 51, 53, 48, 64, 49, 52, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 57, 44, 49, 48, 53, 48, 64, 49, 53, 44, 55, 48, 48, 64, 49, 50, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 49, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 49, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 50, 44, 49, 48, 53, 48, 64, 49, 52, 44, 51, 53, 48, 64, 51, 44, 55, 48, 48, 64, 50, 44, 51, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 48, 44, 55, 48, 48, 64, 49, 53, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 50, 44, 49, 48, 53, 48, 64, 48, 44, 55, 48, 48, 64, 49, 52, 44, 55, 48, 48, 64, 48, 44, 51, 53, 48, 64, 51, 44, 55, 48, 48, 64, 49, 48, 44, 51, 53, 48, 64, 49, 49, 44, 53, 57, 53, 48, 64, 49, 53, 44, 51, 53, 48, 64, 49, 52, 44, 51, 53, 48, 64, 49, 53, 44, 49, 48, 53, 48, 64, 49, 52, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 57, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 52, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 49, 53, 44, 50, 52, 53, 48, 64, 49, 52, 44, 55, 48, 48, 64, 50, 44, 55, 48, 48, 64, 52, 44, 51, 53, 48, 64, 57, 44, 51, 53, 48, 64, 52, 44, 55, 48, 48, 64, 49, 44, 49, 48, 53, 48, 64, 49, 49, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 50, 44, 51, 53, 48, 64, 49, 49, 44, 49, 52, 48, 48, 64, 50, 44, 51, 53, 48, 64, 49, 49, 44, 55, 48, 48, 64, 52, 44, 50, 56, 48, 48, 64, 57, 44, 50, 49, 48, 48, 64, 50, 44, 49, 48, 53, 48, 64, 57, 44, 49, 52, 48, 48, 64, 50, 44, 55, 48, 48, 64, 48, 44, 55, 48, 48, 64, 49, 52, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 49, 52, 44, 49, 48, 53, 48, 64, 48, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 52, 44, 49, 52, 48, 48, 64, 51, 44, 51, 53, 48, 64, 49, 48, 44, 49, 48, 53, 48, 64, 50, 44, 49, 52, 48, 48, 64, 49, 48, 44, 51, 53, 48, 64, 50, 44, 49, 55, 53, 48, 64, 51, 44, 50, 49, 48, 48, 64, 50, 44, 50, 56, 48, 48, 64, 49, 48, 44, 55, 48, 48, 64, 49, 49, 44, 49, 52, 48, 48, 64, 49, 44, 55, 48, 48, 64, 48, 44, 49, 48, 53, 48, 64, 49, 51, 44, 49, 48, 53, 48, 64, 51, 44, 49, 48, 53, 48, 64, 48, 44, 55, 48, 48, 64, 49, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 50, 44, 49, 52, 48, 48, 64, 49, 49, 44, 55, 48, 48, 64, 49, 44, 49, 52, 48, 48, 64, 49, 50, 44, 49, 52, 48, 48, 64, 48, 44, 51, 53, 48, 64, 49, 44, 51, 53, 48, 64, 48, 44, 50, 56, 48, 48, 64, 54, 44, 50, 56, 48, 48, 64, 51, 44, 56, 52, 48, 48, 64, 49, 51, 44, 50, 56, 48, 48, 64, 49, 49, 44, 53, 54, 48, 48, 64, 49, 51, 44, 50, 56, 48, 48, 64, 49, 52, 44, 50, 56, 48, 48, 64, 49, 51, 44, 50, 56, 48, 48, 64, 49, 52, 44, 49, 48, 53, 48, 48, 64, 54, 44, 51, 53, 48, 48, 64, 57, 44, 56, 48, 53, 48, 64, 48, 44, 49, 48, 53, 48, 64, 49, 52, 44, 51, 49, 53, 48, 64, 51, 44, 49, 48, 53, 48, 64, 49, 50, 44, 55, 51, 53, 48, 64, 52, 44, 49, 48, 53, 48, 64, 49, 51, 44, 49, 49, 53, 53, 48, 64, 49, 52, 44, 51, 56, 53, 48, 64, 52, 44, 51, 56, 53, 48, 64, 50, 44, 51, 56, 53, 48, 64, 49, 50, 44, 55, 55, 48, 48, 64, 49, 53, 44, 53, 50, 53, 48, 64, 48, 44, 54, 54, 53, 48, 64, 51, 44, 54, 54, 53, 48, 64, 50, 44, 49, 51, 51, 48, 48, 64, 49, 52, 44, 54, 54, 53, 48, 64, 57, 44, 54, 54, 53, 48, 64, 52, 44, 49, 51, 51, 48, 48, 64, 49, 48, 44, 54, 54, 53, 48, 64, 52, 44, 54, 54, 53, 48, 64, 49, 44, 54, 54, 53, 48, 64, 49, 49, 44, 54, 54, 53, 48, 64, 52, 44, 54, 54, 53, 48, 64, 49, 44, 54, 54, 53, 48, 64, 49, 52, 44, 54, 54, 53, 48, 64, 49, 53, 44, 49, 51, 51, 48, 48, 64, 49, 44, 54, 54, 53, 48, 64, 50, 44, 54, 54, 53, 48, 64, 48, 44, 52, 52, 56, 48, 48, 64, 54, 44, 49, 49, 50, 48, 48, 64, 52, 44, 50, 50, 52, 48, 48, 64, 50, 44, 49, 49, 50, 48, 48, 64, 48, 44, 49, 56, 50, 48, 48, 64, 49, 51, 44, 49, 56, 50, 48, 48, 64, 57, 44, 49, 56, 50, 48, 48, 64, 48, 44, 51, 50, 57, 48, 48, 64, 57, 44, 49, 54, 52, 53, 48, 64, 49, 48, 44, 49, 54, 52, 53, 48, 64, 48, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'sand-stone.sh', fileData22, true, true, false);
var fileData23 = [];
fileData23.push.apply(fileData23, [35, 33, 47, 98, 105, 110, 47, 98, 97, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 102, 99, 45, 112, 114, 111, 45, 114, 97, 110, 103, 101, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 111, 112, 116, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'sentient-pearls.sh', fileData23, true, true, false);
var fileData24 = [];
fileData24.push.apply(fileData24, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 35, 32, 84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 109, 101, 116, 97, 45, 109, 111, 118, 101, 115, 32, 112, 114, 101, 115, 101, 116, 32, 111, 112, 116, 105, 109, 105, 115, 101, 100, 32, 102, 111, 114, 32, 50, 45, 102, 114, 101, 101, 99, 101, 108, 108, 115, 32, 100, 101, 97, 108, 115, 46, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 100, 116, 111, 32, 50, 55, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 51, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 56, 56, 53, 64, 50, 49, 44, 55, 52, 54, 64, 49, 48, 44, 49, 48, 56, 64, 50, 49, 44, 51, 49, 57, 64, 49, 48, 44, 51, 49, 53, 64, 50, 49, 44, 49, 48, 53, 57, 64, 49, 48, 44, 51, 55, 53, 64, 50, 49, 44, 49, 57, 53, 64, 49, 48, 44, 55, 48, 57, 64, 50, 49, 44, 57, 49, 53, 64, 49, 48, 44, 53, 55, 55, 64, 50, 49, 44, 49, 50, 48, 64, 49, 48, 44, 49, 49, 54, 64, 50, 49, 44, 49, 50, 50, 57, 64, 49, 48, 44, 54, 57, 50, 64, 50, 49, 44, 50, 50, 54, 55, 64, 51, 44, 53, 57, 56, 64, 49, 48, 44, 54, 57, 57, 64, 50, 49, 44, 49, 52, 57, 64, 51, 44, 50, 56, 49, 64, 50, 49, 44, 52, 54, 48, 64, 51, 44, 56, 50, 48, 64, 56, 44, 53, 57, 49, 64, 50, 49, 44, 51, 52, 48, 64, 51, 44, 50, 50, 52, 64, 56, 44, 56, 55, 57, 64, 50, 49, 44, 50, 56, 49, 64, 51, 44, 49, 51, 57, 52, 64, 49, 48, 44, 49, 49, 57, 64, 50, 49, 44, 49, 53, 57, 54, 64, 49, 48, 44, 51, 51, 50, 64, 56, 44, 49, 55, 53, 48, 64, 49, 48, 44, 49, 55, 53, 48, 64, 52, 44, 49, 52, 48, 48, 64, 49, 48, 44, 51, 53, 48, 64, 56, 44, 49, 52, 48, 48, 64, 49, 55, 44, 49, 52, 48, 48, 64, 50, 49, 44, 51, 56, 53, 48, 64, 49, 55, 44, 55, 48, 48, 64, 49, 52, 44, 49, 52, 48, 48, 64, 52, 44, 51, 53, 48, 64, 49, 48, 44, 51, 53, 48, 64, 52, 44, 49, 48, 53, 48, 64, 49, 48, 44, 49, 52, 48, 48, 64, 52, 44, 49, 52, 48, 48, 64, 53, 44, 57, 52, 53, 48, 64, 49, 48, 44, 55, 48, 48, 64, 49, 52, 44, 51, 53, 48, 64, 49, 48, 44, 55, 48, 48, 64, 50, 51, 44, 52, 53, 53, 48, 64, 51, 44, 51, 53, 48, 64, 52, 44, 49, 52, 48, 48, 64, 49, 52, 44, 50, 52, 53, 48, 64, 50, 49, 44, 49, 52, 48, 48, 64, 51, 44, 49, 55, 53, 48, 64, 52, 44, 51, 53, 48, 64, 56, 44, 51, 53, 48, 64, 49, 54, 44, 49, 52, 48, 48, 64, 50, 49, 44, 51, 53, 48, 48, 64, 52, 44, 49, 48, 53, 48, 64, 54, 44, 51, 53, 48, 64, 56, 44, 51, 53, 48, 64, 57, 44, 49, 55, 53, 48, 64, 49, 49, 44, 51, 53, 48, 64, 50, 44, 49, 52, 48, 48, 64, 51, 44, 53, 50, 53, 48, 64, 53, 44, 51, 53, 48, 64, 54, 44, 55, 48, 48, 64, 57, 44, 49, 55, 53, 48, 64, 49, 48, 44, 50, 52, 53, 48, 64, 49, 51, 44, 52, 50, 48, 48, 64, 49, 52, 44, 51, 53, 48, 64, 49, 55, 44, 51, 53, 48, 64, 50, 48, 44, 49, 52, 48, 48, 64, 49, 48, 44, 53, 50, 53, 48, 64, 50, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'tea-for-two.sh', fileData24, true, true, false);
var fileData25 = [];
fileData25.push.apply(fileData25, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 50, 54, 51, 64, 50, 44, 51, 50, 51, 64, 57, 44, 51, 56, 57, 64, 53, 44, 51, 52, 51, 64, 50, 44, 51, 52, 53, 64, 49, 50, 44, 51, 57, 56, 64, 49, 48, 44, 51, 51, 52, 64, 57, 44, 51, 52, 57, 64, 51, 44, 51, 52, 54, 64, 53, 44, 51, 51, 54, 64, 49, 56, 44, 51, 53, 48, 64, 53, 44, 51, 49, 51, 64, 50, 48, 44, 51, 53, 48, 64, 50, 44, 54, 52, 57, 64, 52, 44, 51, 50, 56, 64, 49, 50, 44, 51, 50, 57, 64, 49, 49, 44, 49, 56, 49, 64, 50, 48, 44, 55, 56, 56, 64, 49, 56, 44, 52, 57, 51, 64, 49, 53, 44, 51, 52, 55, 64, 49, 48, 44, 51, 52, 54, 64, 57, 44, 51, 52, 57, 64, 49, 49, 44, 55, 48, 48, 64, 57, 44, 53, 55, 54, 64, 50, 49, 44, 49, 57, 54, 64, 49, 50, 44, 56, 48, 49, 64, 49, 55, 44, 57, 49, 55, 64, 53, 44, 52, 51, 51, 64, 50, 48, 44, 50, 49, 57, 64, 50, 50, 44, 52, 49, 54, 64, 49, 56, 44, 53, 54, 50, 64, 49, 50, 44, 53, 51, 48, 64, 49, 44, 52, 52, 50, 64, 52, 44, 51, 53, 48, 64, 49, 50, 44, 50, 55, 57, 64, 50, 49, 44, 51, 53, 48, 64, 49, 50, 44, 51, 53, 48, 64, 50, 48, 44, 57, 51, 55, 64, 50, 44, 50, 49, 48, 48, 64, 49, 48, 44, 49, 55, 53, 48, 64, 50, 44, 52, 52, 53, 51, 64, 49, 50, 44, 52, 55, 54, 52, 64, 49, 55, 44, 53, 49, 52, 52, 64, 50, 48, 44, 53, 52, 54, 48, 64, 49, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'the-iglu-cabal.sh', fileData25, true, true, false);
var fileData26 = [];
fileData26.push.apply(fileData26, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 32, 45, 100, 116, 111, 32, 49, 51, 44, 48, 49, 56, 55, 52, 54, 53, 32, 45, 100, 116, 111, 32, 50, 54, 44, 48, 49, 51, 52, 53, 56, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 50, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 57, 44, 55, 54, 48, 64, 51, 50, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 51, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 49, 56, 44, 55, 54, 48, 64, 50, 48, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 49, 50, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 50, 52, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 49, 44, 51, 56, 48, 64, 57, 44, 51, 56, 48, 64, 49, 48, 44, 51, 56, 48, 64, 52, 44, 51, 56, 48, 64, 53, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 53, 44, 55, 54, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 49, 44, 51, 56, 48, 64, 49, 53, 44, 51, 56, 48, 64, 49, 56, 44, 51, 56, 48, 64, 50, 48, 44, 51, 56, 48, 64, 50, 50, 44, 55, 54, 48, 64, 50, 51, 44, 51, 56, 48, 64, 50, 52, 44, 51, 56, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 49, 50, 44, 55, 54, 48, 64, 49, 56, 44, 49, 53, 50, 48, 64, 51, 50, 44, 49, 53, 50, 48, 64, 50, 52, 44, 50, 50, 56, 48, 64, 49, 48, 44, 50, 50, 56, 48, 64, 50, 52, 44, 52, 53, 54, 48, 64, 49, 50, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'three-eighty.sh', fileData26, true, true, false);
var fileData27 = [];
fileData27.push.apply(fileData27, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 50, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 51, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 65, 66, 67, 68, 69, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 68, 93, 91, 67, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 48, 48, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 50, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 57, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 49, 57, 55, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 50, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 69, 65, 66, 67, 68, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 52, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 66, 68, 65, 69, 67, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 68, 93, 91, 67, 69, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 68, 69, 67, 65, 66, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 65, 66, 67, 68, 69, 93, 32, 45, 115, 101, 101, 100, 32, 55, 49, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 45, 115, 116, 45, 110, 97, 109, 101, 32, 49, 57, 32, 92, 10, 45, 45, 112, 114, 101, 108, 117, 100, 101, 32, 34, 50, 56, 48, 48, 64, 48, 44, 50, 56, 48, 48, 64, 51, 44, 49, 55, 53, 48, 64, 48, 44, 51, 49, 53, 48, 64, 49, 54, 44, 51, 53, 48, 64, 51, 44, 55, 48, 48, 64, 48, 44, 49, 52, 48, 48, 64, 51, 44, 50, 52, 53, 48, 64, 52, 44, 51, 53, 48, 64, 48, 44, 49, 52, 48, 48, 64, 52, 44, 55, 48, 48, 64, 49, 54, 44, 50, 49, 48, 48, 64, 48, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 52, 44, 51, 53, 48, 64, 51, 44, 49, 52, 48, 48, 64, 49, 54, 44, 55, 48, 48, 64, 51, 44, 55, 48, 48, 64, 52, 44, 55, 48, 48, 64, 48, 44, 55, 48, 48, 64, 51, 44, 49, 52, 48, 48, 64, 48, 44, 49, 48, 53, 48, 64, 52, 44, 55, 48, 48, 64, 48, 44, 51, 53, 48, 64, 51, 44, 51, 53, 48, 64, 48, 44, 52, 53, 53, 48, 64, 49, 56, 44, 53, 54, 48, 48, 64, 55, 44, 55, 48, 48, 64, 52, 44, 50, 52, 53, 48, 64, 49, 56, 44, 52, 57, 48, 48, 64, 49, 57, 44, 49, 52, 48, 48, 64, 49, 56, 44, 49, 48, 53, 48, 64, 51, 44, 50, 52, 53, 48, 64, 49, 57, 44, 49, 55, 53, 48, 64, 48, 44, 52, 53, 53, 48, 64, 49, 44, 51, 53, 48, 64, 49, 56, 44, 49, 48, 53, 48, 64, 48, 44, 51, 53, 48, 64, 49, 44, 55, 48, 48, 64, 49, 53, 44, 51, 53, 48, 64, 55, 44, 49, 48, 53, 48, 64, 48, 44, 56, 48, 53, 48, 64, 49, 44, 50, 52, 53, 48, 64, 52, 44, 51, 53, 48, 64, 49, 56, 44, 49, 55, 53, 48, 64, 49, 57, 44, 49, 55, 53, 48, 64, 48, 44, 49, 50, 50, 53, 48, 64, 50, 44, 55, 48, 48, 64, 52, 44, 50, 52, 53, 48, 64, 49, 56, 44, 51, 53, 48, 48, 64, 49, 49, 44, 50, 56, 48, 48, 64, 57, 44, 49, 55, 53, 48, 64, 55, 44, 51, 49, 53, 48, 64, 56, 44, 50, 49, 48, 48, 64, 49, 48, 44, 55, 48, 48, 64, 49, 53, 44, 52, 50, 48, 48, 64, 49, 48, 44, 55, 48, 48, 64, 50, 44, 49, 48, 53, 48, 64, 52, 44, 55, 48, 48, 64, 53, 44, 55, 48, 48, 64, 55, 44, 52, 53, 53, 48, 64, 57, 44, 50, 56, 48, 48, 64, 49, 48, 44, 51, 53, 48, 48, 64, 49, 52, 44, 49, 48, 53, 48, 64, 52, 44, 49, 48, 53, 48, 64, 49, 55, 44, 51, 49, 53, 48, 64, 49, 44, 51, 53, 48, 48, 64, 51, 44, 50, 49, 48, 48, 64, 49, 52, 44, 49, 48, 53, 48, 64, 49, 53, 44, 49, 55, 53, 48, 64, 49, 56, 44, 50, 49, 48, 48, 64, 48, 44, 52, 57, 48, 48, 64, 49, 53, 44, 52, 50, 48, 48, 64, 51, 44, 49, 55, 53, 48, 64, 55, 44, 50, 52, 53, 48, 64, 57, 44, 49, 55, 53, 48, 64, 49, 55, 44, 49, 55, 53, 48, 64, 49, 57, 44, 50, 49, 48, 48, 64, 49, 54, 44, 50, 56, 48, 48, 64, 52, 44, 55, 55, 48, 48, 64, 56, 44, 53, 54, 48, 48, 64, 49, 54, 44, 50, 56, 48, 48, 64, 49, 57, 44, 52, 53, 53, 48, 64, 49, 56, 44, 52, 57, 48, 48, 64, 49, 44, 53, 57, 53, 48, 64, 52, 44, 50, 52, 53, 48, 64, 49, 52, 44, 50, 52, 53, 48, 64, 49, 54, 44, 50, 56, 48, 48, 64, 50, 44, 50, 56, 48, 48, 64, 51, 44, 50, 56, 48, 48, 64, 57, 44, 53, 54, 48, 48, 64, 49, 57, 44, 51, 49, 53, 48, 64, 51, 44, 51, 49, 53, 48, 64, 49, 52, 44, 51, 56, 53, 48, 64, 50, 44, 51, 56, 53, 48, 64, 49, 57, 44, 52, 53, 53, 48, 64, 55, 44, 52, 57, 48, 48, 64, 52, 44, 54, 54, 53, 48, 64, 49, 56, 44, 54, 54, 53, 48, 64, 49, 54, 44, 49, 51, 54, 53, 48, 64, 49, 57, 44, 54, 51, 48, 48, 64, 52, 44, 49, 52, 55, 48, 48, 64, 49, 53, 44, 49, 49, 57, 48, 48, 64, 53, 44, 49, 49, 57, 48, 48, 64, 49, 55, 44, 57, 56, 48, 48, 64, 50, 44, 49, 48, 49, 53, 48, 64, 49, 57, 44, 49, 48, 53, 48, 48, 64, 52, 44, 50, 55, 54, 53, 48, 64, 51, 44, 50, 51, 52, 53, 48, 64, 56, 44, 51, 53, 55, 48, 48, 64, 57, 44, 53, 48, 55, 53, 48, 64, 49, 49, 44, 56, 50, 54, 48, 48, 64, 49, 52, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'toons-for-twenty-somethings.sh', fileData27, true, true, false);
var fileData28 = [];
fileData28.push.apply(fileData28, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 56, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 50, 54, 56, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 49, 52, 50, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 50, 44, 48, 46, 51, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 101, 101, 100, 32, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 51, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 49, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 48, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 48, 46, 53, 44, 48, 44, 48, 46, 53, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 50, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 51, 91, 50, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 51, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 115, 111, 102, 116, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 49, 57, 44, 48, 49, 50, 54, 51, 57, 52, 56, 55, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 52, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 100, 116, 111, 32, 49, 54, 44, 48, 91, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 53, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 53, 48, 48, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 54, 44, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 54, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 53, 44, 52, 44, 48, 44, 48, 44, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 55, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 55, 32, 45, 116, 111, 32, 91, 48, 49, 50, 51, 93, 52, 53, 54, 55, 56, 57, 32, 45, 100, 116, 111, 32, 51, 48, 44, 91, 51, 52, 50, 93, 48, 49, 53, 54, 55, 56, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 56, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 52, 48, 44, 50, 44, 52, 48, 44, 48, 44, 52, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 50, 57, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 53, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 48, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 48, 44, 50, 44, 54, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 51, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 48, 48, 44, 49, 53, 48, 48, 44, 57, 57, 44, 50, 44, 54, 53, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 102, 111, 111, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 51, 55, 48, 44, 48, 44, 48, 44, 50, 44, 57, 48, 48, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 49, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 53, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 50, 53, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 50, 53, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 48, 44, 49, 48, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 53, 56, 57, 32, 45, 97, 115, 119, 32, 48, 44, 48, 44, 48, 44, 48, 44, 53, 48, 44, 53, 48, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 113, 117, 105, 99, 107, 95, 115, 97, 110, 100, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 116, 111, 32, 34, 91, 48, 49, 93, 61, 114, 97, 110, 100, 40, 41, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 61, 114, 97, 110, 100, 40, 41, 34, 32, 45, 100, 116, 111, 32, 34, 49, 51, 44, 91, 48, 49, 50, 51, 52, 53, 54, 93, 61, 97, 115, 119, 40, 49, 41, 34, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 34, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 101, 110, 99, 114, 117, 115, 116, 101, 100, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 34, 49, 44, 48, 44, 48, 44, 48, 44, 49, 34, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 55, 54, 57, 32, 45, 115, 112, 32, 114, 58, 116, 102, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 32, 92, 10, 45, 110, 102, 32, 45, 45, 102, 108, 97, 114, 101, 45, 110, 97, 109, 101, 32, 108, 101, 116, 95, 114, 111, 108, 108, 32, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 97, 115, 119, 32, 34, 49, 34, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 32, 45, 111, 112, 116, 32, 45, 111, 112, 116, 45, 116, 111, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 32, 92, 10, 32, 45, 45, 102, 108, 97, 114, 101, 115, 45, 112, 108, 97, 110, 32, 34, 82, 117, 110, 58, 54, 50, 52, 54, 64, 49, 44, 82, 117, 110, 58, 50, 54, 54, 51, 64, 50, 44, 82, 117, 110, 58, 54, 55, 57, 57, 64, 51, 44, 82, 117, 110, 58, 55, 49, 54, 49, 64, 52, 44, 82, 117, 110, 58, 51, 52, 54, 54, 64, 53, 44, 82, 117, 110, 58, 51, 53, 57, 52, 64, 57, 44, 82, 117, 110, 58, 54, 56, 57, 54, 64, 49, 48, 44, 82, 117, 110, 58, 55, 50, 54, 57, 64, 49, 49, 44, 82, 117, 110, 58, 55, 49, 57, 52, 64, 49, 50, 44, 82, 117, 110, 58, 54, 52, 54, 50, 64, 49, 53, 44, 82, 117, 110, 58, 55, 55, 52, 50, 64, 49, 54, 44, 82, 117, 110, 58, 55, 48, 50, 57, 64, 49, 55, 44, 82, 117, 110, 58, 51, 55, 54, 57, 64, 49, 56, 44, 82, 117, 110, 58, 53, 50, 52, 52, 64, 49, 57, 44, 82, 117, 110, 58, 55, 49, 52, 57, 64, 50, 48, 44, 82, 117, 110, 58, 56, 56, 52, 56, 64, 50, 49, 44, 82, 117, 110, 58, 54, 50, 56, 50, 64, 50, 50, 44, 82, 117, 110, 58, 53, 48, 50, 48, 64, 50, 51, 44, 82, 117, 110, 58, 50, 49, 50, 56, 64, 50, 52, 44, 82, 117, 110, 58, 54, 56, 51, 51, 64, 50, 53, 44, 82, 117, 110, 58, 55, 50, 57, 48, 64, 50, 54, 44, 82, 117, 110, 58, 54, 54, 49, 57, 64, 50, 55, 44, 82, 117, 110, 58, 51, 55, 57, 55, 64, 50, 56, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 50, 57, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 51, 48, 44, 82, 117, 110, 58, 51, 49, 56, 52, 64, 51, 49, 44, 82, 117, 110, 58, 51, 48, 48, 48, 64, 102, 111, 111, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 49, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 105, 114, 114, 101, 118, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 111, 110, 95, 112, 97, 114, 101, 110, 116, 115, 95, 104, 97, 108, 102, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 113, 117, 105, 99, 107, 95, 115, 97, 110, 100, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 101, 110, 99, 114, 117, 115, 116, 101, 100, 44, 82, 117, 110, 58, 49, 48, 48, 48, 48, 64, 108, 101, 116, 95, 114, 111, 108, 108, 34, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'video-editing.sh', fileData28, true, true, false);
var fileData29 = [];
fileData29.push.apply(fileData29, [35, 33, 47, 98, 105, 110, 47, 115, 104, 10, 10, 102, 114, 101, 101, 99, 101, 108, 108, 45, 115, 111, 108, 118, 101, 114, 45, 114, 97, 110, 103, 101, 45, 112, 97, 114, 97, 108, 108, 101, 108, 45, 115, 111, 108, 118, 101, 32, 49, 32, 51, 50, 48, 48, 48, 32, 49, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 49, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 50, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 53, 54, 55, 56, 57, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 51, 32, 45, 116, 111, 32, 48, 91, 48, 49, 93, 91, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 97, 45, 115, 116, 97, 114, 32, 45, 116, 111, 32, 48, 49, 50, 51, 52, 54, 55, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10, 45, 45, 109, 101, 116, 104, 111, 100, 32, 114, 97, 110, 100, 111, 109, 45, 100, 102, 115, 32, 45, 115, 101, 101, 100, 32, 52, 32, 45, 116, 111, 32, 48, 91, 48, 49, 50, 51, 52, 54, 55, 93, 32, 45, 115, 116, 101, 112, 32, 53, 48, 48, 32, 45, 110, 115, 116, 32, 92, 10]);
Module['FS_createDataFile']('/fc-solve/share/freecell-solver/presets', 'yellow-brick-road.sh', fileData29, true, true, false);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": []});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is currently only used for LLVM backend under certain
// circumstance: RESERVED_FUNCTION_POINTERS=1, EMULATED_FUNCTION_POINTERS=0.
function addFunction(func, sig) {

  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, stackAlloc, dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 15520,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5258400,
    DYNAMIC_BASE = 5258400,
    DYNAMICTOP_PTR = 15264;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) Math.imul = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};


if (!Math.clz32) Math.clz32 = function(x) {
  var n = 32;
  var y = x >> 16; if (y) { n -= 16; x = y; }
  y = x >> 8; if (y) { n -= 8; x = y; }
  y = x >> 4; if (y) { n -= 4; x = y; }
  y = x >> 2; if (y) { n -= 2; x = y; }
  y = x >> 1; if (y) return n - 2;
  return n - x;
};

if (!Math.trunc) Math.trunc = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

// STATICTOP = STATIC_BASE + 15512;
/* global initializers */  __ATINIT__.push({ func: function() { ___emscripten_environ_constructor() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 15504
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }


  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;

      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }

      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }

      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___lock() {}







  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }

  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};

  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;

              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion

              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }

              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }

              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }

            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};

  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }

        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {

          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();

          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }

          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }

          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};

  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);

          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);

            var src = populate ? remote : local;
            var dst = populate ? local : remote;

            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }

        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;

          var fileStore;

          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }

          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;

          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};

        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };

        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));

        while (check.length) {
          var path = check.pop();
          var stat;

          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }

          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }

          entries[path] = { timestamp: stat.mtime };
        }

        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};

        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);

          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };

            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');

            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;

              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }

              entries[cursor.primaryKey] = { timestamp: cursor.key };

              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;

        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }

        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }

          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }

        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);

          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }

        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;

        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });

        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });

        if (!total) {
          return callback(null);
        }

        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };

        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };

        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });

        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};

  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }

        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }

          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }

          return position;
        }}};

  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};

  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};

  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};

  var _stdin=15280;

  var _stdout=15296;

  var _stderr=15312;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};

        if (!path) return { path: '', node: null };

        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }

        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }

        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);

        // start at the root
        var current = FS.root;
        var current_path = '/';

        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }

          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);

          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }

          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);

              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;

              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }

        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;


        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };

          FS.FSNode.prototype = {};

          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;

          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }

        var node = new FS.FSNode(parent, name, mode, rdev);

        FS.hashAddNode(node);

        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];

        while (check.length) {
          var m = check.pop();

          mounts.push(m);

          check.push.apply(check, m.mounts);
        }

        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }

        FS.syncFSRequests++;

        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }

        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }

        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };

        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;

        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;

          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }

          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }

        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };

        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;

        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;

          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }

        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });

        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }

        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);

        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];

          while (current) {
            var next = current.name_next;

            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }

            current = next;
          }
        });

        // no longer a mountpoint
        node.mounted = null;

        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);

        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see kripken/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops

        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }

        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');

        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');

        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();

        FS.nameTable = new Array(4096);

        FS.mount(MEMFS, {}, '/');

        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();

        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;

        FS.ensureErrnoError();

        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];

        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";

          var chunkSize = 1024*1024; // Chunk size in bytes

          if (!hasByteServing) chunkSize = datalength;

          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");

            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);

            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }

            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });

          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }

          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });

          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }

        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);

        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;

        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }









  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }







  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;

      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }





  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }


  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }







FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiiiii": nullFunc_viiiiii, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_getenv": _getenv, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _getenv=env._getenv;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var STACKTOP = 15520;
  var STACK_MAX = 5258400;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function _fc_solve_find_deal_in_range($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $9 = sp + 8|0;
 $10 = sp;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = $0;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $1;
 $17 = $7;
 $18 = $17;
 HEAP32[$18>>2] = $2;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $3;
 $8 = $4;
 $21 = $6;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($21) + 4)|0;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = $9;
 $28 = $27;
 HEAP32[$28>>2] = $23;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 L1: while(1) {
  $31 = $9;
  $32 = $31;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($31) + 4)|0;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = $7;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + 4)|0;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = ($36|0)<($42|0);
  $44 = ($33>>>0)<=($39>>>0);
  $45 = ($36|0)==($42|0);
  $46 = $45 & $44;
  $47 = $43 | $46;
  if (!($47)) {
   label = 9;
   break;
  }
  $48 = $9;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (_microsoft_rand__calc_init_seedx($50,$53)|0);
  $55 = (getTempRet0() | 0);
  $56 = $10;
  $57 = $56;
  HEAP32[$57>>2] = $54;
  $58 = (($56) + 4)|0;
  $59 = $58;
  HEAP32[$59>>2] = $55;
  $60 = $8;
  $11 = $60;
  $12 = 52;
  while(1) {
   $61 = $12;
   $62 = ($61>>>0)>(1);
   $63 = $9;
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($63) + 4)|0;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   if (!($62)) {
    label = 7;
    break L1;
   }
   $69 = (_microsoft_rand__game_num_rand($10,$65,$68)|0);
   $70 = $12;
   $71 = (($69>>>0) % ($70>>>0))&-1;
   $72 = $11;
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)!=($73|0);
   if ($74) {
    break;
   }
   $75 = $12;
   $76 = (($75) + -1)|0;
   $12 = $76;
   $77 = $11;
   $78 = ((($77)) + 4|0);
   $11 = $78;
  }
  $83 = $9;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = (_i64Add(($85|0),($88|0),1,0)|0);
  $90 = (getTempRet0() | 0);
  $91 = $9;
  $92 = $91;
  HEAP32[$92>>2] = $89;
  $93 = (($91) + 4)|0;
  $94 = $93;
  HEAP32[$94>>2] = $90;
 }
 if ((label|0) == 7) {
  $79 = $5;
  $80 = $79;
  HEAP32[$80>>2] = $65;
  $81 = (($79) + 4)|0;
  $82 = $81;
  HEAP32[$82>>2] = $68;
  $99 = $5;
  $100 = $99;
  $101 = HEAP32[$100>>2]|0;
  $102 = (($99) + 4)|0;
  $103 = $102;
  $104 = HEAP32[$103>>2]|0;
  setTempRet0(($104) | 0);
  STACKTOP = sp;return ($101|0);
 }
 else if ((label|0) == 9) {
  $95 = $5;
  $96 = $95;
  HEAP32[$96>>2] = -1;
  $97 = (($95) + 4)|0;
  $98 = $97;
  HEAP32[$98>>2] = -1;
  $99 = $5;
  $100 = $99;
  $101 = HEAP32[$100>>2]|0;
  $102 = (($99) + 4)|0;
  $103 = $102;
  $104 = HEAP32[$103>>2]|0;
  setTempRet0(($104) | 0);
  STACKTOP = sp;return ($101|0);
 }
 return (0)|0;
}
function _microsoft_rand__calc_init_seedx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(1);
 $14 = ($9>>>0)<(0);
 $15 = ($12|0)==(1);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $18 = $2;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (_i64Subtract(($20|0),($23|0),0,1)|0);
 $25 = (getTempRet0() | 0);
 $26 = $17 ? $20 : $24;
 $17 ? $23 : $25;
 setTempRet0((0) | 0);
 STACKTOP = sp;return ($26|0);
}
function _microsoft_rand__game_num_rand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $4 = $0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $11 = $5;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)<(1);
 $18 = ($13>>>0)<(0);
 $19 = ($16|0)==(1);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $22 = $4;
 if ($21) {
  $23 = (_microsoft_rand_rand($22)|0);
  $6 = $23;
  $24 = $5;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)<(0);
  $31 = ($26>>>0)<(2147483648);
  $32 = ($29|0)==(0);
  $33 = $32 & $31;
  $34 = $30 | $33;
  $35 = $6;
  $36 = $35 | 32768;
  $37 = $34 ? $35 : $36;
  $3 = $37;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 } else {
  $38 = (_microsoft_rand_randp($22)|0);
  $39 = (($38) + 1)|0;
  $3 = $39;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _fc_solve_user__find_deal__alloc() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(332)|0);
 $0 = $1;
 $2 = $0;
 STACKTOP = sp;return ($2|0);
}
function _fc_solve_user__find_deal__free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free($2);
 STACKTOP = sp;return;
}
function _fc_solve_user__find_deal__fill($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 10;
 $7 = $2;
 $5 = $7;
 $8 = $3;
 $9 = (_strlen($8)|0);
 $10 = ($9|0)!=(510);
 if ($10) {
  STACKTOP = sp;return;
 }
 $6 = 0;
 while(1) {
  $11 = $6;
  $12 = ($11>>>0)<(51);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = $6;
  $15 = ($14*10)|0;
  $16 = (($13) + ($15)|0);
  $17 = (_atol($16)|0);
  $18 = $5;
  $19 = $6;
  $20 = (($18) + ($19<<2)|0);
  HEAP32[$20>>2] = $17;
  $21 = $6;
  $22 = (($21) + 1)|0;
  $6 = $22;
 }
 STACKTOP = sp;return;
}
function _fc_solve_user__find_deal__run($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $6 = $7;
 $8 = $6;
 $9 = ((($8)) + 204|0);
 $10 = $4;
 $11 = (_atoll($10)|0);
 $12 = (getTempRet0() | 0);
 $13 = $5;
 $14 = (_atoll($13)|0);
 $15 = (getTempRet0() | 0);
 $16 = $6;
 $17 = (_fc_solve_find_deal_in_range($11,$12,$14,$15,$16)|0);
 $18 = (getTempRet0() | 0);
 $19 = $vararg_buffer;
 $20 = $19;
 HEAP32[$20>>2] = $17;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $18;
 (_sprintf($9,9460,$vararg_buffer)|0);
 $23 = $6;
 $24 = ((($23)) + 204|0);
 STACKTOP = sp;return ($24|0);
}
function _microsoft_rand_rand($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (___muldi3(($5|0),($8|0),214013,0)|0);
 $10 = (getTempRet0() | 0);
 $11 = (_i64Add(($9|0),($10|0),2531011,0)|0);
 $12 = (getTempRet0() | 0);
 $13 = $1;
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = $1;
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_bitshift64Ashr(($21|0),($24|0),16)|0);
 $26 = (getTempRet0() | 0);
 $27 = $25 & 32767;
 STACKTOP = sp;return ($27|0);
}
function _microsoft_rand_randp($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (___muldi3(($5|0),($8|0),214013,0)|0);
 $10 = (getTempRet0() | 0);
 $11 = (_i64Add(($9|0),($10|0),2531011,0)|0);
 $12 = (getTempRet0() | 0);
 $13 = $1;
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = $1;
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_bitshift64Ashr(($21|0),($24|0),16)|0);
 $26 = (getTempRet0() | 0);
 $27 = $25 & 65535;
 STACKTOP = sp;return ($27|0);
}
function _fc_solve_card_stringify($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $2&1;
 $5 = $6;
 $7 = $3;
 $8 = $7&255;
 $9 = (2)?($8 >> 2):($8);
 $10 = $4;
 $11 = $5;
 $12 = $11&1;
 _rank2str($9,$10,$12);
 $13 = $3;
 $14 = $13&255;
 $15 = $14 & 3;
 $16 = $4;
 $17 = (_strchr($16,0)|0);
 _suit2str($15,$17);
 STACKTOP = sp;return;
}
function _rank2str($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $2&1;
 $5 = $6;
 $7 = $4;
 $8 = $5;
 $9 = $8&1;
 $10 = $9 ? 16 : 80;
 $11 = $3;
 $12 = (($10) + ($11<<2)|0);
 (_strcpy($7,$12)|0);
 STACKTOP = sp;return;
}
function _suit2str($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (9465 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $3;
 HEAP8[$7>>0] = $6;
 $8 = $3;
 $9 = ((($8)) + 1|0);
 HEAP8[$9>>0] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_check_and_add_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $6 = $8;
 $9 = $3;
 $10 = $4;
 _fc_solve_cache_stacks($9,$10);
 $11 = $4;
 $12 = HEAP32[$11>>2]|0;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $6;
 $17 = ((($16)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 _fc_solve_canonize_state($12,$15,$19);
 $20 = $6;
 $21 = $3;
 $22 = $4;
 $23 = $5;
 $24 = $6;
 $25 = ((($24)) + 32|0);
 $26 = $4;
 $27 = (_FCS_STATE_kv_to_collectible($26)|0);
 $28 = $4;
 $29 = HEAP32[$28>>2]|0;
 $30 = (_XXH64($29,56,0,0)|0);
 $31 = (getTempRet0() | 0);
 $32 = (_fc_solve_hash_insert($25,$27,$30)|0);
 $33 = (_handle_existing_void($20,$21,$22,$23,$32)|0);
 STACKTOP = sp;return ($33|0);
}
function _fc_solve_cache_stacks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 48|0;
 $2 = $0;
 $3 = $1;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $4 = $16;
 $17 = $4;
 ;HEAP8[$5>>0]=HEAP8[$17>>0]|0;HEAP8[$5+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$17+3>>0]|0;
 $18 = $3;
 $19 = HEAP32[$18>>2]|0;
 $6 = $19;
 $20 = $3;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $7 = $22;
 $23 = $2;
 $24 = ((($23)) + 20|0);
 $8 = $24;
 $25 = $6;
 $9 = $25;
 $10 = 0;
 while(1) {
  $26 = $10;
  $27 = ((($5)) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ($26|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = $7;
  $32 = ((($31)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $10;
  $35 = 1 << $34;
  $36 = $33 & $35;
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = $6;
   $39 = $10;
   $40 = (($38) + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $11 = $41;
   $42 = $11;
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = (($44) + 1)|0;
   $12 = $45;
   $46 = $8;
   $47 = $12;
   $48 = (_fcs_compact_alloc_ptr($46,$47)|0);
   $13 = $48;
   $49 = $13;
   $50 = $11;
   $51 = $12;
   _memcpy(($49|0),($50|0),($51|0))|0;
   $52 = $13;
   $53 = $9;
   HEAP32[$53>>2] = $52;
   $54 = $6;
   $55 = $10;
   $56 = (($54) + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $11 = $57;
   $58 = $4;
   $59 = ((($58)) + 80|0);
   $60 = $11;
   $61 = $9;
   $62 = HEAP32[$61>>2]|0;
   $63 = $12;
   $64 = (_XXH64($62,$63,0,0)|0);
   $65 = (getTempRet0() | 0);
   $66 = (_fc_solve_hash_insert($59,$60,$64)|0);
   $14 = $66;
   $67 = $14;
   $68 = ($67|0)!=(0|0);
   if ($68) {
    $69 = $8;
    _fcs_compact_alloc_release($69);
    $70 = $14;
    $71 = $9;
    HEAP32[$71>>2] = $70;
   }
  }
  $72 = $10;
  $73 = (($72) + 1)|0;
  $10 = $73;
  $74 = $9;
  $75 = ((($74)) + 4|0);
  $9 = $75;
 }
 STACKTOP = sp;return;
}
function _FCS_STATE_kv_to_collectible($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _XXH64($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0;
 var $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0;
 var $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0;
 var $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0;
 var $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0;
 var $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0;
 var $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0;
 var $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0;
 var $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0;
 var $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0;
 var $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0;
 var $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0;
 var $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0;
 var $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0;
 var $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0;
 var $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(832|0);
 $8 = sp + 392|0;
 $12 = sp + 384|0;
 $16 = sp + 376|0;
 $20 = sp + 368|0;
 $24 = sp + 360|0;
 $30 = sp + 352|0;
 $35 = sp + 344|0;
 $37 = sp + 336|0;
 $38 = sp + 328|0;
 $39 = sp + 320|0;
 $40 = sp + 312|0;
 $41 = sp + 304|0;
 $46 = sp + 296|0;
 $50 = sp + 288|0;
 $54 = sp + 280|0;
 $58 = sp + 272|0;
 $62 = sp + 264|0;
 $68 = sp + 256|0;
 $73 = sp + 248|0;
 $75 = sp + 240|0;
 $76 = sp + 232|0;
 $77 = sp + 224|0;
 $78 = sp + 216|0;
 $79 = sp + 208|0;
 $84 = sp + 200|0;
 $88 = sp + 192|0;
 $92 = sp + 184|0;
 $96 = sp + 176|0;
 $100 = sp + 168|0;
 $106 = sp + 160|0;
 $111 = sp + 152|0;
 $113 = sp + 144|0;
 $114 = sp + 136|0;
 $115 = sp + 128|0;
 $116 = sp + 120|0;
 $117 = sp + 112|0;
 $122 = sp + 104|0;
 $126 = sp + 96|0;
 $130 = sp + 88|0;
 $134 = sp + 80|0;
 $138 = sp + 72|0;
 $144 = sp + 64|0;
 $149 = sp + 56|0;
 $151 = sp + 48|0;
 $152 = sp + 40|0;
 $153 = sp + 32|0;
 $154 = sp + 24|0;
 $155 = sp + 16|0;
 $156 = sp + 8|0;
 $159 = sp;
 $157 = $0;
 $158 = $1;
 $161 = $159;
 $162 = $161;
 HEAP32[$162>>2] = $2;
 $163 = (($161) + 4)|0;
 $164 = $163;
 HEAP32[$164>>2] = $3;
 $165 = HEAP8[8944]|0;
 $166 = $165 << 24 >> 24;
 $160 = $166;
 $167 = $157;
 $168 = $167;
 $169 = $168 & 7;
 $170 = ($169|0)==(0);
 $171 = $160;
 $172 = ($171|0)==(1);
 $173 = $157;
 $174 = $158;
 $175 = $159;
 $176 = $175;
 $177 = HEAP32[$176>>2]|0;
 $178 = (($175) + 4)|0;
 $179 = $178;
 $180 = HEAP32[$179>>2]|0;
 if ($170) {
  if ($172) {
   $142 = $173;
   $143 = $174;
   $181 = $144;
   $182 = $181;
   HEAP32[$182>>2] = $177;
   $183 = (($181) + 4)|0;
   $184 = $183;
   HEAP32[$184>>2] = $180;
   $145 = 1;
   $146 = 0;
   $185 = $142;
   $147 = $185;
   $186 = $147;
   $187 = $143;
   $188 = (($186) + ($187)|0);
   $148 = $188;
   $189 = $143;
   $190 = ($189>>>0)>=(32);
   if ($190) {
    $191 = $148;
    $192 = ((($191)) + -32|0);
    $150 = $192;
    $193 = $144;
    $194 = $193;
    $195 = HEAP32[$194>>2]|0;
    $196 = (($193) + 4)|0;
    $197 = $196;
    $198 = HEAP32[$197>>2]|0;
    $199 = (_i64Add(($195|0),($198|0),-2048144761,-1640531535)|0);
    $200 = (getTempRet0() | 0);
    $201 = (_i64Add(($199|0),($200|0),668265295,-1028477379)|0);
    $202 = (getTempRet0() | 0);
    $203 = $151;
    $204 = $203;
    HEAP32[$204>>2] = $201;
    $205 = (($203) + 4)|0;
    $206 = $205;
    HEAP32[$206>>2] = $202;
    $207 = $144;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (_i64Add(($209|0),($212|0),668265295,-1028477379)|0);
    $214 = (getTempRet0() | 0);
    $215 = $152;
    $216 = $215;
    HEAP32[$216>>2] = $213;
    $217 = (($215) + 4)|0;
    $218 = $217;
    HEAP32[$218>>2] = $214;
    $219 = $144;
    $220 = $219;
    $221 = HEAP32[$220>>2]|0;
    $222 = (($219) + 4)|0;
    $223 = $222;
    $224 = HEAP32[$223>>2]|0;
    $225 = $153;
    $226 = $225;
    HEAP32[$226>>2] = $221;
    $227 = (($225) + 4)|0;
    $228 = $227;
    HEAP32[$228>>2] = $224;
    $229 = $144;
    $230 = $229;
    $231 = HEAP32[$230>>2]|0;
    $232 = (($229) + 4)|0;
    $233 = $232;
    $234 = HEAP32[$233>>2]|0;
    $235 = (_i64Subtract(($231|0),($234|0),-2048144761,-1640531535)|0);
    $236 = (getTempRet0() | 0);
    $237 = $154;
    $238 = $237;
    HEAP32[$238>>2] = $235;
    $239 = (($237) + 4)|0;
    $240 = $239;
    HEAP32[$240>>2] = $236;
    while(1) {
     $241 = $151;
     $242 = $241;
     $243 = HEAP32[$242>>2]|0;
     $244 = (($241) + 4)|0;
     $245 = $244;
     $246 = HEAP32[$245>>2]|0;
     $247 = $147;
     $248 = $145;
     $249 = $146;
     $139 = $247;
     $140 = $248;
     $141 = $249;
     $250 = $141;
     $251 = ($250|0)==(1);
     $252 = $140;
     $253 = ($252|0)==(1);
     $254 = $139;
     if ($251) {
      $255 = (_XXH_read64($254)|0);
      $256 = (getTempRet0() | 0);
      if ($253) {
       $261 = $255;$264 = $256;
      } else {
       $257 = (_XXH_swap64($255,$256)|0);
       $258 = (getTempRet0() | 0);
       $261 = $257;$264 = $258;
      }
      $259 = $138;
      $260 = $259;
      HEAP32[$260>>2] = $261;
      $262 = (($259) + 4)|0;
      $263 = $262;
      HEAP32[$263>>2] = $264;
     } else {
      $265 = $254;
      $266 = $265;
      $267 = HEAP32[$266>>2]|0;
      $268 = (($265) + 4)|0;
      $269 = $268;
      $270 = HEAP32[$269>>2]|0;
      if ($253) {
       $275 = $267;$278 = $270;
      } else {
       $271 = (_XXH_swap64($267,$270)|0);
       $272 = (getTempRet0() | 0);
       $275 = $271;$278 = $272;
      }
      $273 = $138;
      $274 = $273;
      HEAP32[$274>>2] = $275;
      $276 = (($273) + 4)|0;
      $277 = $276;
      HEAP32[$277>>2] = $278;
     }
     $279 = $138;
     $280 = $279;
     $281 = HEAP32[$280>>2]|0;
     $282 = (($279) + 4)|0;
     $283 = $282;
     $284 = HEAP32[$283>>2]|0;
     $285 = (_XXH64_round($243,$246,$281,$284)|0);
     $286 = (getTempRet0() | 0);
     $287 = $151;
     $288 = $287;
     HEAP32[$288>>2] = $285;
     $289 = (($287) + 4)|0;
     $290 = $289;
     HEAP32[$290>>2] = $286;
     $291 = $147;
     $292 = ((($291)) + 8|0);
     $147 = $292;
     $293 = $152;
     $294 = $293;
     $295 = HEAP32[$294>>2]|0;
     $296 = (($293) + 4)|0;
     $297 = $296;
     $298 = HEAP32[$297>>2]|0;
     $299 = $147;
     $300 = $145;
     $301 = $146;
     $135 = $299;
     $136 = $300;
     $137 = $301;
     $302 = $137;
     $303 = ($302|0)==(1);
     $304 = $136;
     $305 = ($304|0)==(1);
     $306 = $135;
     if ($303) {
      $307 = (_XXH_read64($306)|0);
      $308 = (getTempRet0() | 0);
      if ($305) {
       $313 = $307;$316 = $308;
      } else {
       $309 = (_XXH_swap64($307,$308)|0);
       $310 = (getTempRet0() | 0);
       $313 = $309;$316 = $310;
      }
      $311 = $134;
      $312 = $311;
      HEAP32[$312>>2] = $313;
      $314 = (($311) + 4)|0;
      $315 = $314;
      HEAP32[$315>>2] = $316;
     } else {
      $317 = $306;
      $318 = $317;
      $319 = HEAP32[$318>>2]|0;
      $320 = (($317) + 4)|0;
      $321 = $320;
      $322 = HEAP32[$321>>2]|0;
      if ($305) {
       $327 = $319;$330 = $322;
      } else {
       $323 = (_XXH_swap64($319,$322)|0);
       $324 = (getTempRet0() | 0);
       $327 = $323;$330 = $324;
      }
      $325 = $134;
      $326 = $325;
      HEAP32[$326>>2] = $327;
      $328 = (($325) + 4)|0;
      $329 = $328;
      HEAP32[$329>>2] = $330;
     }
     $331 = $134;
     $332 = $331;
     $333 = HEAP32[$332>>2]|0;
     $334 = (($331) + 4)|0;
     $335 = $334;
     $336 = HEAP32[$335>>2]|0;
     $337 = (_XXH64_round($295,$298,$333,$336)|0);
     $338 = (getTempRet0() | 0);
     $339 = $152;
     $340 = $339;
     HEAP32[$340>>2] = $337;
     $341 = (($339) + 4)|0;
     $342 = $341;
     HEAP32[$342>>2] = $338;
     $343 = $147;
     $344 = ((($343)) + 8|0);
     $147 = $344;
     $345 = $153;
     $346 = $345;
     $347 = HEAP32[$346>>2]|0;
     $348 = (($345) + 4)|0;
     $349 = $348;
     $350 = HEAP32[$349>>2]|0;
     $351 = $147;
     $352 = $145;
     $353 = $146;
     $131 = $351;
     $132 = $352;
     $133 = $353;
     $354 = $133;
     $355 = ($354|0)==(1);
     $356 = $132;
     $357 = ($356|0)==(1);
     $358 = $131;
     if ($355) {
      $359 = (_XXH_read64($358)|0);
      $360 = (getTempRet0() | 0);
      if ($357) {
       $365 = $359;$368 = $360;
      } else {
       $361 = (_XXH_swap64($359,$360)|0);
       $362 = (getTempRet0() | 0);
       $365 = $361;$368 = $362;
      }
      $363 = $130;
      $364 = $363;
      HEAP32[$364>>2] = $365;
      $366 = (($363) + 4)|0;
      $367 = $366;
      HEAP32[$367>>2] = $368;
     } else {
      $369 = $358;
      $370 = $369;
      $371 = HEAP32[$370>>2]|0;
      $372 = (($369) + 4)|0;
      $373 = $372;
      $374 = HEAP32[$373>>2]|0;
      if ($357) {
       $379 = $371;$382 = $374;
      } else {
       $375 = (_XXH_swap64($371,$374)|0);
       $376 = (getTempRet0() | 0);
       $379 = $375;$382 = $376;
      }
      $377 = $130;
      $378 = $377;
      HEAP32[$378>>2] = $379;
      $380 = (($377) + 4)|0;
      $381 = $380;
      HEAP32[$381>>2] = $382;
     }
     $383 = $130;
     $384 = $383;
     $385 = HEAP32[$384>>2]|0;
     $386 = (($383) + 4)|0;
     $387 = $386;
     $388 = HEAP32[$387>>2]|0;
     $389 = (_XXH64_round($347,$350,$385,$388)|0);
     $390 = (getTempRet0() | 0);
     $391 = $153;
     $392 = $391;
     HEAP32[$392>>2] = $389;
     $393 = (($391) + 4)|0;
     $394 = $393;
     HEAP32[$394>>2] = $390;
     $395 = $147;
     $396 = ((($395)) + 8|0);
     $147 = $396;
     $397 = $154;
     $398 = $397;
     $399 = HEAP32[$398>>2]|0;
     $400 = (($397) + 4)|0;
     $401 = $400;
     $402 = HEAP32[$401>>2]|0;
     $403 = $147;
     $404 = $145;
     $405 = $146;
     $127 = $403;
     $128 = $404;
     $129 = $405;
     $406 = $129;
     $407 = ($406|0)==(1);
     $408 = $128;
     $409 = ($408|0)==(1);
     $410 = $127;
     if ($407) {
      $411 = (_XXH_read64($410)|0);
      $412 = (getTempRet0() | 0);
      if ($409) {
       $417 = $411;$420 = $412;
      } else {
       $413 = (_XXH_swap64($411,$412)|0);
       $414 = (getTempRet0() | 0);
       $417 = $413;$420 = $414;
      }
      $415 = $126;
      $416 = $415;
      HEAP32[$416>>2] = $417;
      $418 = (($415) + 4)|0;
      $419 = $418;
      HEAP32[$419>>2] = $420;
     } else {
      $421 = $410;
      $422 = $421;
      $423 = HEAP32[$422>>2]|0;
      $424 = (($421) + 4)|0;
      $425 = $424;
      $426 = HEAP32[$425>>2]|0;
      if ($409) {
       $431 = $423;$434 = $426;
      } else {
       $427 = (_XXH_swap64($423,$426)|0);
       $428 = (getTempRet0() | 0);
       $431 = $427;$434 = $428;
      }
      $429 = $126;
      $430 = $429;
      HEAP32[$430>>2] = $431;
      $432 = (($429) + 4)|0;
      $433 = $432;
      HEAP32[$433>>2] = $434;
     }
     $435 = $126;
     $436 = $435;
     $437 = HEAP32[$436>>2]|0;
     $438 = (($435) + 4)|0;
     $439 = $438;
     $440 = HEAP32[$439>>2]|0;
     $441 = (_XXH64_round($399,$402,$437,$440)|0);
     $442 = (getTempRet0() | 0);
     $443 = $154;
     $444 = $443;
     HEAP32[$444>>2] = $441;
     $445 = (($443) + 4)|0;
     $446 = $445;
     HEAP32[$446>>2] = $442;
     $447 = $147;
     $448 = ((($447)) + 8|0);
     $147 = $448;
     $449 = $147;
     $450 = $150;
     $451 = ($449>>>0)<=($450>>>0);
     if (!($451)) {
      break;
     }
    }
    $452 = $151;
    $453 = $452;
    $454 = HEAP32[$453>>2]|0;
    $455 = (($452) + 4)|0;
    $456 = $455;
    $457 = HEAP32[$456>>2]|0;
    $458 = (_bitshift64Shl(($454|0),($457|0),1)|0);
    $459 = (getTempRet0() | 0);
    $460 = $151;
    $461 = $460;
    $462 = HEAP32[$461>>2]|0;
    $463 = (($460) + 4)|0;
    $464 = $463;
    $465 = HEAP32[$464>>2]|0;
    $466 = (_bitshift64Lshr(($462|0),($465|0),63)|0);
    $467 = (getTempRet0() | 0);
    $468 = $458 | $466;
    $469 = $459 | $467;
    $470 = $152;
    $471 = $470;
    $472 = HEAP32[$471>>2]|0;
    $473 = (($470) + 4)|0;
    $474 = $473;
    $475 = HEAP32[$474>>2]|0;
    $476 = (_bitshift64Shl(($472|0),($475|0),7)|0);
    $477 = (getTempRet0() | 0);
    $478 = $152;
    $479 = $478;
    $480 = HEAP32[$479>>2]|0;
    $481 = (($478) + 4)|0;
    $482 = $481;
    $483 = HEAP32[$482>>2]|0;
    $484 = (_bitshift64Lshr(($480|0),($483|0),57)|0);
    $485 = (getTempRet0() | 0);
    $486 = $476 | $484;
    $487 = $477 | $485;
    $488 = (_i64Add(($468|0),($469|0),($486|0),($487|0))|0);
    $489 = (getTempRet0() | 0);
    $490 = $153;
    $491 = $490;
    $492 = HEAP32[$491>>2]|0;
    $493 = (($490) + 4)|0;
    $494 = $493;
    $495 = HEAP32[$494>>2]|0;
    $496 = (_bitshift64Shl(($492|0),($495|0),12)|0);
    $497 = (getTempRet0() | 0);
    $498 = $153;
    $499 = $498;
    $500 = HEAP32[$499>>2]|0;
    $501 = (($498) + 4)|0;
    $502 = $501;
    $503 = HEAP32[$502>>2]|0;
    $504 = (_bitshift64Lshr(($500|0),($503|0),52)|0);
    $505 = (getTempRet0() | 0);
    $506 = $496 | $504;
    $507 = $497 | $505;
    $508 = (_i64Add(($488|0),($489|0),($506|0),($507|0))|0);
    $509 = (getTempRet0() | 0);
    $510 = $154;
    $511 = $510;
    $512 = HEAP32[$511>>2]|0;
    $513 = (($510) + 4)|0;
    $514 = $513;
    $515 = HEAP32[$514>>2]|0;
    $516 = (_bitshift64Shl(($512|0),($515|0),18)|0);
    $517 = (getTempRet0() | 0);
    $518 = $154;
    $519 = $518;
    $520 = HEAP32[$519>>2]|0;
    $521 = (($518) + 4)|0;
    $522 = $521;
    $523 = HEAP32[$522>>2]|0;
    $524 = (_bitshift64Lshr(($520|0),($523|0),46)|0);
    $525 = (getTempRet0() | 0);
    $526 = $516 | $524;
    $527 = $517 | $525;
    $528 = (_i64Add(($508|0),($509|0),($526|0),($527|0))|0);
    $529 = (getTempRet0() | 0);
    $530 = $149;
    $531 = $530;
    HEAP32[$531>>2] = $528;
    $532 = (($530) + 4)|0;
    $533 = $532;
    HEAP32[$533>>2] = $529;
    $534 = $149;
    $535 = $534;
    $536 = HEAP32[$535>>2]|0;
    $537 = (($534) + 4)|0;
    $538 = $537;
    $539 = HEAP32[$538>>2]|0;
    $540 = $151;
    $541 = $540;
    $542 = HEAP32[$541>>2]|0;
    $543 = (($540) + 4)|0;
    $544 = $543;
    $545 = HEAP32[$544>>2]|0;
    $546 = (_XXH64_mergeRound($536,$539,$542,$545)|0);
    $547 = (getTempRet0() | 0);
    $548 = $149;
    $549 = $548;
    HEAP32[$549>>2] = $546;
    $550 = (($548) + 4)|0;
    $551 = $550;
    HEAP32[$551>>2] = $547;
    $552 = $149;
    $553 = $552;
    $554 = HEAP32[$553>>2]|0;
    $555 = (($552) + 4)|0;
    $556 = $555;
    $557 = HEAP32[$556>>2]|0;
    $558 = $152;
    $559 = $558;
    $560 = HEAP32[$559>>2]|0;
    $561 = (($558) + 4)|0;
    $562 = $561;
    $563 = HEAP32[$562>>2]|0;
    $564 = (_XXH64_mergeRound($554,$557,$560,$563)|0);
    $565 = (getTempRet0() | 0);
    $566 = $149;
    $567 = $566;
    HEAP32[$567>>2] = $564;
    $568 = (($566) + 4)|0;
    $569 = $568;
    HEAP32[$569>>2] = $565;
    $570 = $149;
    $571 = $570;
    $572 = HEAP32[$571>>2]|0;
    $573 = (($570) + 4)|0;
    $574 = $573;
    $575 = HEAP32[$574>>2]|0;
    $576 = $153;
    $577 = $576;
    $578 = HEAP32[$577>>2]|0;
    $579 = (($576) + 4)|0;
    $580 = $579;
    $581 = HEAP32[$580>>2]|0;
    $582 = (_XXH64_mergeRound($572,$575,$578,$581)|0);
    $583 = (getTempRet0() | 0);
    $584 = $149;
    $585 = $584;
    HEAP32[$585>>2] = $582;
    $586 = (($584) + 4)|0;
    $587 = $586;
    HEAP32[$587>>2] = $583;
    $588 = $149;
    $589 = $588;
    $590 = HEAP32[$589>>2]|0;
    $591 = (($588) + 4)|0;
    $592 = $591;
    $593 = HEAP32[$592>>2]|0;
    $594 = $154;
    $595 = $594;
    $596 = HEAP32[$595>>2]|0;
    $597 = (($594) + 4)|0;
    $598 = $597;
    $599 = HEAP32[$598>>2]|0;
    $600 = (_XXH64_mergeRound($590,$593,$596,$599)|0);
    $601 = (getTempRet0() | 0);
    $602 = $149;
    $603 = $602;
    HEAP32[$603>>2] = $600;
    $604 = (($602) + 4)|0;
    $605 = $604;
    HEAP32[$605>>2] = $601;
   } else {
    $606 = $144;
    $607 = $606;
    $608 = HEAP32[$607>>2]|0;
    $609 = (($606) + 4)|0;
    $610 = $609;
    $611 = HEAP32[$610>>2]|0;
    $612 = (_i64Add(($608|0),($611|0),374761413,668265263)|0);
    $613 = (getTempRet0() | 0);
    $614 = $149;
    $615 = $614;
    HEAP32[$615>>2] = $612;
    $616 = (($614) + 4)|0;
    $617 = $616;
    HEAP32[$617>>2] = $613;
   }
   $618 = $143;
   $619 = $149;
   $620 = $619;
   $621 = HEAP32[$620>>2]|0;
   $622 = (($619) + 4)|0;
   $623 = $622;
   $624 = HEAP32[$623>>2]|0;
   $625 = (_i64Add(($621|0),($624|0),($618|0),0)|0);
   $626 = (getTempRet0() | 0);
   $627 = $149;
   $628 = $627;
   HEAP32[$628>>2] = $625;
   $629 = (($627) + 4)|0;
   $630 = $629;
   HEAP32[$630>>2] = $626;
   while(1) {
    $631 = $147;
    $632 = ((($631)) + 8|0);
    $633 = $148;
    $634 = ($632>>>0)<=($633>>>0);
    $635 = $147;
    if (!($634)) {
     break;
    }
    $636 = $145;
    $637 = $146;
    $123 = $635;
    $124 = $636;
    $125 = $637;
    $638 = $125;
    $639 = ($638|0)==(1);
    $640 = $124;
    $641 = ($640|0)==(1);
    $642 = $123;
    if ($639) {
     $643 = (_XXH_read64($642)|0);
     $644 = (getTempRet0() | 0);
     if ($641) {
      $649 = $643;$652 = $644;
     } else {
      $645 = (_XXH_swap64($643,$644)|0);
      $646 = (getTempRet0() | 0);
      $649 = $645;$652 = $646;
     }
     $647 = $122;
     $648 = $647;
     HEAP32[$648>>2] = $649;
     $650 = (($647) + 4)|0;
     $651 = $650;
     HEAP32[$651>>2] = $652;
    } else {
     $653 = $642;
     $654 = $653;
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + 4)|0;
     $657 = $656;
     $658 = HEAP32[$657>>2]|0;
     if ($641) {
      $663 = $655;$666 = $658;
     } else {
      $659 = (_XXH_swap64($655,$658)|0);
      $660 = (getTempRet0() | 0);
      $663 = $659;$666 = $660;
     }
     $661 = $122;
     $662 = $661;
     HEAP32[$662>>2] = $663;
     $664 = (($661) + 4)|0;
     $665 = $664;
     HEAP32[$665>>2] = $666;
    }
    $667 = $122;
    $668 = $667;
    $669 = HEAP32[$668>>2]|0;
    $670 = (($667) + 4)|0;
    $671 = $670;
    $672 = HEAP32[$671>>2]|0;
    $673 = (_XXH64_round(0,0,$669,$672)|0);
    $674 = (getTempRet0() | 0);
    $675 = $155;
    $676 = $675;
    HEAP32[$676>>2] = $673;
    $677 = (($675) + 4)|0;
    $678 = $677;
    HEAP32[$678>>2] = $674;
    $679 = $155;
    $680 = $679;
    $681 = HEAP32[$680>>2]|0;
    $682 = (($679) + 4)|0;
    $683 = $682;
    $684 = HEAP32[$683>>2]|0;
    $685 = $149;
    $686 = $685;
    $687 = HEAP32[$686>>2]|0;
    $688 = (($685) + 4)|0;
    $689 = $688;
    $690 = HEAP32[$689>>2]|0;
    $691 = $687 ^ $681;
    $692 = $690 ^ $684;
    $693 = $149;
    $694 = $693;
    HEAP32[$694>>2] = $691;
    $695 = (($693) + 4)|0;
    $696 = $695;
    HEAP32[$696>>2] = $692;
    $697 = $149;
    $698 = $697;
    $699 = HEAP32[$698>>2]|0;
    $700 = (($697) + 4)|0;
    $701 = $700;
    $702 = HEAP32[$701>>2]|0;
    $703 = (_bitshift64Shl(($699|0),($702|0),27)|0);
    $704 = (getTempRet0() | 0);
    $705 = $149;
    $706 = $705;
    $707 = HEAP32[$706>>2]|0;
    $708 = (($705) + 4)|0;
    $709 = $708;
    $710 = HEAP32[$709>>2]|0;
    $711 = (_bitshift64Lshr(($707|0),($710|0),37)|0);
    $712 = (getTempRet0() | 0);
    $713 = $703 | $711;
    $714 = $704 | $712;
    $715 = (___muldi3(($713|0),($714|0),-2048144761,-1640531535)|0);
    $716 = (getTempRet0() | 0);
    $717 = (_i64Add(($715|0),($716|0),-1028477341,-2048144777)|0);
    $718 = (getTempRet0() | 0);
    $719 = $149;
    $720 = $719;
    HEAP32[$720>>2] = $717;
    $721 = (($719) + 4)|0;
    $722 = $721;
    HEAP32[$722>>2] = $718;
    $723 = $147;
    $724 = ((($723)) + 8|0);
    $147 = $724;
   }
   $725 = ((($635)) + 4|0);
   $726 = $148;
   $727 = ($725>>>0)<=($726>>>0);
   if ($727) {
    $728 = $147;
    $729 = $145;
    $730 = $146;
    $119 = $728;
    $120 = $729;
    $121 = $730;
    $731 = $121;
    $732 = ($731|0)==(1);
    $733 = $120;
    $734 = ($733|0)==(1);
    $735 = $119;
    if ($732) {
     $736 = (_XXH_read32($735)|0);
     if ($734) {
      $738 = $736;
     } else {
      $737 = (_XXH_swap32($736)|0);
      $738 = $737;
     }
     $118 = $738;
    } else {
     $739 = HEAP32[$735>>2]|0;
     if ($734) {
      $741 = $739;
     } else {
      $740 = (_XXH_swap32($739)|0);
      $741 = $740;
     }
     $118 = $741;
    }
    $742 = $118;
    $743 = (___muldi3(($742|0),0,-2048144761,-1640531535)|0);
    $744 = (getTempRet0() | 0);
    $745 = $149;
    $746 = $745;
    $747 = HEAP32[$746>>2]|0;
    $748 = (($745) + 4)|0;
    $749 = $748;
    $750 = HEAP32[$749>>2]|0;
    $751 = $747 ^ $743;
    $752 = $750 ^ $744;
    $753 = $149;
    $754 = $753;
    HEAP32[$754>>2] = $751;
    $755 = (($753) + 4)|0;
    $756 = $755;
    HEAP32[$756>>2] = $752;
    $757 = $149;
    $758 = $757;
    $759 = HEAP32[$758>>2]|0;
    $760 = (($757) + 4)|0;
    $761 = $760;
    $762 = HEAP32[$761>>2]|0;
    $763 = (_bitshift64Shl(($759|0),($762|0),23)|0);
    $764 = (getTempRet0() | 0);
    $765 = $149;
    $766 = $765;
    $767 = HEAP32[$766>>2]|0;
    $768 = (($765) + 4)|0;
    $769 = $768;
    $770 = HEAP32[$769>>2]|0;
    $771 = (_bitshift64Lshr(($767|0),($770|0),41)|0);
    $772 = (getTempRet0() | 0);
    $773 = $763 | $771;
    $774 = $764 | $772;
    $775 = (___muldi3(($773|0),($774|0),668265295,-1028477379)|0);
    $776 = (getTempRet0() | 0);
    $777 = (_i64Add(($775|0),($776|0),-1640531463,374761393)|0);
    $778 = (getTempRet0() | 0);
    $779 = $149;
    $780 = $779;
    HEAP32[$780>>2] = $777;
    $781 = (($779) + 4)|0;
    $782 = $781;
    HEAP32[$782>>2] = $778;
    $783 = $147;
    $784 = ((($783)) + 4|0);
    $147 = $784;
   }
   while(1) {
    $785 = $147;
    $786 = $148;
    $787 = ($785>>>0)<($786>>>0);
    if (!($787)) {
     break;
    }
    $788 = $147;
    $789 = HEAP8[$788>>0]|0;
    $790 = $789&255;
    $791 = (___muldi3(($790|0),0,374761413,668265263)|0);
    $792 = (getTempRet0() | 0);
    $793 = $149;
    $794 = $793;
    $795 = HEAP32[$794>>2]|0;
    $796 = (($793) + 4)|0;
    $797 = $796;
    $798 = HEAP32[$797>>2]|0;
    $799 = $795 ^ $791;
    $800 = $798 ^ $792;
    $801 = $149;
    $802 = $801;
    HEAP32[$802>>2] = $799;
    $803 = (($801) + 4)|0;
    $804 = $803;
    HEAP32[$804>>2] = $800;
    $805 = $149;
    $806 = $805;
    $807 = HEAP32[$806>>2]|0;
    $808 = (($805) + 4)|0;
    $809 = $808;
    $810 = HEAP32[$809>>2]|0;
    $811 = (_bitshift64Shl(($807|0),($810|0),11)|0);
    $812 = (getTempRet0() | 0);
    $813 = $149;
    $814 = $813;
    $815 = HEAP32[$814>>2]|0;
    $816 = (($813) + 4)|0;
    $817 = $816;
    $818 = HEAP32[$817>>2]|0;
    $819 = (_bitshift64Lshr(($815|0),($818|0),53)|0);
    $820 = (getTempRet0() | 0);
    $821 = $811 | $819;
    $822 = $812 | $820;
    $823 = (___muldi3(($821|0),($822|0),-2048144761,-1640531535)|0);
    $824 = (getTempRet0() | 0);
    $825 = $149;
    $826 = $825;
    HEAP32[$826>>2] = $823;
    $827 = (($825) + 4)|0;
    $828 = $827;
    HEAP32[$828>>2] = $824;
    $829 = $147;
    $830 = ((($829)) + 1|0);
    $147 = $830;
   }
   $831 = $149;
   $832 = $831;
   $833 = HEAP32[$832>>2]|0;
   $834 = (($831) + 4)|0;
   $835 = $834;
   $836 = HEAP32[$835>>2]|0;
   $837 = (_bitshift64Lshr(($833|0),($836|0),33)|0);
   $838 = (getTempRet0() | 0);
   $839 = $149;
   $840 = $839;
   $841 = HEAP32[$840>>2]|0;
   $842 = (($839) + 4)|0;
   $843 = $842;
   $844 = HEAP32[$843>>2]|0;
   $845 = $841 ^ $837;
   $846 = $844 ^ $838;
   $847 = $149;
   $848 = $847;
   HEAP32[$848>>2] = $845;
   $849 = (($847) + 4)|0;
   $850 = $849;
   HEAP32[$850>>2] = $846;
   $851 = $149;
   $852 = $851;
   $853 = HEAP32[$852>>2]|0;
   $854 = (($851) + 4)|0;
   $855 = $854;
   $856 = HEAP32[$855>>2]|0;
   $857 = (___muldi3(($853|0),($856|0),668265295,-1028477379)|0);
   $858 = (getTempRet0() | 0);
   $859 = $149;
   $860 = $859;
   HEAP32[$860>>2] = $857;
   $861 = (($859) + 4)|0;
   $862 = $861;
   HEAP32[$862>>2] = $858;
   $863 = $149;
   $864 = $863;
   $865 = HEAP32[$864>>2]|0;
   $866 = (($863) + 4)|0;
   $867 = $866;
   $868 = HEAP32[$867>>2]|0;
   $869 = (_bitshift64Lshr(($865|0),($868|0),29)|0);
   $870 = (getTempRet0() | 0);
   $871 = $149;
   $872 = $871;
   $873 = HEAP32[$872>>2]|0;
   $874 = (($871) + 4)|0;
   $875 = $874;
   $876 = HEAP32[$875>>2]|0;
   $877 = $873 ^ $869;
   $878 = $876 ^ $870;
   $879 = $149;
   $880 = $879;
   HEAP32[$880>>2] = $877;
   $881 = (($879) + 4)|0;
   $882 = $881;
   HEAP32[$882>>2] = $878;
   $883 = $149;
   $884 = $883;
   $885 = HEAP32[$884>>2]|0;
   $886 = (($883) + 4)|0;
   $887 = $886;
   $888 = HEAP32[$887>>2]|0;
   $889 = (___muldi3(($885|0),($888|0),-1640531463,374761393)|0);
   $890 = (getTempRet0() | 0);
   $891 = $149;
   $892 = $891;
   HEAP32[$892>>2] = $889;
   $893 = (($891) + 4)|0;
   $894 = $893;
   HEAP32[$894>>2] = $890;
   $895 = $149;
   $896 = $895;
   $897 = HEAP32[$896>>2]|0;
   $898 = (($895) + 4)|0;
   $899 = $898;
   $900 = HEAP32[$899>>2]|0;
   $901 = $149;
   $902 = $901;
   $903 = HEAP32[$902>>2]|0;
   $904 = (($901) + 4)|0;
   $905 = $904;
   $906 = HEAP32[$905>>2]|0;
   $907 = $903 ^ $900;
   $908 = $149;
   $909 = $908;
   HEAP32[$909>>2] = $907;
   $910 = (($908) + 4)|0;
   $911 = $910;
   HEAP32[$911>>2] = $906;
   $912 = $149;
   $913 = $912;
   $914 = HEAP32[$913>>2]|0;
   $915 = (($912) + 4)|0;
   $916 = $915;
   $917 = HEAP32[$916>>2]|0;
   $918 = $156;
   $919 = $918;
   HEAP32[$919>>2] = $914;
   $920 = (($918) + 4)|0;
   $921 = $920;
   HEAP32[$921>>2] = $917;
   $3145 = $156;
   $3146 = $3145;
   $3147 = HEAP32[$3146>>2]|0;
   $3148 = (($3145) + 4)|0;
   $3149 = $3148;
   $3150 = HEAP32[$3149>>2]|0;
   setTempRet0(($3150) | 0);
   STACKTOP = sp;return ($3147|0);
  } else {
   $104 = $173;
   $105 = $174;
   $922 = $106;
   $923 = $922;
   HEAP32[$923>>2] = $177;
   $924 = (($922) + 4)|0;
   $925 = $924;
   HEAP32[$925>>2] = $180;
   $107 = 0;
   $108 = 0;
   $926 = $104;
   $109 = $926;
   $927 = $109;
   $928 = $105;
   $929 = (($927) + ($928)|0);
   $110 = $929;
   $930 = $105;
   $931 = ($930>>>0)>=(32);
   if ($931) {
    $932 = $110;
    $933 = ((($932)) + -32|0);
    $112 = $933;
    $934 = $106;
    $935 = $934;
    $936 = HEAP32[$935>>2]|0;
    $937 = (($934) + 4)|0;
    $938 = $937;
    $939 = HEAP32[$938>>2]|0;
    $940 = (_i64Add(($936|0),($939|0),-2048144761,-1640531535)|0);
    $941 = (getTempRet0() | 0);
    $942 = (_i64Add(($940|0),($941|0),668265295,-1028477379)|0);
    $943 = (getTempRet0() | 0);
    $944 = $113;
    $945 = $944;
    HEAP32[$945>>2] = $942;
    $946 = (($944) + 4)|0;
    $947 = $946;
    HEAP32[$947>>2] = $943;
    $948 = $106;
    $949 = $948;
    $950 = HEAP32[$949>>2]|0;
    $951 = (($948) + 4)|0;
    $952 = $951;
    $953 = HEAP32[$952>>2]|0;
    $954 = (_i64Add(($950|0),($953|0),668265295,-1028477379)|0);
    $955 = (getTempRet0() | 0);
    $956 = $114;
    $957 = $956;
    HEAP32[$957>>2] = $954;
    $958 = (($956) + 4)|0;
    $959 = $958;
    HEAP32[$959>>2] = $955;
    $960 = $106;
    $961 = $960;
    $962 = HEAP32[$961>>2]|0;
    $963 = (($960) + 4)|0;
    $964 = $963;
    $965 = HEAP32[$964>>2]|0;
    $966 = $115;
    $967 = $966;
    HEAP32[$967>>2] = $962;
    $968 = (($966) + 4)|0;
    $969 = $968;
    HEAP32[$969>>2] = $965;
    $970 = $106;
    $971 = $970;
    $972 = HEAP32[$971>>2]|0;
    $973 = (($970) + 4)|0;
    $974 = $973;
    $975 = HEAP32[$974>>2]|0;
    $976 = (_i64Subtract(($972|0),($975|0),-2048144761,-1640531535)|0);
    $977 = (getTempRet0() | 0);
    $978 = $116;
    $979 = $978;
    HEAP32[$979>>2] = $976;
    $980 = (($978) + 4)|0;
    $981 = $980;
    HEAP32[$981>>2] = $977;
    while(1) {
     $982 = $113;
     $983 = $982;
     $984 = HEAP32[$983>>2]|0;
     $985 = (($982) + 4)|0;
     $986 = $985;
     $987 = HEAP32[$986>>2]|0;
     $988 = $109;
     $989 = $107;
     $990 = $108;
     $101 = $988;
     $102 = $989;
     $103 = $990;
     $991 = $103;
     $992 = ($991|0)==(1);
     $993 = $102;
     $994 = ($993|0)==(1);
     $995 = $101;
     if ($992) {
      $996 = (_XXH_read64($995)|0);
      $997 = (getTempRet0() | 0);
      if ($994) {
       $1002 = $996;$1005 = $997;
      } else {
       $998 = (_XXH_swap64($996,$997)|0);
       $999 = (getTempRet0() | 0);
       $1002 = $998;$1005 = $999;
      }
      $1000 = $100;
      $1001 = $1000;
      HEAP32[$1001>>2] = $1002;
      $1003 = (($1000) + 4)|0;
      $1004 = $1003;
      HEAP32[$1004>>2] = $1005;
     } else {
      $1006 = $995;
      $1007 = $1006;
      $1008 = HEAP32[$1007>>2]|0;
      $1009 = (($1006) + 4)|0;
      $1010 = $1009;
      $1011 = HEAP32[$1010>>2]|0;
      if ($994) {
       $1016 = $1008;$1019 = $1011;
      } else {
       $1012 = (_XXH_swap64($1008,$1011)|0);
       $1013 = (getTempRet0() | 0);
       $1016 = $1012;$1019 = $1013;
      }
      $1014 = $100;
      $1015 = $1014;
      HEAP32[$1015>>2] = $1016;
      $1017 = (($1014) + 4)|0;
      $1018 = $1017;
      HEAP32[$1018>>2] = $1019;
     }
     $1020 = $100;
     $1021 = $1020;
     $1022 = HEAP32[$1021>>2]|0;
     $1023 = (($1020) + 4)|0;
     $1024 = $1023;
     $1025 = HEAP32[$1024>>2]|0;
     $1026 = (_XXH64_round($984,$987,$1022,$1025)|0);
     $1027 = (getTempRet0() | 0);
     $1028 = $113;
     $1029 = $1028;
     HEAP32[$1029>>2] = $1026;
     $1030 = (($1028) + 4)|0;
     $1031 = $1030;
     HEAP32[$1031>>2] = $1027;
     $1032 = $109;
     $1033 = ((($1032)) + 8|0);
     $109 = $1033;
     $1034 = $114;
     $1035 = $1034;
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = (($1034) + 4)|0;
     $1038 = $1037;
     $1039 = HEAP32[$1038>>2]|0;
     $1040 = $109;
     $1041 = $107;
     $1042 = $108;
     $97 = $1040;
     $98 = $1041;
     $99 = $1042;
     $1043 = $99;
     $1044 = ($1043|0)==(1);
     $1045 = $98;
     $1046 = ($1045|0)==(1);
     $1047 = $97;
     if ($1044) {
      $1048 = (_XXH_read64($1047)|0);
      $1049 = (getTempRet0() | 0);
      if ($1046) {
       $1054 = $1048;$1057 = $1049;
      } else {
       $1050 = (_XXH_swap64($1048,$1049)|0);
       $1051 = (getTempRet0() | 0);
       $1054 = $1050;$1057 = $1051;
      }
      $1052 = $96;
      $1053 = $1052;
      HEAP32[$1053>>2] = $1054;
      $1055 = (($1052) + 4)|0;
      $1056 = $1055;
      HEAP32[$1056>>2] = $1057;
     } else {
      $1058 = $1047;
      $1059 = $1058;
      $1060 = HEAP32[$1059>>2]|0;
      $1061 = (($1058) + 4)|0;
      $1062 = $1061;
      $1063 = HEAP32[$1062>>2]|0;
      if ($1046) {
       $1068 = $1060;$1071 = $1063;
      } else {
       $1064 = (_XXH_swap64($1060,$1063)|0);
       $1065 = (getTempRet0() | 0);
       $1068 = $1064;$1071 = $1065;
      }
      $1066 = $96;
      $1067 = $1066;
      HEAP32[$1067>>2] = $1068;
      $1069 = (($1066) + 4)|0;
      $1070 = $1069;
      HEAP32[$1070>>2] = $1071;
     }
     $1072 = $96;
     $1073 = $1072;
     $1074 = HEAP32[$1073>>2]|0;
     $1075 = (($1072) + 4)|0;
     $1076 = $1075;
     $1077 = HEAP32[$1076>>2]|0;
     $1078 = (_XXH64_round($1036,$1039,$1074,$1077)|0);
     $1079 = (getTempRet0() | 0);
     $1080 = $114;
     $1081 = $1080;
     HEAP32[$1081>>2] = $1078;
     $1082 = (($1080) + 4)|0;
     $1083 = $1082;
     HEAP32[$1083>>2] = $1079;
     $1084 = $109;
     $1085 = ((($1084)) + 8|0);
     $109 = $1085;
     $1086 = $115;
     $1087 = $1086;
     $1088 = HEAP32[$1087>>2]|0;
     $1089 = (($1086) + 4)|0;
     $1090 = $1089;
     $1091 = HEAP32[$1090>>2]|0;
     $1092 = $109;
     $1093 = $107;
     $1094 = $108;
     $93 = $1092;
     $94 = $1093;
     $95 = $1094;
     $1095 = $95;
     $1096 = ($1095|0)==(1);
     $1097 = $94;
     $1098 = ($1097|0)==(1);
     $1099 = $93;
     if ($1096) {
      $1100 = (_XXH_read64($1099)|0);
      $1101 = (getTempRet0() | 0);
      if ($1098) {
       $1106 = $1100;$1109 = $1101;
      } else {
       $1102 = (_XXH_swap64($1100,$1101)|0);
       $1103 = (getTempRet0() | 0);
       $1106 = $1102;$1109 = $1103;
      }
      $1104 = $92;
      $1105 = $1104;
      HEAP32[$1105>>2] = $1106;
      $1107 = (($1104) + 4)|0;
      $1108 = $1107;
      HEAP32[$1108>>2] = $1109;
     } else {
      $1110 = $1099;
      $1111 = $1110;
      $1112 = HEAP32[$1111>>2]|0;
      $1113 = (($1110) + 4)|0;
      $1114 = $1113;
      $1115 = HEAP32[$1114>>2]|0;
      if ($1098) {
       $1120 = $1112;$1123 = $1115;
      } else {
       $1116 = (_XXH_swap64($1112,$1115)|0);
       $1117 = (getTempRet0() | 0);
       $1120 = $1116;$1123 = $1117;
      }
      $1118 = $92;
      $1119 = $1118;
      HEAP32[$1119>>2] = $1120;
      $1121 = (($1118) + 4)|0;
      $1122 = $1121;
      HEAP32[$1122>>2] = $1123;
     }
     $1124 = $92;
     $1125 = $1124;
     $1126 = HEAP32[$1125>>2]|0;
     $1127 = (($1124) + 4)|0;
     $1128 = $1127;
     $1129 = HEAP32[$1128>>2]|0;
     $1130 = (_XXH64_round($1088,$1091,$1126,$1129)|0);
     $1131 = (getTempRet0() | 0);
     $1132 = $115;
     $1133 = $1132;
     HEAP32[$1133>>2] = $1130;
     $1134 = (($1132) + 4)|0;
     $1135 = $1134;
     HEAP32[$1135>>2] = $1131;
     $1136 = $109;
     $1137 = ((($1136)) + 8|0);
     $109 = $1137;
     $1138 = $116;
     $1139 = $1138;
     $1140 = HEAP32[$1139>>2]|0;
     $1141 = (($1138) + 4)|0;
     $1142 = $1141;
     $1143 = HEAP32[$1142>>2]|0;
     $1144 = $109;
     $1145 = $107;
     $1146 = $108;
     $89 = $1144;
     $90 = $1145;
     $91 = $1146;
     $1147 = $91;
     $1148 = ($1147|0)==(1);
     $1149 = $90;
     $1150 = ($1149|0)==(1);
     $1151 = $89;
     if ($1148) {
      $1152 = (_XXH_read64($1151)|0);
      $1153 = (getTempRet0() | 0);
      if ($1150) {
       $1158 = $1152;$1161 = $1153;
      } else {
       $1154 = (_XXH_swap64($1152,$1153)|0);
       $1155 = (getTempRet0() | 0);
       $1158 = $1154;$1161 = $1155;
      }
      $1156 = $88;
      $1157 = $1156;
      HEAP32[$1157>>2] = $1158;
      $1159 = (($1156) + 4)|0;
      $1160 = $1159;
      HEAP32[$1160>>2] = $1161;
     } else {
      $1162 = $1151;
      $1163 = $1162;
      $1164 = HEAP32[$1163>>2]|0;
      $1165 = (($1162) + 4)|0;
      $1166 = $1165;
      $1167 = HEAP32[$1166>>2]|0;
      if ($1150) {
       $1172 = $1164;$1175 = $1167;
      } else {
       $1168 = (_XXH_swap64($1164,$1167)|0);
       $1169 = (getTempRet0() | 0);
       $1172 = $1168;$1175 = $1169;
      }
      $1170 = $88;
      $1171 = $1170;
      HEAP32[$1171>>2] = $1172;
      $1173 = (($1170) + 4)|0;
      $1174 = $1173;
      HEAP32[$1174>>2] = $1175;
     }
     $1176 = $88;
     $1177 = $1176;
     $1178 = HEAP32[$1177>>2]|0;
     $1179 = (($1176) + 4)|0;
     $1180 = $1179;
     $1181 = HEAP32[$1180>>2]|0;
     $1182 = (_XXH64_round($1140,$1143,$1178,$1181)|0);
     $1183 = (getTempRet0() | 0);
     $1184 = $116;
     $1185 = $1184;
     HEAP32[$1185>>2] = $1182;
     $1186 = (($1184) + 4)|0;
     $1187 = $1186;
     HEAP32[$1187>>2] = $1183;
     $1188 = $109;
     $1189 = ((($1188)) + 8|0);
     $109 = $1189;
     $1190 = $109;
     $1191 = $112;
     $1192 = ($1190>>>0)<=($1191>>>0);
     if (!($1192)) {
      break;
     }
    }
    $1193 = $113;
    $1194 = $1193;
    $1195 = HEAP32[$1194>>2]|0;
    $1196 = (($1193) + 4)|0;
    $1197 = $1196;
    $1198 = HEAP32[$1197>>2]|0;
    $1199 = (_bitshift64Shl(($1195|0),($1198|0),1)|0);
    $1200 = (getTempRet0() | 0);
    $1201 = $113;
    $1202 = $1201;
    $1203 = HEAP32[$1202>>2]|0;
    $1204 = (($1201) + 4)|0;
    $1205 = $1204;
    $1206 = HEAP32[$1205>>2]|0;
    $1207 = (_bitshift64Lshr(($1203|0),($1206|0),63)|0);
    $1208 = (getTempRet0() | 0);
    $1209 = $1199 | $1207;
    $1210 = $1200 | $1208;
    $1211 = $114;
    $1212 = $1211;
    $1213 = HEAP32[$1212>>2]|0;
    $1214 = (($1211) + 4)|0;
    $1215 = $1214;
    $1216 = HEAP32[$1215>>2]|0;
    $1217 = (_bitshift64Shl(($1213|0),($1216|0),7)|0);
    $1218 = (getTempRet0() | 0);
    $1219 = $114;
    $1220 = $1219;
    $1221 = HEAP32[$1220>>2]|0;
    $1222 = (($1219) + 4)|0;
    $1223 = $1222;
    $1224 = HEAP32[$1223>>2]|0;
    $1225 = (_bitshift64Lshr(($1221|0),($1224|0),57)|0);
    $1226 = (getTempRet0() | 0);
    $1227 = $1217 | $1225;
    $1228 = $1218 | $1226;
    $1229 = (_i64Add(($1209|0),($1210|0),($1227|0),($1228|0))|0);
    $1230 = (getTempRet0() | 0);
    $1231 = $115;
    $1232 = $1231;
    $1233 = HEAP32[$1232>>2]|0;
    $1234 = (($1231) + 4)|0;
    $1235 = $1234;
    $1236 = HEAP32[$1235>>2]|0;
    $1237 = (_bitshift64Shl(($1233|0),($1236|0),12)|0);
    $1238 = (getTempRet0() | 0);
    $1239 = $115;
    $1240 = $1239;
    $1241 = HEAP32[$1240>>2]|0;
    $1242 = (($1239) + 4)|0;
    $1243 = $1242;
    $1244 = HEAP32[$1243>>2]|0;
    $1245 = (_bitshift64Lshr(($1241|0),($1244|0),52)|0);
    $1246 = (getTempRet0() | 0);
    $1247 = $1237 | $1245;
    $1248 = $1238 | $1246;
    $1249 = (_i64Add(($1229|0),($1230|0),($1247|0),($1248|0))|0);
    $1250 = (getTempRet0() | 0);
    $1251 = $116;
    $1252 = $1251;
    $1253 = HEAP32[$1252>>2]|0;
    $1254 = (($1251) + 4)|0;
    $1255 = $1254;
    $1256 = HEAP32[$1255>>2]|0;
    $1257 = (_bitshift64Shl(($1253|0),($1256|0),18)|0);
    $1258 = (getTempRet0() | 0);
    $1259 = $116;
    $1260 = $1259;
    $1261 = HEAP32[$1260>>2]|0;
    $1262 = (($1259) + 4)|0;
    $1263 = $1262;
    $1264 = HEAP32[$1263>>2]|0;
    $1265 = (_bitshift64Lshr(($1261|0),($1264|0),46)|0);
    $1266 = (getTempRet0() | 0);
    $1267 = $1257 | $1265;
    $1268 = $1258 | $1266;
    $1269 = (_i64Add(($1249|0),($1250|0),($1267|0),($1268|0))|0);
    $1270 = (getTempRet0() | 0);
    $1271 = $111;
    $1272 = $1271;
    HEAP32[$1272>>2] = $1269;
    $1273 = (($1271) + 4)|0;
    $1274 = $1273;
    HEAP32[$1274>>2] = $1270;
    $1275 = $111;
    $1276 = $1275;
    $1277 = HEAP32[$1276>>2]|0;
    $1278 = (($1275) + 4)|0;
    $1279 = $1278;
    $1280 = HEAP32[$1279>>2]|0;
    $1281 = $113;
    $1282 = $1281;
    $1283 = HEAP32[$1282>>2]|0;
    $1284 = (($1281) + 4)|0;
    $1285 = $1284;
    $1286 = HEAP32[$1285>>2]|0;
    $1287 = (_XXH64_mergeRound($1277,$1280,$1283,$1286)|0);
    $1288 = (getTempRet0() | 0);
    $1289 = $111;
    $1290 = $1289;
    HEAP32[$1290>>2] = $1287;
    $1291 = (($1289) + 4)|0;
    $1292 = $1291;
    HEAP32[$1292>>2] = $1288;
    $1293 = $111;
    $1294 = $1293;
    $1295 = HEAP32[$1294>>2]|0;
    $1296 = (($1293) + 4)|0;
    $1297 = $1296;
    $1298 = HEAP32[$1297>>2]|0;
    $1299 = $114;
    $1300 = $1299;
    $1301 = HEAP32[$1300>>2]|0;
    $1302 = (($1299) + 4)|0;
    $1303 = $1302;
    $1304 = HEAP32[$1303>>2]|0;
    $1305 = (_XXH64_mergeRound($1295,$1298,$1301,$1304)|0);
    $1306 = (getTempRet0() | 0);
    $1307 = $111;
    $1308 = $1307;
    HEAP32[$1308>>2] = $1305;
    $1309 = (($1307) + 4)|0;
    $1310 = $1309;
    HEAP32[$1310>>2] = $1306;
    $1311 = $111;
    $1312 = $1311;
    $1313 = HEAP32[$1312>>2]|0;
    $1314 = (($1311) + 4)|0;
    $1315 = $1314;
    $1316 = HEAP32[$1315>>2]|0;
    $1317 = $115;
    $1318 = $1317;
    $1319 = HEAP32[$1318>>2]|0;
    $1320 = (($1317) + 4)|0;
    $1321 = $1320;
    $1322 = HEAP32[$1321>>2]|0;
    $1323 = (_XXH64_mergeRound($1313,$1316,$1319,$1322)|0);
    $1324 = (getTempRet0() | 0);
    $1325 = $111;
    $1326 = $1325;
    HEAP32[$1326>>2] = $1323;
    $1327 = (($1325) + 4)|0;
    $1328 = $1327;
    HEAP32[$1328>>2] = $1324;
    $1329 = $111;
    $1330 = $1329;
    $1331 = HEAP32[$1330>>2]|0;
    $1332 = (($1329) + 4)|0;
    $1333 = $1332;
    $1334 = HEAP32[$1333>>2]|0;
    $1335 = $116;
    $1336 = $1335;
    $1337 = HEAP32[$1336>>2]|0;
    $1338 = (($1335) + 4)|0;
    $1339 = $1338;
    $1340 = HEAP32[$1339>>2]|0;
    $1341 = (_XXH64_mergeRound($1331,$1334,$1337,$1340)|0);
    $1342 = (getTempRet0() | 0);
    $1343 = $111;
    $1344 = $1343;
    HEAP32[$1344>>2] = $1341;
    $1345 = (($1343) + 4)|0;
    $1346 = $1345;
    HEAP32[$1346>>2] = $1342;
   } else {
    $1347 = $106;
    $1348 = $1347;
    $1349 = HEAP32[$1348>>2]|0;
    $1350 = (($1347) + 4)|0;
    $1351 = $1350;
    $1352 = HEAP32[$1351>>2]|0;
    $1353 = (_i64Add(($1349|0),($1352|0),374761413,668265263)|0);
    $1354 = (getTempRet0() | 0);
    $1355 = $111;
    $1356 = $1355;
    HEAP32[$1356>>2] = $1353;
    $1357 = (($1355) + 4)|0;
    $1358 = $1357;
    HEAP32[$1358>>2] = $1354;
   }
   $1359 = $105;
   $1360 = $111;
   $1361 = $1360;
   $1362 = HEAP32[$1361>>2]|0;
   $1363 = (($1360) + 4)|0;
   $1364 = $1363;
   $1365 = HEAP32[$1364>>2]|0;
   $1366 = (_i64Add(($1362|0),($1365|0),($1359|0),0)|0);
   $1367 = (getTempRet0() | 0);
   $1368 = $111;
   $1369 = $1368;
   HEAP32[$1369>>2] = $1366;
   $1370 = (($1368) + 4)|0;
   $1371 = $1370;
   HEAP32[$1371>>2] = $1367;
   while(1) {
    $1372 = $109;
    $1373 = ((($1372)) + 8|0);
    $1374 = $110;
    $1375 = ($1373>>>0)<=($1374>>>0);
    $1376 = $109;
    if (!($1375)) {
     break;
    }
    $1377 = $107;
    $1378 = $108;
    $85 = $1376;
    $86 = $1377;
    $87 = $1378;
    $1379 = $87;
    $1380 = ($1379|0)==(1);
    $1381 = $86;
    $1382 = ($1381|0)==(1);
    $1383 = $85;
    if ($1380) {
     $1384 = (_XXH_read64($1383)|0);
     $1385 = (getTempRet0() | 0);
     if ($1382) {
      $1390 = $1384;$1393 = $1385;
     } else {
      $1386 = (_XXH_swap64($1384,$1385)|0);
      $1387 = (getTempRet0() | 0);
      $1390 = $1386;$1393 = $1387;
     }
     $1388 = $84;
     $1389 = $1388;
     HEAP32[$1389>>2] = $1390;
     $1391 = (($1388) + 4)|0;
     $1392 = $1391;
     HEAP32[$1392>>2] = $1393;
    } else {
     $1394 = $1383;
     $1395 = $1394;
     $1396 = HEAP32[$1395>>2]|0;
     $1397 = (($1394) + 4)|0;
     $1398 = $1397;
     $1399 = HEAP32[$1398>>2]|0;
     if ($1382) {
      $1404 = $1396;$1407 = $1399;
     } else {
      $1400 = (_XXH_swap64($1396,$1399)|0);
      $1401 = (getTempRet0() | 0);
      $1404 = $1400;$1407 = $1401;
     }
     $1402 = $84;
     $1403 = $1402;
     HEAP32[$1403>>2] = $1404;
     $1405 = (($1402) + 4)|0;
     $1406 = $1405;
     HEAP32[$1406>>2] = $1407;
    }
    $1408 = $84;
    $1409 = $1408;
    $1410 = HEAP32[$1409>>2]|0;
    $1411 = (($1408) + 4)|0;
    $1412 = $1411;
    $1413 = HEAP32[$1412>>2]|0;
    $1414 = (_XXH64_round(0,0,$1410,$1413)|0);
    $1415 = (getTempRet0() | 0);
    $1416 = $117;
    $1417 = $1416;
    HEAP32[$1417>>2] = $1414;
    $1418 = (($1416) + 4)|0;
    $1419 = $1418;
    HEAP32[$1419>>2] = $1415;
    $1420 = $117;
    $1421 = $1420;
    $1422 = HEAP32[$1421>>2]|0;
    $1423 = (($1420) + 4)|0;
    $1424 = $1423;
    $1425 = HEAP32[$1424>>2]|0;
    $1426 = $111;
    $1427 = $1426;
    $1428 = HEAP32[$1427>>2]|0;
    $1429 = (($1426) + 4)|0;
    $1430 = $1429;
    $1431 = HEAP32[$1430>>2]|0;
    $1432 = $1428 ^ $1422;
    $1433 = $1431 ^ $1425;
    $1434 = $111;
    $1435 = $1434;
    HEAP32[$1435>>2] = $1432;
    $1436 = (($1434) + 4)|0;
    $1437 = $1436;
    HEAP32[$1437>>2] = $1433;
    $1438 = $111;
    $1439 = $1438;
    $1440 = HEAP32[$1439>>2]|0;
    $1441 = (($1438) + 4)|0;
    $1442 = $1441;
    $1443 = HEAP32[$1442>>2]|0;
    $1444 = (_bitshift64Shl(($1440|0),($1443|0),27)|0);
    $1445 = (getTempRet0() | 0);
    $1446 = $111;
    $1447 = $1446;
    $1448 = HEAP32[$1447>>2]|0;
    $1449 = (($1446) + 4)|0;
    $1450 = $1449;
    $1451 = HEAP32[$1450>>2]|0;
    $1452 = (_bitshift64Lshr(($1448|0),($1451|0),37)|0);
    $1453 = (getTempRet0() | 0);
    $1454 = $1444 | $1452;
    $1455 = $1445 | $1453;
    $1456 = (___muldi3(($1454|0),($1455|0),-2048144761,-1640531535)|0);
    $1457 = (getTempRet0() | 0);
    $1458 = (_i64Add(($1456|0),($1457|0),-1028477341,-2048144777)|0);
    $1459 = (getTempRet0() | 0);
    $1460 = $111;
    $1461 = $1460;
    HEAP32[$1461>>2] = $1458;
    $1462 = (($1460) + 4)|0;
    $1463 = $1462;
    HEAP32[$1463>>2] = $1459;
    $1464 = $109;
    $1465 = ((($1464)) + 8|0);
    $109 = $1465;
   }
   $1466 = ((($1376)) + 4|0);
   $1467 = $110;
   $1468 = ($1466>>>0)<=($1467>>>0);
   if ($1468) {
    $1469 = $109;
    $1470 = $107;
    $1471 = $108;
    $81 = $1469;
    $82 = $1470;
    $83 = $1471;
    $1472 = $83;
    $1473 = ($1472|0)==(1);
    $1474 = $82;
    $1475 = ($1474|0)==(1);
    $1476 = $81;
    if ($1473) {
     $1477 = (_XXH_read32($1476)|0);
     if ($1475) {
      $1479 = $1477;
     } else {
      $1478 = (_XXH_swap32($1477)|0);
      $1479 = $1478;
     }
     $80 = $1479;
    } else {
     $1480 = HEAP32[$1476>>2]|0;
     if ($1475) {
      $1482 = $1480;
     } else {
      $1481 = (_XXH_swap32($1480)|0);
      $1482 = $1481;
     }
     $80 = $1482;
    }
    $1483 = $80;
    $1484 = (___muldi3(($1483|0),0,-2048144761,-1640531535)|0);
    $1485 = (getTempRet0() | 0);
    $1486 = $111;
    $1487 = $1486;
    $1488 = HEAP32[$1487>>2]|0;
    $1489 = (($1486) + 4)|0;
    $1490 = $1489;
    $1491 = HEAP32[$1490>>2]|0;
    $1492 = $1488 ^ $1484;
    $1493 = $1491 ^ $1485;
    $1494 = $111;
    $1495 = $1494;
    HEAP32[$1495>>2] = $1492;
    $1496 = (($1494) + 4)|0;
    $1497 = $1496;
    HEAP32[$1497>>2] = $1493;
    $1498 = $111;
    $1499 = $1498;
    $1500 = HEAP32[$1499>>2]|0;
    $1501 = (($1498) + 4)|0;
    $1502 = $1501;
    $1503 = HEAP32[$1502>>2]|0;
    $1504 = (_bitshift64Shl(($1500|0),($1503|0),23)|0);
    $1505 = (getTempRet0() | 0);
    $1506 = $111;
    $1507 = $1506;
    $1508 = HEAP32[$1507>>2]|0;
    $1509 = (($1506) + 4)|0;
    $1510 = $1509;
    $1511 = HEAP32[$1510>>2]|0;
    $1512 = (_bitshift64Lshr(($1508|0),($1511|0),41)|0);
    $1513 = (getTempRet0() | 0);
    $1514 = $1504 | $1512;
    $1515 = $1505 | $1513;
    $1516 = (___muldi3(($1514|0),($1515|0),668265295,-1028477379)|0);
    $1517 = (getTempRet0() | 0);
    $1518 = (_i64Add(($1516|0),($1517|0),-1640531463,374761393)|0);
    $1519 = (getTempRet0() | 0);
    $1520 = $111;
    $1521 = $1520;
    HEAP32[$1521>>2] = $1518;
    $1522 = (($1520) + 4)|0;
    $1523 = $1522;
    HEAP32[$1523>>2] = $1519;
    $1524 = $109;
    $1525 = ((($1524)) + 4|0);
    $109 = $1525;
   }
   while(1) {
    $1526 = $109;
    $1527 = $110;
    $1528 = ($1526>>>0)<($1527>>>0);
    if (!($1528)) {
     break;
    }
    $1529 = $109;
    $1530 = HEAP8[$1529>>0]|0;
    $1531 = $1530&255;
    $1532 = (___muldi3(($1531|0),0,374761413,668265263)|0);
    $1533 = (getTempRet0() | 0);
    $1534 = $111;
    $1535 = $1534;
    $1536 = HEAP32[$1535>>2]|0;
    $1537 = (($1534) + 4)|0;
    $1538 = $1537;
    $1539 = HEAP32[$1538>>2]|0;
    $1540 = $1536 ^ $1532;
    $1541 = $1539 ^ $1533;
    $1542 = $111;
    $1543 = $1542;
    HEAP32[$1543>>2] = $1540;
    $1544 = (($1542) + 4)|0;
    $1545 = $1544;
    HEAP32[$1545>>2] = $1541;
    $1546 = $111;
    $1547 = $1546;
    $1548 = HEAP32[$1547>>2]|0;
    $1549 = (($1546) + 4)|0;
    $1550 = $1549;
    $1551 = HEAP32[$1550>>2]|0;
    $1552 = (_bitshift64Shl(($1548|0),($1551|0),11)|0);
    $1553 = (getTempRet0() | 0);
    $1554 = $111;
    $1555 = $1554;
    $1556 = HEAP32[$1555>>2]|0;
    $1557 = (($1554) + 4)|0;
    $1558 = $1557;
    $1559 = HEAP32[$1558>>2]|0;
    $1560 = (_bitshift64Lshr(($1556|0),($1559|0),53)|0);
    $1561 = (getTempRet0() | 0);
    $1562 = $1552 | $1560;
    $1563 = $1553 | $1561;
    $1564 = (___muldi3(($1562|0),($1563|0),-2048144761,-1640531535)|0);
    $1565 = (getTempRet0() | 0);
    $1566 = $111;
    $1567 = $1566;
    HEAP32[$1567>>2] = $1564;
    $1568 = (($1566) + 4)|0;
    $1569 = $1568;
    HEAP32[$1569>>2] = $1565;
    $1570 = $109;
    $1571 = ((($1570)) + 1|0);
    $109 = $1571;
   }
   $1572 = $111;
   $1573 = $1572;
   $1574 = HEAP32[$1573>>2]|0;
   $1575 = (($1572) + 4)|0;
   $1576 = $1575;
   $1577 = HEAP32[$1576>>2]|0;
   $1578 = (_bitshift64Lshr(($1574|0),($1577|0),33)|0);
   $1579 = (getTempRet0() | 0);
   $1580 = $111;
   $1581 = $1580;
   $1582 = HEAP32[$1581>>2]|0;
   $1583 = (($1580) + 4)|0;
   $1584 = $1583;
   $1585 = HEAP32[$1584>>2]|0;
   $1586 = $1582 ^ $1578;
   $1587 = $1585 ^ $1579;
   $1588 = $111;
   $1589 = $1588;
   HEAP32[$1589>>2] = $1586;
   $1590 = (($1588) + 4)|0;
   $1591 = $1590;
   HEAP32[$1591>>2] = $1587;
   $1592 = $111;
   $1593 = $1592;
   $1594 = HEAP32[$1593>>2]|0;
   $1595 = (($1592) + 4)|0;
   $1596 = $1595;
   $1597 = HEAP32[$1596>>2]|0;
   $1598 = (___muldi3(($1594|0),($1597|0),668265295,-1028477379)|0);
   $1599 = (getTempRet0() | 0);
   $1600 = $111;
   $1601 = $1600;
   HEAP32[$1601>>2] = $1598;
   $1602 = (($1600) + 4)|0;
   $1603 = $1602;
   HEAP32[$1603>>2] = $1599;
   $1604 = $111;
   $1605 = $1604;
   $1606 = HEAP32[$1605>>2]|0;
   $1607 = (($1604) + 4)|0;
   $1608 = $1607;
   $1609 = HEAP32[$1608>>2]|0;
   $1610 = (_bitshift64Lshr(($1606|0),($1609|0),29)|0);
   $1611 = (getTempRet0() | 0);
   $1612 = $111;
   $1613 = $1612;
   $1614 = HEAP32[$1613>>2]|0;
   $1615 = (($1612) + 4)|0;
   $1616 = $1615;
   $1617 = HEAP32[$1616>>2]|0;
   $1618 = $1614 ^ $1610;
   $1619 = $1617 ^ $1611;
   $1620 = $111;
   $1621 = $1620;
   HEAP32[$1621>>2] = $1618;
   $1622 = (($1620) + 4)|0;
   $1623 = $1622;
   HEAP32[$1623>>2] = $1619;
   $1624 = $111;
   $1625 = $1624;
   $1626 = HEAP32[$1625>>2]|0;
   $1627 = (($1624) + 4)|0;
   $1628 = $1627;
   $1629 = HEAP32[$1628>>2]|0;
   $1630 = (___muldi3(($1626|0),($1629|0),-1640531463,374761393)|0);
   $1631 = (getTempRet0() | 0);
   $1632 = $111;
   $1633 = $1632;
   HEAP32[$1633>>2] = $1630;
   $1634 = (($1632) + 4)|0;
   $1635 = $1634;
   HEAP32[$1635>>2] = $1631;
   $1636 = $111;
   $1637 = $1636;
   $1638 = HEAP32[$1637>>2]|0;
   $1639 = (($1636) + 4)|0;
   $1640 = $1639;
   $1641 = HEAP32[$1640>>2]|0;
   $1642 = $111;
   $1643 = $1642;
   $1644 = HEAP32[$1643>>2]|0;
   $1645 = (($1642) + 4)|0;
   $1646 = $1645;
   $1647 = HEAP32[$1646>>2]|0;
   $1648 = $1644 ^ $1641;
   $1649 = $111;
   $1650 = $1649;
   HEAP32[$1650>>2] = $1648;
   $1651 = (($1649) + 4)|0;
   $1652 = $1651;
   HEAP32[$1652>>2] = $1647;
   $1653 = $111;
   $1654 = $1653;
   $1655 = HEAP32[$1654>>2]|0;
   $1656 = (($1653) + 4)|0;
   $1657 = $1656;
   $1658 = HEAP32[$1657>>2]|0;
   $1659 = $156;
   $1660 = $1659;
   HEAP32[$1660>>2] = $1655;
   $1661 = (($1659) + 4)|0;
   $1662 = $1661;
   HEAP32[$1662>>2] = $1658;
   $3145 = $156;
   $3146 = $3145;
   $3147 = HEAP32[$3146>>2]|0;
   $3148 = (($3145) + 4)|0;
   $3149 = $3148;
   $3150 = HEAP32[$3149>>2]|0;
   setTempRet0(($3150) | 0);
   STACKTOP = sp;return ($3147|0);
  }
 } else {
  if ($172) {
   $66 = $173;
   $67 = $174;
   $1663 = $68;
   $1664 = $1663;
   HEAP32[$1664>>2] = $177;
   $1665 = (($1663) + 4)|0;
   $1666 = $1665;
   HEAP32[$1666>>2] = $180;
   $69 = 1;
   $70 = 1;
   $1667 = $66;
   $71 = $1667;
   $1668 = $71;
   $1669 = $67;
   $1670 = (($1668) + ($1669)|0);
   $72 = $1670;
   $1671 = $67;
   $1672 = ($1671>>>0)>=(32);
   if ($1672) {
    $1673 = $72;
    $1674 = ((($1673)) + -32|0);
    $74 = $1674;
    $1675 = $68;
    $1676 = $1675;
    $1677 = HEAP32[$1676>>2]|0;
    $1678 = (($1675) + 4)|0;
    $1679 = $1678;
    $1680 = HEAP32[$1679>>2]|0;
    $1681 = (_i64Add(($1677|0),($1680|0),-2048144761,-1640531535)|0);
    $1682 = (getTempRet0() | 0);
    $1683 = (_i64Add(($1681|0),($1682|0),668265295,-1028477379)|0);
    $1684 = (getTempRet0() | 0);
    $1685 = $75;
    $1686 = $1685;
    HEAP32[$1686>>2] = $1683;
    $1687 = (($1685) + 4)|0;
    $1688 = $1687;
    HEAP32[$1688>>2] = $1684;
    $1689 = $68;
    $1690 = $1689;
    $1691 = HEAP32[$1690>>2]|0;
    $1692 = (($1689) + 4)|0;
    $1693 = $1692;
    $1694 = HEAP32[$1693>>2]|0;
    $1695 = (_i64Add(($1691|0),($1694|0),668265295,-1028477379)|0);
    $1696 = (getTempRet0() | 0);
    $1697 = $76;
    $1698 = $1697;
    HEAP32[$1698>>2] = $1695;
    $1699 = (($1697) + 4)|0;
    $1700 = $1699;
    HEAP32[$1700>>2] = $1696;
    $1701 = $68;
    $1702 = $1701;
    $1703 = HEAP32[$1702>>2]|0;
    $1704 = (($1701) + 4)|0;
    $1705 = $1704;
    $1706 = HEAP32[$1705>>2]|0;
    $1707 = $77;
    $1708 = $1707;
    HEAP32[$1708>>2] = $1703;
    $1709 = (($1707) + 4)|0;
    $1710 = $1709;
    HEAP32[$1710>>2] = $1706;
    $1711 = $68;
    $1712 = $1711;
    $1713 = HEAP32[$1712>>2]|0;
    $1714 = (($1711) + 4)|0;
    $1715 = $1714;
    $1716 = HEAP32[$1715>>2]|0;
    $1717 = (_i64Subtract(($1713|0),($1716|0),-2048144761,-1640531535)|0);
    $1718 = (getTempRet0() | 0);
    $1719 = $78;
    $1720 = $1719;
    HEAP32[$1720>>2] = $1717;
    $1721 = (($1719) + 4)|0;
    $1722 = $1721;
    HEAP32[$1722>>2] = $1718;
    while(1) {
     $1723 = $75;
     $1724 = $1723;
     $1725 = HEAP32[$1724>>2]|0;
     $1726 = (($1723) + 4)|0;
     $1727 = $1726;
     $1728 = HEAP32[$1727>>2]|0;
     $1729 = $71;
     $1730 = $69;
     $1731 = $70;
     $63 = $1729;
     $64 = $1730;
     $65 = $1731;
     $1732 = $65;
     $1733 = ($1732|0)==(1);
     $1734 = $64;
     $1735 = ($1734|0)==(1);
     $1736 = $63;
     if ($1733) {
      $1737 = (_XXH_read64($1736)|0);
      $1738 = (getTempRet0() | 0);
      if ($1735) {
       $1743 = $1737;$1746 = $1738;
      } else {
       $1739 = (_XXH_swap64($1737,$1738)|0);
       $1740 = (getTempRet0() | 0);
       $1743 = $1739;$1746 = $1740;
      }
      $1741 = $62;
      $1742 = $1741;
      HEAP32[$1742>>2] = $1743;
      $1744 = (($1741) + 4)|0;
      $1745 = $1744;
      HEAP32[$1745>>2] = $1746;
     } else {
      $1747 = $1736;
      $1748 = $1747;
      $1749 = HEAP32[$1748>>2]|0;
      $1750 = (($1747) + 4)|0;
      $1751 = $1750;
      $1752 = HEAP32[$1751>>2]|0;
      if ($1735) {
       $1757 = $1749;$1760 = $1752;
      } else {
       $1753 = (_XXH_swap64($1749,$1752)|0);
       $1754 = (getTempRet0() | 0);
       $1757 = $1753;$1760 = $1754;
      }
      $1755 = $62;
      $1756 = $1755;
      HEAP32[$1756>>2] = $1757;
      $1758 = (($1755) + 4)|0;
      $1759 = $1758;
      HEAP32[$1759>>2] = $1760;
     }
     $1761 = $62;
     $1762 = $1761;
     $1763 = HEAP32[$1762>>2]|0;
     $1764 = (($1761) + 4)|0;
     $1765 = $1764;
     $1766 = HEAP32[$1765>>2]|0;
     $1767 = (_XXH64_round($1725,$1728,$1763,$1766)|0);
     $1768 = (getTempRet0() | 0);
     $1769 = $75;
     $1770 = $1769;
     HEAP32[$1770>>2] = $1767;
     $1771 = (($1769) + 4)|0;
     $1772 = $1771;
     HEAP32[$1772>>2] = $1768;
     $1773 = $71;
     $1774 = ((($1773)) + 8|0);
     $71 = $1774;
     $1775 = $76;
     $1776 = $1775;
     $1777 = HEAP32[$1776>>2]|0;
     $1778 = (($1775) + 4)|0;
     $1779 = $1778;
     $1780 = HEAP32[$1779>>2]|0;
     $1781 = $71;
     $1782 = $69;
     $1783 = $70;
     $59 = $1781;
     $60 = $1782;
     $61 = $1783;
     $1784 = $61;
     $1785 = ($1784|0)==(1);
     $1786 = $60;
     $1787 = ($1786|0)==(1);
     $1788 = $59;
     if ($1785) {
      $1789 = (_XXH_read64($1788)|0);
      $1790 = (getTempRet0() | 0);
      if ($1787) {
       $1795 = $1789;$1798 = $1790;
      } else {
       $1791 = (_XXH_swap64($1789,$1790)|0);
       $1792 = (getTempRet0() | 0);
       $1795 = $1791;$1798 = $1792;
      }
      $1793 = $58;
      $1794 = $1793;
      HEAP32[$1794>>2] = $1795;
      $1796 = (($1793) + 4)|0;
      $1797 = $1796;
      HEAP32[$1797>>2] = $1798;
     } else {
      $1799 = $1788;
      $1800 = $1799;
      $1801 = HEAP32[$1800>>2]|0;
      $1802 = (($1799) + 4)|0;
      $1803 = $1802;
      $1804 = HEAP32[$1803>>2]|0;
      if ($1787) {
       $1809 = $1801;$1812 = $1804;
      } else {
       $1805 = (_XXH_swap64($1801,$1804)|0);
       $1806 = (getTempRet0() | 0);
       $1809 = $1805;$1812 = $1806;
      }
      $1807 = $58;
      $1808 = $1807;
      HEAP32[$1808>>2] = $1809;
      $1810 = (($1807) + 4)|0;
      $1811 = $1810;
      HEAP32[$1811>>2] = $1812;
     }
     $1813 = $58;
     $1814 = $1813;
     $1815 = HEAP32[$1814>>2]|0;
     $1816 = (($1813) + 4)|0;
     $1817 = $1816;
     $1818 = HEAP32[$1817>>2]|0;
     $1819 = (_XXH64_round($1777,$1780,$1815,$1818)|0);
     $1820 = (getTempRet0() | 0);
     $1821 = $76;
     $1822 = $1821;
     HEAP32[$1822>>2] = $1819;
     $1823 = (($1821) + 4)|0;
     $1824 = $1823;
     HEAP32[$1824>>2] = $1820;
     $1825 = $71;
     $1826 = ((($1825)) + 8|0);
     $71 = $1826;
     $1827 = $77;
     $1828 = $1827;
     $1829 = HEAP32[$1828>>2]|0;
     $1830 = (($1827) + 4)|0;
     $1831 = $1830;
     $1832 = HEAP32[$1831>>2]|0;
     $1833 = $71;
     $1834 = $69;
     $1835 = $70;
     $55 = $1833;
     $56 = $1834;
     $57 = $1835;
     $1836 = $57;
     $1837 = ($1836|0)==(1);
     $1838 = $56;
     $1839 = ($1838|0)==(1);
     $1840 = $55;
     if ($1837) {
      $1841 = (_XXH_read64($1840)|0);
      $1842 = (getTempRet0() | 0);
      if ($1839) {
       $1847 = $1841;$1850 = $1842;
      } else {
       $1843 = (_XXH_swap64($1841,$1842)|0);
       $1844 = (getTempRet0() | 0);
       $1847 = $1843;$1850 = $1844;
      }
      $1845 = $54;
      $1846 = $1845;
      HEAP32[$1846>>2] = $1847;
      $1848 = (($1845) + 4)|0;
      $1849 = $1848;
      HEAP32[$1849>>2] = $1850;
     } else {
      $1851 = $1840;
      $1852 = $1851;
      $1853 = HEAP32[$1852>>2]|0;
      $1854 = (($1851) + 4)|0;
      $1855 = $1854;
      $1856 = HEAP32[$1855>>2]|0;
      if ($1839) {
       $1861 = $1853;$1864 = $1856;
      } else {
       $1857 = (_XXH_swap64($1853,$1856)|0);
       $1858 = (getTempRet0() | 0);
       $1861 = $1857;$1864 = $1858;
      }
      $1859 = $54;
      $1860 = $1859;
      HEAP32[$1860>>2] = $1861;
      $1862 = (($1859) + 4)|0;
      $1863 = $1862;
      HEAP32[$1863>>2] = $1864;
     }
     $1865 = $54;
     $1866 = $1865;
     $1867 = HEAP32[$1866>>2]|0;
     $1868 = (($1865) + 4)|0;
     $1869 = $1868;
     $1870 = HEAP32[$1869>>2]|0;
     $1871 = (_XXH64_round($1829,$1832,$1867,$1870)|0);
     $1872 = (getTempRet0() | 0);
     $1873 = $77;
     $1874 = $1873;
     HEAP32[$1874>>2] = $1871;
     $1875 = (($1873) + 4)|0;
     $1876 = $1875;
     HEAP32[$1876>>2] = $1872;
     $1877 = $71;
     $1878 = ((($1877)) + 8|0);
     $71 = $1878;
     $1879 = $78;
     $1880 = $1879;
     $1881 = HEAP32[$1880>>2]|0;
     $1882 = (($1879) + 4)|0;
     $1883 = $1882;
     $1884 = HEAP32[$1883>>2]|0;
     $1885 = $71;
     $1886 = $69;
     $1887 = $70;
     $51 = $1885;
     $52 = $1886;
     $53 = $1887;
     $1888 = $53;
     $1889 = ($1888|0)==(1);
     $1890 = $52;
     $1891 = ($1890|0)==(1);
     $1892 = $51;
     if ($1889) {
      $1893 = (_XXH_read64($1892)|0);
      $1894 = (getTempRet0() | 0);
      if ($1891) {
       $1899 = $1893;$1902 = $1894;
      } else {
       $1895 = (_XXH_swap64($1893,$1894)|0);
       $1896 = (getTempRet0() | 0);
       $1899 = $1895;$1902 = $1896;
      }
      $1897 = $50;
      $1898 = $1897;
      HEAP32[$1898>>2] = $1899;
      $1900 = (($1897) + 4)|0;
      $1901 = $1900;
      HEAP32[$1901>>2] = $1902;
     } else {
      $1903 = $1892;
      $1904 = $1903;
      $1905 = HEAP32[$1904>>2]|0;
      $1906 = (($1903) + 4)|0;
      $1907 = $1906;
      $1908 = HEAP32[$1907>>2]|0;
      if ($1891) {
       $1913 = $1905;$1916 = $1908;
      } else {
       $1909 = (_XXH_swap64($1905,$1908)|0);
       $1910 = (getTempRet0() | 0);
       $1913 = $1909;$1916 = $1910;
      }
      $1911 = $50;
      $1912 = $1911;
      HEAP32[$1912>>2] = $1913;
      $1914 = (($1911) + 4)|0;
      $1915 = $1914;
      HEAP32[$1915>>2] = $1916;
     }
     $1917 = $50;
     $1918 = $1917;
     $1919 = HEAP32[$1918>>2]|0;
     $1920 = (($1917) + 4)|0;
     $1921 = $1920;
     $1922 = HEAP32[$1921>>2]|0;
     $1923 = (_XXH64_round($1881,$1884,$1919,$1922)|0);
     $1924 = (getTempRet0() | 0);
     $1925 = $78;
     $1926 = $1925;
     HEAP32[$1926>>2] = $1923;
     $1927 = (($1925) + 4)|0;
     $1928 = $1927;
     HEAP32[$1928>>2] = $1924;
     $1929 = $71;
     $1930 = ((($1929)) + 8|0);
     $71 = $1930;
     $1931 = $71;
     $1932 = $74;
     $1933 = ($1931>>>0)<=($1932>>>0);
     if (!($1933)) {
      break;
     }
    }
    $1934 = $75;
    $1935 = $1934;
    $1936 = HEAP32[$1935>>2]|0;
    $1937 = (($1934) + 4)|0;
    $1938 = $1937;
    $1939 = HEAP32[$1938>>2]|0;
    $1940 = (_bitshift64Shl(($1936|0),($1939|0),1)|0);
    $1941 = (getTempRet0() | 0);
    $1942 = $75;
    $1943 = $1942;
    $1944 = HEAP32[$1943>>2]|0;
    $1945 = (($1942) + 4)|0;
    $1946 = $1945;
    $1947 = HEAP32[$1946>>2]|0;
    $1948 = (_bitshift64Lshr(($1944|0),($1947|0),63)|0);
    $1949 = (getTempRet0() | 0);
    $1950 = $1940 | $1948;
    $1951 = $1941 | $1949;
    $1952 = $76;
    $1953 = $1952;
    $1954 = HEAP32[$1953>>2]|0;
    $1955 = (($1952) + 4)|0;
    $1956 = $1955;
    $1957 = HEAP32[$1956>>2]|0;
    $1958 = (_bitshift64Shl(($1954|0),($1957|0),7)|0);
    $1959 = (getTempRet0() | 0);
    $1960 = $76;
    $1961 = $1960;
    $1962 = HEAP32[$1961>>2]|0;
    $1963 = (($1960) + 4)|0;
    $1964 = $1963;
    $1965 = HEAP32[$1964>>2]|0;
    $1966 = (_bitshift64Lshr(($1962|0),($1965|0),57)|0);
    $1967 = (getTempRet0() | 0);
    $1968 = $1958 | $1966;
    $1969 = $1959 | $1967;
    $1970 = (_i64Add(($1950|0),($1951|0),($1968|0),($1969|0))|0);
    $1971 = (getTempRet0() | 0);
    $1972 = $77;
    $1973 = $1972;
    $1974 = HEAP32[$1973>>2]|0;
    $1975 = (($1972) + 4)|0;
    $1976 = $1975;
    $1977 = HEAP32[$1976>>2]|0;
    $1978 = (_bitshift64Shl(($1974|0),($1977|0),12)|0);
    $1979 = (getTempRet0() | 0);
    $1980 = $77;
    $1981 = $1980;
    $1982 = HEAP32[$1981>>2]|0;
    $1983 = (($1980) + 4)|0;
    $1984 = $1983;
    $1985 = HEAP32[$1984>>2]|0;
    $1986 = (_bitshift64Lshr(($1982|0),($1985|0),52)|0);
    $1987 = (getTempRet0() | 0);
    $1988 = $1978 | $1986;
    $1989 = $1979 | $1987;
    $1990 = (_i64Add(($1970|0),($1971|0),($1988|0),($1989|0))|0);
    $1991 = (getTempRet0() | 0);
    $1992 = $78;
    $1993 = $1992;
    $1994 = HEAP32[$1993>>2]|0;
    $1995 = (($1992) + 4)|0;
    $1996 = $1995;
    $1997 = HEAP32[$1996>>2]|0;
    $1998 = (_bitshift64Shl(($1994|0),($1997|0),18)|0);
    $1999 = (getTempRet0() | 0);
    $2000 = $78;
    $2001 = $2000;
    $2002 = HEAP32[$2001>>2]|0;
    $2003 = (($2000) + 4)|0;
    $2004 = $2003;
    $2005 = HEAP32[$2004>>2]|0;
    $2006 = (_bitshift64Lshr(($2002|0),($2005|0),46)|0);
    $2007 = (getTempRet0() | 0);
    $2008 = $1998 | $2006;
    $2009 = $1999 | $2007;
    $2010 = (_i64Add(($1990|0),($1991|0),($2008|0),($2009|0))|0);
    $2011 = (getTempRet0() | 0);
    $2012 = $73;
    $2013 = $2012;
    HEAP32[$2013>>2] = $2010;
    $2014 = (($2012) + 4)|0;
    $2015 = $2014;
    HEAP32[$2015>>2] = $2011;
    $2016 = $73;
    $2017 = $2016;
    $2018 = HEAP32[$2017>>2]|0;
    $2019 = (($2016) + 4)|0;
    $2020 = $2019;
    $2021 = HEAP32[$2020>>2]|0;
    $2022 = $75;
    $2023 = $2022;
    $2024 = HEAP32[$2023>>2]|0;
    $2025 = (($2022) + 4)|0;
    $2026 = $2025;
    $2027 = HEAP32[$2026>>2]|0;
    $2028 = (_XXH64_mergeRound($2018,$2021,$2024,$2027)|0);
    $2029 = (getTempRet0() | 0);
    $2030 = $73;
    $2031 = $2030;
    HEAP32[$2031>>2] = $2028;
    $2032 = (($2030) + 4)|0;
    $2033 = $2032;
    HEAP32[$2033>>2] = $2029;
    $2034 = $73;
    $2035 = $2034;
    $2036 = HEAP32[$2035>>2]|0;
    $2037 = (($2034) + 4)|0;
    $2038 = $2037;
    $2039 = HEAP32[$2038>>2]|0;
    $2040 = $76;
    $2041 = $2040;
    $2042 = HEAP32[$2041>>2]|0;
    $2043 = (($2040) + 4)|0;
    $2044 = $2043;
    $2045 = HEAP32[$2044>>2]|0;
    $2046 = (_XXH64_mergeRound($2036,$2039,$2042,$2045)|0);
    $2047 = (getTempRet0() | 0);
    $2048 = $73;
    $2049 = $2048;
    HEAP32[$2049>>2] = $2046;
    $2050 = (($2048) + 4)|0;
    $2051 = $2050;
    HEAP32[$2051>>2] = $2047;
    $2052 = $73;
    $2053 = $2052;
    $2054 = HEAP32[$2053>>2]|0;
    $2055 = (($2052) + 4)|0;
    $2056 = $2055;
    $2057 = HEAP32[$2056>>2]|0;
    $2058 = $77;
    $2059 = $2058;
    $2060 = HEAP32[$2059>>2]|0;
    $2061 = (($2058) + 4)|0;
    $2062 = $2061;
    $2063 = HEAP32[$2062>>2]|0;
    $2064 = (_XXH64_mergeRound($2054,$2057,$2060,$2063)|0);
    $2065 = (getTempRet0() | 0);
    $2066 = $73;
    $2067 = $2066;
    HEAP32[$2067>>2] = $2064;
    $2068 = (($2066) + 4)|0;
    $2069 = $2068;
    HEAP32[$2069>>2] = $2065;
    $2070 = $73;
    $2071 = $2070;
    $2072 = HEAP32[$2071>>2]|0;
    $2073 = (($2070) + 4)|0;
    $2074 = $2073;
    $2075 = HEAP32[$2074>>2]|0;
    $2076 = $78;
    $2077 = $2076;
    $2078 = HEAP32[$2077>>2]|0;
    $2079 = (($2076) + 4)|0;
    $2080 = $2079;
    $2081 = HEAP32[$2080>>2]|0;
    $2082 = (_XXH64_mergeRound($2072,$2075,$2078,$2081)|0);
    $2083 = (getTempRet0() | 0);
    $2084 = $73;
    $2085 = $2084;
    HEAP32[$2085>>2] = $2082;
    $2086 = (($2084) + 4)|0;
    $2087 = $2086;
    HEAP32[$2087>>2] = $2083;
   } else {
    $2088 = $68;
    $2089 = $2088;
    $2090 = HEAP32[$2089>>2]|0;
    $2091 = (($2088) + 4)|0;
    $2092 = $2091;
    $2093 = HEAP32[$2092>>2]|0;
    $2094 = (_i64Add(($2090|0),($2093|0),374761413,668265263)|0);
    $2095 = (getTempRet0() | 0);
    $2096 = $73;
    $2097 = $2096;
    HEAP32[$2097>>2] = $2094;
    $2098 = (($2096) + 4)|0;
    $2099 = $2098;
    HEAP32[$2099>>2] = $2095;
   }
   $2100 = $67;
   $2101 = $73;
   $2102 = $2101;
   $2103 = HEAP32[$2102>>2]|0;
   $2104 = (($2101) + 4)|0;
   $2105 = $2104;
   $2106 = HEAP32[$2105>>2]|0;
   $2107 = (_i64Add(($2103|0),($2106|0),($2100|0),0)|0);
   $2108 = (getTempRet0() | 0);
   $2109 = $73;
   $2110 = $2109;
   HEAP32[$2110>>2] = $2107;
   $2111 = (($2109) + 4)|0;
   $2112 = $2111;
   HEAP32[$2112>>2] = $2108;
   while(1) {
    $2113 = $71;
    $2114 = ((($2113)) + 8|0);
    $2115 = $72;
    $2116 = ($2114>>>0)<=($2115>>>0);
    $2117 = $71;
    if (!($2116)) {
     break;
    }
    $2118 = $69;
    $2119 = $70;
    $47 = $2117;
    $48 = $2118;
    $49 = $2119;
    $2120 = $49;
    $2121 = ($2120|0)==(1);
    $2122 = $48;
    $2123 = ($2122|0)==(1);
    $2124 = $47;
    if ($2121) {
     $2125 = (_XXH_read64($2124)|0);
     $2126 = (getTempRet0() | 0);
     if ($2123) {
      $2131 = $2125;$2134 = $2126;
     } else {
      $2127 = (_XXH_swap64($2125,$2126)|0);
      $2128 = (getTempRet0() | 0);
      $2131 = $2127;$2134 = $2128;
     }
     $2129 = $46;
     $2130 = $2129;
     HEAP32[$2130>>2] = $2131;
     $2132 = (($2129) + 4)|0;
     $2133 = $2132;
     HEAP32[$2133>>2] = $2134;
    } else {
     $2135 = $2124;
     $2136 = $2135;
     $2137 = HEAP32[$2136>>2]|0;
     $2138 = (($2135) + 4)|0;
     $2139 = $2138;
     $2140 = HEAP32[$2139>>2]|0;
     if ($2123) {
      $2145 = $2137;$2148 = $2140;
     } else {
      $2141 = (_XXH_swap64($2137,$2140)|0);
      $2142 = (getTempRet0() | 0);
      $2145 = $2141;$2148 = $2142;
     }
     $2143 = $46;
     $2144 = $2143;
     HEAP32[$2144>>2] = $2145;
     $2146 = (($2143) + 4)|0;
     $2147 = $2146;
     HEAP32[$2147>>2] = $2148;
    }
    $2149 = $46;
    $2150 = $2149;
    $2151 = HEAP32[$2150>>2]|0;
    $2152 = (($2149) + 4)|0;
    $2153 = $2152;
    $2154 = HEAP32[$2153>>2]|0;
    $2155 = (_XXH64_round(0,0,$2151,$2154)|0);
    $2156 = (getTempRet0() | 0);
    $2157 = $79;
    $2158 = $2157;
    HEAP32[$2158>>2] = $2155;
    $2159 = (($2157) + 4)|0;
    $2160 = $2159;
    HEAP32[$2160>>2] = $2156;
    $2161 = $79;
    $2162 = $2161;
    $2163 = HEAP32[$2162>>2]|0;
    $2164 = (($2161) + 4)|0;
    $2165 = $2164;
    $2166 = HEAP32[$2165>>2]|0;
    $2167 = $73;
    $2168 = $2167;
    $2169 = HEAP32[$2168>>2]|0;
    $2170 = (($2167) + 4)|0;
    $2171 = $2170;
    $2172 = HEAP32[$2171>>2]|0;
    $2173 = $2169 ^ $2163;
    $2174 = $2172 ^ $2166;
    $2175 = $73;
    $2176 = $2175;
    HEAP32[$2176>>2] = $2173;
    $2177 = (($2175) + 4)|0;
    $2178 = $2177;
    HEAP32[$2178>>2] = $2174;
    $2179 = $73;
    $2180 = $2179;
    $2181 = HEAP32[$2180>>2]|0;
    $2182 = (($2179) + 4)|0;
    $2183 = $2182;
    $2184 = HEAP32[$2183>>2]|0;
    $2185 = (_bitshift64Shl(($2181|0),($2184|0),27)|0);
    $2186 = (getTempRet0() | 0);
    $2187 = $73;
    $2188 = $2187;
    $2189 = HEAP32[$2188>>2]|0;
    $2190 = (($2187) + 4)|0;
    $2191 = $2190;
    $2192 = HEAP32[$2191>>2]|0;
    $2193 = (_bitshift64Lshr(($2189|0),($2192|0),37)|0);
    $2194 = (getTempRet0() | 0);
    $2195 = $2185 | $2193;
    $2196 = $2186 | $2194;
    $2197 = (___muldi3(($2195|0),($2196|0),-2048144761,-1640531535)|0);
    $2198 = (getTempRet0() | 0);
    $2199 = (_i64Add(($2197|0),($2198|0),-1028477341,-2048144777)|0);
    $2200 = (getTempRet0() | 0);
    $2201 = $73;
    $2202 = $2201;
    HEAP32[$2202>>2] = $2199;
    $2203 = (($2201) + 4)|0;
    $2204 = $2203;
    HEAP32[$2204>>2] = $2200;
    $2205 = $71;
    $2206 = ((($2205)) + 8|0);
    $71 = $2206;
   }
   $2207 = ((($2117)) + 4|0);
   $2208 = $72;
   $2209 = ($2207>>>0)<=($2208>>>0);
   if ($2209) {
    $2210 = $71;
    $2211 = $69;
    $2212 = $70;
    $43 = $2210;
    $44 = $2211;
    $45 = $2212;
    $2213 = $45;
    $2214 = ($2213|0)==(1);
    $2215 = $44;
    $2216 = ($2215|0)==(1);
    $2217 = $43;
    if ($2214) {
     $2218 = (_XXH_read32($2217)|0);
     if ($2216) {
      $2220 = $2218;
     } else {
      $2219 = (_XXH_swap32($2218)|0);
      $2220 = $2219;
     }
     $42 = $2220;
    } else {
     $2221 = HEAP32[$2217>>2]|0;
     if ($2216) {
      $2223 = $2221;
     } else {
      $2222 = (_XXH_swap32($2221)|0);
      $2223 = $2222;
     }
     $42 = $2223;
    }
    $2224 = $42;
    $2225 = (___muldi3(($2224|0),0,-2048144761,-1640531535)|0);
    $2226 = (getTempRet0() | 0);
    $2227 = $73;
    $2228 = $2227;
    $2229 = HEAP32[$2228>>2]|0;
    $2230 = (($2227) + 4)|0;
    $2231 = $2230;
    $2232 = HEAP32[$2231>>2]|0;
    $2233 = $2229 ^ $2225;
    $2234 = $2232 ^ $2226;
    $2235 = $73;
    $2236 = $2235;
    HEAP32[$2236>>2] = $2233;
    $2237 = (($2235) + 4)|0;
    $2238 = $2237;
    HEAP32[$2238>>2] = $2234;
    $2239 = $73;
    $2240 = $2239;
    $2241 = HEAP32[$2240>>2]|0;
    $2242 = (($2239) + 4)|0;
    $2243 = $2242;
    $2244 = HEAP32[$2243>>2]|0;
    $2245 = (_bitshift64Shl(($2241|0),($2244|0),23)|0);
    $2246 = (getTempRet0() | 0);
    $2247 = $73;
    $2248 = $2247;
    $2249 = HEAP32[$2248>>2]|0;
    $2250 = (($2247) + 4)|0;
    $2251 = $2250;
    $2252 = HEAP32[$2251>>2]|0;
    $2253 = (_bitshift64Lshr(($2249|0),($2252|0),41)|0);
    $2254 = (getTempRet0() | 0);
    $2255 = $2245 | $2253;
    $2256 = $2246 | $2254;
    $2257 = (___muldi3(($2255|0),($2256|0),668265295,-1028477379)|0);
    $2258 = (getTempRet0() | 0);
    $2259 = (_i64Add(($2257|0),($2258|0),-1640531463,374761393)|0);
    $2260 = (getTempRet0() | 0);
    $2261 = $73;
    $2262 = $2261;
    HEAP32[$2262>>2] = $2259;
    $2263 = (($2261) + 4)|0;
    $2264 = $2263;
    HEAP32[$2264>>2] = $2260;
    $2265 = $71;
    $2266 = ((($2265)) + 4|0);
    $71 = $2266;
   }
   while(1) {
    $2267 = $71;
    $2268 = $72;
    $2269 = ($2267>>>0)<($2268>>>0);
    if (!($2269)) {
     break;
    }
    $2270 = $71;
    $2271 = HEAP8[$2270>>0]|0;
    $2272 = $2271&255;
    $2273 = (___muldi3(($2272|0),0,374761413,668265263)|0);
    $2274 = (getTempRet0() | 0);
    $2275 = $73;
    $2276 = $2275;
    $2277 = HEAP32[$2276>>2]|0;
    $2278 = (($2275) + 4)|0;
    $2279 = $2278;
    $2280 = HEAP32[$2279>>2]|0;
    $2281 = $2277 ^ $2273;
    $2282 = $2280 ^ $2274;
    $2283 = $73;
    $2284 = $2283;
    HEAP32[$2284>>2] = $2281;
    $2285 = (($2283) + 4)|0;
    $2286 = $2285;
    HEAP32[$2286>>2] = $2282;
    $2287 = $73;
    $2288 = $2287;
    $2289 = HEAP32[$2288>>2]|0;
    $2290 = (($2287) + 4)|0;
    $2291 = $2290;
    $2292 = HEAP32[$2291>>2]|0;
    $2293 = (_bitshift64Shl(($2289|0),($2292|0),11)|0);
    $2294 = (getTempRet0() | 0);
    $2295 = $73;
    $2296 = $2295;
    $2297 = HEAP32[$2296>>2]|0;
    $2298 = (($2295) + 4)|0;
    $2299 = $2298;
    $2300 = HEAP32[$2299>>2]|0;
    $2301 = (_bitshift64Lshr(($2297|0),($2300|0),53)|0);
    $2302 = (getTempRet0() | 0);
    $2303 = $2293 | $2301;
    $2304 = $2294 | $2302;
    $2305 = (___muldi3(($2303|0),($2304|0),-2048144761,-1640531535)|0);
    $2306 = (getTempRet0() | 0);
    $2307 = $73;
    $2308 = $2307;
    HEAP32[$2308>>2] = $2305;
    $2309 = (($2307) + 4)|0;
    $2310 = $2309;
    HEAP32[$2310>>2] = $2306;
    $2311 = $71;
    $2312 = ((($2311)) + 1|0);
    $71 = $2312;
   }
   $2313 = $73;
   $2314 = $2313;
   $2315 = HEAP32[$2314>>2]|0;
   $2316 = (($2313) + 4)|0;
   $2317 = $2316;
   $2318 = HEAP32[$2317>>2]|0;
   $2319 = (_bitshift64Lshr(($2315|0),($2318|0),33)|0);
   $2320 = (getTempRet0() | 0);
   $2321 = $73;
   $2322 = $2321;
   $2323 = HEAP32[$2322>>2]|0;
   $2324 = (($2321) + 4)|0;
   $2325 = $2324;
   $2326 = HEAP32[$2325>>2]|0;
   $2327 = $2323 ^ $2319;
   $2328 = $2326 ^ $2320;
   $2329 = $73;
   $2330 = $2329;
   HEAP32[$2330>>2] = $2327;
   $2331 = (($2329) + 4)|0;
   $2332 = $2331;
   HEAP32[$2332>>2] = $2328;
   $2333 = $73;
   $2334 = $2333;
   $2335 = HEAP32[$2334>>2]|0;
   $2336 = (($2333) + 4)|0;
   $2337 = $2336;
   $2338 = HEAP32[$2337>>2]|0;
   $2339 = (___muldi3(($2335|0),($2338|0),668265295,-1028477379)|0);
   $2340 = (getTempRet0() | 0);
   $2341 = $73;
   $2342 = $2341;
   HEAP32[$2342>>2] = $2339;
   $2343 = (($2341) + 4)|0;
   $2344 = $2343;
   HEAP32[$2344>>2] = $2340;
   $2345 = $73;
   $2346 = $2345;
   $2347 = HEAP32[$2346>>2]|0;
   $2348 = (($2345) + 4)|0;
   $2349 = $2348;
   $2350 = HEAP32[$2349>>2]|0;
   $2351 = (_bitshift64Lshr(($2347|0),($2350|0),29)|0);
   $2352 = (getTempRet0() | 0);
   $2353 = $73;
   $2354 = $2353;
   $2355 = HEAP32[$2354>>2]|0;
   $2356 = (($2353) + 4)|0;
   $2357 = $2356;
   $2358 = HEAP32[$2357>>2]|0;
   $2359 = $2355 ^ $2351;
   $2360 = $2358 ^ $2352;
   $2361 = $73;
   $2362 = $2361;
   HEAP32[$2362>>2] = $2359;
   $2363 = (($2361) + 4)|0;
   $2364 = $2363;
   HEAP32[$2364>>2] = $2360;
   $2365 = $73;
   $2366 = $2365;
   $2367 = HEAP32[$2366>>2]|0;
   $2368 = (($2365) + 4)|0;
   $2369 = $2368;
   $2370 = HEAP32[$2369>>2]|0;
   $2371 = (___muldi3(($2367|0),($2370|0),-1640531463,374761393)|0);
   $2372 = (getTempRet0() | 0);
   $2373 = $73;
   $2374 = $2373;
   HEAP32[$2374>>2] = $2371;
   $2375 = (($2373) + 4)|0;
   $2376 = $2375;
   HEAP32[$2376>>2] = $2372;
   $2377 = $73;
   $2378 = $2377;
   $2379 = HEAP32[$2378>>2]|0;
   $2380 = (($2377) + 4)|0;
   $2381 = $2380;
   $2382 = HEAP32[$2381>>2]|0;
   $2383 = $73;
   $2384 = $2383;
   $2385 = HEAP32[$2384>>2]|0;
   $2386 = (($2383) + 4)|0;
   $2387 = $2386;
   $2388 = HEAP32[$2387>>2]|0;
   $2389 = $2385 ^ $2382;
   $2390 = $73;
   $2391 = $2390;
   HEAP32[$2391>>2] = $2389;
   $2392 = (($2390) + 4)|0;
   $2393 = $2392;
   HEAP32[$2393>>2] = $2388;
   $2394 = $73;
   $2395 = $2394;
   $2396 = HEAP32[$2395>>2]|0;
   $2397 = (($2394) + 4)|0;
   $2398 = $2397;
   $2399 = HEAP32[$2398>>2]|0;
   $2400 = $156;
   $2401 = $2400;
   HEAP32[$2401>>2] = $2396;
   $2402 = (($2400) + 4)|0;
   $2403 = $2402;
   HEAP32[$2403>>2] = $2399;
   $3145 = $156;
   $3146 = $3145;
   $3147 = HEAP32[$3146>>2]|0;
   $3148 = (($3145) + 4)|0;
   $3149 = $3148;
   $3150 = HEAP32[$3149>>2]|0;
   setTempRet0(($3150) | 0);
   STACKTOP = sp;return ($3147|0);
  } else {
   $28 = $173;
   $29 = $174;
   $2404 = $30;
   $2405 = $2404;
   HEAP32[$2405>>2] = $177;
   $2406 = (($2404) + 4)|0;
   $2407 = $2406;
   HEAP32[$2407>>2] = $180;
   $31 = 0;
   $32 = 1;
   $2408 = $28;
   $33 = $2408;
   $2409 = $33;
   $2410 = $29;
   $2411 = (($2409) + ($2410)|0);
   $34 = $2411;
   $2412 = $29;
   $2413 = ($2412>>>0)>=(32);
   if ($2413) {
    $2414 = $34;
    $2415 = ((($2414)) + -32|0);
    $36 = $2415;
    $2416 = $30;
    $2417 = $2416;
    $2418 = HEAP32[$2417>>2]|0;
    $2419 = (($2416) + 4)|0;
    $2420 = $2419;
    $2421 = HEAP32[$2420>>2]|0;
    $2422 = (_i64Add(($2418|0),($2421|0),-2048144761,-1640531535)|0);
    $2423 = (getTempRet0() | 0);
    $2424 = (_i64Add(($2422|0),($2423|0),668265295,-1028477379)|0);
    $2425 = (getTempRet0() | 0);
    $2426 = $37;
    $2427 = $2426;
    HEAP32[$2427>>2] = $2424;
    $2428 = (($2426) + 4)|0;
    $2429 = $2428;
    HEAP32[$2429>>2] = $2425;
    $2430 = $30;
    $2431 = $2430;
    $2432 = HEAP32[$2431>>2]|0;
    $2433 = (($2430) + 4)|0;
    $2434 = $2433;
    $2435 = HEAP32[$2434>>2]|0;
    $2436 = (_i64Add(($2432|0),($2435|0),668265295,-1028477379)|0);
    $2437 = (getTempRet0() | 0);
    $2438 = $38;
    $2439 = $2438;
    HEAP32[$2439>>2] = $2436;
    $2440 = (($2438) + 4)|0;
    $2441 = $2440;
    HEAP32[$2441>>2] = $2437;
    $2442 = $30;
    $2443 = $2442;
    $2444 = HEAP32[$2443>>2]|0;
    $2445 = (($2442) + 4)|0;
    $2446 = $2445;
    $2447 = HEAP32[$2446>>2]|0;
    $2448 = $39;
    $2449 = $2448;
    HEAP32[$2449>>2] = $2444;
    $2450 = (($2448) + 4)|0;
    $2451 = $2450;
    HEAP32[$2451>>2] = $2447;
    $2452 = $30;
    $2453 = $2452;
    $2454 = HEAP32[$2453>>2]|0;
    $2455 = (($2452) + 4)|0;
    $2456 = $2455;
    $2457 = HEAP32[$2456>>2]|0;
    $2458 = (_i64Subtract(($2454|0),($2457|0),-2048144761,-1640531535)|0);
    $2459 = (getTempRet0() | 0);
    $2460 = $40;
    $2461 = $2460;
    HEAP32[$2461>>2] = $2458;
    $2462 = (($2460) + 4)|0;
    $2463 = $2462;
    HEAP32[$2463>>2] = $2459;
    while(1) {
     $2464 = $37;
     $2465 = $2464;
     $2466 = HEAP32[$2465>>2]|0;
     $2467 = (($2464) + 4)|0;
     $2468 = $2467;
     $2469 = HEAP32[$2468>>2]|0;
     $2470 = $33;
     $2471 = $31;
     $2472 = $32;
     $25 = $2470;
     $26 = $2471;
     $27 = $2472;
     $2473 = $27;
     $2474 = ($2473|0)==(1);
     $2475 = $26;
     $2476 = ($2475|0)==(1);
     $2477 = $25;
     if ($2474) {
      $2478 = (_XXH_read64($2477)|0);
      $2479 = (getTempRet0() | 0);
      if ($2476) {
       $2484 = $2478;$2487 = $2479;
      } else {
       $2480 = (_XXH_swap64($2478,$2479)|0);
       $2481 = (getTempRet0() | 0);
       $2484 = $2480;$2487 = $2481;
      }
      $2482 = $24;
      $2483 = $2482;
      HEAP32[$2483>>2] = $2484;
      $2485 = (($2482) + 4)|0;
      $2486 = $2485;
      HEAP32[$2486>>2] = $2487;
     } else {
      $2488 = $2477;
      $2489 = $2488;
      $2490 = HEAP32[$2489>>2]|0;
      $2491 = (($2488) + 4)|0;
      $2492 = $2491;
      $2493 = HEAP32[$2492>>2]|0;
      if ($2476) {
       $2498 = $2490;$2501 = $2493;
      } else {
       $2494 = (_XXH_swap64($2490,$2493)|0);
       $2495 = (getTempRet0() | 0);
       $2498 = $2494;$2501 = $2495;
      }
      $2496 = $24;
      $2497 = $2496;
      HEAP32[$2497>>2] = $2498;
      $2499 = (($2496) + 4)|0;
      $2500 = $2499;
      HEAP32[$2500>>2] = $2501;
     }
     $2502 = $24;
     $2503 = $2502;
     $2504 = HEAP32[$2503>>2]|0;
     $2505 = (($2502) + 4)|0;
     $2506 = $2505;
     $2507 = HEAP32[$2506>>2]|0;
     $2508 = (_XXH64_round($2466,$2469,$2504,$2507)|0);
     $2509 = (getTempRet0() | 0);
     $2510 = $37;
     $2511 = $2510;
     HEAP32[$2511>>2] = $2508;
     $2512 = (($2510) + 4)|0;
     $2513 = $2512;
     HEAP32[$2513>>2] = $2509;
     $2514 = $33;
     $2515 = ((($2514)) + 8|0);
     $33 = $2515;
     $2516 = $38;
     $2517 = $2516;
     $2518 = HEAP32[$2517>>2]|0;
     $2519 = (($2516) + 4)|0;
     $2520 = $2519;
     $2521 = HEAP32[$2520>>2]|0;
     $2522 = $33;
     $2523 = $31;
     $2524 = $32;
     $21 = $2522;
     $22 = $2523;
     $23 = $2524;
     $2525 = $23;
     $2526 = ($2525|0)==(1);
     $2527 = $22;
     $2528 = ($2527|0)==(1);
     $2529 = $21;
     if ($2526) {
      $2530 = (_XXH_read64($2529)|0);
      $2531 = (getTempRet0() | 0);
      if ($2528) {
       $2536 = $2530;$2539 = $2531;
      } else {
       $2532 = (_XXH_swap64($2530,$2531)|0);
       $2533 = (getTempRet0() | 0);
       $2536 = $2532;$2539 = $2533;
      }
      $2534 = $20;
      $2535 = $2534;
      HEAP32[$2535>>2] = $2536;
      $2537 = (($2534) + 4)|0;
      $2538 = $2537;
      HEAP32[$2538>>2] = $2539;
     } else {
      $2540 = $2529;
      $2541 = $2540;
      $2542 = HEAP32[$2541>>2]|0;
      $2543 = (($2540) + 4)|0;
      $2544 = $2543;
      $2545 = HEAP32[$2544>>2]|0;
      if ($2528) {
       $2550 = $2542;$2553 = $2545;
      } else {
       $2546 = (_XXH_swap64($2542,$2545)|0);
       $2547 = (getTempRet0() | 0);
       $2550 = $2546;$2553 = $2547;
      }
      $2548 = $20;
      $2549 = $2548;
      HEAP32[$2549>>2] = $2550;
      $2551 = (($2548) + 4)|0;
      $2552 = $2551;
      HEAP32[$2552>>2] = $2553;
     }
     $2554 = $20;
     $2555 = $2554;
     $2556 = HEAP32[$2555>>2]|0;
     $2557 = (($2554) + 4)|0;
     $2558 = $2557;
     $2559 = HEAP32[$2558>>2]|0;
     $2560 = (_XXH64_round($2518,$2521,$2556,$2559)|0);
     $2561 = (getTempRet0() | 0);
     $2562 = $38;
     $2563 = $2562;
     HEAP32[$2563>>2] = $2560;
     $2564 = (($2562) + 4)|0;
     $2565 = $2564;
     HEAP32[$2565>>2] = $2561;
     $2566 = $33;
     $2567 = ((($2566)) + 8|0);
     $33 = $2567;
     $2568 = $39;
     $2569 = $2568;
     $2570 = HEAP32[$2569>>2]|0;
     $2571 = (($2568) + 4)|0;
     $2572 = $2571;
     $2573 = HEAP32[$2572>>2]|0;
     $2574 = $33;
     $2575 = $31;
     $2576 = $32;
     $17 = $2574;
     $18 = $2575;
     $19 = $2576;
     $2577 = $19;
     $2578 = ($2577|0)==(1);
     $2579 = $18;
     $2580 = ($2579|0)==(1);
     $2581 = $17;
     if ($2578) {
      $2582 = (_XXH_read64($2581)|0);
      $2583 = (getTempRet0() | 0);
      if ($2580) {
       $2588 = $2582;$2591 = $2583;
      } else {
       $2584 = (_XXH_swap64($2582,$2583)|0);
       $2585 = (getTempRet0() | 0);
       $2588 = $2584;$2591 = $2585;
      }
      $2586 = $16;
      $2587 = $2586;
      HEAP32[$2587>>2] = $2588;
      $2589 = (($2586) + 4)|0;
      $2590 = $2589;
      HEAP32[$2590>>2] = $2591;
     } else {
      $2592 = $2581;
      $2593 = $2592;
      $2594 = HEAP32[$2593>>2]|0;
      $2595 = (($2592) + 4)|0;
      $2596 = $2595;
      $2597 = HEAP32[$2596>>2]|0;
      if ($2580) {
       $2602 = $2594;$2605 = $2597;
      } else {
       $2598 = (_XXH_swap64($2594,$2597)|0);
       $2599 = (getTempRet0() | 0);
       $2602 = $2598;$2605 = $2599;
      }
      $2600 = $16;
      $2601 = $2600;
      HEAP32[$2601>>2] = $2602;
      $2603 = (($2600) + 4)|0;
      $2604 = $2603;
      HEAP32[$2604>>2] = $2605;
     }
     $2606 = $16;
     $2607 = $2606;
     $2608 = HEAP32[$2607>>2]|0;
     $2609 = (($2606) + 4)|0;
     $2610 = $2609;
     $2611 = HEAP32[$2610>>2]|0;
     $2612 = (_XXH64_round($2570,$2573,$2608,$2611)|0);
     $2613 = (getTempRet0() | 0);
     $2614 = $39;
     $2615 = $2614;
     HEAP32[$2615>>2] = $2612;
     $2616 = (($2614) + 4)|0;
     $2617 = $2616;
     HEAP32[$2617>>2] = $2613;
     $2618 = $33;
     $2619 = ((($2618)) + 8|0);
     $33 = $2619;
     $2620 = $40;
     $2621 = $2620;
     $2622 = HEAP32[$2621>>2]|0;
     $2623 = (($2620) + 4)|0;
     $2624 = $2623;
     $2625 = HEAP32[$2624>>2]|0;
     $2626 = $33;
     $2627 = $31;
     $2628 = $32;
     $13 = $2626;
     $14 = $2627;
     $15 = $2628;
     $2629 = $15;
     $2630 = ($2629|0)==(1);
     $2631 = $14;
     $2632 = ($2631|0)==(1);
     $2633 = $13;
     if ($2630) {
      $2634 = (_XXH_read64($2633)|0);
      $2635 = (getTempRet0() | 0);
      if ($2632) {
       $2640 = $2634;$2643 = $2635;
      } else {
       $2636 = (_XXH_swap64($2634,$2635)|0);
       $2637 = (getTempRet0() | 0);
       $2640 = $2636;$2643 = $2637;
      }
      $2638 = $12;
      $2639 = $2638;
      HEAP32[$2639>>2] = $2640;
      $2641 = (($2638) + 4)|0;
      $2642 = $2641;
      HEAP32[$2642>>2] = $2643;
     } else {
      $2644 = $2633;
      $2645 = $2644;
      $2646 = HEAP32[$2645>>2]|0;
      $2647 = (($2644) + 4)|0;
      $2648 = $2647;
      $2649 = HEAP32[$2648>>2]|0;
      if ($2632) {
       $2654 = $2646;$2657 = $2649;
      } else {
       $2650 = (_XXH_swap64($2646,$2649)|0);
       $2651 = (getTempRet0() | 0);
       $2654 = $2650;$2657 = $2651;
      }
      $2652 = $12;
      $2653 = $2652;
      HEAP32[$2653>>2] = $2654;
      $2655 = (($2652) + 4)|0;
      $2656 = $2655;
      HEAP32[$2656>>2] = $2657;
     }
     $2658 = $12;
     $2659 = $2658;
     $2660 = HEAP32[$2659>>2]|0;
     $2661 = (($2658) + 4)|0;
     $2662 = $2661;
     $2663 = HEAP32[$2662>>2]|0;
     $2664 = (_XXH64_round($2622,$2625,$2660,$2663)|0);
     $2665 = (getTempRet0() | 0);
     $2666 = $40;
     $2667 = $2666;
     HEAP32[$2667>>2] = $2664;
     $2668 = (($2666) + 4)|0;
     $2669 = $2668;
     HEAP32[$2669>>2] = $2665;
     $2670 = $33;
     $2671 = ((($2670)) + 8|0);
     $33 = $2671;
     $2672 = $33;
     $2673 = $36;
     $2674 = ($2672>>>0)<=($2673>>>0);
     if (!($2674)) {
      break;
     }
    }
    $2675 = $37;
    $2676 = $2675;
    $2677 = HEAP32[$2676>>2]|0;
    $2678 = (($2675) + 4)|0;
    $2679 = $2678;
    $2680 = HEAP32[$2679>>2]|0;
    $2681 = (_bitshift64Shl(($2677|0),($2680|0),1)|0);
    $2682 = (getTempRet0() | 0);
    $2683 = $37;
    $2684 = $2683;
    $2685 = HEAP32[$2684>>2]|0;
    $2686 = (($2683) + 4)|0;
    $2687 = $2686;
    $2688 = HEAP32[$2687>>2]|0;
    $2689 = (_bitshift64Lshr(($2685|0),($2688|0),63)|0);
    $2690 = (getTempRet0() | 0);
    $2691 = $2681 | $2689;
    $2692 = $2682 | $2690;
    $2693 = $38;
    $2694 = $2693;
    $2695 = HEAP32[$2694>>2]|0;
    $2696 = (($2693) + 4)|0;
    $2697 = $2696;
    $2698 = HEAP32[$2697>>2]|0;
    $2699 = (_bitshift64Shl(($2695|0),($2698|0),7)|0);
    $2700 = (getTempRet0() | 0);
    $2701 = $38;
    $2702 = $2701;
    $2703 = HEAP32[$2702>>2]|0;
    $2704 = (($2701) + 4)|0;
    $2705 = $2704;
    $2706 = HEAP32[$2705>>2]|0;
    $2707 = (_bitshift64Lshr(($2703|0),($2706|0),57)|0);
    $2708 = (getTempRet0() | 0);
    $2709 = $2699 | $2707;
    $2710 = $2700 | $2708;
    $2711 = (_i64Add(($2691|0),($2692|0),($2709|0),($2710|0))|0);
    $2712 = (getTempRet0() | 0);
    $2713 = $39;
    $2714 = $2713;
    $2715 = HEAP32[$2714>>2]|0;
    $2716 = (($2713) + 4)|0;
    $2717 = $2716;
    $2718 = HEAP32[$2717>>2]|0;
    $2719 = (_bitshift64Shl(($2715|0),($2718|0),12)|0);
    $2720 = (getTempRet0() | 0);
    $2721 = $39;
    $2722 = $2721;
    $2723 = HEAP32[$2722>>2]|0;
    $2724 = (($2721) + 4)|0;
    $2725 = $2724;
    $2726 = HEAP32[$2725>>2]|0;
    $2727 = (_bitshift64Lshr(($2723|0),($2726|0),52)|0);
    $2728 = (getTempRet0() | 0);
    $2729 = $2719 | $2727;
    $2730 = $2720 | $2728;
    $2731 = (_i64Add(($2711|0),($2712|0),($2729|0),($2730|0))|0);
    $2732 = (getTempRet0() | 0);
    $2733 = $40;
    $2734 = $2733;
    $2735 = HEAP32[$2734>>2]|0;
    $2736 = (($2733) + 4)|0;
    $2737 = $2736;
    $2738 = HEAP32[$2737>>2]|0;
    $2739 = (_bitshift64Shl(($2735|0),($2738|0),18)|0);
    $2740 = (getTempRet0() | 0);
    $2741 = $40;
    $2742 = $2741;
    $2743 = HEAP32[$2742>>2]|0;
    $2744 = (($2741) + 4)|0;
    $2745 = $2744;
    $2746 = HEAP32[$2745>>2]|0;
    $2747 = (_bitshift64Lshr(($2743|0),($2746|0),46)|0);
    $2748 = (getTempRet0() | 0);
    $2749 = $2739 | $2747;
    $2750 = $2740 | $2748;
    $2751 = (_i64Add(($2731|0),($2732|0),($2749|0),($2750|0))|0);
    $2752 = (getTempRet0() | 0);
    $2753 = $35;
    $2754 = $2753;
    HEAP32[$2754>>2] = $2751;
    $2755 = (($2753) + 4)|0;
    $2756 = $2755;
    HEAP32[$2756>>2] = $2752;
    $2757 = $35;
    $2758 = $2757;
    $2759 = HEAP32[$2758>>2]|0;
    $2760 = (($2757) + 4)|0;
    $2761 = $2760;
    $2762 = HEAP32[$2761>>2]|0;
    $2763 = $37;
    $2764 = $2763;
    $2765 = HEAP32[$2764>>2]|0;
    $2766 = (($2763) + 4)|0;
    $2767 = $2766;
    $2768 = HEAP32[$2767>>2]|0;
    $2769 = (_XXH64_mergeRound($2759,$2762,$2765,$2768)|0);
    $2770 = (getTempRet0() | 0);
    $2771 = $35;
    $2772 = $2771;
    HEAP32[$2772>>2] = $2769;
    $2773 = (($2771) + 4)|0;
    $2774 = $2773;
    HEAP32[$2774>>2] = $2770;
    $2775 = $35;
    $2776 = $2775;
    $2777 = HEAP32[$2776>>2]|0;
    $2778 = (($2775) + 4)|0;
    $2779 = $2778;
    $2780 = HEAP32[$2779>>2]|0;
    $2781 = $38;
    $2782 = $2781;
    $2783 = HEAP32[$2782>>2]|0;
    $2784 = (($2781) + 4)|0;
    $2785 = $2784;
    $2786 = HEAP32[$2785>>2]|0;
    $2787 = (_XXH64_mergeRound($2777,$2780,$2783,$2786)|0);
    $2788 = (getTempRet0() | 0);
    $2789 = $35;
    $2790 = $2789;
    HEAP32[$2790>>2] = $2787;
    $2791 = (($2789) + 4)|0;
    $2792 = $2791;
    HEAP32[$2792>>2] = $2788;
    $2793 = $35;
    $2794 = $2793;
    $2795 = HEAP32[$2794>>2]|0;
    $2796 = (($2793) + 4)|0;
    $2797 = $2796;
    $2798 = HEAP32[$2797>>2]|0;
    $2799 = $39;
    $2800 = $2799;
    $2801 = HEAP32[$2800>>2]|0;
    $2802 = (($2799) + 4)|0;
    $2803 = $2802;
    $2804 = HEAP32[$2803>>2]|0;
    $2805 = (_XXH64_mergeRound($2795,$2798,$2801,$2804)|0);
    $2806 = (getTempRet0() | 0);
    $2807 = $35;
    $2808 = $2807;
    HEAP32[$2808>>2] = $2805;
    $2809 = (($2807) + 4)|0;
    $2810 = $2809;
    HEAP32[$2810>>2] = $2806;
    $2811 = $35;
    $2812 = $2811;
    $2813 = HEAP32[$2812>>2]|0;
    $2814 = (($2811) + 4)|0;
    $2815 = $2814;
    $2816 = HEAP32[$2815>>2]|0;
    $2817 = $40;
    $2818 = $2817;
    $2819 = HEAP32[$2818>>2]|0;
    $2820 = (($2817) + 4)|0;
    $2821 = $2820;
    $2822 = HEAP32[$2821>>2]|0;
    $2823 = (_XXH64_mergeRound($2813,$2816,$2819,$2822)|0);
    $2824 = (getTempRet0() | 0);
    $2825 = $35;
    $2826 = $2825;
    HEAP32[$2826>>2] = $2823;
    $2827 = (($2825) + 4)|0;
    $2828 = $2827;
    HEAP32[$2828>>2] = $2824;
   } else {
    $2829 = $30;
    $2830 = $2829;
    $2831 = HEAP32[$2830>>2]|0;
    $2832 = (($2829) + 4)|0;
    $2833 = $2832;
    $2834 = HEAP32[$2833>>2]|0;
    $2835 = (_i64Add(($2831|0),($2834|0),374761413,668265263)|0);
    $2836 = (getTempRet0() | 0);
    $2837 = $35;
    $2838 = $2837;
    HEAP32[$2838>>2] = $2835;
    $2839 = (($2837) + 4)|0;
    $2840 = $2839;
    HEAP32[$2840>>2] = $2836;
   }
   $2841 = $29;
   $2842 = $35;
   $2843 = $2842;
   $2844 = HEAP32[$2843>>2]|0;
   $2845 = (($2842) + 4)|0;
   $2846 = $2845;
   $2847 = HEAP32[$2846>>2]|0;
   $2848 = (_i64Add(($2844|0),($2847|0),($2841|0),0)|0);
   $2849 = (getTempRet0() | 0);
   $2850 = $35;
   $2851 = $2850;
   HEAP32[$2851>>2] = $2848;
   $2852 = (($2850) + 4)|0;
   $2853 = $2852;
   HEAP32[$2853>>2] = $2849;
   while(1) {
    $2854 = $33;
    $2855 = ((($2854)) + 8|0);
    $2856 = $34;
    $2857 = ($2855>>>0)<=($2856>>>0);
    $2858 = $33;
    if (!($2857)) {
     break;
    }
    $2859 = $31;
    $2860 = $32;
    $9 = $2858;
    $10 = $2859;
    $11 = $2860;
    $2861 = $11;
    $2862 = ($2861|0)==(1);
    $2863 = $10;
    $2864 = ($2863|0)==(1);
    $2865 = $9;
    if ($2862) {
     $2866 = (_XXH_read64($2865)|0);
     $2867 = (getTempRet0() | 0);
     if ($2864) {
      $2872 = $2866;$2875 = $2867;
     } else {
      $2868 = (_XXH_swap64($2866,$2867)|0);
      $2869 = (getTempRet0() | 0);
      $2872 = $2868;$2875 = $2869;
     }
     $2870 = $8;
     $2871 = $2870;
     HEAP32[$2871>>2] = $2872;
     $2873 = (($2870) + 4)|0;
     $2874 = $2873;
     HEAP32[$2874>>2] = $2875;
    } else {
     $2876 = $2865;
     $2877 = $2876;
     $2878 = HEAP32[$2877>>2]|0;
     $2879 = (($2876) + 4)|0;
     $2880 = $2879;
     $2881 = HEAP32[$2880>>2]|0;
     if ($2864) {
      $2886 = $2878;$2889 = $2881;
     } else {
      $2882 = (_XXH_swap64($2878,$2881)|0);
      $2883 = (getTempRet0() | 0);
      $2886 = $2882;$2889 = $2883;
     }
     $2884 = $8;
     $2885 = $2884;
     HEAP32[$2885>>2] = $2886;
     $2887 = (($2884) + 4)|0;
     $2888 = $2887;
     HEAP32[$2888>>2] = $2889;
    }
    $2890 = $8;
    $2891 = $2890;
    $2892 = HEAP32[$2891>>2]|0;
    $2893 = (($2890) + 4)|0;
    $2894 = $2893;
    $2895 = HEAP32[$2894>>2]|0;
    $2896 = (_XXH64_round(0,0,$2892,$2895)|0);
    $2897 = (getTempRet0() | 0);
    $2898 = $41;
    $2899 = $2898;
    HEAP32[$2899>>2] = $2896;
    $2900 = (($2898) + 4)|0;
    $2901 = $2900;
    HEAP32[$2901>>2] = $2897;
    $2902 = $41;
    $2903 = $2902;
    $2904 = HEAP32[$2903>>2]|0;
    $2905 = (($2902) + 4)|0;
    $2906 = $2905;
    $2907 = HEAP32[$2906>>2]|0;
    $2908 = $35;
    $2909 = $2908;
    $2910 = HEAP32[$2909>>2]|0;
    $2911 = (($2908) + 4)|0;
    $2912 = $2911;
    $2913 = HEAP32[$2912>>2]|0;
    $2914 = $2910 ^ $2904;
    $2915 = $2913 ^ $2907;
    $2916 = $35;
    $2917 = $2916;
    HEAP32[$2917>>2] = $2914;
    $2918 = (($2916) + 4)|0;
    $2919 = $2918;
    HEAP32[$2919>>2] = $2915;
    $2920 = $35;
    $2921 = $2920;
    $2922 = HEAP32[$2921>>2]|0;
    $2923 = (($2920) + 4)|0;
    $2924 = $2923;
    $2925 = HEAP32[$2924>>2]|0;
    $2926 = (_bitshift64Shl(($2922|0),($2925|0),27)|0);
    $2927 = (getTempRet0() | 0);
    $2928 = $35;
    $2929 = $2928;
    $2930 = HEAP32[$2929>>2]|0;
    $2931 = (($2928) + 4)|0;
    $2932 = $2931;
    $2933 = HEAP32[$2932>>2]|0;
    $2934 = (_bitshift64Lshr(($2930|0),($2933|0),37)|0);
    $2935 = (getTempRet0() | 0);
    $2936 = $2926 | $2934;
    $2937 = $2927 | $2935;
    $2938 = (___muldi3(($2936|0),($2937|0),-2048144761,-1640531535)|0);
    $2939 = (getTempRet0() | 0);
    $2940 = (_i64Add(($2938|0),($2939|0),-1028477341,-2048144777)|0);
    $2941 = (getTempRet0() | 0);
    $2942 = $35;
    $2943 = $2942;
    HEAP32[$2943>>2] = $2940;
    $2944 = (($2942) + 4)|0;
    $2945 = $2944;
    HEAP32[$2945>>2] = $2941;
    $2946 = $33;
    $2947 = ((($2946)) + 8|0);
    $33 = $2947;
   }
   $2948 = ((($2858)) + 4|0);
   $2949 = $34;
   $2950 = ($2948>>>0)<=($2949>>>0);
   if ($2950) {
    $2951 = $33;
    $2952 = $31;
    $2953 = $32;
    $5 = $2951;
    $6 = $2952;
    $7 = $2953;
    $2954 = $7;
    $2955 = ($2954|0)==(1);
    $2956 = $6;
    $2957 = ($2956|0)==(1);
    $2958 = $5;
    if ($2955) {
     $2959 = (_XXH_read32($2958)|0);
     if ($2957) {
      $2961 = $2959;
     } else {
      $2960 = (_XXH_swap32($2959)|0);
      $2961 = $2960;
     }
     $4 = $2961;
    } else {
     $2962 = HEAP32[$2958>>2]|0;
     if ($2957) {
      $2964 = $2962;
     } else {
      $2963 = (_XXH_swap32($2962)|0);
      $2964 = $2963;
     }
     $4 = $2964;
    }
    $2965 = $4;
    $2966 = (___muldi3(($2965|0),0,-2048144761,-1640531535)|0);
    $2967 = (getTempRet0() | 0);
    $2968 = $35;
    $2969 = $2968;
    $2970 = HEAP32[$2969>>2]|0;
    $2971 = (($2968) + 4)|0;
    $2972 = $2971;
    $2973 = HEAP32[$2972>>2]|0;
    $2974 = $2970 ^ $2966;
    $2975 = $2973 ^ $2967;
    $2976 = $35;
    $2977 = $2976;
    HEAP32[$2977>>2] = $2974;
    $2978 = (($2976) + 4)|0;
    $2979 = $2978;
    HEAP32[$2979>>2] = $2975;
    $2980 = $35;
    $2981 = $2980;
    $2982 = HEAP32[$2981>>2]|0;
    $2983 = (($2980) + 4)|0;
    $2984 = $2983;
    $2985 = HEAP32[$2984>>2]|0;
    $2986 = (_bitshift64Shl(($2982|0),($2985|0),23)|0);
    $2987 = (getTempRet0() | 0);
    $2988 = $35;
    $2989 = $2988;
    $2990 = HEAP32[$2989>>2]|0;
    $2991 = (($2988) + 4)|0;
    $2992 = $2991;
    $2993 = HEAP32[$2992>>2]|0;
    $2994 = (_bitshift64Lshr(($2990|0),($2993|0),41)|0);
    $2995 = (getTempRet0() | 0);
    $2996 = $2986 | $2994;
    $2997 = $2987 | $2995;
    $2998 = (___muldi3(($2996|0),($2997|0),668265295,-1028477379)|0);
    $2999 = (getTempRet0() | 0);
    $3000 = (_i64Add(($2998|0),($2999|0),-1640531463,374761393)|0);
    $3001 = (getTempRet0() | 0);
    $3002 = $35;
    $3003 = $3002;
    HEAP32[$3003>>2] = $3000;
    $3004 = (($3002) + 4)|0;
    $3005 = $3004;
    HEAP32[$3005>>2] = $3001;
    $3006 = $33;
    $3007 = ((($3006)) + 4|0);
    $33 = $3007;
   }
   while(1) {
    $3008 = $33;
    $3009 = $34;
    $3010 = ($3008>>>0)<($3009>>>0);
    if (!($3010)) {
     break;
    }
    $3011 = $33;
    $3012 = HEAP8[$3011>>0]|0;
    $3013 = $3012&255;
    $3014 = (___muldi3(($3013|0),0,374761413,668265263)|0);
    $3015 = (getTempRet0() | 0);
    $3016 = $35;
    $3017 = $3016;
    $3018 = HEAP32[$3017>>2]|0;
    $3019 = (($3016) + 4)|0;
    $3020 = $3019;
    $3021 = HEAP32[$3020>>2]|0;
    $3022 = $3018 ^ $3014;
    $3023 = $3021 ^ $3015;
    $3024 = $35;
    $3025 = $3024;
    HEAP32[$3025>>2] = $3022;
    $3026 = (($3024) + 4)|0;
    $3027 = $3026;
    HEAP32[$3027>>2] = $3023;
    $3028 = $35;
    $3029 = $3028;
    $3030 = HEAP32[$3029>>2]|0;
    $3031 = (($3028) + 4)|0;
    $3032 = $3031;
    $3033 = HEAP32[$3032>>2]|0;
    $3034 = (_bitshift64Shl(($3030|0),($3033|0),11)|0);
    $3035 = (getTempRet0() | 0);
    $3036 = $35;
    $3037 = $3036;
    $3038 = HEAP32[$3037>>2]|0;
    $3039 = (($3036) + 4)|0;
    $3040 = $3039;
    $3041 = HEAP32[$3040>>2]|0;
    $3042 = (_bitshift64Lshr(($3038|0),($3041|0),53)|0);
    $3043 = (getTempRet0() | 0);
    $3044 = $3034 | $3042;
    $3045 = $3035 | $3043;
    $3046 = (___muldi3(($3044|0),($3045|0),-2048144761,-1640531535)|0);
    $3047 = (getTempRet0() | 0);
    $3048 = $35;
    $3049 = $3048;
    HEAP32[$3049>>2] = $3046;
    $3050 = (($3048) + 4)|0;
    $3051 = $3050;
    HEAP32[$3051>>2] = $3047;
    $3052 = $33;
    $3053 = ((($3052)) + 1|0);
    $33 = $3053;
   }
   $3054 = $35;
   $3055 = $3054;
   $3056 = HEAP32[$3055>>2]|0;
   $3057 = (($3054) + 4)|0;
   $3058 = $3057;
   $3059 = HEAP32[$3058>>2]|0;
   $3060 = (_bitshift64Lshr(($3056|0),($3059|0),33)|0);
   $3061 = (getTempRet0() | 0);
   $3062 = $35;
   $3063 = $3062;
   $3064 = HEAP32[$3063>>2]|0;
   $3065 = (($3062) + 4)|0;
   $3066 = $3065;
   $3067 = HEAP32[$3066>>2]|0;
   $3068 = $3064 ^ $3060;
   $3069 = $3067 ^ $3061;
   $3070 = $35;
   $3071 = $3070;
   HEAP32[$3071>>2] = $3068;
   $3072 = (($3070) + 4)|0;
   $3073 = $3072;
   HEAP32[$3073>>2] = $3069;
   $3074 = $35;
   $3075 = $3074;
   $3076 = HEAP32[$3075>>2]|0;
   $3077 = (($3074) + 4)|0;
   $3078 = $3077;
   $3079 = HEAP32[$3078>>2]|0;
   $3080 = (___muldi3(($3076|0),($3079|0),668265295,-1028477379)|0);
   $3081 = (getTempRet0() | 0);
   $3082 = $35;
   $3083 = $3082;
   HEAP32[$3083>>2] = $3080;
   $3084 = (($3082) + 4)|0;
   $3085 = $3084;
   HEAP32[$3085>>2] = $3081;
   $3086 = $35;
   $3087 = $3086;
   $3088 = HEAP32[$3087>>2]|0;
   $3089 = (($3086) + 4)|0;
   $3090 = $3089;
   $3091 = HEAP32[$3090>>2]|0;
   $3092 = (_bitshift64Lshr(($3088|0),($3091|0),29)|0);
   $3093 = (getTempRet0() | 0);
   $3094 = $35;
   $3095 = $3094;
   $3096 = HEAP32[$3095>>2]|0;
   $3097 = (($3094) + 4)|0;
   $3098 = $3097;
   $3099 = HEAP32[$3098>>2]|0;
   $3100 = $3096 ^ $3092;
   $3101 = $3099 ^ $3093;
   $3102 = $35;
   $3103 = $3102;
   HEAP32[$3103>>2] = $3100;
   $3104 = (($3102) + 4)|0;
   $3105 = $3104;
   HEAP32[$3105>>2] = $3101;
   $3106 = $35;
   $3107 = $3106;
   $3108 = HEAP32[$3107>>2]|0;
   $3109 = (($3106) + 4)|0;
   $3110 = $3109;
   $3111 = HEAP32[$3110>>2]|0;
   $3112 = (___muldi3(($3108|0),($3111|0),-1640531463,374761393)|0);
   $3113 = (getTempRet0() | 0);
   $3114 = $35;
   $3115 = $3114;
   HEAP32[$3115>>2] = $3112;
   $3116 = (($3114) + 4)|0;
   $3117 = $3116;
   HEAP32[$3117>>2] = $3113;
   $3118 = $35;
   $3119 = $3118;
   $3120 = HEAP32[$3119>>2]|0;
   $3121 = (($3118) + 4)|0;
   $3122 = $3121;
   $3123 = HEAP32[$3122>>2]|0;
   $3124 = $35;
   $3125 = $3124;
   $3126 = HEAP32[$3125>>2]|0;
   $3127 = (($3124) + 4)|0;
   $3128 = $3127;
   $3129 = HEAP32[$3128>>2]|0;
   $3130 = $3126 ^ $3123;
   $3131 = $35;
   $3132 = $3131;
   HEAP32[$3132>>2] = $3130;
   $3133 = (($3131) + 4)|0;
   $3134 = $3133;
   HEAP32[$3134>>2] = $3129;
   $3135 = $35;
   $3136 = $3135;
   $3137 = HEAP32[$3136>>2]|0;
   $3138 = (($3135) + 4)|0;
   $3139 = $3138;
   $3140 = HEAP32[$3139>>2]|0;
   $3141 = $156;
   $3142 = $3141;
   HEAP32[$3142>>2] = $3137;
   $3143 = (($3141) + 4)|0;
   $3144 = $3143;
   HEAP32[$3144>>2] = $3140;
   $3145 = $156;
   $3146 = $3145;
   $3147 = HEAP32[$3146>>2]|0;
   $3148 = (($3145) + 4)|0;
   $3149 = $3148;
   $3150 = HEAP32[$3149>>2]|0;
   setTempRet0(($3150) | 0);
   STACKTOP = sp;return ($3147|0);
  }
 }
 return (0)|0;
}
function _fc_solve_hash_insert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $7 = $16;
 $17 = $4;
 $18 = HEAP32[$17>>2]|0;
 $19 = $6;
 $20 = $4;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $19 & $22;
 $24 = (($18) + ($23<<2)|0);
 $8 = $24;
 $25 = $8;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 $28 = $8;
 do {
  if ($27) {
   $9 = $28;
  } else {
   $29 = HEAP32[$28>>2]|0;
   $10 = $29;
   $11 = 0;
   L4: while(1) {
    $30 = $10;
    $31 = ($30|0)!=(0|0);
    if (!($31)) {
     label = 11;
     break;
    }
    $32 = $10;
    $33 = ((($32)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $6;
    $36 = ($34|0)==($35|0);
    do {
     if ($36) {
      $37 = $7;
      $38 = ($37|0)==(0);
      $39 = $10;
      $40 = HEAP32[$39>>2]|0;
      $41 = $5;
      if ($38) {
       $42 = (_fc_solve_stack_compare_for_comparison($40,$41)|0);
       $43 = ($42|0)!=(0);
       if ($43) {
        break;
       } else {
        break L4;
       }
      } else {
       $44 = (_fc_solve_state_compare($40,$41)|0);
       $45 = ($44|0)!=(0);
       if ($45) {
        break;
       } else {
        break L4;
       }
      }
     }
    } while(0);
    $48 = $10;
    $11 = $48;
    $49 = $10;
    $50 = ((($49)) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $10 = $51;
   }
   if ((label|0) == 11) {
    $52 = $11;
    $53 = ((($52)) + 8|0);
    $9 = $53;
    break;
   }
   $46 = $10;
   $47 = HEAP32[$46>>2]|0;
   $3 = $47;
   $81 = $3;
   STACKTOP = sp;return ($81|0);
  }
 } while(0);
 $54 = $4;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $12 = $56;
 $57 = ($56|0)!=(0|0);
 if ($57) {
  $58 = $12;
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $4;
  $62 = ((($61)) + 4|0);
  HEAP32[$62>>2] = $60;
 } else {
  $63 = $4;
  $64 = ((($63)) + 28|0);
  $65 = (_fcs_compact_alloc_ptr($64,12)|0);
  $12 = $65;
 }
 $66 = $12;
 $67 = $9;
 HEAP32[$67>>2] = $66;
 $68 = $5;
 HEAP32[$13>>2] = $68;
 $69 = ((($13)) + 4|0);
 $70 = $6;
 HEAP32[$69>>2] = $70;
 $71 = ((($13)) + 8|0);
 HEAP32[$71>>2] = 0;
 ;HEAP32[$66>>2]=HEAP32[$13>>2]|0;HEAP32[$66+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$66+8>>2]=HEAP32[$13+8>>2]|0;
 $72 = $4;
 $73 = ((($72)) + 20|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + 1)|0;
 HEAP32[$73>>2] = $75;
 $76 = $4;
 $77 = ((($76)) + 24|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75|0)>($78|0);
 if ($79) {
  $80 = $4;
  _fc_solve_hash_rehash($80);
 }
 $3 = 0;
 $81 = $3;
 STACKTOP = sp;return ($81|0);
}
function _handle_existing_void($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 20|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $10;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $9;
  $14 = $10;
  _FCS_STATE_collectible_to_kv($13,$14);
  $$expand_i1_val = 0;
  HEAP8[$5>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$5>>0]|0;
  $20 = $$pre_trunc&1;
  STACKTOP = sp;return ($20|0);
 } else {
  $15 = $6;
  $16 = $7;
  $17 = $8;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  _upon_new_state($15,$16,$19);
  $$expand_i1_val2 = 1;
  HEAP8[$5>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$5>>0]|0;
  $20 = $$pre_trunc&1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _FCS_STATE_collectible_to_kv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 _FCS_STATE_keyval_pair_to_kv($4,$6);
 ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function _upon_new_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = HEAP32[$7>>2]|0;
 $6 = $8;
 $9 = $6;
 $10 = ($9|0)!=(0|0);
 $11 = $10 ^ 1;
 $12 = $11 ^ 1;
 if ($12) {
  $13 = $6;
  $14 = ((($13)) + 56|0);
  $15 = ((($14)) + 16|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = (($16) + 1)<<16>>16;
  HEAP16[$15>>1] = $17;
  $18 = $4;
  $19 = $5;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_fc_solve_move_stack_compact_allocate($18,$21)|0);
  $23 = $5;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
 }
 $25 = $3;
 $26 = ((($25)) + 140|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 1)|0;
 HEAP32[$26>>2] = $28;
 $29 = $3;
 $30 = ((($29)) + 144|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1)|0;
 HEAP32[$30>>2] = $32;
 STACKTOP = sp;return;
}
function _fc_solve_move_stack_compact_allocate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 20|0);
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11<<2;
 $13 = (8 + ($12))|0;
 $14 = (_fcs_compact_alloc_ptr($8,$13)|0);
 $4 = $14;
 $15 = $4;
 $5 = $15;
 $16 = $4;
 $17 = ((($16)) + 8|0);
 $6 = $17;
 $18 = $6;
 $19 = $5;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $5;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $22;
 $25 = $6;
 $26 = $3;
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30<<2;
 _memcpy(($25|0),($27|0),($31|0))|0;
 $32 = $5;
 STACKTOP = sp;return ($32|0);
}
function _fcs_compact_alloc_ptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $3;
 $7 = $6 & 3;
 $8 = (4 - ($7))|0;
 $9 = $8 & 3;
 $10 = (($5) + ($9))|0;
 $4 = $10;
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $13;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $4;
 $21 = ($19>>>0)<($20>>>0);
 $22 = $2;
 if ($21) {
  _fc_solve_compact_allocator_extend($22);
 } else {
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = ((($25)) + 12|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = $4;
 $28 = $2;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($27)|0);
 HEAP32[$29>>2] = $31;
 $32 = $2;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _FCS_STATE_keyval_pair_to_kv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 4|0);
 $5 = $2;
 $6 = ((($5)) + 56|0);
 HEAP32[$4>>2] = $6;
 STACKTOP = sp;return;
}
function _fc_solve_stack_compare_for_comparison($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $5 = $10;
 $11 = $4;
 $6 = $11;
 $12 = $5;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $6;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($14|0)<($17|0);
 if ($18) {
  $19 = $5;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $25 = $21;
 } else {
  $22 = $6;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $24;
 }
 $7 = $25;
 $8 = 1;
 while(1) {
  $26 = $8;
  $27 = $7;
  $28 = ($26|0)<=($27|0);
  $29 = $5;
  if (!($28)) {
   break;
  }
  $30 = $8;
  $31 = (($29) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $6;
  $34 = $8;
  $35 = (($33) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = (_fc_solve_card_compare($32,$36)|0);
  $9 = $37;
  $38 = $9;
  $39 = ($38|0)!=(0);
  if ($39) {
   label = 7;
   break;
  }
  $41 = $8;
  $42 = (($41) + 1)|0;
  $8 = $42;
 }
 if ((label|0) == 7) {
  $40 = $9;
  $2 = $40;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 $43 = HEAP8[$29>>0]|0;
 $44 = $43&255;
 $45 = $6;
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = ($44|0)<($47|0);
 if ($48) {
  $2 = -1;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 $49 = $5;
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $6;
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = ($51|0)>($54|0);
 if ($55) {
  $2 = 1;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 } else {
  $2 = 0;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _fc_solve_state_compare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_memcmp($4,$5,56)|0);
 STACKTOP = sp;return ($6|0);
}
function _fc_solve_hash_rehash($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $0;
 $11 = $1;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $2 = $13;
 $14 = $2;
 $15 = $14 << 1;
 $3 = $15;
 $16 = $3;
 $17 = $2;
 $18 = ($16|0)<($17|0);
 if ($18) {
  $19 = $1;
  $20 = ((($19)) + 24|0);
  HEAP32[$20>>2] = 2147483647;
  STACKTOP = sp;return;
 }
 $21 = $3;
 $22 = (($21) - 1)|0;
 $4 = $22;
 $23 = $1;
 $24 = HEAP32[$23>>2]|0;
 $5 = $24;
 $25 = $3;
 $26 = (_calloc($25,4)|0);
 $6 = $26;
 $7 = 0;
 while(1) {
  $27 = $7;
  $28 = $2;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $5;
  $31 = $7;
  $32 = (($30) + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $8 = $33;
  while(1) {
   $34 = $8;
   $35 = ($34|0)!=(0|0);
   if (!($35)) {
    break;
   }
   $36 = $8;
   $37 = ((($36)) + 4|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $4;
   $40 = $38 & $39;
   $9 = $40;
   $41 = $8;
   $42 = ((($41)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $10 = $43;
   $44 = $6;
   $45 = $9;
   $46 = (($44) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $8;
   $49 = ((($48)) + 8|0);
   HEAP32[$49>>2] = $47;
   $50 = $8;
   $51 = $6;
   $52 = $9;
   $53 = (($51) + ($52<<2)|0);
   HEAP32[$53>>2] = $50;
   $54 = $10;
   $8 = $54;
  }
  $55 = $7;
  $56 = (($55) + 1)|0;
  $7 = $56;
 }
 $57 = $1;
 $58 = HEAP32[$57>>2]|0;
 _free($58);
 $59 = $6;
 $60 = $1;
 HEAP32[$60>>2] = $59;
 $61 = $3;
 $62 = $1;
 $63 = ((($62)) + 12|0);
 HEAP32[$63>>2] = $61;
 $64 = $4;
 $65 = $1;
 $66 = ((($65)) + 16|0);
 HEAP32[$66>>2] = $64;
 $67 = $1;
 $68 = $3;
 _fcs_hash_set_max_num_elems($67,$68);
 STACKTOP = sp;return;
}
function _fcs_hash_set_max_num_elems($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4 << 1;
 $6 = $2;
 $7 = ((($6)) + 24|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _fc_solve_card_compare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4&255;
 $6 = $3;
 $7 = $6&255;
 $8 = (($5) - ($7))|0;
 STACKTOP = sp;return ($8|0);
}
function _XXH_read64($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$2+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$2+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$2+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$2+7>>0]=HEAP8[$3+7>>0]|0;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 setTempRet0(($9) | 0);
 STACKTOP = sp;return ($6|0);
}
function _XXH_swap64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 (_bitshift64Shl(($9|0),($12|0),56)|0);
 $13 = (getTempRet0() | 0);
 $14 = $13 & -16777216;
 $15 = $2;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 (_bitshift64Shl(($17|0),($20|0),40)|0);
 $21 = (getTempRet0() | 0);
 $22 = $21 & 16711680;
 $23 = $14 | $22;
 $24 = $2;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 (_bitshift64Shl(($26|0),($29|0),24)|0);
 $30 = (getTempRet0() | 0);
 $31 = $30 & 65280;
 $32 = $23 | $31;
 $33 = $2;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 (_bitshift64Shl(($35|0),($38|0),8)|0);
 $39 = (getTempRet0() | 0);
 $40 = $39 & 255;
 $41 = $32 | $40;
 $42 = $2;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (_bitshift64Lshr(($44|0),($47|0),8)|0);
 $49 = (getTempRet0() | 0);
 $50 = $48 & -16777216;
 $51 = $2;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_bitshift64Lshr(($53|0),($56|0),24)|0);
 $58 = (getTempRet0() | 0);
 $59 = $57 & 16711680;
 $60 = $50 | $59;
 $61 = $2;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (_bitshift64Lshr(($63|0),($66|0),40)|0);
 $68 = (getTempRet0() | 0);
 $69 = $67 & 65280;
 $70 = $60 | $69;
 $71 = $2;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (_bitshift64Lshr(($73|0),($76|0),56)|0);
 $78 = (getTempRet0() | 0);
 $79 = $77 & 255;
 $80 = $70 | $79;
 setTempRet0(($41) | 0);
 STACKTOP = sp;return ($80|0);
}
function _XXH64_round($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $5;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $3;
 $14 = $5;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (___muldi3(($16|0),($19|0),668265295,-1028477379)|0);
 $21 = (getTempRet0() | 0);
 $22 = $4;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (_i64Add(($24|0),($27|0),($20|0),($21|0))|0);
 $29 = (getTempRet0() | 0);
 $30 = $4;
 $31 = $30;
 HEAP32[$31>>2] = $28;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $29;
 $34 = $4;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (_bitshift64Shl(($36|0),($39|0),31)|0);
 $41 = (getTempRet0() | 0);
 $42 = $4;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (_bitshift64Lshr(($44|0),($47|0),33)|0);
 $49 = (getTempRet0() | 0);
 $50 = $40 | $48;
 $51 = $41 | $49;
 $52 = $4;
 $53 = $52;
 HEAP32[$53>>2] = $50;
 $54 = (($52) + 4)|0;
 $55 = $54;
 HEAP32[$55>>2] = $51;
 $56 = $4;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (___muldi3(($58|0),($61|0),-2048144761,-1640531535)|0);
 $63 = (getTempRet0() | 0);
 $64 = $4;
 $65 = $64;
 HEAP32[$65>>2] = $62;
 $66 = (($64) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = $63;
 $68 = $4;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 setTempRet0(($73) | 0);
 STACKTOP = sp;return ($70|0);
}
function _XXH64_mergeRound($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $5;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $3;
 $14 = $5;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (_XXH64_round(0,0,$16,$19)|0);
 $21 = (getTempRet0() | 0);
 $22 = $5;
 $23 = $22;
 HEAP32[$23>>2] = $20;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = $5;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $4;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = $34 ^ $28;
 $39 = $37 ^ $31;
 $40 = $4;
 $41 = $40;
 HEAP32[$41>>2] = $38;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $39;
 $44 = $4;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (___muldi3(($46|0),($49|0),-2048144761,-1640531535)|0);
 $51 = (getTempRet0() | 0);
 $52 = (_i64Add(($50|0),($51|0),-1028477341,-2048144777)|0);
 $53 = (getTempRet0() | 0);
 $54 = $4;
 $55 = $54;
 HEAP32[$55>>2] = $52;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = $53;
 $58 = $4;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 setTempRet0(($63) | 0);
 STACKTOP = sp;return ($60|0);
}
function _XXH_read32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$3+3>>0]|0;
 $4 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _XXH_swap32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24;
 $4 = $3 & -16777216;
 $5 = $1;
 $6 = $5 << 8;
 $7 = $6 & 16711680;
 $8 = $4 | $7;
 $9 = $1;
 $10 = (8)?($9 >>> 8):($9);
 $11 = $10 & 65280;
 $12 = $8 | $11;
 $13 = $1;
 $14 = (24)?($13 >>> 24):($13);
 $15 = $14 & 255;
 $16 = $12 | $15;
 STACKTOP = sp;return ($16|0);
}
function _fcs_compact_alloc_release($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _freecell_solver_user_cmd_line_read_cmd_line_preset($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4064|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4064|0);
 $vararg_buffer = sp + 4008|0;
 $13 = sp + 4024|0;
 $14 = sp;
 $15 = sp + 4016|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 HEAP8[$14>>0] = 0;
 $17 = $8;
 $18 = (_read_preset($17,$13,$14,0)|0);
 if ($18) {
  HEAP32[$vararg_buffer>>2] = 11698;
  $19 = (_calc_errstr_s(13454,$vararg_buffer)|0);
  $20 = $10;
  HEAP32[$20>>2] = $19;
  $6 = 5;
  $39 = $6;
  STACKTOP = sp;return ($39|0);
 } else {
  HEAP32[$15>>2] = 0;
  $21 = $7;
  $22 = HEAP32[$13>>2]|0;
  $23 = ((($13)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $9;
  $26 = $10;
  $27 = $11;
  $28 = ($27|0)<(0);
  $29 = $11;
  $30 = (($29) - 1)|0;
  $31 = $28 ? $29 : $30;
  $32 = HEAP8[$14>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)!=(0);
  $35 = $12;
  $36 = $34 ? $14 : $35;
  $37 = (_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count($21,$22,$24,0,$25,0,0,$26,$15,$31,$36)|0);
  $16 = $37;
  _fc_solve_args_man_free($13);
  $38 = $16;
  $6 = $38;
  $39 = $6;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _freecell_solver_user_cmd_line_parse_args_with_file_nesting_count($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$alloca_mul = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0.0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0.0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0;
 var $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0;
 var $vararg_buffer8 = 0, $vararg_ptr38 = 0, $vararg_ptr60 = 0, $vararg_ptr70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $vararg_buffer74 = sp + 248|0;
 $vararg_buffer71 = sp + 240|0;
 $vararg_buffer67 = sp + 232|0;
 $vararg_buffer64 = sp + 224|0;
 $vararg_buffer61 = sp + 216|0;
 $vararg_buffer57 = sp + 208|0;
 $vararg_buffer54 = sp + 200|0;
 $vararg_buffer51 = sp + 192|0;
 $vararg_buffer48 = sp + 184|0;
 $vararg_buffer45 = sp + 176|0;
 $vararg_buffer42 = sp + 168|0;
 $vararg_buffer39 = sp + 160|0;
 $vararg_buffer35 = sp + 152|0;
 $vararg_buffer32 = sp + 144|0;
 $vararg_buffer29 = sp + 136|0;
 $vararg_buffer26 = sp + 128|0;
 $vararg_buffer23 = sp + 120|0;
 $vararg_buffer20 = sp + 112|0;
 $vararg_buffer17 = sp + 104|0;
 $vararg_buffer14 = sp + 96|0;
 $vararg_buffer11 = sp + 88|0;
 $vararg_buffer8 = sp + 80|0;
 $vararg_buffer5 = sp + 72|0;
 $vararg_buffer2 = sp + 64|0;
 $vararg_buffer = sp + 56|0;
 $23 = sp + 380|0;
 $27 = sp + 364|0;
 $28 = sp + 360|0;
 $38 = sp;
 $48 = sp + 280|0;
 $53 = sp + 260|0;
 $54 = sp + 256|0;
 $55 = sp + 252|0;
 $56 = sp + 48|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $57 = $19;
 HEAP32[$57>>2] = 0;
 $58 = $14;
 $59 = $13;
 $60 = (($58) + ($59<<2)|0);
 $24 = $60;
 $61 = $14;
 $62 = $15;
 $63 = (($61) + ($62<<2)|0);
 $25 = $63;
 L1: while(1) {
  $64 = $25;
  $65 = $24;
  $66 = ($64>>>0)<($65>>>0);
  if (!($66)) {
   label = 189;
   break;
  }
  $67 = $16;
  $68 = ($67|0)!=(0|0);
  L4: do {
   if ($68) {
    $69 = $16;
    $26 = $69;
    while(1) {
     $70 = $26;
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)!=(0|0);
     if ($72) {
      $73 = $26;
      $74 = HEAP32[$73>>2]|0;
      $75 = $25;
      $76 = HEAP32[$75>>2]|0;
      $77 = (_strcmp($74,$76)|0);
      $78 = ($77|0)!=(0);
      $1044 = $78;
     } else {
      $1044 = 0;
     }
     $79 = $26;
     if (!($1044)) {
      break;
     }
     $80 = ((($79)) + 4|0);
     $26 = $80;
    }
    $81 = HEAP32[$79>>2]|0;
    $82 = ($81|0)!=(0|0);
    if ($82) {
     $83 = $17;
     $84 = $12;
     $85 = $13;
     $86 = $14;
     $87 = $25;
     $88 = $14;
     $89 = $87;
     $90 = $88;
     $91 = (($89) - ($90))|0;
     $92 = (($91|0) / 4)&-1;
     $93 = $18;
     $94 = (FUNCTION_TABLE_iiiiiiii[$83 & 0]($84,$85,$86,$92,$28,$27,$93)|0);
     switch ($94|0) {
     case 2:  {
      label = 12;
      break L1;
      break;
     }
     case 1:  {
      break;
     }
     default: {
      label = 13;
      break L4;
     }
     }
     $95 = HEAP32[$28>>2]|0;
     $96 = (($95) - 1)|0;
     $97 = $25;
     $98 = (($97) + ($96<<2)|0);
     $25 = $98;
    } else {
     label = 13;
    }
   } else {
    label = 13;
   }
  } while(0);
  L15: do {
   if ((label|0) == 13) {
    label = 0;
    $107 = $25;
    $108 = HEAP32[$107>>2]|0;
    $30 = $108;
    $109 = $30;
    $110 = $30;
    $111 = (_strlen($110)|0);
    $112 = (_in_word_set($109,$111)|0);
    $31 = $112;
    $113 = $31;
    $114 = ($113|0)!=(0|0);
    if ($114) {
     $115 = $31;
     $116 = ((($115)) + 4|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $117;
    } else {
     $118 = 0;
    }
    $32 = $118;
    $119 = $32;
    $29 = $119;
    $120 = $29;
    do {
     switch ($120|0) {
     case 0:  {
      label = 16;
      break L1;
      break;
     }
     case 1:  {
      $128 = $25;
      $129 = ((($128)) + 4|0);
      $25 = $129;
      $130 = $24;
      $131 = ($129|0)==($130|0);
      if ($131) {
       label = 18;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 2:  {
      $140 = $25;
      $141 = ((($140)) + 4|0);
      $25 = $141;
      $142 = $24;
      $143 = ($141|0)==($142|0);
      if ($143) {
       label = 20;
       break L1;
      }
      $152 = $12;
      $153 = $25;
      $154 = HEAP32[$153>>2]|0;
      $155 = (_atol($154)|0);
      _freecell_solver_user_limit_iterations_long($152,$155);
      break L15;
      break;
     }
     case 3:  {
      $156 = $25;
      $157 = ((($156)) + 4|0);
      $25 = $157;
      $158 = $24;
      $159 = ($157|0)==($158|0);
      if ($159) {
       label = 23;
       break L1;
      }
      $168 = $12;
      $169 = $25;
      $170 = HEAP32[$169>>2]|0;
      $171 = (_freecell_solver_user_set_depth_tests_order($168,0,$170,$23)|0);
      $172 = ($171|0)!=(0);
      if ($172) {
       label = 25;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 4:  {
      $184 = $25;
      $185 = ((($184)) + 4|0);
      $25 = $185;
      $186 = $24;
      $187 = ($185|0)==($186|0);
      if ($187) {
       label = 27;
       break L1;
      }
      $196 = $12;
      $197 = $25;
      $198 = HEAP32[$197>>2]|0;
      $199 = (_atoi($198)|0);
      $200 = (_freecell_solver_user_set_num_freecells($196,$199)|0);
      $201 = ($200|0)!=(0);
      if ($201) {
       label = 29;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 5:  {
      $212 = $25;
      $213 = ((($212)) + 4|0);
      $25 = $213;
      $214 = $24;
      $215 = ($213|0)==($214|0);
      if ($215) {
       label = 31;
       break L1;
      }
      $224 = $12;
      $225 = $25;
      $226 = HEAP32[$225>>2]|0;
      $227 = (_atoi($226)|0);
      $228 = (_freecell_solver_user_set_num_stacks($224,$227)|0);
      $229 = ($228|0)!=(0);
      if ($229) {
       label = 33;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 6:  {
      $240 = $25;
      $241 = ((($240)) + 4|0);
      $25 = $241;
      $242 = $24;
      $243 = ($241|0)==($242|0);
      if ($243) {
       label = 35;
       break L1;
      }
      $252 = $12;
      $253 = $25;
      $254 = HEAP32[$253>>2]|0;
      $255 = (_atoi($254)|0);
      $256 = (_freecell_solver_user_set_num_decks($252,$255)|0);
      $257 = ($256|0)!=(0);
      if ($257) {
       label = 37;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 7:  {
      $268 = $25;
      $269 = ((($268)) + 4|0);
      $25 = $269;
      $270 = $24;
      $271 = ($269|0)==($270|0);
      $272 = $25;
      if ($271) {
       label = 39;
       break L1;
      }
      $280 = HEAP32[$272>>2]|0;
      $33 = $280;
      $281 = $12;
      $282 = $33;
      $283 = (_strcmp($282,9805)|0);
      $284 = ($283|0)!=(0);
      if ($284) {
       $285 = $33;
       $286 = (_strcmp($285,9810)|0);
       $287 = ($286|0)!=(0);
       $288 = $287 ^ 1;
       $289 = $288 ? 2 : 0;
       $290 = $289;
      } else {
       $290 = 1;
      }
      (_freecell_solver_user_set_sequences_are_built_by_type($281,$290)|0);
      break L15;
      break;
     }
     case 8:  {
      $291 = $25;
      $292 = ((($291)) + 4|0);
      $25 = $292;
      $293 = $24;
      $294 = ($292|0)==($293|0);
      if ($294) {
       label = 44;
       break L1;
      }
      $303 = $12;
      $304 = $25;
      $305 = HEAP32[$304>>2]|0;
      $306 = (_strcmp($305,9815)|0);
      $307 = ($306|0)!=(0);
      $308 = $307 ^ 1;
      $309 = $308&1;
      (_freecell_solver_user_set_sequence_move($303,$309)|0);
      break L15;
      break;
     }
     case 9:  {
      $310 = $25;
      $311 = ((($310)) + 4|0);
      $25 = $311;
      $312 = $24;
      $313 = ($311|0)==($312|0);
      $314 = $25;
      if ($313) {
       label = 47;
       break L1;
      }
      $322 = HEAP32[$314>>2]|0;
      $34 = $322;
      $323 = $12;
      $324 = $34;
      $325 = (_strcmp($324,9825)|0);
      $326 = ($325|0)!=(0);
      if ($326) {
       $327 = $34;
       $328 = (_strcmp($327,9831)|0);
       $329 = ($328|0)!=(0);
       $330 = $329 ^ 1;
       $331 = $330 ? 2 : 0;
       $332 = $331;
      } else {
       $332 = 1;
      }
      (_freecell_solver_user_set_empty_stacks_filled_by($323,$332)|0);
      break L15;
      break;
     }
     case 10:  {
      $333 = $25;
      $334 = ((($333)) + 4|0);
      $25 = $334;
      $335 = $24;
      $336 = ($334|0)==($335|0);
      $337 = $25;
      if ($336) {
       label = 52;
       break L1;
      }
      $345 = HEAP32[$337>>2]|0;
      $35 = $345;
      $346 = $12;
      $347 = $35;
      $348 = (_freecell_solver_user_apply_preset($346,$347)|0);
      switch ($348|0) {
      case 1:  {
       label = 54;
       break L1;
       break;
      }
      case 2:  {
       label = 55;
       break L1;
       break;
      }
      case 3:  {
       label = 56;
       break L1;
       break;
      }
      case 0:  {
       break L15;
       break;
      }
      default: {
       label = 57;
       break L1;
      }
      }
      break;
     }
     case 11:  {
      $389 = $25;
      $390 = ((($389)) + 4|0);
      $25 = $390;
      $391 = $24;
      $392 = ($390|0)==($391|0);
      $393 = $25;
      if ($392) {
       label = 59;
       break L1;
      }
      $401 = HEAP32[$393>>2]|0;
      $37 = $401;
      $402 = $37;
      $403 = (_strcmp($402,10292)|0);
      $404 = ($403|0)!=(0);
      do {
       if ($404) {
        $405 = $37;
        $406 = (_strcmp($405,10301)|0);
        $407 = ($406|0)!=(0);
        if ($407) {
         $408 = $37;
         $409 = (_strcmp($408,10305)|0);
         $410 = ($409|0)!=(0);
         if (!($410)) {
          $36 = 2;
          break;
         }
         $411 = $37;
         $412 = (_strcmp($411,10309)|0);
         $413 = ($412|0)!=(0);
         if (!($413)) {
          $36 = 3;
          break;
         }
         $414 = $37;
         $415 = (_strcmp($414,10316)|0);
         $416 = ($415|0)!=(0);
         if (!($416)) {
          $36 = 5;
          break;
         }
         $417 = $37;
         $418 = (_strcmp($417,10327)|0);
         $419 = ($418|0)!=(0);
         if ($419) {
          label = 71;
          break L1;
         }
         $36 = 6;
        } else {
         label = 62;
        }
       } else {
        label = 62;
       }
      } while(0);
      if ((label|0) == 62) {
       label = 0;
       $36 = 1;
      }
      $430 = $12;
      $431 = $36;
      _freecell_solver_user_set_solving_method($430,$431);
      break L15;
      break;
     }
     case 12:  {
      $432 = $25;
      $433 = ((($432)) + 4|0);
      $25 = $433;
      $434 = $24;
      $435 = ($433|0)==($434|0);
      $436 = $25;
      if ($435) {
       label = 74;
       break L1;
      }
      $444 = HEAP32[$436>>2]|0;
      $39 = $444;
      $445 = $39;
      $446 = $39;
      $447 = (_strchr($446,0)|0);
      _fc_solve_set_weights($445,$447,$38);
      $40 = 0;
      while(1) {
       $448 = $40;
       $449 = ($448|0)<(6);
       if (!($449)) {
        break L15;
       }
       $450 = $12;
       $451 = $40;
       $452 = $40;
       $453 = (($38) + ($452<<3)|0);
       $454 = +HEAPF64[$453>>3];
       (_freecell_solver_user_set_a_star_weight($450,$451,$454)|0);
       $455 = $40;
       $456 = (($455) + 1)|0;
       $40 = $456;
      }
      break;
     }
     case 13:  {
      $457 = $12;
      _freecell_solver_user_set_solution_optimization($457,1);
      break L15;
      break;
     }
     case 14:  {
      $458 = $25;
      $459 = ((($458)) + 4|0);
      $25 = $459;
      $460 = $24;
      $461 = ($459|0)==($460|0);
      if ($461) {
       label = 80;
       break L1;
      }
      $470 = $12;
      $471 = $25;
      $472 = HEAP32[$471>>2]|0;
      $473 = (_atoi($472)|0);
      _freecell_solver_user_set_random_seed($470,$473);
      break L15;
      break;
     }
     case 15:  {
      $474 = $25;
      $475 = ((($474)) + 4|0);
      $25 = $475;
      $476 = $24;
      $477 = ($475|0)==($476|0);
      if ($477) {
       label = 83;
       break L1;
      }
      $486 = $12;
      $487 = $25;
      $488 = HEAP32[$487>>2]|0;
      $489 = (_atol($488)|0);
      _freecell_solver_user_limit_num_states_in_collection_long($486,$489);
      break L15;
      break;
     }
     case 16:  {
      $490 = $25;
      $491 = ((($490)) + 4|0);
      $25 = $491;
      $492 = $24;
      $493 = ($491|0)==($492|0);
      if ($493) {
       label = 86;
       break L1;
      }
      $502 = $12;
      $503 = $25;
      $504 = HEAP32[$503>>2]|0;
      $505 = (_atol($504)|0);
      _freecell_solver_set_stored_states_trimming_limit($502,$505);
      break L15;
      break;
     }
     case 17:  {
      $506 = $12;
      (_freecell_solver_user_next_instance($506)|0);
      break L15;
      break;
     }
     case 18:  {
      $507 = $12;
      (_freecell_solver_user_next_flare($507)|0);
      break L15;
      break;
     }
     case 20: case 19:  {
      $508 = $29;
      $509 = ($508|0)==(19);
      $510 = $12;
      if ($509) {
       $511 = (_freecell_solver_user_next_soft_thread($510)|0);
       $512 = ($511|0)!=(0);
       if ($512) {
        label = 93;
        break L1;
       } else {
        break L15;
       }
      } else {
       $513 = (_freecell_solver_user_next_hard_thread($510)|0);
       $514 = ($513|0)!=(0);
       if ($514) {
        label = 93;
        break L1;
       } else {
        break L15;
       }
      }
      break;
     }
     case 21:  {
      $524 = $25;
      $525 = ((($524)) + 4|0);
      $25 = $525;
      $526 = $24;
      $527 = ($525|0)==($526|0);
      if ($527) {
       label = 95;
       break L1;
      }
      $536 = $12;
      $537 = $25;
      $538 = HEAP32[$537>>2]|0;
      $539 = (_atoi($538)|0);
      _freecell_solver_user_set_soft_thread_step($536,$539);
      break L15;
      break;
     }
     case 22:  {
      $540 = $12;
      _freecell_solver_user_set_reparent_states($540,1);
      break L15;
      break;
     }
     case 23:  {
      $541 = $12;
      _freecell_solver_user_set_calc_real_depth($541,1);
      break L15;
      break;
     }
     case 24:  {
      $542 = $25;
      $543 = ((($542)) + 4|0);
      $25 = $543;
      $544 = $24;
      $545 = ($543|0)==($544|0);
      if ($545) {
       label = 100;
       break L1;
      }
      $554 = $12;
      $555 = $25;
      $556 = HEAP32[$555>>2]|0;
      _freecell_solver_user_set_soft_thread_name($554,$556);
      break L15;
      break;
     }
     case 25:  {
      $557 = $25;
      $558 = ((($557)) + 4|0);
      $25 = $558;
      $559 = $24;
      $560 = ($558|0)==($559|0);
      if ($560) {
       label = 103;
       break L1;
      }
      $569 = $12;
      $570 = $25;
      $571 = HEAP32[$570>>2]|0;
      _freecell_solver_user_set_flare_name($569,$571);
      break L15;
      break;
     }
     case 26:  {
      $572 = $25;
      $573 = ((($572)) + 4|0);
      $25 = $573;
      $574 = $24;
      $575 = ($573|0)==($574|0);
      if ($575) {
       label = 106;
       break L1;
      }
      $584 = $12;
      $585 = $25;
      $586 = HEAP32[$585>>2]|0;
      (_freecell_solver_user_set_hard_thread_prelude($584,$586)|0);
      break L15;
      break;
     }
     case 27:  {
      $587 = $25;
      $588 = ((($587)) + 4|0);
      $25 = $588;
      $589 = $24;
      $590 = ($588|0)==($589|0);
      if ($590) {
       label = 109;
       break L1;
      }
      $599 = $12;
      $600 = $25;
      $601 = HEAP32[$600>>2]|0;
      (_freecell_solver_user_set_flares_plan($599,$601)|0);
      break L15;
      break;
     }
     case 28:  {
      $602 = $25;
      $603 = ((($602)) + 4|0);
      $25 = $603;
      $604 = $24;
      $605 = ($603|0)==($604|0);
      if ($605) {
       label = 112;
       break L1;
      }
      $614 = $12;
      $615 = $25;
      $616 = HEAP32[$615>>2]|0;
      $617 = (+_atof($616));
      _freecell_solver_user_set_flares_iters_factor($614,$617);
      break L15;
      break;
     }
     case 29:  {
      $618 = $25;
      $619 = ((($618)) + 4|0);
      $25 = $619;
      $620 = $24;
      $621 = ($619|0)==($620|0);
      if ($621) {
       label = 115;
       break L1;
      }
      $630 = $12;
      $631 = $25;
      $632 = HEAP32[$631>>2]|0;
      $633 = (_freecell_solver_user_set_optimization_scan_tests_order($630,$632,$23)|0);
      $634 = ($633|0)!=(0);
      if ($634) {
       label = 117;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 30:  {
      $646 = $25;
      $647 = ((($646)) + 4|0);
      $25 = $647;
      $648 = $24;
      $649 = ($647|0)==($648|0);
      $650 = $25;
      if ($649) {
       label = 119;
       break L1;
      }
      $658 = HEAP32[$650>>2]|0;
      $659 = (_strcmp($658,9831)|0);
      $660 = ($659|0)!=(0);
      if ($660) {
       $661 = $25;
       $662 = HEAP32[$661>>2]|0;
       $663 = (_strcmp($662,10471)|0);
       $664 = ($663|0)!=(0);
       if ($664) {
        label = 124;
        break L1;
       }
       $41 = 1;
      } else {
       $41 = 0;
      }
      $676 = $12;
      $677 = $41;
      _freecell_solver_user_set_scans_synergy($676,$677);
      break L15;
      break;
     }
     case 31:  {
      $678 = $12;
      (_freecell_solver_user_reset($678)|0);
      break L15;
      break;
     }
     case 32:  {
      $679 = $25;
      $680 = ((($679)) + 4|0);
      $25 = $680;
      $681 = $24;
      $682 = ($680|0)==($681|0);
      if ($682) {
       label = 128;
       break L1;
      }
      $691 = $21;
      $692 = ($691|0)!=(0);
      if (!($692)) {
       break L15;
      }
      $43 = 0;
      $693 = $25;
      $694 = HEAP32[$693>>2]|0;
      $44 = $694;
      while(1) {
       $695 = $44;
       $696 = HEAP8[$695>>0]|0;
       $697 = $696 << 24 >> 24;
       $698 = (_isdigit($697)|0);
       $699 = ($698|0)!=(0);
       $700 = $44;
       if (!($699)) {
        break;
       }
       $701 = ((($700)) + 1|0);
       $44 = $701;
      }
      $702 = HEAP8[$700>>0]|0;
      $703 = $702 << 24 >> 24;
      $704 = ($703|0)==(44);
      if ($704) {
       $705 = $25;
       $706 = HEAP32[$705>>2]|0;
       $707 = (_atoi($706)|0);
       $43 = $707;
       $708 = $44;
       $709 = ((($708)) + 1|0);
       $44 = $709;
      }
      $710 = $22;
      $711 = ($710|0)!=(0|0);
      if ($711) {
       $712 = $22;
       $713 = (_strlen($712)|0);
       $714 = $44;
       $715 = (_strlen($714)|0);
       $716 = (($713) + ($715))|0;
       $717 = (($716) + 1)|0;
       $718 = (_llvm_stacksave()|0);
       $45 = $718;
       $$alloca_mul = $717;
       $719 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
       $720 = $22;
       $721 = $44;
       HEAP32[$vararg_buffer35>>2] = $720;
       $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
       HEAP32[$vararg_ptr38>>2] = $721;
       (_sprintf($719,10521,$vararg_buffer35)|0);
       $722 = (_fopen($719,10526)|0);
       $42 = $722;
       $723 = $45;
       _llvm_stackrestore(($723|0));
      } else {
       $42 = 0;
      }
      $724 = $42;
      $725 = ($724|0)!=(0|0);
      if (!($725)) {
       $726 = $44;
       $727 = (_fopen($726,10526)|0);
       $42 = $727;
      }
      $728 = $42;
      $729 = ($728|0)!=(0|0);
      if (!($729)) {
       label = 141;
       break L1;
      }
      $740 = $42;
      (_fseek($740,0,2)|0);
      $741 = $42;
      $742 = (_ftell($741)|0);
      $46 = $742;
      $743 = $46;
      $744 = (($743) + 1)|0;
      $745 = $744;
      $746 = (_malloc($745)|0);
      $47 = $746;
      $747 = $47;
      $748 = ($747|0)==(0|0);
      $749 = $42;
      if ($748) {
       label = 143;
       break L1;
      }
      (_fseek($749,0,0)|0);
      $759 = $47;
      $760 = $47;
      $761 = $46;
      $762 = $42;
      $763 = (_fread($760,1,$761,$762)|0);
      $764 = (($759) + ($763)|0);
      HEAP8[$764>>0] = 0;
      $765 = $42;
      (_fclose($765)|0);
      $766 = $47;
      _fc_solve_args_man_chop($48,$766);
      $767 = $47;
      _free($767);
      $768 = $43;
      $769 = HEAP32[$48>>2]|0;
      $770 = ($768|0)<($769|0);
      if ($770) {
       $771 = $12;
       $772 = HEAP32[$48>>2]|0;
       $773 = $43;
       $774 = (($772) - ($773))|0;
       $775 = ((($48)) + 4|0);
       $776 = HEAP32[$775>>2]|0;
       $777 = $43;
       $778 = (($776) + ($777<<2)|0);
       $779 = $16;
       $780 = $17;
       $781 = $18;
       $782 = $19;
       $783 = $20;
       $784 = $21;
       $785 = ($784|0)<(0);
       $786 = $21;
       $787 = (($786) - 1)|0;
       $788 = $785 ? $786 : $787;
       $789 = $22;
       $790 = (_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count($771,$774,$778,0,$779,$780,$781,$782,$783,$788,$789)|0);
       $49 = $790;
       $791 = $49;
       $792 = ($791|0)==(3);
       $793 = $49;
       $794 = ($793|0)==(0);
       $or$cond = $792 | $794;
       if (!($or$cond)) {
        label = 146;
        break L1;
       }
      }
      _fc_solve_args_man_free($48);
      break L15;
      break;
     }
     case 33:  {
      $803 = $25;
      $804 = ((($803)) + 4|0);
      $25 = $804;
      $805 = $24;
      $806 = ($804|0)==($805|0);
      if ($806) {
       label = 149;
       break L1;
      }
      $815 = $12;
      $816 = $25;
      $817 = HEAP32[$816>>2]|0;
      $818 = $16;
      $819 = $19;
      $820 = $21;
      $821 = $22;
      $822 = (_freecell_solver_user_cmd_line_read_cmd_line_preset($815,$817,$818,$819,$820,$821)|0);
      $50 = $822;
      $823 = $50;
      switch ($823|0) {
      case 5:  {
       label = 151;
       break L1;
       break;
      }
      case 0: case 3:  {
       break L15;
       break;
      }
      default: {
       label = 152;
       break L1;
      }
      }
      break;
     }
     case 35: case 34:  {
      $836 = $25;
      $837 = ((($836)) + 4|0);
      $25 = $837;
      $838 = $24;
      $839 = ($837|0)==($838|0);
      if ($839) {
       label = 154;
       break L1;
      }
      $51 = 0;
      $848 = $25;
      $849 = HEAP32[$848>>2]|0;
      $52 = $849;
      while(1) {
       $850 = $52;
       $851 = HEAP8[$850>>0]|0;
       $852 = $851 << 24 >> 24;
       $853 = (_isdigit($852)|0);
       $854 = ($853|0)!=(0);
       $855 = $52;
       if (!($854)) {
        break;
       }
       $856 = ((($855)) + 1|0);
       $52 = $856;
      }
      $857 = HEAP8[$855>>0]|0;
      $858 = $857 << 24 >> 24;
      $859 = ($858|0)==(44);
      $860 = $25;
      $861 = HEAP32[$860>>2]|0;
      if ($859) {
       $862 = (_atoi($861)|0);
       $51 = $862;
       $863 = $52;
       $864 = ((($863)) + 1|0);
       $52 = $864;
      } else {
       $52 = $861;
      }
      $865 = $12;
      $866 = $51;
      $867 = $29;
      $868 = ($867|0)==(35);
      if ($868) {
       $869 = $52;
       $872 = $869;
      } else {
       $870 = $25;
       $871 = HEAP32[$870>>2]|0;
       $872 = $871;
      }
      $873 = (_freecell_solver_user_set_depth_tests_order($865,$866,$872,$23)|0);
      $874 = ($873|0)!=(0);
      if ($874) {
       label = 165;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 36:  {
      $886 = $25;
      $887 = ((($886)) + 4|0);
      $25 = $887;
      $888 = $24;
      $889 = ($887|0)==($888|0);
      if ($889) {
       label = 167;
       break L1;
      }
      $898 = $12;
      $899 = $25;
      $900 = HEAP32[$899>>2]|0;
      $901 = (_freecell_solver_user_set_pruning($898,$900,$23)|0);
      $902 = ($901|0)!=(0);
      if ($902) {
       label = 169;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 37:  {
      $914 = $25;
      $915 = ((($914)) + 4|0);
      $25 = $915;
      $916 = $24;
      $917 = ($915|0)==($916|0);
      if ($917) {
       label = 171;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 38:  {
      $926 = $25;
      $927 = ((($926)) + 4|0);
      $25 = $927;
      $928 = $24;
      $929 = ($927|0)==($928|0);
      if ($929) {
       label = 173;
       break L1;
      }
      $938 = $12;
      $939 = $25;
      $940 = HEAP32[$939>>2]|0;
      $941 = (_freecell_solver_user_set_flares_choice($938,$940)|0);
      $942 = ($941|0)!=(0);
      if ($942) {
       label = 175;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 39:  {
      $954 = $25;
      $955 = ((($954)) + 4|0);
      $25 = $955;
      $956 = $24;
      $957 = ($955|0)==($956|0);
      $958 = $25;
      if ($957) {
       label = 177;
       break L1;
      }
      $966 = HEAP32[$958>>2]|0;
      HEAP32[$vararg_buffer57>>2] = $53;
      $vararg_ptr60 = ((($vararg_buffer57)) + 4|0);
      HEAP32[$vararg_ptr60>>2] = $54;
      $967 = (_sscanf($966,10786,$vararg_buffer57)|0);
      $968 = ($967|0)!=(2);
      if ($968) {
       label = 179;
       break L1;
      }
      $978 = $12;
      $979 = HEAP32[$53>>2]|0;
      $980 = HEAP32[$54>>2]|0;
      $981 = (_freecell_solver_user_set_patsolve_x_param($978,$979,$980,$23)|0);
      $982 = ($981|0)!=(0);
      if ($982) {
       label = 181;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     case 40:  {
      $994 = $25;
      $995 = ((($994)) + 4|0);
      $25 = $995;
      $996 = $24;
      $997 = ($995|0)==($996|0);
      $998 = $25;
      if ($997) {
       label = 183;
       break L1;
      }
      $1006 = HEAP32[$998>>2]|0;
      HEAP32[$vararg_buffer67>>2] = $55;
      $vararg_ptr70 = ((($vararg_buffer67)) + 4|0);
      HEAP32[$vararg_ptr70>>2] = $56;
      $1007 = (_sscanf($1006,10867,$vararg_buffer67)|0);
      $1008 = ($1007|0)!=(2);
      if ($1008) {
       label = 185;
       break L1;
      }
      $1018 = $12;
      $1019 = HEAP32[$55>>2]|0;
      $1020 = +HEAPF64[$56>>3];
      $1021 = (_freecell_solver_user_set_patsolve_y_param($1018,$1019,$1020,$23)|0);
      $1022 = ($1021|0)!=(0);
      if ($1022) {
       label = 187;
       break L1;
      } else {
       break L15;
      }
      break;
     }
     default: {
      break L15;
     }
     }
    } while(0);
   }
  } while(0);
  $1034 = $25;
  $1035 = ((($1034)) + 4|0);
  $25 = $1035;
 }
 switch (label|0) {
  case 12: {
   $99 = $25;
   $100 = $14;
   $101 = $99;
   $102 = $100;
   $103 = (($101) - ($102))|0;
   $104 = (($103|0) / 4)&-1;
   $105 = $20;
   HEAP32[$105>>2] = $104;
   $106 = HEAP32[$27>>2]|0;
   $11 = $106;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 16: {
   $121 = $25;
   $122 = $14;
   $123 = $121;
   $124 = $122;
   $125 = (($123) - ($124))|0;
   $126 = (($125|0) / 4)&-1;
   $127 = $20;
   HEAP32[$127>>2] = $126;
   $11 = 3;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 18: {
   $132 = $25;
   $133 = ((($132)) + -4|0);
   $134 = $14;
   $135 = $133;
   $136 = $134;
   $137 = (($135) - ($136))|0;
   $138 = (($137|0) / 4)&-1;
   $139 = $20;
   HEAP32[$139>>2] = $138;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 20: {
   $144 = $25;
   $145 = ((($144)) + -4|0);
   $146 = $14;
   $147 = $145;
   $148 = $146;
   $149 = (($147) - ($148))|0;
   $150 = (($149|0) / 4)&-1;
   $151 = $20;
   HEAP32[$151>>2] = $150;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 23: {
   $160 = $25;
   $161 = ((($160)) + -4|0);
   $162 = $14;
   $163 = $161;
   $164 = $162;
   $165 = (($163) - ($164))|0;
   $166 = (($165|0) / 4)&-1;
   $167 = $20;
   HEAP32[$167>>2] = $166;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 25: {
   $173 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer>>2] = $173;
   $174 = (_calc_errstr_s(9470,$vararg_buffer)|0);
   $175 = $19;
   HEAP32[$175>>2] = $174;
   $176 = HEAP32[$23>>2]|0;
   _free($176);
   $177 = $25;
   $178 = $14;
   $179 = $177;
   $180 = $178;
   $181 = (($179) - ($180))|0;
   $182 = (($181|0) / 4)&-1;
   $183 = $20;
   HEAP32[$183>>2] = $182;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 27: {
   $188 = $25;
   $189 = ((($188)) + -4|0);
   $190 = $14;
   $191 = $189;
   $192 = $190;
   $193 = (($191) - ($192))|0;
   $194 = (($193|0) / 4)&-1;
   $195 = $20;
   HEAP32[$195>>2] = $194;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 29: {
   $202 = (_freecell_solver_user_get_max_num_freecells()|0);
   HEAP32[$vararg_buffer2>>2] = $202;
   $203 = (_calc_errstr_s(9497,$vararg_buffer2)|0);
   $204 = $19;
   HEAP32[$204>>2] = $203;
   $205 = $25;
   $206 = $14;
   $207 = $205;
   $208 = $206;
   $209 = (($207) - ($208))|0;
   $210 = (($209|0) / 4)&-1;
   $211 = $20;
   HEAP32[$211>>2] = $210;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 31: {
   $216 = $25;
   $217 = ((($216)) + -4|0);
   $218 = $14;
   $219 = $217;
   $220 = $218;
   $221 = (($219) - ($220))|0;
   $222 = (($221|0) / 4)&-1;
   $223 = $20;
   HEAP32[$223>>2] = $222;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 33: {
   $230 = (_freecell_solver_user_get_max_num_stacks()|0);
   HEAP32[$vararg_buffer5>>2] = $230;
   $231 = (_calc_errstr_s(9602,$vararg_buffer5)|0);
   $232 = $19;
   HEAP32[$232>>2] = $231;
   $233 = $25;
   $234 = $14;
   $235 = $233;
   $236 = $234;
   $237 = (($235) - ($236))|0;
   $238 = (($237|0) / 4)&-1;
   $239 = $20;
   HEAP32[$239>>2] = $238;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 35: {
   $244 = $25;
   $245 = ((($244)) + -4|0);
   $246 = $14;
   $247 = $245;
   $248 = $246;
   $249 = (($247) - ($248))|0;
   $250 = (($249|0) / 4)&-1;
   $251 = $20;
   HEAP32[$251>>2] = $250;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 37: {
   $258 = (_freecell_solver_user_get_max_num_decks()|0);
   HEAP32[$vararg_buffer8>>2] = $258;
   $259 = (_calc_errstr_s(9704,$vararg_buffer8)|0);
   $260 = $19;
   HEAP32[$260>>2] = $259;
   $261 = $25;
   $262 = $14;
   $263 = $261;
   $264 = $262;
   $265 = (($263) - ($264))|0;
   $266 = (($265|0) / 4)&-1;
   $267 = $20;
   HEAP32[$267>>2] = $266;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 39: {
   $273 = ((($272)) + -4|0);
   $274 = $14;
   $275 = $273;
   $276 = $274;
   $277 = (($275) - ($276))|0;
   $278 = (($277|0) / 4)&-1;
   $279 = $20;
   HEAP32[$279>>2] = $278;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 44: {
   $295 = $25;
   $296 = ((($295)) + -4|0);
   $297 = $14;
   $298 = $296;
   $299 = $297;
   $300 = (($298) - ($299))|0;
   $301 = (($300|0) / 4)&-1;
   $302 = $20;
   HEAP32[$302>>2] = $301;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 47: {
   $315 = ((($314)) + -4|0);
   $316 = $14;
   $317 = $315;
   $318 = $316;
   $319 = (($317) - ($318))|0;
   $320 = (($319|0) / 4)&-1;
   $321 = $20;
   HEAP32[$321>>2] = $320;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 52: {
   $338 = ((($337)) + -4|0);
   $339 = $14;
   $340 = $338;
   $341 = $339;
   $342 = (($340) - ($341))|0;
   $343 = (($342|0) / 4)&-1;
   $344 = $20;
   HEAP32[$344>>2] = $343;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 54: {
   $349 = $35;
   HEAP32[$vararg_buffer11>>2] = $349;
   $350 = (_calc_errstr_s(9836,$vararg_buffer11)|0);
   $351 = $19;
   HEAP32[$351>>2] = $350;
   $352 = $25;
   $353 = $14;
   $354 = $352;
   $355 = $353;
   $356 = (($354) - ($355))|0;
   $357 = (($356|0) / 4)&-1;
   $358 = $20;
   HEAP32[$358>>2] = $357;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 55: {
   $359 = $35;
   HEAP32[$vararg_buffer14>>2] = $359;
   $360 = (_calc_errstr_s(9857,$vararg_buffer14)|0);
   $361 = $19;
   HEAP32[$361>>2] = $360;
   $362 = $25;
   $363 = $14;
   $364 = $362;
   $365 = $363;
   $366 = (($364) - ($365))|0;
   $367 = (($366|0) / 4)&-1;
   $368 = $20;
   HEAP32[$368>>2] = $367;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 56: {
   $369 = $35;
   HEAP32[$vararg_buffer17>>2] = $369;
   $370 = (_calc_errstr_s(10010,$vararg_buffer17)|0);
   $371 = $19;
   HEAP32[$371>>2] = $370;
   $372 = $25;
   $373 = $14;
   $374 = $372;
   $375 = $373;
   $376 = (($374) - ($375))|0;
   $377 = (($376|0) / 4)&-1;
   $378 = $20;
   HEAP32[$378>>2] = $377;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 57: {
   $379 = $35;
   HEAP32[$vararg_buffer20>>2] = $379;
   $380 = (_calc_errstr_s(10160,$vararg_buffer20)|0);
   $381 = $19;
   HEAP32[$381>>2] = $380;
   $382 = $25;
   $383 = $14;
   $384 = $382;
   $385 = $383;
   $386 = (($384) - ($385))|0;
   $387 = (($386|0) / 4)&-1;
   $388 = $20;
   HEAP32[$388>>2] = $387;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 59: {
   $394 = ((($393)) + -4|0);
   $395 = $14;
   $396 = $394;
   $397 = $395;
   $398 = (($396) - ($397))|0;
   $399 = (($398|0) / 4)&-1;
   $400 = $20;
   HEAP32[$400>>2] = $399;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 71: {
   $420 = $37;
   HEAP32[$vararg_buffer23>>2] = $420;
   $421 = (_calc_errstr_s(10336,$vararg_buffer23)|0);
   $422 = $19;
   HEAP32[$422>>2] = $421;
   $423 = $25;
   $424 = $14;
   $425 = $423;
   $426 = $424;
   $427 = (($425) - ($426))|0;
   $428 = (($427|0) / 4)&-1;
   $429 = $20;
   HEAP32[$429>>2] = $428;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 74: {
   $437 = ((($436)) + -4|0);
   $438 = $14;
   $439 = $437;
   $440 = $438;
   $441 = (($439) - ($440))|0;
   $442 = (($441|0) / 4)&-1;
   $443 = $20;
   HEAP32[$443>>2] = $442;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 80: {
   $462 = $25;
   $463 = ((($462)) + -4|0);
   $464 = $14;
   $465 = $463;
   $466 = $464;
   $467 = (($465) - ($466))|0;
   $468 = (($467|0) / 4)&-1;
   $469 = $20;
   HEAP32[$469>>2] = $468;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 83: {
   $478 = $25;
   $479 = ((($478)) + -4|0);
   $480 = $14;
   $481 = $479;
   $482 = $480;
   $483 = (($481) - ($482))|0;
   $484 = (($483|0) / 4)&-1;
   $485 = $20;
   HEAP32[$485>>2] = $484;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 86: {
   $494 = $25;
   $495 = ((($494)) + -4|0);
   $496 = $14;
   $497 = $495;
   $498 = $496;
   $499 = (($497) - ($498))|0;
   $500 = (($499|0) / 4)&-1;
   $501 = $20;
   HEAP32[$501>>2] = $500;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 93: {
   HEAP32[$vararg_buffer26>>2] = 10366;
   $515 = (_calc_errstr_s(13454,$vararg_buffer26)|0);
   $516 = $19;
   HEAP32[$516>>2] = $515;
   $517 = $25;
   $518 = $14;
   $519 = $517;
   $520 = $518;
   $521 = (($519) - ($520))|0;
   $522 = (($521|0) / 4)&-1;
   $523 = $20;
   HEAP32[$523>>2] = $522;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 95: {
   $528 = $25;
   $529 = ((($528)) + -4|0);
   $530 = $14;
   $531 = $529;
   $532 = $530;
   $533 = (($531) - ($532))|0;
   $534 = (($533|0) / 4)&-1;
   $535 = $20;
   HEAP32[$535>>2] = $534;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 100: {
   $546 = $25;
   $547 = ((($546)) + -4|0);
   $548 = $14;
   $549 = $547;
   $550 = $548;
   $551 = (($549) - ($550))|0;
   $552 = (($551|0) / 4)&-1;
   $553 = $20;
   HEAP32[$553>>2] = $552;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 103: {
   $561 = $25;
   $562 = ((($561)) + -4|0);
   $563 = $14;
   $564 = $562;
   $565 = $563;
   $566 = (($564) - ($565))|0;
   $567 = (($566|0) / 4)&-1;
   $568 = $20;
   HEAP32[$568>>2] = $567;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 106: {
   $576 = $25;
   $577 = ((($576)) + -4|0);
   $578 = $14;
   $579 = $577;
   $580 = $578;
   $581 = (($579) - ($580))|0;
   $582 = (($581|0) / 4)&-1;
   $583 = $20;
   HEAP32[$583>>2] = $582;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 109: {
   $591 = $25;
   $592 = ((($591)) + -4|0);
   $593 = $14;
   $594 = $592;
   $595 = $593;
   $596 = (($594) - ($595))|0;
   $597 = (($596|0) / 4)&-1;
   $598 = $20;
   HEAP32[$598>>2] = $597;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 112: {
   $606 = $25;
   $607 = ((($606)) + -4|0);
   $608 = $14;
   $609 = $607;
   $610 = $608;
   $611 = (($609) - ($610))|0;
   $612 = (($611|0) / 4)&-1;
   $613 = $20;
   HEAP32[$613>>2] = $612;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 115: {
   $622 = $25;
   $623 = ((($622)) + -4|0);
   $624 = $14;
   $625 = $623;
   $626 = $624;
   $627 = (($625) - ($626))|0;
   $628 = (($627|0) / 4)&-1;
   $629 = $20;
   HEAP32[$629>>2] = $628;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 117: {
   $635 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer29>>2] = $635;
   $636 = (_calc_errstr_s(10420,$vararg_buffer29)|0);
   $637 = $19;
   HEAP32[$637>>2] = $636;
   $638 = HEAP32[$23>>2]|0;
   _free($638);
   $639 = $25;
   $640 = $14;
   $641 = $639;
   $642 = $640;
   $643 = (($641) - ($642))|0;
   $644 = (($643|0) / 4)&-1;
   $645 = $20;
   HEAP32[$645>>2] = $644;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 119: {
   $651 = ((($650)) + -4|0);
   $652 = $14;
   $653 = $651;
   $654 = $652;
   $655 = (($653) - ($654))|0;
   $656 = (($655|0) / 4)&-1;
   $657 = $20;
   HEAP32[$657>>2] = $656;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 124: {
   $665 = $25;
   $666 = HEAP32[$665>>2]|0;
   HEAP32[$vararg_buffer32>>2] = $666;
   $667 = (_calc_errstr_s(10486,$vararg_buffer32)|0);
   $668 = $19;
   HEAP32[$668>>2] = $667;
   $669 = $25;
   $670 = $14;
   $671 = $669;
   $672 = $670;
   $673 = (($671) - ($672))|0;
   $674 = (($673|0) / 4)&-1;
   $675 = $20;
   HEAP32[$675>>2] = $674;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 128: {
   $683 = $25;
   $684 = ((($683)) + -4|0);
   $685 = $14;
   $686 = $684;
   $687 = $685;
   $688 = (($686) - ($687))|0;
   $689 = (($688|0) / 4)&-1;
   $690 = $20;
   HEAP32[$690>>2] = $689;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 141: {
   $730 = $44;
   HEAP32[$vararg_buffer39>>2] = $730;
   $731 = (_calc_errstr_s(10529,$vararg_buffer39)|0);
   $732 = $19;
   HEAP32[$732>>2] = $731;
   $733 = $25;
   $734 = $14;
   $735 = $733;
   $736 = $734;
   $737 = (($735) - ($736))|0;
   $738 = (($737|0) / 4)&-1;
   $739 = $20;
   HEAP32[$739>>2] = $738;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 143: {
   (_fclose($749)|0);
   HEAP32[$vararg_buffer42>>2] = 10566;
   $750 = (_calc_errstr_s(13454,$vararg_buffer42)|0);
   $751 = $19;
   HEAP32[$751>>2] = $750;
   $752 = $25;
   $753 = $14;
   $754 = $752;
   $755 = $753;
   $756 = (($754) - ($755))|0;
   $757 = (($756|0) / 4)&-1;
   $758 = $20;
   HEAP32[$758>>2] = $757;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 146: {
   $795 = $25;
   $796 = $14;
   $797 = $795;
   $798 = $796;
   $799 = (($797) - ($798))|0;
   $800 = (($799|0) / 4)&-1;
   $801 = $20;
   HEAP32[$801>>2] = $800;
   _fc_solve_args_man_free($48);
   $802 = $49;
   $11 = $802;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 149: {
   $807 = $25;
   $808 = ((($807)) + -4|0);
   $809 = $14;
   $810 = $808;
   $811 = $809;
   $812 = (($810) - ($811))|0;
   $813 = (($812|0) / 4)&-1;
   $814 = $20;
   HEAP32[$814>>2] = $813;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 151: {
   $824 = $25;
   $825 = HEAP32[$824>>2]|0;
   HEAP32[$vararg_buffer45>>2] = $825;
   $826 = (_calc_errstr_s(10629,$vararg_buffer45)|0);
   $827 = $19;
   HEAP32[$827>>2] = $826;
   $828 = $25;
   $829 = $14;
   $830 = $828;
   $831 = $829;
   $832 = (($830) - ($831))|0;
   $833 = (($832|0) / 4)&-1;
   $834 = $20;
   HEAP32[$834>>2] = $833;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 152: {
   $835 = $50;
   $11 = $835;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 154: {
   $840 = $25;
   $841 = ((($840)) + -4|0);
   $842 = $14;
   $843 = $841;
   $844 = $842;
   $845 = (($843) - ($844))|0;
   $846 = (($845|0) / 4)&-1;
   $847 = $20;
   HEAP32[$847>>2] = $846;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 165: {
   $875 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer48>>2] = $875;
   $876 = (_calc_errstr_s(10669,$vararg_buffer48)|0);
   $877 = $19;
   HEAP32[$877>>2] = $876;
   $878 = HEAP32[$23>>2]|0;
   _free($878);
   $879 = $25;
   $880 = $14;
   $881 = $879;
   $882 = $880;
   $883 = (($881) - ($882))|0;
   $884 = (($883|0) / 4)&-1;
   $885 = $20;
   HEAP32[$885>>2] = $884;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 167: {
   $890 = $25;
   $891 = ((($890)) + -4|0);
   $892 = $14;
   $893 = $891;
   $894 = $892;
   $895 = (($893) - ($894))|0;
   $896 = (($895|0) / 4)&-1;
   $897 = $20;
   HEAP32[$897>>2] = $896;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 169: {
   $903 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer51>>2] = $903;
   $904 = (_calc_errstr_s(10702,$vararg_buffer51)|0);
   $905 = $19;
   HEAP32[$905>>2] = $904;
   $906 = HEAP32[$23>>2]|0;
   _free($906);
   $907 = $25;
   $908 = $14;
   $909 = $907;
   $910 = $908;
   $911 = (($909) - ($910))|0;
   $912 = (($911|0) / 4)&-1;
   $913 = $20;
   HEAP32[$913>>2] = $912;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 171: {
   $918 = $25;
   $919 = ((($918)) + -4|0);
   $920 = $14;
   $921 = $919;
   $922 = $920;
   $923 = (($921) - ($922))|0;
   $924 = (($923|0) / 4)&-1;
   $925 = $20;
   HEAP32[$925>>2] = $924;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 173: {
   $930 = $25;
   $931 = ((($930)) + -4|0);
   $932 = $14;
   $933 = $931;
   $934 = $932;
   $935 = (($933) - ($934))|0;
   $936 = (($935|0) / 4)&-1;
   $937 = $20;
   HEAP32[$937>>2] = $936;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 175: {
   $943 = $25;
   $944 = HEAP32[$943>>2]|0;
   HEAP32[$vararg_buffer54>>2] = $944;
   $945 = (_calc_errstr_s(10748,$vararg_buffer54)|0);
   $946 = $19;
   HEAP32[$946>>2] = $945;
   $947 = $25;
   $948 = $14;
   $949 = $947;
   $950 = $948;
   $951 = (($949) - ($950))|0;
   $952 = (($951|0) / 4)&-1;
   $953 = $20;
   HEAP32[$953>>2] = $952;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 177: {
   $959 = ((($958)) + -4|0);
   $960 = $14;
   $961 = $959;
   $962 = $960;
   $963 = (($961) - ($962))|0;
   $964 = (($963|0) / 4)&-1;
   $965 = $20;
   HEAP32[$965>>2] = $964;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 179: {
   HEAP32[$vararg_buffer61>>2] = 10792;
   $969 = (_calc_errstr_s(13454,$vararg_buffer61)|0);
   $970 = $19;
   HEAP32[$970>>2] = $969;
   $971 = $25;
   $972 = $14;
   $973 = $971;
   $974 = $972;
   $975 = (($973) - ($974))|0;
   $976 = (($975|0) / 4)&-1;
   $977 = $20;
   HEAP32[$977>>2] = $976;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 181: {
   $983 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer64>>2] = $983;
   $984 = (_calc_errstr_s(10828,$vararg_buffer64)|0);
   $985 = $19;
   HEAP32[$985>>2] = $984;
   $986 = HEAP32[$23>>2]|0;
   _free($986);
   $987 = $25;
   $988 = $14;
   $989 = $987;
   $990 = $988;
   $991 = (($989) - ($990))|0;
   $992 = (($991|0) / 4)&-1;
   $993 = $20;
   HEAP32[$993>>2] = $992;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 183: {
   $999 = ((($998)) + -4|0);
   $1000 = $14;
   $1001 = $999;
   $1002 = $1000;
   $1003 = (($1001) - ($1002))|0;
   $1004 = (($1003|0) / 4)&-1;
   $1005 = $20;
   HEAP32[$1005>>2] = $1004;
   $11 = 4;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 185: {
   HEAP32[$vararg_buffer71>>2] = 10874;
   $1009 = (_calc_errstr_s(13454,$vararg_buffer71)|0);
   $1010 = $19;
   HEAP32[$1010>>2] = $1009;
   $1011 = $25;
   $1012 = $14;
   $1013 = $1011;
   $1014 = $1012;
   $1015 = (($1013) - ($1014))|0;
   $1016 = (($1015|0) / 4)&-1;
   $1017 = $20;
   HEAP32[$1017>>2] = $1016;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 187: {
   $1023 = HEAP32[$23>>2]|0;
   HEAP32[$vararg_buffer74>>2] = $1023;
   $1024 = (_calc_errstr_s(10910,$vararg_buffer74)|0);
   $1025 = $19;
   HEAP32[$1025>>2] = $1024;
   $1026 = HEAP32[$23>>2]|0;
   _free($1026);
   $1027 = $25;
   $1028 = $14;
   $1029 = $1027;
   $1030 = $1028;
   $1031 = (($1029) - ($1030))|0;
   $1032 = (($1031|0) / 4)&-1;
   $1033 = $20;
   HEAP32[$1033>>2] = $1032;
   $11 = 5;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
  case 189: {
   $1036 = $25;
   $1037 = $14;
   $1038 = $1036;
   $1039 = $1037;
   $1040 = (($1038) - ($1039))|0;
   $1041 = (($1040|0) / 4)&-1;
   $1042 = $20;
   HEAP32[$1042>>2] = $1041;
   $11 = 0;
   $1043 = $11;
   STACKTOP = sp;return ($1043|0);
   break;
  }
 }
 return (0)|0;
}
function _freecell_solver_user_cmd_line_parse_args($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $18 = $9;
 $19 = $10;
 $20 = $11;
 $21 = $12;
 $22 = $13;
 $23 = $14;
 $24 = $15;
 $25 = $16;
 $26 = $17;
 $27 = (_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count($18,$19,$20,$21,$22,$23,$24,$25,$26,-1,0)|0);
 STACKTOP = sp;return ($27|0);
}
function _in_word_set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ($7>>>0)<=(26);
 $9 = $4;
 $10 = ($9>>>0)>=(2);
 $or$cond = $8 & $10;
 if ($or$cond) {
  $11 = $3;
  $12 = $4;
  $13 = (_hash($11,$12)|0);
  $5 = $13;
  $14 = $5;
  $15 = ($14>>>0)<=(147);
  if ($15) {
   $16 = $5;
   $17 = (144 + ($16<<3)|0);
   $18 = HEAP32[$17>>2]|0;
   $6 = $18;
   $19 = $3;
   $20 = HEAP8[$19>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = $6;
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    $26 = $3;
    $27 = ((($26)) + 1|0);
    $28 = $6;
    $29 = ((($28)) + 1|0);
    $30 = (_strcmp($27,$29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     $32 = $5;
     $33 = (144 + ($32<<3)|0);
     $2 = $33;
     $34 = $2;
     STACKTOP = sp;return ($34|0);
    }
   }
  }
 }
 $2 = 0;
 $34 = $2;
 STACKTOP = sp;return ($34|0);
}
function _calc_errstr_s($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = sp + 16|0;
 $1 = $0;
 HEAP32[$2>>2] = $varargs;
 $4 = $1;
 (_vasprintf($3,$4,$2)|0);
 $5 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _fc_solve_set_weights($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = ($9|0)<(6);
  if (!($10)) {
   label = 10;
   break;
  }
  while(1) {
   $11 = $3;
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)==(44);
   $15 = $3;
   if (!($14)) {
    break;
   }
   $16 = ((($15)) + 1|0);
   $3 = $16;
  }
  $17 = $4;
  $18 = ($15>>>0)>=($17>>>0);
  if ($18) {
   break;
  }
  $25 = $3;
  $26 = (+_strtod($25,$7));
  $8 = $26;
  $27 = $8;
  $28 = $27 > 0.0;
  $29 = $8;
  $30 = $28 ? $29 : 0.0;
  $31 = $5;
  $32 = $6;
  $33 = (($31) + ($32<<3)|0);
  HEAPF64[$33>>3] = $30;
  $34 = HEAP32[$7>>2]|0;
  $3 = $34;
  $35 = $6;
  $36 = (($35) + 1)|0;
  $6 = $36;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 while(1) {
  $19 = $5;
  $20 = $6;
  $21 = (($20) + 1)|0;
  $6 = $21;
  $22 = (($19) + ($20<<3)|0);
  HEAPF64[$22>>3] = 0.0;
  $23 = $6;
  $24 = ($23|0)<(6);
  if (!($24)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $4;
 switch ($6|0) {
 case 8: case 9: case 10: case 11:  {
  label = 3;
  break;
 }
 case 3: case 4: case 5: case 6: case 7:  {
  label = 4;
  break;
 }
 case 2:  {
  break;
 }
 default: {
  $7 = $2;
  $8 = ((($7)) + 11|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = (1328 + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $4;
  $15 = (($14) + ($13))|0;
  $4 = $15;
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $16 = $2;
  $17 = ((($16)) + 7|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (1328 + ($19)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $4;
  $24 = (($23) + ($22))|0;
  $4 = $24;
  label = 4;
 }
 if ((label|0) == 4) {
  $25 = $2;
  $26 = ((($25)) + 2|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (1328 + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $4;
  $33 = (($32) + ($31))|0;
  $4 = $33;
 }
 $34 = $2;
 $35 = ((($34)) + 1|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = (1328 + ($37)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $4;
 $42 = (($41) + ($40))|0;
 $4 = $42;
 $43 = $4;
 STACKTOP = sp;return ($43|0);
}
function _read_preset($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(12272|0);
 $vararg_buffer = sp + 12208|0;
 $4 = sp + 12265|0;
 $9 = sp + 8208|0;
 $12 = sp + 8192|0;
 $17 = sp;
 $19 = sp + 12216|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $20 = (_getenv((11721|0))|0);
 $10 = $20;
 $21 = $10;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $10;
  HEAP32[$vararg_buffer>>2] = $23;
  (_snprintf($9,4000,11726,$vararg_buffer)|0);
 }
 $11 = 11755;
 $24 = (_getenv((11796|0))|0);
 HEAP32[$12>>2] = $24;
 $25 = ((($12)) + 4|0);
 $26 = $10;
 $27 = ($26|0)!=(0|0);
 $28 = $27 ? $9 : 0;
 HEAP32[$25>>2] = $28;
 $29 = ((($25)) + 4|0);
 $30 = $11;
 HEAP32[$29>>2] = $30;
 $31 = ((($29)) + 4|0);
 $32 = $8;
 HEAP32[$31>>2] = $32;
 $13 = 0;
 $14 = 0;
 L4: while(1) {
  $33 = $14;
  $34 = ($33>>>0)<(4);
  if (!($34)) {
   label = 20;
   break;
  }
  $35 = $14;
  $36 = (($12) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $15 = $37;
  $38 = $15;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   $40 = $15;
   $41 = (_fopen($40,10526)|0);
   $16 = $41;
   $42 = $16;
   $43 = ($42|0)!=(0|0);
   if ($43) {
    while(1) {
     $44 = $16;
     $45 = (_fgets($17,8192,$44)|0);
     $46 = ($45|0)==(0|0);
     if ($46) {
      break;
     }
     $47 = (_try_str_prefix($17,11821)|0);
     $18 = $47;
     $48 = ($47|0)!=(0|0);
     do {
      if ($48) {
       _nullify_newline($17);
       $49 = $7;
       $50 = $18;
       (_strncpy($49,$50,4000)|0);
       $51 = $7;
       $52 = ((($51)) + 3999|0);
       HEAP8[$52>>0] = 0;
      } else {
       $53 = (_try_str_prefix($17,11826)|0);
       $18 = $53;
       $54 = ($53|0)!=(0|0);
       if ($54) {
        _nullify_newline($17);
        $55 = $18;
        $56 = $5;
        $57 = (_strcmp($55,$56)|0);
        $58 = ($57|0)!=(0);
        if ($58) {
         break;
        }
        $13 = 1;
        break;
       } else {
        $59 = (_try_str_prefix($17,11832)|0);
        $18 = $59;
        $60 = ($59|0)!=(0|0);
        if (!($60)) {
         break;
        }
        $61 = $13;
        $62 = $61&1;
        if ($62) {
         label = 16;
         break L4;
        } else {
         break;
        }
       }
      }
     } while(0);
    }
    $66 = $16;
    (_fclose($66)|0);
   }
  }
  $67 = $14;
  $68 = (($67) + 1)|0;
  $14 = $68;
 }
 if ((label|0) == 16) {
  $63 = $6;
  $64 = $18;
  _fc_solve_args_man_chop($19,$64);
  ;HEAP32[$63>>2]=HEAP32[$19>>2]|0;HEAP32[$63+4>>2]=HEAP32[$19+4>>2]|0;
  $65 = $16;
  (_fclose($65)|0);
  $$expand_i1_val = 0;
  HEAP8[$4>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $69 = $$pre_trunc&1;
  STACKTOP = sp;return ($69|0);
 }
 else if ((label|0) == 20) {
  $$expand_i1_val2 = 1;
  HEAP8[$4>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $69 = $$pre_trunc&1;
  STACKTOP = sp;return ($69|0);
 }
 return (0)|0;
}
function _try_str_prefix($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (_strlen($5)|0);
 $4 = $6;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (_strncmp($7,$8,$9)|0);
 $11 = ($10|0)!=(0);
 $12 = $2;
 $13 = $4;
 $14 = (($12) + ($13)|0);
 $15 = $11 ? 0 : $14;
 STACKTOP = sp;return ($15|0);
}
function _nullify_newline($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_strchr($3,10)|0);
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $2;
 HEAP8[$7>>0] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_moves_processed_gen($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1568|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1568|0);
 $$byval_copy4 = sp + 1558|0;
 $$byval_copy3 = sp + 1553|0;
 $$byval_copy2 = sp + 1548|0;
 $$byval_copy1 = sp + 1543|0;
 $$byval_copy = sp + 1538|0;
 $8 = sp + 1392|0;
 $9 = sp + 32|0;
 $12 = sp;
 $22 = sp + 1532|0;
 $26 = sp + 1524|0;
 $28 = sp + 1519|0;
 $31 = sp + 1512|0;
 $35 = sp + 1507|0;
 $44 = sp + 1500|0;
 $45 = sp + 1492|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $46 = $5;
 dest=$8; src=$46; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $47 = ((($8)) + 56|0);
 $48 = ((($47)) + 24|0);
 HEAP32[$48>>2] = 0;
 $10 = 0;
 while(1) {
  $49 = $10;
  $50 = ($49|0)<(8);
  if (!($50)) {
   break;
  }
  $51 = ((($8)) + 56|0);
  $52 = ((($51)) + 24|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $10;
  $55 = 1 << $54;
  $56 = $53 & $55;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   $58 = $10;
   $59 = 1 << $58;
   $60 = ((($8)) + 56|0);
   $61 = ((($60)) + 24|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 | $59;
   HEAP32[$61>>2] = $63;
   $64 = $10;
   $65 = (($8) + ($64<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $11 = $66;
   $67 = $10;
   $68 = $67 << 7;
   $69 = (($9) + ($68)|0);
   $70 = $11;
   $71 = $11;
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = (($73) + 1)|0;
   _memcpy(($69|0),($70|0),($74|0))|0;
   $75 = $10;
   $76 = $75 << 7;
   $77 = (($9) + ($76)|0);
   $78 = $10;
   $79 = (($8) + ($78<<2)|0);
   HEAP32[$79>>2] = $77;
  }
  $80 = $10;
  $81 = (($80) + 1)|0;
  $10 = $81;
 }
 $82 = $7;
 $83 = HEAP32[$82>>2]|0;
 $13 = $83;
 $84 = $7;
 $85 = ((($84)) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ((($86)) + -4|0);
 $14 = $87;
 $88 = $4;
 $89 = ((($88)) + 4|0);
 HEAP32[$89>>2] = 0;
 $90 = (_malloc(160)|0);
 $91 = $4;
 $92 = ((($91)) + 8|0);
 HEAP32[$92>>2] = $90;
 $93 = $4;
 HEAP32[$93>>2] = 0;
 $15 = 0;
 while(1) {
  $94 = $15;
  $95 = ($94|0)<(8);
  if (!($95)) {
   break;
  }
  $96 = $15;
  $97 = (($8) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = $15;
  $102 = (($12) + ($101<<2)|0);
  HEAP32[$102>>2] = $100;
  $103 = $15;
  $104 = (($103) + 1)|0;
  $15 = $104;
 }
 $16 = 0;
 L12: while(1) {
  $105 = $16;
  $106 = $13;
  $107 = ($105|0)<($106|0);
  if (!($107)) {
   label = 53;
   break;
  }
  L15: while(1) {
   $17 = 0;
   while(1) {
    $108 = $17;
    $109 = ($108|0)<(8);
    if (!($109)) {
     break;
    }
    $110 = $17;
    $111 = (($8) + ($110<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $18 = $112;
    $113 = $18;
    $114 = HEAP8[$113>>0]|0;
    $19 = $114;
    $115 = $19;
    $116 = $115&255;
    $117 = ($116|0)!=(0);
    if ($117) {
     $118 = $18;
     $119 = $19;
     $120 = $119&255;
     $121 = (($120) - 1)|0;
     $122 = (($121) + 1)|0;
     $123 = (($118) + ($122)|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = (_fc_solve_fc_pro__can_be_moved($8,$124)|0);
     if ($125) {
      label = 16;
      break;
     }
    }
    $133 = $17;
    $134 = (($133) + 1)|0;
    $17 = $134;
   }
   if ((label|0) == 16) {
    label = 0;
    $126 = $18;
    $127 = $18;
    $128 = HEAP8[$127>>0]|0;
    $129 = (($128) + -1)<<24>>24;
    HEAP8[$127>>0] = $129;
    $130 = $129&255;
    $131 = (($130) + 1)|0;
    $132 = (($126) + ($131)|0);
    HEAP8[$132>>0] = 0;
    continue;
   }
   $20 = 0;
   while(1) {
    $135 = $20;
    $136 = $6;
    $137 = ($135|0)<($136|0);
    if (!($137)) {
     break L15;
    }
    $138 = ((($8)) + 40|0);
    $139 = $20;
    $140 = (($138) + ($139)|0);
    $141 = HEAP8[$140>>0]|0;
    $21 = $141;
    $142 = $21;
    $143 = $142&255;
    $144 = ($143|0)!=(0);
    if ($144) {
     $145 = $21;
     $146 = (_fc_solve_fc_pro__can_be_moved($8,$145)|0);
     if ($146) {
      break;
     }
    }
    $150 = $20;
    $151 = (($150) + 1)|0;
    $20 = $151;
   }
   $147 = ((($8)) + 40|0);
   $148 = $20;
   $149 = (($147) + ($148)|0);
   HEAP8[$149>>0] = 0;
  }
  $152 = $14;
  $153 = ((($152)) + 4|0);
  $14 = $153;
  ;HEAP8[$22>>0]=HEAP8[$153>>0]|0;HEAP8[$22+1>>0]=HEAP8[$153+1>>0]|0;HEAP8[$22+2>>0]=HEAP8[$153+2>>0]|0;HEAP8[$22+3>>0]=HEAP8[$153+3>>0]|0;
  $154 = HEAP8[$22>>0]|0;
  $155 = $154&255;
  switch ($155|0) {
  case 4:  {
   $156 = ((($22)) + 1|0);
   $157 = HEAP8[$156>>0]|0;
   $158 = $157&255;
   $23 = $158;
   $159 = $23;
   $160 = (($8) + ($159<<2)|0);
   $161 = HEAP32[$160>>2]|0;
   $24 = $161;
   $162 = $23;
   $163 = (($12) + ($162<<2)|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $24;
   $166 = HEAP8[$165>>0]|0;
   $167 = $166&255;
   $168 = ($164|0)>=($167|0);
   if (!($168)) {
    label = 26;
    break L12;
   }
   $169 = $23;
   $170 = (($12) + ($169<<2)|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $24;
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = ($171|0)==($174|0);
   if ($175) {
    $176 = $24;
    $177 = $24;
    $178 = HEAP8[$177>>0]|0;
    $179 = $178&255;
    $180 = (($179) - 1)|0;
    $181 = (($180) + 1)|0;
    $182 = (($176) + ($181)|0);
    $183 = HEAP8[$182>>0]|0;
    $25 = $183;
    $184 = $24;
    $185 = $24;
    $186 = HEAP8[$185>>0]|0;
    $187 = (($186) + -1)<<24>>24;
    HEAP8[$185>>0] = $187;
    $188 = $187&255;
    $189 = (($188) + 1)|0;
    $190 = (($184) + ($189)|0);
    HEAP8[$190>>0] = 0;
    $191 = ((($8)) + 48|0);
    $192 = $25;
    $193 = $192&255;
    $194 = $193 & 3;
    $195 = (($191) + ($194)|0);
    $196 = HEAP8[$195>>0]|0;
    $197 = (($196) + 1)<<24>>24;
    HEAP8[$195>>0] = $197;
    $198 = $4;
    ;HEAP8[$26>>0]=HEAP8[$22>>0]|0;HEAP8[$26+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$22+3>>0]|0;
    $199 = ((($26)) + 4|0);
    HEAP8[$199>>0] = 0;
    ;HEAP8[$$byval_copy>>0]=HEAP8[$26>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$$byval_copy+4>>0]=HEAP8[$26+4>>0]|0;
    _moves_processed_add_new_move($198,$$byval_copy);
   }
   $200 = $23;
   $201 = (($12) + ($200<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (($202) + -1)|0;
   HEAP32[$201>>2] = $203;
   break;
  }
  case 5:  {
   $204 = ((($22)) + 1|0);
   $205 = HEAP8[$204>>0]|0;
   $206 = $205&255;
   $27 = $206;
   $207 = ((($8)) + 40|0);
   $208 = $27;
   $209 = (($207) + ($208)|0);
   $210 = HEAP8[$209>>0]|0;
   $211 = $210&255;
   $212 = ($211|0)==(0);
   if (!($212)) {
    $213 = $4;
    ;HEAP8[$28>>0]=HEAP8[$22>>0]|0;HEAP8[$28+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$28+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$28+3>>0]=HEAP8[$22+3>>0]|0;
    $214 = ((($28)) + 4|0);
    HEAP8[$214>>0] = 0;
    ;HEAP8[$$byval_copy1>>0]=HEAP8[$28>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$28+3>>0]|0;HEAP8[$$byval_copy1+4>>0]=HEAP8[$28+4>>0]|0;
    _moves_processed_add_new_move($213,$$byval_copy1);
   }
   $215 = ((($8)) + 48|0);
   $216 = ((($8)) + 40|0);
   $217 = $27;
   $218 = (($216) + ($217)|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $219&255;
   $221 = $220 & 3;
   $222 = (($215) + ($221)|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = (($223) + 1)<<24>>24;
   HEAP8[$222>>0] = $224;
   $225 = ((($8)) + 40|0);
   $226 = $27;
   $227 = (($225) + ($226)|0);
   HEAP8[$227>>0] = 0;
   break;
  }
  case 2:  {
   $228 = ((($22)) + 1|0);
   $229 = HEAP8[$228>>0]|0;
   $29 = $229;
   $230 = ((($22)) + 2|0);
   $231 = HEAP8[$230>>0]|0;
   $30 = $231;
   $232 = ((($8)) + 40|0);
   $233 = $29;
   $234 = $233&255;
   $235 = (($232) + ($234)|0);
   $236 = HEAP8[$235>>0]|0;
   $237 = $236&255;
   $238 = ($237|0)==(0);
   if (!($238)) {
    $239 = $4;
    ;HEAP8[$31>>0]=HEAP8[$22>>0]|0;HEAP8[$31+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$22+3>>0]|0;
    $240 = ((($31)) + 4|0);
    HEAP8[$240>>0] = 0;
    ;HEAP8[$$byval_copy2>>0]=HEAP8[$31>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$31+3>>0]|0;HEAP8[$$byval_copy2+4>>0]=HEAP8[$31+4>>0]|0;
    _moves_processed_add_new_move($239,$$byval_copy2);
    $241 = $30;
    $242 = $241&255;
    $243 = ((($8)) + 40|0);
    $244 = $29;
    $245 = $244&255;
    $246 = (($243) + ($245)|0);
    $247 = HEAP8[$246>>0]|0;
    _fcs_state_push($8,$242,$247);
    $248 = ((($8)) + 40|0);
    $249 = $29;
    $250 = $249&255;
    $251 = (($248) + ($250)|0);
    HEAP8[$251>>0] = 0;
   }
   $252 = $30;
   $253 = $252&255;
   $254 = (($12) + ($253<<2)|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (($255) + 1)|0;
   HEAP32[$254>>2] = $256;
   break;
  }
  case 1:  {
   $257 = ((($22)) + 1|0);
   $258 = HEAP8[$257>>0]|0;
   $259 = $258&255;
   $32 = $259;
   $260 = ((($22)) + 2|0);
   $261 = HEAP8[$260>>0]|0;
   $262 = $261&255;
   $33 = $262;
   $263 = $32;
   $264 = (($12) + ($263<<2)|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = ($265|0)>(0);
   if (!($266)) {
    label = 37;
    break L12;
   }
   $267 = $32;
   $268 = (($8) + ($267<<2)|0);
   $269 = HEAP32[$268>>2]|0;
   $34 = $269;
   $270 = $34;
   $271 = HEAP8[$270>>0]|0;
   $272 = $271&255;
   $273 = $32;
   $274 = (($12) + ($273<<2)|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = ($272|0)<=($275|0);
   if (!($276)) {
    label = 39;
    break L12;
   }
   $277 = $34;
   $278 = HEAP8[$277>>0]|0;
   $279 = $278&255;
   $280 = $32;
   $281 = (($12) + ($280<<2)|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = ($279|0)>=($282|0);
   if ($283) {
    $284 = $4;
    ;HEAP8[$35>>0]=HEAP8[$22>>0]|0;HEAP8[$35+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$35+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$35+3>>0]=HEAP8[$22+3>>0]|0;
    $285 = ((($35)) + 4|0);
    HEAP8[$285>>0] = 0;
    ;HEAP8[$$byval_copy3>>0]=HEAP8[$35>>0]|0;HEAP8[$$byval_copy3+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$$byval_copy3+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$$byval_copy3+3>>0]=HEAP8[$35+3>>0]|0;HEAP8[$$byval_copy3+4>>0]=HEAP8[$35+4>>0]|0;
    _moves_processed_add_new_move($284,$$byval_copy3);
    $286 = $34;
    $287 = $34;
    $288 = HEAP8[$287>>0]|0;
    $289 = $288&255;
    $290 = (($289) - 1)|0;
    $291 = (($290) + 1)|0;
    $292 = (($286) + ($291)|0);
    $293 = HEAP8[$292>>0]|0;
    $36 = $293;
    $294 = $34;
    $295 = $34;
    $296 = HEAP8[$295>>0]|0;
    $297 = (($296) + -1)<<24>>24;
    HEAP8[$295>>0] = $297;
    $298 = $297&255;
    $299 = (($298) + 1)|0;
    $300 = (($294) + ($299)|0);
    HEAP8[$300>>0] = 0;
    $301 = $36;
    $302 = ((($8)) + 40|0);
    $303 = $33;
    $304 = (($302) + ($303)|0);
    HEAP8[$304>>0] = $301;
   }
   $305 = $32;
   $306 = (($12) + ($305<<2)|0);
   $307 = HEAP32[$306>>2]|0;
   $308 = (($307) + -1)|0;
   HEAP32[$306>>2] = $308;
   break;
  }
  case 0:  {
   $309 = ((($22)) + 1|0);
   $310 = HEAP8[$309>>0]|0;
   $37 = $310;
   $311 = ((($22)) + 2|0);
   $312 = HEAP8[$311>>0]|0;
   $38 = $312;
   $313 = ((($22)) + 3|0);
   $314 = HEAP8[$313>>0]|0;
   $315 = $314&255;
   $39 = $315;
   $316 = $37;
   $317 = $316&255;
   $318 = (($8) + ($317<<2)|0);
   $319 = HEAP32[$318>>2]|0;
   $40 = $319;
   $320 = $38;
   $321 = $320&255;
   $322 = (($8) + ($321<<2)|0);
   $323 = HEAP32[$322>>2]|0;
   $41 = $323;
   $324 = $40;
   $325 = HEAP8[$324>>0]|0;
   $326 = $325&255;
   $42 = $326;
   $327 = $37;
   $328 = $327&255;
   $329 = (($12) + ($328<<2)|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $42;
   $332 = ($330|0)>=($331|0);
   if (!($332)) {
    label = 44;
    break L12;
   }
   $333 = $37;
   $334 = $333&255;
   $335 = (($12) + ($334<<2)|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = $42;
   $338 = ($336|0)>($337|0);
   if ($338) {
    $339 = $37;
    $340 = $339&255;
    $341 = (($12) + ($340<<2)|0);
    $342 = HEAP32[$341>>2]|0;
    $343 = $42;
    $344 = (($342) - ($343))|0;
    $345 = $39;
    $346 = ($344|0)<($345|0);
    if ($346) {
     $347 = $37;
     $348 = $347&255;
     $349 = (($12) + ($348<<2)|0);
     $350 = HEAP32[$349>>2]|0;
     $351 = $42;
     $352 = (($350) - ($351))|0;
     $354 = $352;
    } else {
     $353 = $39;
     $354 = $353;
    }
    $43 = $354;
    $355 = $43;
    $356 = $37;
    $357 = $356&255;
    $358 = (($12) + ($357<<2)|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = (($359) - ($355))|0;
    HEAP32[$358>>2] = $360;
    $361 = $43;
    $362 = $38;
    $363 = $362&255;
    $364 = (($12) + ($363<<2)|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = (($365) + ($361))|0;
    HEAP32[$364>>2] = $366;
    $367 = $43;
    $368 = $39;
    $369 = (($368) - ($367))|0;
    $39 = $369;
   }
   $370 = $39;
   $371 = ($370|0)>(0);
   if ($371) {
    HEAP8[$44>>0] = 0;
    $372 = $37;
    $373 = ((($44)) + 1|0);
    HEAP8[$373>>0] = $372;
    $374 = $38;
    $375 = ((($44)) + 2|0);
    HEAP8[$375>>0] = $374;
    $376 = $39;
    $377 = $376&255;
    $378 = ((($44)) + 3|0);
    HEAP8[$378>>0] = $377;
    $379 = $4;
    ;HEAP8[$45>>0]=HEAP8[$44>>0]|0;HEAP8[$45+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[$45+2>>0]=HEAP8[$44+2>>0]|0;HEAP8[$45+3>>0]=HEAP8[$44+3>>0]|0;
    $380 = ((($45)) + 4|0);
    $381 = $41;
    $382 = HEAP8[$381>>0]|0;
    $383 = $382&255;
    $384 = ($383|0)==(0);
    $385 = $384&1;
    HEAP8[$380>>0] = $385;
    ;HEAP8[$$byval_copy4>>0]=HEAP8[$45>>0]|0;HEAP8[$$byval_copy4+1>>0]=HEAP8[$45+1>>0]|0;HEAP8[$$byval_copy4+2>>0]=HEAP8[$45+2>>0]|0;HEAP8[$$byval_copy4+3>>0]=HEAP8[$45+3>>0]|0;HEAP8[$$byval_copy4+4>>0]=HEAP8[$45+4>>0]|0;
    _moves_processed_add_new_move($379,$$byval_copy4);
    $386 = $41;
    $387 = $40;
    $388 = $39;
    _fcs_col_transfer_cards($386,$387,$388);
    $389 = $39;
    $390 = $38;
    $391 = $390&255;
    $392 = (($12) + ($391<<2)|0);
    $393 = HEAP32[$392>>2]|0;
    $394 = (($393) + ($389))|0;
    HEAP32[$392>>2] = $394;
    $395 = $39;
    $396 = $37;
    $397 = $396&255;
    $398 = (($12) + ($397<<2)|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = (($399) - ($395))|0;
    HEAP32[$398>>2] = $400;
   }
   break;
  }
  default: {
  }
  }
  $401 = $16;
  $402 = (($401) + 1)|0;
  $16 = $402;
 }
 if ((label|0) == 26) {
  ___assert_fail((11841|0),(11884|0),102,(11972|0));
  // unreachable;
 }
 else if ((label|0) == 37) {
  ___assert_fail((12001|0),(11884|0),151,(11972|0));
  // unreachable;
 }
 else if ((label|0) == 39) {
  ___assert_fail((12028|0),(11884|0),153,(11972|0));
  // unreachable;
 }
 else if ((label|0) == 44) {
  ___assert_fail((12071|0),(11884|0),175,(11972|0));
  // unreachable;
 }
 else if ((label|0) == 53) {
  STACKTOP = sp;return;
 }
}
function _fc_solve_fc_pro__can_be_moved($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 13|0;
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = $7&255;
 $9 = (2)?($8 >> 2):($8);
 $5 = $9;
 $10 = $4;
 $11 = $10&255;
 $12 = $11 & 3;
 $6 = $12;
 $13 = $3;
 $14 = ((($13)) + 48|0);
 $15 = $6;
 $16 = $15 ^ 1;
 $17 = (($14) + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $5;
 $21 = (($20) - 2)|0;
 $22 = ($19|0)>=($21|0);
 if ($22) {
  $23 = $3;
  $24 = ((($23)) + 48|0);
  $25 = $6;
  $26 = $25 ^ 1;
  $27 = $26 ^ 2;
  $28 = (($24) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $5;
  $32 = (($31) - 2)|0;
  $33 = ($30|0)>=($32|0);
  if ($33) {
   $34 = $3;
   $35 = ((($34)) + 48|0);
   $36 = $6;
   $37 = $36 ^ 2;
   $38 = (($35) + ($37)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $5;
   $42 = (($41) - 3)|0;
   $43 = ($40|0)>=($42|0);
   if ($43) {
    $44 = $3;
    $45 = ((($44)) + 48|0);
    $46 = $6;
    $47 = (($45) + ($46)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $5;
    $51 = (($50) - 1)|0;
    $52 = ($49|0)==($51|0);
    if ($52) {
     $53 = $3;
     $54 = ((($53)) + 48|0);
     $55 = $6;
     $56 = (($54) + ($55)|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = (($57) + 1)<<24>>24;
     HEAP8[$56>>0] = $58;
     $$expand_i1_val = 1;
     HEAP8[$2>>0] = $$expand_i1_val;
     $$pre_trunc = HEAP8[$2>>0]|0;
     $59 = $$pre_trunc&1;
     STACKTOP = sp;return ($59|0);
    }
   }
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$2>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $59 = $$pre_trunc&1;
 STACKTOP = sp;return ($59|0);
}
function _moves_processed_add_new_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[$4>>2] = $6;
 $7 = $6 & 31;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 32)|0;
  $16 = ($15*5)|0;
  $17 = (_realloc($11,$16)|0);
  $18 = $2;
  $19 = ((($18)) + 8|0);
  HEAP32[$19>>2] = $17;
 }
 $20 = $2;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) - 1)|0;
 $27 = (($22) + (($26*5)|0)|0);
 ;HEAP8[$27>>0]=HEAP8[$1>>0]|0;HEAP8[$27+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$1+3>>0]|0;HEAP8[$27+4>>0]=HEAP8[$1+4>>0]|0;
 STACKTOP = sp;return;
}
function _fcs_state_push($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $5;
 $12 = $6;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = (($14) + 1)<<24>>24;
 HEAP8[$13>>0] = $15;
 $16 = $14&255;
 $17 = (($16) + 1)|0;
 $18 = (($12) + ($17)|0);
 HEAP8[$18>>0] = $11;
 STACKTOP = sp;return;
}
function _fcs_col_transfer_cards($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = $5;
 $10 = $4;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($12) - ($9))|0;
 $14 = $13&255;
 HEAP8[$10>>0] = $14;
 $15 = $14&255;
 $16 = (($15) + 1)|0;
 $17 = (($8) + ($16)|0);
 $6 = $17;
 $18 = $5;
 $19 = $18;
 $7 = $19;
 $20 = $3;
 $21 = $3;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = (($23) + 1)|0;
 $25 = (($20) + ($24)|0);
 $26 = $6;
 $27 = $7;
 _memcpy(($25|0),($26|0),($27|0))|0;
 $28 = $5;
 $29 = $3;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (($31) + ($28))|0;
 $33 = $32&255;
 HEAP8[$29>>0] = $33;
 $34 = $6;
 $35 = $7;
 _memset(($34|0),0,($35|0))|0;
 STACKTOP = sp;return;
}
function _fc_solve_sfs_move_top_stack_cards_to_founds($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 64|0;
 $8 = sp + 32|0;
 $11 = sp + 84|0;
 $3 = $0;
 $4 = $2;
 $18 = $3;
 $19 = HEAP32[$18>>2]|0;
 $5 = $19;
 $20 = $5;
 $21 = ((($20)) + 40|0);
 $6 = $21;
 $7 = 0;
 $22 = $5;
 $23 = HEAP32[$22>>2]|0;
 $9 = $23;
 $24 = $5;
 $25 = ((($24)) + 48|0);
 $10 = $25;
 $26 = $9;
 ;HEAP8[$11>>0]=HEAP8[$26>>0]|0;HEAP8[$11+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$26+3>>0]|0;
 $12 = 0;
 while(1) {
  $27 = $12;
  $28 = ((($11)) + 1|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = ($27|0)<($30|0);
  if (!($31)) {
   break;
  }
  $32 = HEAP32[$1>>2]|0;
  $33 = $12;
  $34 = (($32) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $13 = $35;
  $36 = $13;
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $14 = $38;
  $39 = $14;
  $40 = ($39|0)!=(0);
  L4: do {
   if ($40) {
    $41 = $13;
    $42 = $14;
    $43 = (($42) - 1)|0;
    $44 = (($43) + 1)|0;
    $45 = (($41) + ($44)|0);
    $46 = HEAP8[$45>>0]|0;
    $15 = $46;
    $16 = 0;
    while(1) {
     $47 = $16;
     $48 = $9;
     $49 = ((($48)) + 2|0);
     $50 = HEAP8[$49>>0]|0;
     $51 = $50&255;
     $52 = ($47|0)<($51|0);
     if (!($52)) {
      break L4;
     }
     $53 = HEAP32[$1>>2]|0;
     $54 = ((($53)) + 48|0);
     $55 = $16;
     $56 = $55<<2;
     $57 = $15;
     $58 = $57&255;
     $59 = $58 & 3;
     $60 = (($56) + ($59))|0;
     $61 = (($54) + ($60)|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62&255;
     $64 = $15;
     $65 = $64&255;
     $66 = (2)?($65 >> 2):($65);
     $67 = (($66) - 1)|0;
     $68 = ($63|0)!=($67|0);
     if (!($68)) {
      break;
     }
     $132 = $16;
     $133 = (($132) + 1)|0;
     $16 = $133;
    }
    $69 = $5;
    $70 = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($69,$8,$$byval_copy,$70)|0);
    $71 = ((($8)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($72)) + 24|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $12;
    $76 = 1 << $75;
    $77 = $74 & $76;
    $78 = ($77|0)!=(0);
    if (!($78)) {
     $79 = $12;
     $80 = 1 << $79;
     $81 = ((($8)) + 4|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ((($82)) + 24|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $84 | $80;
     HEAP32[$83>>2] = $85;
     $86 = HEAP32[$8>>2]|0;
     $87 = $12;
     $88 = (($86) + ($87<<2)|0);
     $89 = HEAP32[$88>>2]|0;
     $17 = $89;
     $90 = $10;
     $91 = $12;
     $92 = $91 << 7;
     $93 = (($90) + ($92)|0);
     $94 = $17;
     $95 = $17;
     $96 = HEAP8[$95>>0]|0;
     $97 = $96&255;
     $98 = (($97) + 1)|0;
     _memcpy(($93|0),($94|0),($98|0))|0;
     $99 = $10;
     $100 = $12;
     $101 = $100 << 7;
     $102 = (($99) + ($101)|0);
     $103 = HEAP32[$8>>2]|0;
     $104 = $12;
     $105 = (($103) + ($104<<2)|0);
     HEAP32[$105>>2] = $102;
    }
    $106 = HEAP32[$8>>2]|0;
    $107 = $12;
    _fcs_state_pop_col_top($106,$107);
    $108 = HEAP32[$8>>2]|0;
    $109 = ((($108)) + 48|0);
    $110 = $16;
    $111 = $110<<2;
    $112 = $15;
    $113 = $112&255;
    $114 = $113 & 3;
    $115 = (($111) + ($114))|0;
    $116 = (($109) + ($115)|0);
    $117 = HEAP8[$116>>0]|0;
    $118 = (($117) + 1)<<24>>24;
    HEAP8[$116>>0] = $118;
    $119 = $6;
    $120 = $12;
    $121 = $16;
    $122 = $121<<2;
    $123 = $15;
    $124 = $123&255;
    $125 = $124 & 3;
    $126 = (($122) + ($125))|0;
    _fcs_move_stack_non_seq_push($119,4,$120,$126);
    $127 = $4;
    $128 = $3;
    $129 = $6;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    $130 = (_fc_solve_sfs_check_state_end($128,$$byval_copy1,$8,$129)|0);
    $131 = $7;
    _fc_solve_derived_states_list_add_state($127,$130,$131);
   }
  } while(0);
  $134 = $12;
  $135 = (($134) + 1)|0;
  $12 = $135;
 }
 STACKTOP = sp;return;
}
function _fcs_state_pop_col_top($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (($5) + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $4;
 $10 = $4;
 $11 = HEAP8[$10>>0]|0;
 $12 = (($11) + -1)<<24>>24;
 HEAP8[$10>>0] = $12;
 $13 = $12&255;
 $14 = (($13) + 1)|0;
 $15 = (($9) + ($14)|0);
 HEAP8[$15>>0] = 0;
 STACKTOP = sp;return;
}
function _fcs_move_stack_non_seq_push($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _fcs_move_stack_params_push($8,$9,$10,$11,1);
 STACKTOP = sp;return;
}
function _fcs_move_stack_params_push($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $10 = sp + 20|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $6;
 $12 = $11&255;
 HEAP8[$10>>0] = $12;
 $13 = $7;
 $14 = $13&255;
 $15 = ((($10)) + 1|0);
 HEAP8[$15>>0] = $14;
 $16 = $8;
 $17 = $16&255;
 $18 = ((($10)) + 2|0);
 HEAP8[$18>>0] = $17;
 $19 = $9;
 $20 = $19&255;
 $21 = ((($10)) + 3|0);
 HEAP8[$21>>0] = $20;
 $22 = $5;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$10+3>>0]|0;
 _fcs_move_stack_push($22,$$byval_copy);
 STACKTOP = sp;return;
}
function _fcs_move_stack_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $3 = $7;
 $8 = $3;
 $9 = $8 & 15;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $14 = (($13) + 16)|0;
  $15 = $14<<2;
  $16 = (_realloc($12,$15)|0);
  $17 = $2;
  HEAP32[$17>>2] = $16;
 }
 $18 = $2;
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 $21 = (($20) - 1)|0;
 $22 = (($19) + ($21<<2)|0);
 ;HEAP8[$22>>0]=HEAP8[$1>>0]|0;HEAP8[$22+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$22+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$22+3>>0]=HEAP8[$1+3>>0]|0;
 STACKTOP = sp;return;
}
function _fc_solve_sfs_move_freecell_cards_to_founds($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 48|0;
 $8 = sp + 16|0;
 $10 = sp + 68|0;
 $3 = $0;
 $4 = $2;
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 $16 = $5;
 $17 = ((($16)) + 40|0);
 $6 = $17;
 $7 = 0;
 $18 = $5;
 $19 = HEAP32[$18>>2]|0;
 $9 = $19;
 $20 = $9;
 ;HEAP8[$10>>0]=HEAP8[$20>>0]|0;HEAP8[$10+1>>0]=HEAP8[$20+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$20+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$20+3>>0]|0;
 $11 = 0;
 while(1) {
  $21 = $11;
  $22 = HEAP8[$10>>0]|0;
  $23 = $22&255;
  $24 = ($21|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = HEAP32[$1>>2]|0;
  $26 = ((($25)) + 40|0);
  $27 = $11;
  $28 = (($26) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $12 = $29;
  $30 = $12;
  $31 = $30&255;
  $32 = ($31|0)==(0);
  L4: do {
   if (!($32)) {
    $13 = 0;
    while(1) {
     $33 = $13;
     $34 = $9;
     $35 = ((($34)) + 2|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = ($33|0)<($37|0);
     if (!($38)) {
      break L4;
     }
     $39 = HEAP32[$1>>2]|0;
     $40 = ((($39)) + 48|0);
     $41 = $13;
     $42 = $41<<2;
     $43 = $12;
     $44 = $43&255;
     $45 = $44 & 3;
     $46 = (($42) + ($45))|0;
     $47 = (($40) + ($46)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = $12;
     $51 = $50&255;
     $52 = (2)?($51 >> 2):($51);
     $53 = (($52) - 1)|0;
     $54 = ($49|0)!=($53|0);
     if (!($54)) {
      break;
     }
     $85 = $13;
     $86 = (($85) + 1)|0;
     $13 = $86;
    }
    $55 = $5;
    $56 = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($55,$8,$$byval_copy,$56)|0);
    $57 = HEAP32[$8>>2]|0;
    $58 = ((($57)) + 40|0);
    $59 = $11;
    $60 = (($58) + ($59)|0);
    HEAP8[$60>>0] = 0;
    $61 = HEAP32[$8>>2]|0;
    $62 = ((($61)) + 48|0);
    $63 = $13;
    $64 = $63<<2;
    $65 = $12;
    $66 = $65&255;
    $67 = $66 & 3;
    $68 = (($64) + ($67))|0;
    $69 = (($62) + ($68)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = (($70) + 1)<<24>>24;
    HEAP8[$69>>0] = $71;
    $72 = $6;
    $73 = $11;
    $74 = $13;
    $75 = $74<<2;
    $76 = $12;
    $77 = $76&255;
    $78 = $77 & 3;
    $79 = (($75) + ($78))|0;
    _fcs_move_stack_non_seq_push($72,5,$73,$79);
    $80 = $4;
    $81 = $3;
    $82 = $6;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    $83 = (_fc_solve_sfs_check_state_end($81,$$byval_copy1,$8,$82)|0);
    $84 = $7;
    _fc_solve_derived_states_list_add_state($80,$83,$84);
   }
  } while(0);
  $87 = $11;
  $88 = (($87) + 1)|0;
  $11 = $88;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_move_freecell_cards_on_top_of_stacks($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy1 = sp + 128|0;
 $$byval_copy = sp + 120|0;
 $8 = sp + 88|0;
 $13 = sp + 140|0;
 $28 = sp + 8|0;
 $29 = sp;
 $3 = $0;
 $4 = $2;
 $30 = $3;
 $31 = HEAP32[$30>>2]|0;
 $5 = $31;
 $32 = $5;
 $33 = ((($32)) + 40|0);
 $6 = $33;
 $7 = 0;
 $34 = $5;
 $35 = HEAP32[$34>>2]|0;
 $9 = $35;
 $36 = $5;
 $37 = ((($36)) + 48|0);
 $10 = $37;
 $38 = $9;
 $39 = ((($38)) + 3|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 & 3;
 $11 = $42;
 $43 = $9;
 $44 = ((($43)) + 3|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = (2)?($46 >> 2):($46);
 $48 = $47 & 3;
 $12 = $48;
 $49 = $9;
 ;HEAP8[$13>>0]=HEAP8[$49>>0]|0;HEAP8[$13+1>>0]=HEAP8[$49+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$49+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$49+3>>0]|0;
 $50 = $3;
 $51 = $12;
 $52 = ($51|0)==(0);
 $53 = (_calc_num_vacant_slots($50,$52)|0);
 $14 = $53;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $15 = $55;
 $56 = $3;
 $57 = (_fc_solve_calc_positions_by_rank_location($56)|0);
 $16 = $57;
 $58 = $11;
 $59 = ($58|0)==(2);
 if ($59) {
  $64 = 1;
 } else {
  $60 = $11;
  $61 = ($60|0)==(1);
  $62 = $61 ? 4 : 2;
  $64 = $62;
 }
 $63 = $64 << 1;
 $17 = $63;
 $18 = 0;
 while(1) {
  $65 = $18;
  $66 = HEAP8[$13>>0]|0;
  $67 = $66&255;
  $68 = ($65|0)<($67|0);
  if (!($68)) {
   break;
  }
  $69 = HEAP32[$1>>2]|0;
  $70 = ((($69)) + 40|0);
  $71 = $18;
  $72 = (($70) + ($71)|0);
  $73 = HEAP8[$72>>0]|0;
  $19 = $73;
  $74 = $19;
  $75 = $74&255;
  $76 = ($75|0)!=(0);
  L7: do {
   if ($76) {
    $77 = $19;
    $78 = (_fcs_card_is_king($77)|0);
    if (!($78)) {
     $79 = $16;
     $80 = $19;
     $81 = $80&255;
     $82 = (2)?($81 >> 2):($81);
     $83 = $82<<4;
     $84 = (($79) + ($83)|0);
     $20 = $84;
     $85 = $20;
     $86 = ((($85)) + 16|0);
     $21 = $86;
     $87 = $11;
     $88 = ($87|0)==(2);
     if ($88) {
      $98 = 0;
     } else {
      $89 = $11;
      $90 = ($89|0)==(1);
      $91 = $19;
      $92 = $91&255;
      $93 = $92 & 3;
      $94 = $93 ^ 1;
      $95 = $94 & 1;
      $96 = $90 ? $93 : $95;
      $98 = $96;
     }
     $97 = $98 << 1;
     $99 = $20;
     $100 = (($99) + ($97)|0);
     $20 = $100;
     while(1) {
      $101 = $20;
      $102 = $21;
      $103 = ($101>>>0)<($102>>>0);
      if (!($103)) {
       break L7;
      }
      $104 = $20;
      $105 = HEAP8[$104>>0]|0;
      $106 = $105 << 24 >> 24;
      $22 = $106;
      $107 = $22;
      $108 = ($107|0)==(-1);
      if (!($108)) {
       $109 = $20;
       $110 = ((($109)) + 1|0);
       $111 = HEAP8[$110>>0]|0;
       $112 = $111 << 24 >> 24;
       $23 = $112;
       $113 = HEAP32[$1>>2]|0;
       $114 = $22;
       $115 = (($113) + ($114<<2)|0);
       $116 = HEAP32[$115>>2]|0;
       $24 = $116;
       $117 = $24;
       $118 = HEAP8[$117>>0]|0;
       $119 = $118&255;
       $25 = $119;
       $120 = $23;
       $121 = (($120) + 1)|0;
       $26 = $121;
       $122 = $25;
       $123 = $26;
       $124 = $14;
       $125 = $124&255;
       $126 = (($123) + ($125))|0;
       $127 = ($122|0)<=($126|0);
       if ($127) {
        $128 = $5;
        $129 = $6;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($128,$8,$$byval_copy,$129)|0);
        $130 = ((($8)) + 4|0);
        $131 = HEAP32[$130>>2]|0;
        $132 = ((($131)) + 24|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = $22;
        $135 = 1 << $134;
        $136 = $133 & $135;
        $137 = ($136|0)!=(0);
        if (!($137)) {
         $138 = $22;
         $139 = 1 << $138;
         $140 = ((($8)) + 4|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ((($141)) + 24|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = $143 | $139;
         HEAP32[$142>>2] = $144;
         $145 = HEAP32[$8>>2]|0;
         $146 = $22;
         $147 = (($145) + ($146<<2)|0);
         $148 = HEAP32[$147>>2]|0;
         $27 = $148;
         $149 = $10;
         $150 = $22;
         $151 = $150 << 7;
         $152 = (($149) + ($151)|0);
         $153 = $27;
         $154 = $27;
         $155 = HEAP8[$154>>0]|0;
         $156 = $155&255;
         $157 = (($156) + 1)|0;
         _memcpy(($152|0),($153|0),($157|0))|0;
         $158 = $10;
         $159 = $22;
         $160 = $159 << 7;
         $161 = (($158) + ($160)|0);
         $162 = HEAP32[$8>>2]|0;
         $163 = $22;
         $164 = (($162) + ($163<<2)|0);
         HEAP32[$164>>2] = $161;
        }
        $165 = $22;
        HEAP32[$28>>2] = $165;
        $166 = ((($28)) + 4|0);
        HEAP32[$166>>2] = -1;
        $167 = ((($166)) + 4|0);
        HEAP32[$167>>2] = -1;
        $168 = $3;
        $169 = $6;
        $170 = $25;
        $171 = $23;
        $172 = (($170) - ($171))|0;
        $173 = (($172) - 1)|0;
        _empty_two_cols_from_new_state($29,$168,$8,$169,$28,$173,0);
        $174 = HEAP32[$8>>2]|0;
        $175 = $22;
        $176 = $19;
        _fcs_state_push_114($174,$175,$176);
        $177 = HEAP32[$8>>2]|0;
        $178 = ((($177)) + 40|0);
        $179 = $18;
        $180 = (($178) + ($179)|0);
        HEAP8[$180>>0] = 0;
        $181 = $6;
        $182 = $18;
        $183 = $22;
        _fcs_move_stack_non_seq_push($181,2,$182,$183);
        $184 = $22;
        $185 = $184 << 16;
        $186 = $23;
        $187 = (255 - ($186))|0;
        $188 = $187 << 8;
        $189 = $185 | $188;
        $190 = $18;
        $191 = $189 | $190;
        $7 = $191;
        $192 = $4;
        $193 = $3;
        $194 = $6;
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        $195 = (_fc_solve_sfs_check_state_end($193,$$byval_copy1,$8,$194)|0);
        $196 = $7;
        _fc_solve_derived_states_list_add_state($192,$195,$196);
       }
      }
      $197 = $17;
      $198 = $20;
      $199 = (($198) + ($197)|0);
      $20 = $199;
     }
    }
   }
  } while(0);
  $200 = $18;
  $201 = (($200) + 1)|0;
  $18 = $201;
 }
 $202 = $4;
 $203 = $15;
 _sort_derived_states($202,$203);
 STACKTOP = sp;return;
}
function _calc_num_vacant_slots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $1&1;
 $3 = $4;
 $5 = $2;
 $6 = ((($5)) + 524|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $3;
 $10 = $9&1;
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 523|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $16 = $14;
 } else {
  $16 = 0;
 }
 $15 = (($8) + ($16))|0;
 $17 = $15&255;
 STACKTOP = sp;return ($17|0);
}
function _fc_solve_calc_positions_by_rank_location($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = $2;
 $8 = ((($7)) + 24|0);
 if ($6) {
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 24|0);
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($10) + (($14*244)|0)|0);
  $16 = ((($15)) + 32|0);
  $1 = $16;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $17 = ((($8)) + 32|0);
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _fcs_card_is_king($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (4128 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _empty_two_cols_from_new_state($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy = sp + 96|0;
 $13 = sp + 64|0;
 $14 = sp + 52|0;
 $17 = sp + 108|0;
 $22 = sp + 24|0;
 $27 = sp;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 ;HEAP32[$13>>2]=HEAP32[8948>>2]|0;HEAP32[$13+4>>2]=HEAP32[8948+4>>2]|0;
 $28 = $11;
 HEAP32[$14>>2] = $28;
 $29 = ((($14)) + 4|0);
 $30 = $12;
 HEAP32[$29>>2] = $30;
 $31 = ((($29)) + 4|0);
 HEAP32[$31>>2] = -1;
 $32 = $10;
 $15 = $32;
 $16 = $14;
 $33 = $7;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$34>>2]|0;
 ;HEAP8[$17>>0]=HEAP8[$35>>0]|0;HEAP8[$17+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$35+3>>0]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($37)) + 48|0);
 $18 = $38;
 $39 = $8;
 $40 = HEAP32[$39>>2]|0;
 $19 = $40;
 $20 = 0;
 L1: while(1) {
  while(1) {
   $41 = $16;
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0);
   if (!($43)) {
    break;
   }
   $44 = $16;
   $45 = ((($44)) + 4|0);
   $16 = $45;
   $46 = $15;
   $47 = ((($46)) + 4|0);
   $15 = $47;
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(-1);
   if ($49) {
    label = 5;
    break L1;
   }
  }
  while(1) {
   $50 = $20;
   $51 = HEAP8[$17>>0]|0;
   $52 = $51&255;
   $53 = ($50|0)<($52|0);
   if (!($53)) {
    break;
   }
   $54 = $19;
   $55 = ((($54)) + 40|0);
   $56 = $20;
   $57 = (($55) + ($56)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59|0)==(0);
   if ($60) {
    break;
   }
   $61 = $20;
   $62 = (($61) + 1)|0;
   $20 = $62;
  }
  $63 = $20;
  $64 = HEAP8[$17>>0]|0;
  $65 = $64&255;
  $66 = ($63|0)==($65|0);
  if ($66) {
   break;
  }
  $67 = $19;
  $68 = $15;
  $69 = HEAP32[$68>>2]|0;
  $70 = (_fcs_state_pop_col_card($67,$69)|0);
  $21 = $70;
  $71 = $21;
  $72 = $19;
  $73 = ((($72)) + 40|0);
  $74 = $20;
  $75 = (($73) + ($74)|0);
  HEAP8[$75>>0] = $71;
  $76 = $9;
  $77 = $15;
  $78 = HEAP32[$77>>2]|0;
  $79 = $20;
  _fcs_move_stack_non_seq_push($76,1,$78,$79);
  $80 = $20;
  HEAP32[$22>>2] = $80;
  $81 = ((($22)) + 4|0);
  HEAP8[$81>>0] = 0;
  ;HEAP32[$13>>2]=HEAP32[$22>>2]|0;HEAP32[$13+4>>2]=HEAP32[$22+4>>2]|0;
  $82 = $16;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + -1)|0;
  HEAP32[$82>>2] = $84;
  $85 = $20;
  $86 = (($85) + 1)|0;
  $20 = $86;
 }
 if ((label|0) == 5) {
  ;HEAP32[$0>>2]=HEAP32[$13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$13+4>>2]|0;
  STACKTOP = sp;return;
 }
 while(1) {
  $87 = $16;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88|0)==(0);
  if (!($89)) {
   break;
  }
  $90 = $16;
  $91 = ((($90)) + 4|0);
  $16 = $91;
  $92 = $15;
  $93 = ((($92)) + 4|0);
  $15 = $93;
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94|0)==(-1);
  if ($95) {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  ;HEAP32[$0>>2]=HEAP32[$13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$13+4>>2]|0;
  STACKTOP = sp;return;
 }
 $23 = 0;
 L26: while(1) {
  while(1) {
   $96 = $16;
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)==(0);
   if (!($98)) {
    break;
   }
   $99 = $16;
   $100 = ((($99)) + 4|0);
   $16 = $100;
   $101 = $15;
   $102 = ((($101)) + 4|0);
   $15 = $102;
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==(-1);
   if ($104) {
    break L26;
   }
  }
  $105 = $8;
  $106 = $23;
  $107 = ((($17)) + 1|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$105>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$105+4>>2]|0;
  $110 = (_find_empty_stack($$byval_copy,$106,$109)|0);
  $23 = $110;
  $111 = $8;
  $112 = ((($111)) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ((($113)) + 24|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $23;
  $117 = 1 << $116;
  $118 = $115 & $117;
  $119 = ($118|0)!=(0);
  if (!($119)) {
   $120 = $23;
   $121 = 1 << $120;
   $122 = $8;
   $123 = ((($122)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ((($124)) + 24|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $126 | $121;
   HEAP32[$125>>2] = $127;
   $128 = $19;
   $129 = $23;
   $130 = (($128) + ($129<<2)|0);
   $131 = HEAP32[$130>>2]|0;
   $24 = $131;
   $132 = $18;
   $133 = $23;
   $134 = $133 << 7;
   $135 = (($132) + ($134)|0);
   $136 = $24;
   $137 = $24;
   $138 = HEAP8[$137>>0]|0;
   $139 = $138&255;
   $140 = (($139) + 1)|0;
   _memcpy(($135|0),($136|0),($140|0))|0;
   $141 = $18;
   $142 = $23;
   $143 = $142 << 7;
   $144 = (($141) + ($143)|0);
   $145 = $19;
   $146 = $23;
   $147 = (($145) + ($146<<2)|0);
   HEAP32[$147>>2] = $144;
  }
  $148 = $15;
  $149 = HEAP32[$148>>2]|0;
  $25 = $149;
  $150 = $19;
  $151 = $25;
  $152 = (_fcs_state_pop_col_card($150,$151)|0);
  $26 = $152;
  $153 = $19;
  $154 = $23;
  $155 = $26;
  _fcs_state_push_114($153,$154,$155);
  $156 = $9;
  $157 = $25;
  $158 = $23;
  _fcs_push_1card_seq($156,$157,$158);
  $159 = $23;
  HEAP32[$27>>2] = $159;
  $160 = ((($27)) + 4|0);
  HEAP8[$160>>0] = 1;
  ;HEAP32[$13>>2]=HEAP32[$27>>2]|0;HEAP32[$13+4>>2]=HEAP32[$27+4>>2]|0;
  $161 = $16;
  $162 = HEAP32[$161>>2]|0;
  $163 = (($162) + -1)|0;
  HEAP32[$161>>2] = $163;
  $164 = $23;
  $165 = (($164) + 1)|0;
  $23 = $165;
 }
 ;HEAP32[$0>>2]=HEAP32[$13>>2]|0;HEAP32[$0+4>>2]=HEAP32[$13+4>>2]|0;
 STACKTOP = sp;return;
}
function _fcs_state_push_114($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $5;
 $12 = $6;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = (($14) + 1)<<24>>24;
 HEAP8[$13>>0] = $15;
 $16 = $14&255;
 $17 = (($16) + 1)|0;
 $18 = (($12) + ($17)|0);
 HEAP8[$18>>0] = $11;
 STACKTOP = sp;return;
}
function _sort_derived_states($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (($11) + ($12<<3)|0);
 $4 = $13;
 $14 = $2;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + ($18<<3)|0);
 $5 = $19;
 $20 = $4;
 $21 = ((($20)) + 8|0);
 $6 = $21;
 while(1) {
  $22 = $6;
  $23 = $5;
  $24 = ($22>>>0)<($23>>>0);
  if (!($24)) {
   break;
  }
  $25 = $6;
  $7 = $25;
  while(1) {
   $26 = $7;
   $27 = $4;
   $28 = ($26>>>0)>($27>>>0);
   if (!($28)) {
    break;
   }
   $29 = $7;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $7;
   $33 = ((($32)) + -8|0);
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($31|0)<($35|0);
   if (!($36)) {
    break;
   }
   $37 = $7;
   $38 = ((($37)) + -8|0);
   ;HEAP32[$8>>2]=HEAP32[$38>>2]|0;HEAP32[$8+4>>2]=HEAP32[$38+4>>2]|0;
   $39 = $7;
   $40 = ((($39)) + -8|0);
   $41 = $7;
   ;HEAP32[$40>>2]=HEAP32[$41>>2]|0;HEAP32[$40+4>>2]=HEAP32[$41+4>>2]|0;
   $42 = $7;
   ;HEAP32[$42>>2]=HEAP32[$8>>2]|0;HEAP32[$42+4>>2]=HEAP32[$8+4>>2]|0;
   $43 = $7;
   $44 = ((($43)) + -8|0);
   $7 = $44;
  }
  $45 = $6;
  $46 = ((($45)) + 8|0);
  $6 = $46;
 }
 STACKTOP = sp;return;
}
function _fcs_state_pop_col_card($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (($6) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $4;
 $11 = $4;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (($13) - 1)|0;
 $15 = (($14) + 1)|0;
 $16 = (($10) + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $5 = $17;
 $18 = $4;
 $19 = $4;
 $20 = HEAP8[$19>>0]|0;
 $21 = (($20) + -1)<<24>>24;
 HEAP8[$19>>0] = $21;
 $22 = $21&255;
 $23 = (($22) + 1)|0;
 $24 = (($18) + ($23)|0);
 HEAP8[$24>>0] = 0;
 $25 = $5;
 STACKTOP = sp;return ($25|0);
}
function _find_empty_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $6 = $7;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = HEAP32[$0>>2]|0;
  $12 = $6;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = ($16|0)==(0);
  $18 = $6;
  if ($17) {
   label = 4;
   break;
  }
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 if ((label|0) == 4) {
  $3 = $18;
  $20 = $3;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 6) {
  $3 = -1;
  $20 = $3;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _fcs_push_1card_seq($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _fcs_move_stack_params_push($6,0,$7,$8,1);
 STACKTOP = sp;return;
}
function _fc_solve_sfs_move_non_top_stack_cards_to_founds($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy1 = sp + 112|0;
 $$byval_copy = sp + 104|0;
 $8 = sp + 72|0;
 $12 = sp + 124|0;
 $24 = sp + 8|0;
 $25 = sp;
 $3 = $0;
 $4 = $2;
 $26 = $3;
 $27 = HEAP32[$26>>2]|0;
 $5 = $27;
 $28 = $5;
 $29 = ((($28)) + 40|0);
 $6 = $29;
 $7 = 0;
 $30 = $5;
 $31 = HEAP32[$30>>2]|0;
 $9 = $31;
 $32 = $5;
 $33 = ((($32)) + 48|0);
 $10 = $33;
 $34 = $9;
 $35 = ((($34)) + 3|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = (2)?($37 >> 2):($37);
 $39 = $38 & 3;
 $11 = $39;
 $40 = $9;
 ;HEAP8[$12>>0]=HEAP8[$40>>0]|0;HEAP8[$12+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$40+3>>0]|0;
 $41 = $3;
 $42 = $11;
 $43 = ($42|0)==(0);
 $44 = (_calc_num_vacant_slots($41,$43)|0);
 $13 = $44;
 $45 = $13;
 $46 = $45&255;
 $47 = (($46) + 1)|0;
 $14 = $47;
 $15 = 0;
 while(1) {
  $48 = $15;
  $49 = ((($12)) + 1|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = ($48|0)<($51|0);
  if (!($52)) {
   break;
  }
  $53 = HEAP32[$1>>2]|0;
  $54 = $15;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $16 = $56;
  $57 = $16;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $17 = $59;
  $60 = $17;
  $61 = $14;
  $62 = (($60) - ($61))|0;
  $63 = (_max0($62)|0);
  $18 = $63;
  $64 = $17;
  $65 = (($64) - 2)|0;
  $19 = $65;
  while(1) {
   $66 = $19;
   $67 = $18;
   $68 = ($66|0)>=($67|0);
   if (!($68)) {
    break;
   }
   $69 = $16;
   $70 = $19;
   $71 = (($70) + 1)|0;
   $72 = (($69) + ($71)|0);
   $73 = HEAP8[$72>>0]|0;
   $20 = $73;
   $21 = 0;
   while(1) {
    $74 = $21;
    $75 = $9;
    $76 = ((($75)) + 2|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = ($74|0)<($78|0);
    if (!($79)) {
     break;
    }
    $80 = $21;
    $81 = $80<<2;
    $82 = $20;
    $83 = $82&255;
    $84 = $83 & 3;
    $85 = (($81) + ($84))|0;
    $22 = $85;
    $86 = HEAP32[$1>>2]|0;
    $87 = ((($86)) + 48|0);
    $88 = $22;
    $89 = (($87) + ($88)|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90&255;
    $92 = $20;
    $93 = $92&255;
    $94 = (2)?($93 >> 2):($93);
    $95 = (($94) - 1)|0;
    $96 = ($91|0)!=($95|0);
    if (!($96)) {
     label = 8;
     break;
    }
    $159 = $21;
    $160 = (($159) + 1)|0;
    $21 = $160;
   }
   if ((label|0) == 8) {
    label = 0;
    $97 = $5;
    $98 = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($97,$8,$$byval_copy,$98)|0);
    $99 = ((($8)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ((($100)) + 24|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $15;
    $104 = 1 << $103;
    $105 = $102 & $104;
    $106 = ($105|0)!=(0);
    if (!($106)) {
     $107 = $15;
     $108 = 1 << $107;
     $109 = ((($8)) + 4|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ((($110)) + 24|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $112 | $108;
     HEAP32[$111>>2] = $113;
     $114 = HEAP32[$8>>2]|0;
     $115 = $15;
     $116 = (($114) + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $23 = $117;
     $118 = $10;
     $119 = $15;
     $120 = $119 << 7;
     $121 = (($118) + ($120)|0);
     $122 = $23;
     $123 = $23;
     $124 = HEAP8[$123>>0]|0;
     $125 = $124&255;
     $126 = (($125) + 1)|0;
     _memcpy(($121|0),($122|0),($126|0))|0;
     $127 = $10;
     $128 = $15;
     $129 = $128 << 7;
     $130 = (($127) + ($129)|0);
     $131 = HEAP32[$8>>2]|0;
     $132 = $15;
     $133 = (($131) + ($132<<2)|0);
     HEAP32[$133>>2] = $130;
    }
    $134 = $15;
    HEAP32[$24>>2] = $134;
    $135 = ((($24)) + 4|0);
    HEAP32[$135>>2] = -1;
    $136 = ((($135)) + 4|0);
    HEAP32[$136>>2] = -1;
    $137 = $3;
    $138 = $6;
    $139 = $17;
    $140 = $19;
    $141 = (($140) + 1)|0;
    $142 = (($139) - ($141))|0;
    _empty_two_cols_from_new_state($25,$137,$8,$138,$24,$142,0);
    $143 = HEAP32[$8>>2]|0;
    $144 = $15;
    _fcs_state_pop_col_top($143,$144);
    $145 = HEAP32[$8>>2]|0;
    $146 = ((($145)) + 48|0);
    $147 = $22;
    $148 = (($146) + ($147)|0);
    $149 = HEAP8[$148>>0]|0;
    $150 = (($149) + 1)<<24>>24;
    HEAP8[$148>>0] = $150;
    $151 = $6;
    $152 = $15;
    $153 = $22;
    _fcs_move_stack_non_seq_push($151,4,$152,$153);
    $154 = $4;
    $155 = $3;
    $156 = $6;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    $157 = (_fc_solve_sfs_check_state_end($155,$$byval_copy1,$8,$156)|0);
    $158 = $7;
    _fc_solve_derived_states_list_add_state($154,$157,$158);
   }
   $161 = $19;
   $162 = (($161) + -1)|0;
   $19 = $162;
  }
  $163 = $15;
  $164 = (($163) + 1)|0;
  $15 = $164;
 }
 STACKTOP = sp;return;
}
function _max0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)>(0);
 $4 = $1;
 $5 = $3 ? $4 : 0;
 STACKTOP = sp;return ($5|0);
}
function _fc_solve_sfs_move_stack_cards_to_a_parent_on_the_same_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy1 = sp + 128|0;
 $$byval_copy = sp + 120|0;
 $8 = sp + 88|0;
 $13 = sp + 140|0;
 $26 = sp + 24|0;
 $27 = sp + 16|0;
 $28 = sp + 8|0;
 $3 = $0;
 $4 = $2;
 $31 = $3;
 $32 = HEAP32[$31>>2]|0;
 $5 = $32;
 $33 = $5;
 $34 = ((($33)) + 40|0);
 $6 = $34;
 $7 = 0;
 $35 = $5;
 $36 = HEAP32[$35>>2]|0;
 $9 = $36;
 $37 = $5;
 $38 = ((($37)) + 48|0);
 $10 = $38;
 $39 = $9;
 $40 = ((($39)) + 3|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 & 3;
 $11 = $43;
 $44 = $9;
 $45 = ((($44)) + 3|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = (2)?($47 >> 2):($47);
 $49 = $48 & 3;
 $12 = $49;
 $50 = $9;
 ;HEAP8[$13>>0]=HEAP8[$50>>0]|0;HEAP8[$13+1>>0]=HEAP8[$50+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$50+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$50+3>>0]|0;
 $51 = $3;
 $52 = $12;
 $53 = ($52|0)==(0);
 $54 = (_calc_num_vacant_slots($51,$53)|0);
 $55 = $54&255;
 $56 = (($55) + 1)|0;
 $57 = $56&255;
 $14 = $57;
 $15 = 0;
 while(1) {
  $58 = $15;
  $59 = ((($13)) + 1|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = ($58|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = HEAP32[$1>>2]|0;
  $64 = $15;
  $65 = (($63) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $16 = $66;
  $67 = $16;
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $17 = $69;
  $70 = $17;
  $71 = $14;
  $72 = $71&255;
  $73 = (($70) - ($72))|0;
  $74 = (_max0($73)|0);
  $18 = $74;
  $75 = $18;
  $76 = (($75) + 2)|0;
  $19 = $76;
  while(1) {
   $77 = $19;
   $78 = $17;
   $79 = ($77|0)<($78|0);
   if (!($79)) {
    break;
   }
   $80 = $16;
   $81 = $19;
   $82 = (($81) + 1)|0;
   $83 = (($80) + ($82)|0);
   $84 = HEAP8[$83>>0]|0;
   $20 = $84;
   $85 = $19;
   $86 = (($85) - 1)|0;
   $21 = $86;
   $87 = $20;
   $88 = $16;
   $89 = $21;
   $90 = (($89) + 1)|0;
   $91 = (($88) + ($90)|0);
   $92 = HEAP8[$91>>0]|0;
   $93 = $11;
   $94 = (_fcs_is_parent_card__helper($87,$92,$93)|0);
   L7: do {
    if (!($94)) {
     $95 = $18;
     $22 = $95;
     while(1) {
      $96 = $22;
      $97 = $21;
      $98 = ($96|0)<($97|0);
      if (!($98)) {
       break L7;
      }
      $99 = $16;
      $100 = $22;
      $101 = (($100) + 1)|0;
      $102 = (($99) + ($101)|0);
      $103 = HEAP8[$102>>0]|0;
      $23 = $103;
      $104 = $22;
      $105 = (($104) + 1)|0;
      $24 = $105;
      $106 = $20;
      $107 = $23;
      $108 = $11;
      $109 = (_fcs_is_parent_card__helper($106,$107,$108)|0);
      if ($109) {
       $110 = $16;
       $111 = $24;
       $112 = (($111) + 1)|0;
       $113 = (($110) + ($112)|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = $23;
       $116 = $11;
       $117 = (_fcs_is_parent_card__helper($114,$115,$116)|0);
       if (!($117)) {
        $118 = $5;
        $119 = $6;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($118,$8,$$byval_copy,$119)|0);
        $120 = ((($8)) + 4|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = ((($121)) + 24|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = $15;
        $125 = 1 << $124;
        $126 = $123 & $125;
        $127 = ($126|0)!=(0);
        if (!($127)) {
         $128 = $15;
         $129 = 1 << $128;
         $130 = ((($8)) + 4|0);
         $131 = HEAP32[$130>>2]|0;
         $132 = ((($131)) + 24|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = $133 | $129;
         HEAP32[$132>>2] = $134;
         $135 = HEAP32[$8>>2]|0;
         $136 = $15;
         $137 = (($135) + ($136<<2)|0);
         $138 = HEAP32[$137>>2]|0;
         $25 = $138;
         $139 = $10;
         $140 = $15;
         $141 = $140 << 7;
         $142 = (($139) + ($141)|0);
         $143 = $25;
         $144 = $25;
         $145 = HEAP8[$144>>0]|0;
         $146 = $145&255;
         $147 = (($146) + 1)|0;
         _memcpy(($142|0),($143|0),($147|0))|0;
         $148 = $10;
         $149 = $15;
         $150 = $149 << 7;
         $151 = (($148) + ($150)|0);
         $152 = HEAP32[$8>>2]|0;
         $153 = $15;
         $154 = (($152) + ($153<<2)|0);
         HEAP32[$154>>2] = $151;
        }
        $155 = $15;
        HEAP32[$26>>2] = $155;
        $156 = ((($26)) + 4|0);
        HEAP32[$156>>2] = -1;
        $157 = ((($156)) + 4|0);
        HEAP32[$157>>2] = -1;
        $158 = $3;
        $159 = $6;
        $160 = $17;
        $161 = $19;
        $162 = (($160) - ($161))|0;
        _empty_two_cols_from_new_state($27,$158,$8,$159,$26,$162,0);
        $163 = $3;
        $164 = $6;
        $165 = $21;
        $166 = $22;
        $167 = (($165) - ($166))|0;
        _empty_two_cols_from_new_state($28,$163,$8,$164,$26,$167,0);
        $168 = ((($27)) + 4|0);
        $169 = HEAP8[$168>>0]|0;
        $170 = $169&1;
        $171 = HEAP32[$8>>2]|0;
        if ($170) {
         $172 = HEAP32[$27>>2]|0;
         $173 = (($171) + ($172<<2)|0);
         $174 = HEAP32[$173>>2]|0;
         $30 = $174;
         $175 = $30;
         $176 = $30;
         $177 = HEAP8[$176>>0]|0;
         $178 = $177&255;
         $179 = (($178) - 1)|0;
         $180 = (($179) + 1)|0;
         $181 = (($175) + ($180)|0);
         $182 = HEAP8[$181>>0]|0;
         $29 = $182;
         $183 = $30;
         $184 = $30;
         $185 = HEAP8[$184>>0]|0;
         $186 = (($185) + -1)<<24>>24;
         HEAP8[$184>>0] = $186;
         $187 = $186&255;
         $188 = (($187) + 1)|0;
         $189 = (($183) + ($188)|0);
         HEAP8[$189>>0] = 0;
         $190 = $6;
         $191 = HEAP32[$27>>2]|0;
         $192 = $15;
         _fcs_push_1card_seq($190,$191,$192);
        } else {
         $193 = ((($171)) + 40|0);
         $194 = HEAP32[$27>>2]|0;
         $195 = (($193) + ($194)|0);
         $196 = HEAP8[$195>>0]|0;
         $29 = $196;
         $197 = HEAP32[$8>>2]|0;
         $198 = ((($197)) + 40|0);
         $199 = HEAP32[$27>>2]|0;
         $200 = (($198) + ($199)|0);
         HEAP8[$200>>0] = 0;
         $201 = $6;
         $202 = HEAP32[$27>>2]|0;
         $203 = $15;
         _fcs_move_stack_non_seq_push($201,2,$202,$203);
        }
        $204 = HEAP32[$8>>2]|0;
        $205 = $15;
        $206 = $29;
        _fcs_state_push_114($204,$205,$206);
        $207 = $4;
        $208 = $3;
        $209 = $6;
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        $210 = (_fc_solve_sfs_check_state_end($208,$$byval_copy1,$8,$209)|0);
        $211 = $7;
        _fc_solve_derived_states_list_add_state($207,$210,$211);
       }
      }
      $212 = $22;
      $213 = (($212) + 1)|0;
      $22 = $213;
     }
    }
   } while(0);
   $214 = $19;
   $215 = (($214) + 1)|0;
   $19 = $215;
  }
  $216 = $15;
  $217 = (($216) + 1)|0;
  $15 = $217;
 }
 STACKTOP = sp;return;
}
function _fcs_is_parent_card__helper($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $6&255;
 $8 = (2)?($7 >> 2):($7);
 $9 = (($8) + 1)|0;
 $10 = $4;
 $11 = $10&255;
 $12 = (2)?($11 >> 2):($11);
 $13 = ($9|0)==($12|0);
 if (!($13)) {
  $35 = 0;
  STACKTOP = sp;return ($35|0);
 }
 $14 = $5;
 $15 = ($14|0)==(2);
 do {
  if ($15) {
   $33 = 1;
  } else {
   $16 = $5;
   $17 = ($16|0)==(1);
   $18 = $3;
   $19 = $18&255;
   $20 = $19 & 3;
   if ($17) {
    $21 = $4;
    $22 = $21&255;
    $23 = $22 & 3;
    $24 = ($20|0)==($23|0);
    $25 = $24&1;
    $33 = $25;
    break;
   } else {
    $26 = $20 & 1;
    $27 = $4;
    $28 = $27&255;
    $29 = $28 & 3;
    $30 = $29 & 1;
    $31 = ($26|0)!=($30|0);
    $32 = $31&1;
    $33 = $32;
    break;
   }
  }
 } while(0);
 $34 = ($33|0)!=(0);
 $35 = $34;
 STACKTOP = sp;return ($35|0);
}
function _fc_solve_sfs_move_stack_cards_to_different_stacks($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy1 = sp + 152|0;
 $$byval_copy = sp + 144|0;
 $8 = sp + 112|0;
 $13 = sp + 164|0;
 $21 = sp + 56|0;
 $31 = sp + 8|0;
 $32 = sp;
 $3 = $0;
 $4 = $2;
 $33 = $3;
 $34 = HEAP32[$33>>2]|0;
 $5 = $34;
 $35 = $5;
 $36 = ((($35)) + 40|0);
 $6 = $36;
 $7 = 0;
 $37 = $5;
 $38 = HEAP32[$37>>2]|0;
 $9 = $38;
 $39 = $5;
 $40 = ((($39)) + 48|0);
 $10 = $40;
 $41 = $9;
 $42 = ((($41)) + 3|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44 & 3;
 $11 = $45;
 $46 = $9;
 $47 = ((($46)) + 3|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = (2)?($49 >> 2):($49);
 $51 = $50 & 3;
 $12 = $51;
 $52 = $9;
 ;HEAP8[$13>>0]=HEAP8[$52>>0]|0;HEAP8[$13+1>>0]=HEAP8[$52+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$52+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$52+3>>0]|0;
 $53 = $3;
 $54 = ((($53)) + 524|0);
 $55 = HEAP8[$54>>0]|0;
 $14 = $55;
 $56 = $3;
 $57 = ((($56)) + 523|0);
 $58 = HEAP8[$57>>0]|0;
 $15 = $58;
 $59 = $12;
 $60 = ($59|0)==(0);
 $61 = $15;
 $62 = $61&255;
 $63 = $60 ? $62 : 0;
 $64 = $63&255;
 $16 = $64;
 $65 = $4;
 $66 = HEAP32[$65>>2]|0;
 $17 = $66;
 $67 = $3;
 $68 = (_fc_solve_calc_positions_by_rank_location($67)|0);
 $18 = $68;
 $69 = $11;
 $70 = ($69|0)==(2);
 if ($70) {
  $75 = 1;
 } else {
  $71 = $11;
  $72 = ($71|0)==(1);
  $73 = $72 ? 4 : 2;
  $75 = $73;
 }
 $74 = $75 << 1;
 $19 = $74;
 $20 = 0;
 while(1) {
  $76 = $20;
  $77 = ((($13)) + 1|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = ($76|0)<($79|0);
  if (!($80)) {
   break;
  }
  $81 = HEAP32[$1>>2]|0;
  $82 = $20;
  $83 = $11;
  _col_seqs_iter__create($21,$81,$82,$83);
  while(1) {
   $84 = ((($21)) + 12|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($21)) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($85|0)<($87|0);
   if (!($88)) {
    break;
   }
   $89 = $12;
   $90 = ($89|0)==(2);
   if ($90) {
    $91 = ((($21)) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0);
    if (!($93)) {
     label = 9;
    }
   } else {
    label = 9;
   }
   L12: do {
    if ((label|0) == 9) {
     label = 0;
     $94 = ((($21)) + 8|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ((($21)) + 16|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($95) - ($97))|0;
     $22 = $98;
     $99 = HEAP32[$21>>2]|0;
     $100 = ((($21)) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (($101) + 1)|0;
     $103 = (($99) + ($102)|0);
     $104 = HEAP8[$103>>0]|0;
     $23 = $104;
     $105 = $23;
     $106 = (_fcs_card_is_king($105)|0);
     $107 = $106 ^ 1;
     $108 = $107 ^ 1;
     if (!($108)) {
      $109 = $18;
      $110 = $23;
      $111 = $110&255;
      $112 = (2)?($111 >> 2):($111);
      $113 = $112<<4;
      $114 = (($109) + ($113)|0);
      $24 = $114;
      $115 = $24;
      $116 = ((($115)) + 16|0);
      $25 = $116;
      $117 = $11;
      $118 = ($117|0)==(2);
      if ($118) {
       $128 = 0;
      } else {
       $119 = $11;
       $120 = ($119|0)==(1);
       $121 = $23;
       $122 = $121&255;
       $123 = $122 & 3;
       $124 = $123 ^ 1;
       $125 = $124 & 1;
       $126 = $120 ? $123 : $125;
       $128 = $126;
      }
      $127 = $128 << 1;
      $129 = $24;
      $130 = (($129) + ($127)|0);
      $24 = $130;
      while(1) {
       $131 = $24;
       $132 = $25;
       $133 = ($131>>>0)<($132>>>0);
       if (!($133)) {
        break L12;
       }
       $134 = $24;
       $135 = HEAP8[$134>>0]|0;
       $136 = $135 << 24 >> 24;
       $26 = $136;
       $137 = $26;
       $138 = ($137|0)<(0);
       if (!($138)) {
        $139 = $26;
        $140 = $20;
        $141 = ($139|0)==($140|0);
        if (!($141)) {
         $142 = $24;
         $143 = ((($142)) + 1|0);
         $144 = HEAP8[$143>>0]|0;
         $145 = $144 << 24 >> 24;
         $27 = $145;
         $146 = HEAP32[$1>>2]|0;
         $147 = $26;
         $148 = (($146) + ($147<<2)|0);
         $149 = HEAP32[$148>>2]|0;
         $150 = HEAP8[$149>>0]|0;
         $151 = $150&255;
         $152 = $27;
         $153 = (($151) - ($152))|0;
         $154 = (($153) - 1)|0;
         $28 = $154;
         $155 = $28;
         $156 = $22;
         $157 = (($155) + ($156))|0;
         $158 = $157&255;
         $159 = $14;
         $160 = $16;
         $161 = $9;
         $162 = (_check_if_can_relocate($158,$159,$160,$21,$161)|0);
         $163 = $162 ^ 1;
         $164 = $163 ^ 1;
         if ($164) {
          $165 = $5;
          $166 = $6;
          ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
          (_fc_solve_sfs_check_state_begin($165,$8,$$byval_copy,$166)|0);
          $167 = ((($8)) + 4|0);
          $168 = HEAP32[$167>>2]|0;
          $169 = ((($168)) + 24|0);
          $170 = HEAP32[$169>>2]|0;
          $171 = $20;
          $172 = 1 << $171;
          $173 = $170 & $172;
          $174 = ($173|0)!=(0);
          if (!($174)) {
           $175 = $20;
           $176 = 1 << $175;
           $177 = ((($8)) + 4|0);
           $178 = HEAP32[$177>>2]|0;
           $179 = ((($178)) + 24|0);
           $180 = HEAP32[$179>>2]|0;
           $181 = $180 | $176;
           HEAP32[$179>>2] = $181;
           $182 = HEAP32[$8>>2]|0;
           $183 = $20;
           $184 = (($182) + ($183<<2)|0);
           $185 = HEAP32[$184>>2]|0;
           $29 = $185;
           $186 = $10;
           $187 = $20;
           $188 = $187 << 7;
           $189 = (($186) + ($188)|0);
           $190 = $29;
           $191 = $29;
           $192 = HEAP8[$191>>0]|0;
           $193 = $192&255;
           $194 = (($193) + 1)|0;
           _memcpy(($189|0),($190|0),($194|0))|0;
           $195 = $10;
           $196 = $20;
           $197 = $196 << 7;
           $198 = (($195) + ($197)|0);
           $199 = HEAP32[$8>>2]|0;
           $200 = $20;
           $201 = (($199) + ($200<<2)|0);
           HEAP32[$201>>2] = $198;
          }
          $202 = ((($8)) + 4|0);
          $203 = HEAP32[$202>>2]|0;
          $204 = ((($203)) + 24|0);
          $205 = HEAP32[$204>>2]|0;
          $206 = $26;
          $207 = 1 << $206;
          $208 = $205 & $207;
          $209 = ($208|0)!=(0);
          if (!($209)) {
           $210 = $26;
           $211 = 1 << $210;
           $212 = ((($8)) + 4|0);
           $213 = HEAP32[$212>>2]|0;
           $214 = ((($213)) + 24|0);
           $215 = HEAP32[$214>>2]|0;
           $216 = $215 | $211;
           HEAP32[$214>>2] = $216;
           $217 = HEAP32[$8>>2]|0;
           $218 = $26;
           $219 = (($217) + ($218<<2)|0);
           $220 = HEAP32[$219>>2]|0;
           $30 = $220;
           $221 = $10;
           $222 = $26;
           $223 = $222 << 7;
           $224 = (($221) + ($223)|0);
           $225 = $30;
           $226 = $30;
           $227 = HEAP8[$226>>0]|0;
           $228 = $227&255;
           $229 = (($228) + 1)|0;
           _memcpy(($224|0),($225|0),($229|0))|0;
           $230 = $10;
           $231 = $26;
           $232 = $231 << 7;
           $233 = (($230) + ($232)|0);
           $234 = HEAP32[$8>>2]|0;
           $235 = $26;
           $236 = (($234) + ($235<<2)|0);
           HEAP32[$236>>2] = $233;
          }
          $237 = $26;
          HEAP32[$31>>2] = $237;
          $238 = ((($31)) + 4|0);
          $239 = $20;
          HEAP32[$238>>2] = $239;
          $240 = ((($238)) + 4|0);
          HEAP32[$240>>2] = -1;
          $241 = $3;
          $242 = $6;
          $243 = $28;
          $244 = $22;
          _empty_two_cols_from_new_state($32,$241,$8,$242,$31,$243,$244);
          $245 = HEAP32[$8>>2]|0;
          $246 = $6;
          $247 = $26;
          $248 = $20;
          $249 = ((($21)) + 16|0);
          $250 = HEAP32[$249>>2]|0;
          $251 = ((($21)) + 12|0);
          $252 = HEAP32[$251>>2]|0;
          $253 = (($250) - ($252))|0;
          $254 = (($253) + 1)|0;
          _fc_solve_move_sequence_function($245,$246,$247,$248,$254);
          $255 = $20;
          $256 = $255 << 8;
          $257 = ((($21)) + 12|0);
          $258 = HEAP32[$257>>2]|0;
          $259 = $256 | $258;
          $260 = $259 << 8;
          $261 = $26;
          $262 = $260 | $261;
          $263 = $262 << 8;
          $264 = $27;
          $265 = $263 | $264;
          $7 = $265;
          $266 = $4;
          $267 = $3;
          $268 = $6;
          ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
          $269 = (_fc_solve_sfs_check_state_end($267,$$byval_copy1,$8,$268)|0);
          $270 = $7;
          _fc_solve_derived_states_list_add_state($266,$269,$270);
         }
        }
       }
       $271 = $19;
       $272 = $24;
       $273 = (($272) + ($271)|0);
       $24 = $273;
      }
     }
    }
   } while(0);
   _col_seqs_iter__advance($21);
  }
  $274 = $20;
  $275 = (($274) + 1)|0;
  $20 = $275;
 }
 $276 = $4;
 $277 = $17;
 _sort_derived_states($276,$277);
 STACKTOP = sp;return;
}
function _col_seqs_iter__create($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $8 = $6;
 $9 = ((($7)) + 20|0);
 HEAP32[$9>>2] = $8;
 $10 = $4;
 $11 = $5;
 $12 = (($10) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[$7>>2] = $13;
 $14 = HEAP32[$7>>2]|0;
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ((($7)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = (($16) - 1)|0;
 $19 = ((($7)) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($7)) + 12|0);
 HEAP32[$20>>2] = 0;
 _col_seqs_iter__calc_end($7);
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;HEAP32[$0+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$7+20>>2]|0;
 STACKTOP = sp;return;
}
function _check_if_can_relocate($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $14 = $9;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = (2)?($17 >> 2):($17);
 $19 = $18 & 3;
 $10 = $19;
 $20 = $5;
 $11 = $20;
 $21 = $11;
 $22 = $21&255;
 $23 = $6;
 $24 = $23&255;
 $25 = ($22|0)<($24|0);
 $26 = $11;
 $27 = $26&255;
 $28 = $6;
 $29 = $28&255;
 $30 = $25 ? $27 : $29;
 $31 = $30&255;
 $12 = $31;
 $32 = $12;
 $33 = $32&255;
 $34 = $11;
 $35 = $34&255;
 $36 = (($35) - ($33))|0;
 $37 = $36&255;
 $11 = $37;
 $38 = $11;
 $39 = $38&255;
 $40 = $7;
 $41 = $40&255;
 $42 = ($39|0)<($41|0);
 $43 = $11;
 $44 = $43&255;
 $45 = $7;
 $46 = $45&255;
 $47 = $42 ? $44 : $46;
 $48 = $47&255;
 $13 = $48;
 $49 = $13;
 $50 = $49&255;
 $51 = $11;
 $52 = $51&255;
 $53 = (($52) - ($50))|0;
 $54 = $53&255;
 $11 = $54;
 $55 = $11;
 $56 = $55&255;
 $57 = ($56|0)==(0);
 if (!($57)) {
  $88 = 0;
  STACKTOP = sp;return ($88|0);
 }
 $58 = $9;
 $59 = ((($58)) + 3|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $61 & 16;
 $63 = ($62|0)!=(0);
 if ($63) {
  $86 = 2147483647;
 } else {
  $64 = $10;
  $65 = ($64|0)==(0);
  $66 = $6;
  $67 = $66&255;
  $68 = $12;
  $69 = $68&255;
  $70 = (($67) - ($69))|0;
  $71 = (($70) + 1)|0;
  if ($65) {
   $72 = $7;
   $73 = $72&255;
   $74 = $13;
   $75 = $74&255;
   $76 = (($73) - ($75))|0;
   $77 = $71 << $76;
   $86 = $77;
  } else {
   $86 = $71;
  }
 }
 $78 = $8;
 $79 = ((($78)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $8;
 $82 = ((($81)) + 12|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($80) - ($83))|0;
 $85 = (($84) + 1)|0;
 $87 = ($86|0)>=($85|0);
 $88 = $87;
 STACKTOP = sp;return ($88|0);
}
function _fc_solve_move_sequence_function($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $7;
 $12 = (($10) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = $8;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $9;
 _fcs_col_transfer_cards_115($13,$17,$18);
 $19 = $6;
 $20 = $8;
 $21 = $7;
 $22 = $9;
 _fcs_move_stack_params_push($19,0,$20,$21,$22);
 STACKTOP = sp;return;
}
function _col_seqs_iter__advance($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = $1;
 $7 = ((($6)) + 12|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 _col_seqs_iter__calc_end($8);
 STACKTOP = sp;return;
}
function _col_seqs_iter__calc_end($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 $9 = $1;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = ((($12)) + 16|0);
 HEAP32[$13>>2] = $11;
 while(1) {
  $14 = $1;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16|0)<($19|0);
  if (!($20)) {
   label = 5;
   break;
  }
  $21 = $3;
  $22 = $1;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 1)|0;
  $26 = (($25) + 1)|0;
  $27 = (($21) + ($26)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $3;
  $30 = $1;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  $34 = (($29) + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $2;
  $37 = (_fcs_is_parent_card__helper($28,$35,$36)|0);
  if (!($37)) {
   label = 5;
   break;
  }
  $38 = $1;
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$39>>2] = $41;
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function _fcs_col_transfer_cards_115($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = $5;
 $10 = $4;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($12) - ($9))|0;
 $14 = $13&255;
 HEAP8[$10>>0] = $14;
 $15 = $14&255;
 $16 = (($15) + 1)|0;
 $17 = (($8) + ($16)|0);
 $6 = $17;
 $18 = $5;
 $19 = $18;
 $7 = $19;
 $20 = $3;
 $21 = $3;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = (($23) + 1)|0;
 $25 = (($20) + ($24)|0);
 $26 = $6;
 $27 = $7;
 _memcpy(($25|0),($26|0),($27|0))|0;
 $28 = $5;
 $29 = $3;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (($31) + ($28))|0;
 $33 = $32&255;
 HEAP8[$29>>0] = $33;
 $34 = $6;
 $35 = $7;
 _memset(($34|0),0,($35|0))|0;
 STACKTOP = sp;return;
}
function _fc_solve_sfs_move_sequences_to_free_stacks($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $$byval_copy5 = sp + 200|0;
 $$byval_copy4 = sp + 192|0;
 $$byval_copy3 = sp + 184|0;
 $$byval_copy2 = sp + 176|0;
 $$byval_copy1 = sp + 168|0;
 $$byval_copy = sp + 160|0;
 $8 = sp + 128|0;
 $13 = sp + 212|0;
 $20 = sp + 72|0;
 $32 = sp + 16|0;
 $33 = sp + 8|0;
 $3 = $0;
 $4 = $2;
 $36 = $3;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = ((($38)) + 40|0);
 $6 = $39;
 $7 = 0;
 $40 = $5;
 $41 = HEAP32[$40>>2]|0;
 $9 = $41;
 $42 = $5;
 $43 = ((($42)) + 48|0);
 $10 = $43;
 $44 = $9;
 $45 = ((($44)) + 3|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 & 3;
 $11 = $48;
 $49 = $9;
 $50 = ((($49)) + 3|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = (2)?($52 >> 2):($52);
 $54 = $53 & 3;
 $12 = $54;
 $55 = $12;
 $56 = ($55|0)==(2);
 if ($56) {
  STACKTOP = sp;return;
 }
 $57 = $9;
 ;HEAP8[$13>>0]=HEAP8[$57>>0]|0;HEAP8[$13+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$57+3>>0]|0;
 $58 = $3;
 $59 = ((($58)) + 523|0);
 $60 = HEAP8[$59>>0]|0;
 $14 = $60;
 $61 = $14;
 $62 = $61&255;
 $63 = ($62|0)==(0);
 if ($63) {
  STACKTOP = sp;return;
 }
 $64 = $3;
 $65 = ((($64)) + 524|0);
 $66 = HEAP8[$65>>0]|0;
 $15 = $66;
 $67 = $12;
 $68 = ($67|0)==(0);
 $69 = $14;
 $70 = $69&255;
 $71 = $68 ? $70 : 0;
 $72 = $71&255;
 $16 = $72;
 $73 = $9;
 $74 = ((($73)) + 3|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $76 & 16;
 $78 = ($77|0)!=(0);
 if ($78) {
  $88 = 2147483647;
 } else {
  $79 = $12;
  $80 = ($79|0)==(0);
  $81 = $15;
  $82 = $81&255;
  $83 = (($82) + 1)|0;
  if ($80) {
   $84 = $14;
   $85 = $84&255;
   $86 = (($85) - 1)|0;
   $87 = $83 << $86;
   $88 = $87;
  } else {
   $88 = $83;
  }
 }
 $17 = $88;
 $89 = ((($13)) + 1|0);
 $90 = HEAP8[$89>>0]|0;
 $91 = $90&255;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 $92 = (_find_empty_stack($$byval_copy,0,$91)|0);
 $18 = $92;
 $19 = 0;
 while(1) {
  $93 = $19;
  $94 = ((($13)) + 1|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = ($93|0)<($96|0);
  if (!($97)) {
   break;
  }
  $98 = HEAP32[$1>>2]|0;
  $99 = $19;
  $100 = $11;
  _col_seqs_iter__create($20,$98,$99,$100);
  while(1) {
   $101 = ((($20)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ((($20)) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($102|0)<($104|0);
   if (!($105)) {
    break;
   }
   $106 = $12;
   $107 = ($106|0)==(1);
   if ($107) {
    $108 = HEAP32[$20>>2]|0;
    $109 = ((($20)) + 12|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (_fcs_col_is_king($108,$110)|0);
    if ($111) {
     label = 12;
    }
   } else {
    label = 12;
   }
   do {
    if ((label|0) == 12) {
     label = 0;
     $112 = ((($20)) + 16|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ((($20)) + 8|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($113|0)==($115|0);
     if ($116) {
      $117 = ((($20)) + 12|0);
      $118 = HEAP32[$117>>2]|0;
      $21 = $118;
      while(1) {
       $119 = $17;
       $120 = ((($20)) + 4|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = $21;
       $123 = (($121) - ($122))|0;
       $124 = ($119|0)<($123|0);
       $125 = $21;
       $126 = ($125|0)>(0);
       $127 = $124 ? $126 : 0;
       $128 = $21;
       if (!($127)) {
        break;
       }
       $129 = (($128) + -1)|0;
       $21 = $129;
      }
      $130 = ($128|0)>(0);
      if (!($130)) {
       break;
      }
      $131 = $12;
      $132 = ($131|0)==(1);
      if ($132) {
       $133 = HEAP32[$20>>2]|0;
       $134 = $21;
       $135 = (_fcs_col_is_king($133,$134)|0);
       if (!($135)) {
        break;
       }
      }
      $136 = $5;
      $137 = $6;
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
      (_fc_solve_sfs_check_state_begin($136,$8,$$byval_copy1,$137)|0);
      $138 = ((($8)) + 4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ((($139)) + 24|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = $19;
      $143 = 1 << $142;
      $144 = $141 & $143;
      $145 = ($144|0)!=(0);
      if (!($145)) {
       $146 = $19;
       $147 = 1 << $146;
       $148 = ((($8)) + 4|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = ((($149)) + 24|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = $151 | $147;
       HEAP32[$150>>2] = $152;
       $153 = HEAP32[$8>>2]|0;
       $154 = $19;
       $155 = (($153) + ($154<<2)|0);
       $156 = HEAP32[$155>>2]|0;
       $22 = $156;
       $157 = $10;
       $158 = $19;
       $159 = $158 << 7;
       $160 = (($157) + ($159)|0);
       $161 = $22;
       $162 = $22;
       $163 = HEAP8[$162>>0]|0;
       $164 = $163&255;
       $165 = (($164) + 1)|0;
       _memcpy(($160|0),($161|0),($165|0))|0;
       $166 = $10;
       $167 = $19;
       $168 = $167 << 7;
       $169 = (($166) + ($168)|0);
       $170 = HEAP32[$8>>2]|0;
       $171 = $19;
       $172 = (($170) + ($171<<2)|0);
       HEAP32[$172>>2] = $169;
      }
      $173 = ((($8)) + 4|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ((($174)) + 24|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = $18;
      $178 = 1 << $177;
      $179 = $176 & $178;
      $180 = ($179|0)!=(0);
      if (!($180)) {
       $181 = $18;
       $182 = 1 << $181;
       $183 = ((($8)) + 4|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ((($184)) + 24|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = $186 | $182;
       HEAP32[$185>>2] = $187;
       $188 = HEAP32[$8>>2]|0;
       $189 = $18;
       $190 = (($188) + ($189<<2)|0);
       $191 = HEAP32[$190>>2]|0;
       $23 = $191;
       $192 = $10;
       $193 = $18;
       $194 = $193 << 7;
       $195 = (($192) + ($194)|0);
       $196 = $23;
       $197 = $23;
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = (($199) + 1)|0;
       _memcpy(($195|0),($196|0),($200|0))|0;
       $201 = $10;
       $202 = $18;
       $203 = $202 << 7;
       $204 = (($201) + ($203)|0);
       $205 = HEAP32[$8>>2]|0;
       $206 = $18;
       $207 = (($205) + ($206<<2)|0);
       HEAP32[$207>>2] = $204;
      }
      $208 = HEAP32[$8>>2]|0;
      $209 = $6;
      $210 = $18;
      $211 = $19;
      $212 = ((($20)) + 4|0);
      $213 = HEAP32[$212>>2]|0;
      $214 = $21;
      $215 = (($213) - ($214))|0;
      _fc_solve_move_sequence_function($208,$209,$210,$211,$215);
      $216 = $4;
      $217 = $3;
      $218 = $6;
      ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
      $219 = (_fc_solve_sfs_check_state_end($217,$$byval_copy2,$8,$218)|0);
      $220 = $7;
      _fc_solve_derived_states_list_add_state($216,$219,$220);
      break;
     }
     $221 = ((($20)) + 8|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ((($20)) + 16|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = (($222) - ($224))|0;
     $24 = $225;
     $226 = $24;
     $227 = $15;
     $228 = $227&255;
     $229 = ($226|0)<($228|0);
     $230 = $24;
     $231 = $15;
     $232 = $231&255;
     $233 = $229 ? $230 : $232;
     $25 = $233;
     $234 = $25;
     $235 = $24;
     $236 = (($235) - ($234))|0;
     $24 = $236;
     $237 = $24;
     $238 = $16;
     $239 = $238&255;
     $240 = ($237|0)<($239|0);
     $241 = $24;
     $242 = $16;
     $243 = $242&255;
     $244 = $240 ? $241 : $243;
     $26 = $244;
     $245 = $26;
     $246 = $24;
     $247 = (($246) - ($245))|0;
     $24 = $247;
     $248 = $24;
     $249 = ($248|0)==(0);
     if ($249) {
      $250 = $14;
      $251 = $250&255;
      $252 = $26;
      $253 = (($251) - ($252))|0;
      $254 = ($253|0)>(0);
      if ($254) {
       $255 = $9;
       $256 = ((($255)) + 3|0);
       $257 = HEAP8[$256>>0]|0;
       $258 = $257&255;
       $259 = $258 & 16;
       $260 = ($259|0)!=(0);
       if ($260) {
        $274 = 2147483647;
       } else {
        $261 = $12;
        $262 = ($261|0)==(0);
        $263 = $15;
        $264 = $263&255;
        $265 = $25;
        $266 = (($264) - ($265))|0;
        $267 = (($266) + 1)|0;
        if ($262) {
         $268 = $14;
         $269 = $268&255;
         $270 = $26;
         $271 = (($269) - ($270))|0;
         $272 = (($271) - 1)|0;
         $273 = $267 << $272;
         $274 = $273;
        } else {
         $274 = $267;
        }
       }
       $28 = $274;
       $275 = ((($20)) + 16|0);
       $276 = HEAP32[$275>>2]|0;
       $277 = (($276) + 1)|0;
       $278 = $28;
       $279 = (($277) - ($278))|0;
       $29 = $279;
       $280 = $29;
       $281 = ((($20)) + 12|0);
       $282 = HEAP32[$281>>2]|0;
       $283 = ($280|0)>($282|0);
       $284 = $29;
       $285 = ((($20)) + 12|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = $283 ? $284 : $286;
       $30 = $287;
       $288 = $30;
       $27 = $288;
       $289 = $27;
       $290 = ((($20)) + 16|0);
       $291 = HEAP32[$290>>2]|0;
       $292 = ($289|0)<=($291|0);
       if ($292) {
        $293 = $12;
        $294 = ($293|0)==(1);
        if ($294) {
         $295 = HEAP32[$20>>2]|0;
         $296 = $27;
         $297 = (_fcs_col_is_king($295,$296)|0);
         if (!($297)) {
          break;
         }
        }
        $298 = $5;
        $299 = $6;
        ;HEAP32[$$byval_copy3>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($298,$8,$$byval_copy3,$299)|0);
        $300 = ((($8)) + 4|0);
        $301 = HEAP32[$300>>2]|0;
        $302 = ((($301)) + 24|0);
        $303 = HEAP32[$302>>2]|0;
        $304 = $19;
        $305 = 1 << $304;
        $306 = $303 & $305;
        $307 = ($306|0)!=(0);
        if (!($307)) {
         $308 = $19;
         $309 = 1 << $308;
         $310 = ((($8)) + 4|0);
         $311 = HEAP32[$310>>2]|0;
         $312 = ((($311)) + 24|0);
         $313 = HEAP32[$312>>2]|0;
         $314 = $313 | $309;
         HEAP32[$312>>2] = $314;
         $315 = HEAP32[$8>>2]|0;
         $316 = $19;
         $317 = (($315) + ($316<<2)|0);
         $318 = HEAP32[$317>>2]|0;
         $31 = $318;
         $319 = $10;
         $320 = $19;
         $321 = $320 << 7;
         $322 = (($319) + ($321)|0);
         $323 = $31;
         $324 = $31;
         $325 = HEAP8[$324>>0]|0;
         $326 = $325&255;
         $327 = (($326) + 1)|0;
         _memcpy(($322|0),($323|0),($327|0))|0;
         $328 = $10;
         $329 = $19;
         $330 = $329 << 7;
         $331 = (($328) + ($330)|0);
         $332 = HEAP32[$8>>2]|0;
         $333 = $19;
         $334 = (($332) + ($333<<2)|0);
         HEAP32[$334>>2] = $331;
        }
        $335 = $19;
        HEAP32[$32>>2] = $335;
        $336 = ((($32)) + 4|0);
        HEAP32[$336>>2] = -1;
        $337 = ((($336)) + 4|0);
        HEAP32[$337>>2] = -1;
        $338 = $3;
        $339 = $6;
        $340 = $25;
        $341 = $26;
        $342 = (($340) + ($341))|0;
        _empty_two_cols_from_new_state($33,$338,$8,$339,$32,$342,0);
        $343 = ((($33)) + 4|0);
        $344 = HEAP8[$343>>0]|0;
        $345 = $344&1;
        $346 = HEAP32[$33>>2]|0;
        $347 = (($346) + 1)|0;
        $348 = $345 ? $347 : 0;
        $349 = ((($13)) + 1|0);
        $350 = HEAP8[$349>>0]|0;
        $351 = $350&255;
        ;HEAP32[$$byval_copy4>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy4+4>>2]=HEAP32[$1+4>>2]|0;
        $352 = (_find_empty_stack($$byval_copy4,$348,$351)|0);
        $34 = $352;
        $353 = ((($8)) + 4|0);
        $354 = HEAP32[$353>>2]|0;
        $355 = ((($354)) + 24|0);
        $356 = HEAP32[$355>>2]|0;
        $357 = $34;
        $358 = 1 << $357;
        $359 = $356 & $358;
        $360 = ($359|0)!=(0);
        if (!($360)) {
         $361 = $34;
         $362 = 1 << $361;
         $363 = ((($8)) + 4|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ((($364)) + 24|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = $366 | $362;
         HEAP32[$365>>2] = $367;
         $368 = HEAP32[$8>>2]|0;
         $369 = $34;
         $370 = (($368) + ($369<<2)|0);
         $371 = HEAP32[$370>>2]|0;
         $35 = $371;
         $372 = $10;
         $373 = $34;
         $374 = $373 << 7;
         $375 = (($372) + ($374)|0);
         $376 = $35;
         $377 = $35;
         $378 = HEAP8[$377>>0]|0;
         $379 = $378&255;
         $380 = (($379) + 1)|0;
         _memcpy(($375|0),($376|0),($380|0))|0;
         $381 = $10;
         $382 = $34;
         $383 = $382 << 7;
         $384 = (($381) + ($383)|0);
         $385 = HEAP32[$8>>2]|0;
         $386 = $34;
         $387 = (($385) + ($386<<2)|0);
         HEAP32[$387>>2] = $384;
        }
        $388 = HEAP32[$8>>2]|0;
        $389 = $6;
        $390 = $34;
        $391 = $19;
        $392 = ((($20)) + 16|0);
        $393 = HEAP32[$392>>2]|0;
        $394 = $27;
        $395 = (($393) - ($394))|0;
        $396 = (($395) + 1)|0;
        _fc_solve_move_sequence_function($388,$389,$390,$391,$396);
        $397 = $4;
        $398 = $3;
        $399 = $6;
        ;HEAP32[$$byval_copy5>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$1+4>>2]|0;
        $400 = (_fc_solve_sfs_check_state_end($398,$$byval_copy5,$8,$399)|0);
        $401 = $7;
        _fc_solve_derived_states_list_add_state($397,$400,$401);
       }
      }
     }
    }
   } while(0);
   _col_seqs_iter__advance($20);
  }
  $402 = $19;
  $403 = (($402) + 1)|0;
  $19 = $403;
 }
 STACKTOP = sp;return;
}
function _fcs_col_is_king($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($5) + 1)|0;
 $7 = (($4) + ($6)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = (_fcs_card_is_king($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _fc_solve_sfs_move_freecell_cards_to_empty_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $8 = sp + 24|0;
 $12 = sp + 76|0;
 $3 = $0;
 $4 = $2;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $5 = $18;
 $19 = $5;
 $20 = ((($19)) + 40|0);
 $6 = $20;
 $7 = 0;
 $21 = $5;
 $22 = HEAP32[$21>>2]|0;
 $9 = $22;
 $23 = $5;
 $24 = ((($23)) + 48|0);
 $10 = $24;
 $25 = $9;
 $26 = ((($25)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = (2)?($28 >> 2):($28);
 $30 = $29 & 3;
 $11 = $30;
 $31 = $11;
 $32 = ($31|0)==(2);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = $9;
 ;HEAP8[$12>>0]=HEAP8[$33>>0]|0;HEAP8[$12+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$33+3>>0]|0;
 $34 = $3;
 $35 = ((($34)) + 523|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = ($36<<24>>24)!=(0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $13 = 0;
 while(1) {
  $38 = $13;
  $39 = ((($12)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = ($38|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = HEAP32[$1>>2]|0;
  $44 = $13;
  $45 = (($43) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = ($48|0)==(0);
  if ($49) {
   break;
  }
  $50 = $13;
  $51 = (($50) + 1)|0;
  $13 = $51;
 }
 $14 = 0;
 while(1) {
  $52 = $14;
  $53 = HEAP8[$12>>0]|0;
  $54 = $53&255;
  $55 = ($52|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = HEAP32[$1>>2]|0;
  $57 = ((($56)) + 40|0);
  $58 = $14;
  $59 = (($57) + ($58)|0);
  $60 = HEAP8[$59>>0]|0;
  $15 = $60;
  $61 = $15;
  $62 = $61&255;
  $63 = ($62|0)==(0);
  do {
   if (!($63)) {
    $64 = $11;
    $65 = ($64|0)==(1);
    if ($65) {
     $66 = $15;
     $67 = (_fcs_card_is_king($66)|0);
     if (!($67)) {
      break;
     }
    }
    $68 = $5;
    $69 = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($68,$8,$$byval_copy,$69)|0);
    $70 = ((($8)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($71)) + 24|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $13;
    $75 = 1 << $74;
    $76 = $73 & $75;
    $77 = ($76|0)!=(0);
    if (!($77)) {
     $78 = $13;
     $79 = 1 << $78;
     $80 = ((($8)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ((($81)) + 24|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $83 | $79;
     HEAP32[$82>>2] = $84;
     $85 = HEAP32[$8>>2]|0;
     $86 = $13;
     $87 = (($85) + ($86<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $16 = $88;
     $89 = $10;
     $90 = $13;
     $91 = $90 << 7;
     $92 = (($89) + ($91)|0);
     $93 = $16;
     $94 = $16;
     $95 = HEAP8[$94>>0]|0;
     $96 = $95&255;
     $97 = (($96) + 1)|0;
     _memcpy(($92|0),($93|0),($97|0))|0;
     $98 = $10;
     $99 = $13;
     $100 = $99 << 7;
     $101 = (($98) + ($100)|0);
     $102 = HEAP32[$8>>2]|0;
     $103 = $13;
     $104 = (($102) + ($103<<2)|0);
     HEAP32[$104>>2] = $101;
    }
    $105 = HEAP32[$8>>2]|0;
    $106 = $13;
    $107 = $15;
    _fcs_state_push_114($105,$106,$107);
    $108 = HEAP32[$8>>2]|0;
    $109 = ((($108)) + 40|0);
    $110 = $14;
    $111 = (($109) + ($110)|0);
    HEAP8[$111>>0] = 0;
    $112 = $6;
    $113 = $14;
    $114 = $13;
    _fcs_move_stack_non_seq_push($112,2,$113,$114);
    $115 = $4;
    $116 = $3;
    $117 = $6;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    $118 = (_fc_solve_sfs_check_state_end($116,$$byval_copy1,$8,$117)|0);
    $119 = $7;
    _fc_solve_derived_states_list_add_state($115,$118,$119);
   }
  } while(0);
  $120 = $14;
  $121 = (($120) + 1)|0;
  $14 = $121;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_move_fc_to_empty_and_put_on_top($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy3 = sp + 152|0;
 $$byval_copy2 = sp + 144|0;
 $$byval_copy1 = sp + 136|0;
 $$byval_copy = sp + 128|0;
 $8 = sp + 96|0;
 $13 = sp + 168|0;
 $25 = sp + 32|0;
 $30 = sp + 8|0;
 $31 = sp;
 $3 = $0;
 $4 = $2;
 $32 = $3;
 $33 = HEAP32[$32>>2]|0;
 $5 = $33;
 $34 = $5;
 $35 = ((($34)) + 40|0);
 $6 = $35;
 $7 = 0;
 $36 = $5;
 $37 = HEAP32[$36>>2]|0;
 $9 = $37;
 $38 = $5;
 $39 = ((($38)) + 48|0);
 $10 = $39;
 $40 = $9;
 $41 = ((($40)) + 3|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 & 3;
 $11 = $44;
 $45 = $9;
 $46 = ((($45)) + 3|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = (2)?($48 >> 2):($48);
 $50 = $49 & 3;
 $12 = $50;
 $51 = $12;
 $52 = ($51|0)==(2);
 if ($52) {
  STACKTOP = sp;return;
 }
 $53 = $9;
 ;HEAP8[$13>>0]=HEAP8[$53>>0]|0;HEAP8[$13+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$53+3>>0]|0;
 $54 = $3;
 $55 = ((($54)) + 524|0);
 $56 = HEAP8[$55>>0]|0;
 $14 = $56;
 $57 = $14;
 $58 = $57&255;
 $59 = (($58) + 1)|0;
 $60 = $59&255;
 $15 = $60;
 $61 = $3;
 $62 = ((($61)) + 523|0);
 $63 = HEAP8[$62>>0]|0;
 $16 = $63;
 $64 = $16;
 $65 = $64&255;
 $66 = (($65) - 1)|0;
 $67 = $66&255;
 $17 = $67;
 $68 = $16;
 $69 = ($68<<24>>24)!=(0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $18 = 0;
 while(1) {
  $70 = $18;
  $71 = ((($13)) + 1|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = ($70|0)<($73|0);
  if (!($74)) {
   break;
  }
  $75 = HEAP32[$1>>2]|0;
  $76 = $18;
  $77 = (($75) + ($76<<2)|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = ($80|0)==(0);
  if ($81) {
   break;
  }
  $82 = $18;
  $83 = (($82) + 1)|0;
  $18 = $83;
 }
 $19 = 0;
 while(1) {
  $84 = $19;
  $85 = HEAP8[$13>>0]|0;
  $86 = $85&255;
  $87 = ($84|0)<($86|0);
  if (!($87)) {
   break;
  }
  $88 = HEAP32[$1>>2]|0;
  $89 = ((($88)) + 40|0);
  $90 = $19;
  $91 = (($89) + ($90)|0);
  $92 = HEAP8[$91>>0]|0;
  $20 = $92;
  $93 = $20;
  $94 = $93&255;
  $95 = ($94|0)==(0);
  L15: do {
   if (!($95)) {
    $96 = $12;
    $97 = ($96|0)==(1);
    if ($97) {
     $98 = $20;
     $99 = (_fcs_card_is_king($98)|0);
     if (!($99)) {
      break;
     }
    }
    $21 = 0;
    while(1) {
     $100 = $21;
     $101 = HEAP8[$13>>0]|0;
     $102 = $101&255;
     $103 = ($100|0)<($102|0);
     if (!($103)) {
      break;
     }
     $104 = $21;
     $105 = $19;
     $106 = ($104|0)==($105|0);
     if (!($106)) {
      $107 = HEAP32[$1>>2]|0;
      $108 = ((($107)) + 40|0);
      $109 = $21;
      $110 = (($108) + ($109)|0);
      $111 = HEAP8[$110>>0]|0;
      $22 = $111;
      $112 = $22;
      $113 = $112&255;
      $114 = ($113|0)==(0);
      if (!($114)) {
       $115 = $22;
       $116 = $20;
       $117 = $11;
       $118 = (_fcs_is_parent_card__helper($115,$116,$117)|0);
       $119 = $118 ^ 1;
       $120 = $119 ^ 1;
       if ($120) {
        $121 = $5;
        $122 = $6;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($121,$8,$$byval_copy,$122)|0);
        $123 = ((($8)) + 4|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = ((($124)) + 24|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = $18;
        $128 = 1 << $127;
        $129 = $126 & $128;
        $130 = ($129|0)!=(0);
        if (!($130)) {
         $131 = $18;
         $132 = 1 << $131;
         $133 = ((($8)) + 4|0);
         $134 = HEAP32[$133>>2]|0;
         $135 = ((($134)) + 24|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = $136 | $132;
         HEAP32[$135>>2] = $137;
         $138 = HEAP32[$8>>2]|0;
         $139 = $18;
         $140 = (($138) + ($139<<2)|0);
         $141 = HEAP32[$140>>2]|0;
         $23 = $141;
         $142 = $10;
         $143 = $18;
         $144 = $143 << 7;
         $145 = (($142) + ($144)|0);
         $146 = $23;
         $147 = $23;
         $148 = HEAP8[$147>>0]|0;
         $149 = $148&255;
         $150 = (($149) + 1)|0;
         _memcpy(($145|0),($146|0),($150|0))|0;
         $151 = $10;
         $152 = $18;
         $153 = $152 << 7;
         $154 = (($151) + ($153)|0);
         $155 = HEAP32[$8>>2]|0;
         $156 = $18;
         $157 = (($155) + ($156<<2)|0);
         HEAP32[$157>>2] = $154;
        }
        $158 = HEAP32[$8>>2]|0;
        $159 = $18;
        $160 = $20;
        _fcs_state_push_114($158,$159,$160);
        $161 = HEAP32[$8>>2]|0;
        $162 = $18;
        $163 = $22;
        _fcs_state_push_114($161,$162,$163);
        $164 = HEAP32[$8>>2]|0;
        $165 = ((($164)) + 40|0);
        $166 = $19;
        $167 = (($165) + ($166)|0);
        HEAP8[$167>>0] = 0;
        $168 = HEAP32[$8>>2]|0;
        $169 = ((($168)) + 40|0);
        $170 = $21;
        $171 = (($169) + ($170)|0);
        HEAP8[$171>>0] = 0;
        $172 = $6;
        $173 = $19;
        $174 = $18;
        _fcs_move_stack_non_seq_push($172,2,$173,$174);
        $175 = $6;
        $176 = $21;
        $177 = $18;
        _fcs_move_stack_non_seq_push($175,2,$176,$177);
        $178 = $4;
        $179 = $3;
        $180 = $6;
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        $181 = (_fc_solve_sfs_check_state_end($179,$$byval_copy1,$8,$180)|0);
        $182 = $7;
        _fc_solve_derived_states_list_add_state($178,$181,$182);
       }
      }
     }
     $183 = $21;
     $184 = (($183) + 1)|0;
     $21 = $184;
    }
    $24 = 0;
    while(1) {
     $185 = $24;
     $186 = ((($13)) + 1|0);
     $187 = HEAP8[$186>>0]|0;
     $188 = $187&255;
     $189 = ($185|0)<($188|0);
     if (!($189)) {
      break L15;
     }
     $190 = HEAP32[$1>>2]|0;
     $191 = $24;
     $192 = $11;
     _col_seqs_iter__create($25,$190,$191,$192);
     while(1) {
      $193 = ((($25)) + 12|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ((($25)) + 4|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($194|0)<($196|0);
      if (!($197)) {
       break;
      }
      $198 = $12;
      $199 = ($198|0)==(2);
      if ($199) {
       $200 = ((($25)) + 12|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0);
       if (!($202)) {
        label = 27;
       }
      } else {
       label = 27;
      }
      if ((label|0) == 27) {
       label = 0;
       $203 = ((($25)) + 8|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = ((($25)) + 16|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = (($204) - ($206))|0;
       $26 = $207;
       $208 = HEAP32[$25>>2]|0;
       $209 = ((($25)) + 12|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + 1)|0;
       $212 = (($208) + ($211)|0);
       $213 = HEAP8[$212>>0]|0;
       $27 = $213;
       $214 = $27;
       $215 = $20;
       $216 = $11;
       $217 = (_fcs_is_parent_card__helper($214,$215,$216)|0);
       $218 = $217 ^ 1;
       $219 = $218 ^ 1;
       if ($219) {
        $220 = $26;
        $221 = $220&255;
        $222 = $15;
        $223 = $17;
        $224 = $9;
        $225 = (_check_if_can_relocate($221,$222,$223,$25,$224)|0);
        $226 = $225 ^ 1;
        $227 = $226 ^ 1;
        if ($227) {
         $228 = $5;
         $229 = $6;
         ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
         (_fc_solve_sfs_check_state_begin($228,$8,$$byval_copy2,$229)|0);
         $230 = ((($8)) + 4|0);
         $231 = HEAP32[$230>>2]|0;
         $232 = ((($231)) + 24|0);
         $233 = HEAP32[$232>>2]|0;
         $234 = $24;
         $235 = 1 << $234;
         $236 = $233 & $235;
         $237 = ($236|0)!=(0);
         if (!($237)) {
          $238 = $24;
          $239 = 1 << $238;
          $240 = ((($8)) + 4|0);
          $241 = HEAP32[$240>>2]|0;
          $242 = ((($241)) + 24|0);
          $243 = HEAP32[$242>>2]|0;
          $244 = $243 | $239;
          HEAP32[$242>>2] = $244;
          $245 = HEAP32[$8>>2]|0;
          $246 = $24;
          $247 = (($245) + ($246<<2)|0);
          $248 = HEAP32[$247>>2]|0;
          $28 = $248;
          $249 = $10;
          $250 = $24;
          $251 = $250 << 7;
          $252 = (($249) + ($251)|0);
          $253 = $28;
          $254 = $28;
          $255 = HEAP8[$254>>0]|0;
          $256 = $255&255;
          $257 = (($256) + 1)|0;
          _memcpy(($252|0),($253|0),($257|0))|0;
          $258 = $10;
          $259 = $24;
          $260 = $259 << 7;
          $261 = (($258) + ($260)|0);
          $262 = HEAP32[$8>>2]|0;
          $263 = $24;
          $264 = (($262) + ($263<<2)|0);
          HEAP32[$264>>2] = $261;
         }
         $265 = ((($8)) + 4|0);
         $266 = HEAP32[$265>>2]|0;
         $267 = ((($266)) + 24|0);
         $268 = HEAP32[$267>>2]|0;
         $269 = $18;
         $270 = 1 << $269;
         $271 = $268 & $270;
         $272 = ($271|0)!=(0);
         if (!($272)) {
          $273 = $18;
          $274 = 1 << $273;
          $275 = ((($8)) + 4|0);
          $276 = HEAP32[$275>>2]|0;
          $277 = ((($276)) + 24|0);
          $278 = HEAP32[$277>>2]|0;
          $279 = $278 | $274;
          HEAP32[$277>>2] = $279;
          $280 = HEAP32[$8>>2]|0;
          $281 = $18;
          $282 = (($280) + ($281<<2)|0);
          $283 = HEAP32[$282>>2]|0;
          $29 = $283;
          $284 = $10;
          $285 = $18;
          $286 = $285 << 7;
          $287 = (($284) + ($286)|0);
          $288 = $29;
          $289 = $29;
          $290 = HEAP8[$289>>0]|0;
          $291 = $290&255;
          $292 = (($291) + 1)|0;
          _memcpy(($287|0),($288|0),($292|0))|0;
          $293 = $10;
          $294 = $18;
          $295 = $294 << 7;
          $296 = (($293) + ($295)|0);
          $297 = HEAP32[$8>>2]|0;
          $298 = $18;
          $299 = (($297) + ($298<<2)|0);
          HEAP32[$299>>2] = $296;
         }
         $300 = HEAP32[$8>>2]|0;
         $301 = $18;
         $302 = $20;
         _fcs_state_push_114($300,$301,$302);
         $303 = HEAP32[$8>>2]|0;
         $304 = ((($303)) + 40|0);
         $305 = $19;
         $306 = (($304) + ($305)|0);
         HEAP8[$306>>0] = 0;
         $307 = $6;
         $308 = $19;
         $309 = $18;
         _fcs_move_stack_non_seq_push($307,2,$308,$309);
         $310 = $24;
         HEAP32[$30>>2] = $310;
         $311 = ((($30)) + 4|0);
         HEAP32[$311>>2] = -1;
         $312 = ((($311)) + 4|0);
         HEAP32[$312>>2] = -1;
         $313 = $3;
         $314 = $6;
         $315 = $26;
         _empty_two_cols_from_new_state($31,$313,$8,$314,$30,$315,0);
         $316 = HEAP32[$8>>2]|0;
         $317 = $6;
         $318 = $18;
         $319 = $24;
         $320 = ((($25)) + 16|0);
         $321 = HEAP32[$320>>2]|0;
         $322 = ((($25)) + 12|0);
         $323 = HEAP32[$322>>2]|0;
         $324 = (($321) - ($323))|0;
         $325 = (($324) + 1)|0;
         _fc_solve_move_sequence_function($316,$317,$318,$319,$325);
         $326 = $4;
         $327 = $3;
         $328 = $6;
         ;HEAP32[$$byval_copy3>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$1+4>>2]|0;
         $329 = (_fc_solve_sfs_check_state_end($327,$$byval_copy3,$8,$328)|0);
         $330 = $7;
         _fc_solve_derived_states_list_add_state($326,$329,$330);
        }
       }
      }
      _col_seqs_iter__advance($25);
     }
     $331 = $24;
     $332 = (($331) + 1)|0;
     $24 = $332;
    }
   }
  } while(0);
  $333 = $19;
  $334 = (($333) + 1)|0;
  $19 = $334;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_move_cards_to_a_different_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy1 = sp + 152|0;
 $$byval_copy = sp + 144|0;
 $8 = sp + 112|0;
 $13 = sp + 168|0;
 $38 = sp + 8|0;
 $39 = sp;
 $3 = $0;
 $4 = $2;
 $40 = $3;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $43 = ((($42)) + 40|0);
 $6 = $43;
 $7 = 0;
 $44 = $5;
 $45 = HEAP32[$44>>2]|0;
 $9 = $45;
 $46 = $5;
 $47 = ((($46)) + 48|0);
 $10 = $47;
 $48 = $9;
 $49 = ((($48)) + 3|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 & 3;
 $11 = $52;
 $53 = $9;
 $54 = ((($53)) + 3|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = (2)?($56 >> 2):($56);
 $58 = $57 & 3;
 $12 = $58;
 $59 = $9;
 ;HEAP8[$13>>0]=HEAP8[$59>>0]|0;HEAP8[$13+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$59+3>>0]|0;
 $60 = $3;
 $61 = ((($60)) + 524|0);
 $62 = HEAP8[$61>>0]|0;
 $14 = $62;
 $63 = $3;
 $64 = ((($63)) + 523|0);
 $65 = HEAP8[$64>>0]|0;
 $15 = $65;
 $66 = $12;
 $67 = ($66|0)==(0);
 $68 = $15;
 $69 = $68&255;
 $70 = $67 ? $69 : 0;
 $71 = $70&255;
 $16 = $71;
 $72 = $3;
 $73 = (_fc_solve_calc_positions_by_rank_location($72)|0);
 $17 = $73;
 $74 = $11;
 $75 = ($74|0)==(2);
 if ($75) {
  $80 = 1;
 } else {
  $76 = $11;
  $77 = ($76|0)==(1);
  $78 = $77 ? 4 : 2;
  $80 = $78;
 }
 $79 = $80 << 1;
 $18 = $79;
 $19 = 0;
 while(1) {
  $81 = $19;
  $82 = ((($13)) + 1|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ($81|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = HEAP32[$1>>2]|0;
  $87 = $19;
  $88 = (($86) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $20 = $89;
  $90 = $20;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $21 = $92;
  $93 = $21;
  $94 = ($93|0)<(2);
  L7: do {
   if (!($94)) {
    $95 = $20;
    $96 = $21;
    $97 = (($96) - 1)|0;
    $98 = (($97) + 1)|0;
    $99 = (($95) + ($98)|0);
    $100 = HEAP8[$99>>0]|0;
    $22 = $100;
    $101 = $21;
    $102 = (($101) - 2)|0;
    $23 = $102;
    while(1) {
     $103 = $23;
     $104 = ($103|0)>=(0);
     if (!($104)) {
      break;
     }
     $105 = $20;
     $106 = $23;
     $107 = (($106) + 1)|0;
     $108 = (($105) + ($107)|0);
     $109 = HEAP8[$108>>0]|0;
     $24 = $109;
     $110 = $22;
     $111 = $24;
     $112 = $11;
     $113 = (_fcs_is_parent_card__helper($110,$111,$112)|0);
     if (!($113)) {
      break;
     }
     $114 = $24;
     $22 = $114;
     $115 = $23;
     $116 = (($115) + -1)|0;
     $23 = $116;
    }
    $117 = $23;
    $118 = (($117) + 2)|0;
    $23 = $118;
    $119 = $23;
    $25 = $119;
    while(1) {
     $120 = $25;
     $121 = $21;
     $122 = ($120|0)<($121|0);
     if (!($122)) {
      break L7;
     }
     $123 = $20;
     $124 = $25;
     $125 = (($124) + 1)|0;
     $126 = (($123) + ($125)|0);
     $127 = HEAP8[$126>>0]|0;
     $26 = $127;
     $128 = $17;
     $129 = $26;
     $130 = $129&255;
     $131 = (2)?($130 >> 2):($130);
     $132 = $131<<4;
     $133 = (($128) + ($132)|0);
     $27 = $133;
     $134 = $27;
     $135 = ((($134)) + 16|0);
     $28 = $135;
     $136 = $11;
     $137 = ($136|0)==(2);
     if ($137) {
      $147 = 0;
     } else {
      $138 = $11;
      $139 = ($138|0)==(1);
      $140 = $26;
      $141 = $140&255;
      $142 = $141 & 3;
      $143 = $142 ^ 1;
      $144 = $143 & 1;
      $145 = $139 ? $142 : $144;
      $147 = $145;
     }
     $146 = $147 << 1;
     $148 = $27;
     $149 = (($148) + ($146)|0);
     $27 = $149;
     while(1) {
      $150 = $27;
      $151 = $28;
      $152 = ($150>>>0)<($151>>>0);
      if (!($152)) {
       break;
      }
      $153 = $27;
      $154 = HEAP8[$153>>0]|0;
      $155 = $154 << 24 >> 24;
      $29 = $155;
      $156 = $29;
      $157 = ($156|0)==(-1);
      if (!($157)) {
       $158 = $29;
       $159 = $19;
       $160 = ($158|0)==($159|0);
       if (!($160)) {
        $161 = $27;
        $162 = ((($161)) + 1|0);
        $163 = HEAP8[$162>>0]|0;
        $164 = $163 << 24 >> 24;
        $30 = $164;
        $165 = HEAP32[$1>>2]|0;
        $166 = $29;
        $167 = (($165) + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $31 = $168;
        $169 = $31;
        $170 = HEAP8[$169>>0]|0;
        $171 = $170&255;
        $32 = $171;
        $172 = $32;
        $173 = $30;
        $174 = (($172) - ($173))|0;
        $175 = (($174) - 1)|0;
        $33 = $175;
        $176 = $33;
        $177 = $14;
        $178 = $177&255;
        $179 = ($176|0)<($178|0);
        $180 = $33;
        $181 = $14;
        $182 = $181&255;
        $183 = $179 ? $180 : $182;
        $34 = $183;
        $184 = $34;
        $185 = $33;
        $186 = (($185) - ($184))|0;
        $33 = $186;
        $187 = $33;
        $188 = $16;
        $189 = $188&255;
        $190 = ($187|0)<($189|0);
        $191 = $33;
        $192 = $16;
        $193 = $192&255;
        $194 = $190 ? $191 : $193;
        $35 = $194;
        $195 = $35;
        $196 = $33;
        $197 = (($196) - ($195))|0;
        $33 = $197;
        $198 = $33;
        $199 = ($198|0)==(0);
        if ($199) {
         $200 = $9;
         $201 = ((($200)) + 3|0);
         $202 = HEAP8[$201>>0]|0;
         $203 = $202&255;
         $204 = $203 & 16;
         $205 = ($204|0)!=(0);
         if ($205) {
          $221 = 2147483647;
         } else {
          $206 = $12;
          $207 = ($206|0)==(0);
          $208 = $14;
          $209 = $208&255;
          $210 = $34;
          $211 = (($209) - ($210))|0;
          $212 = (($211) + 1)|0;
          if ($207) {
           $213 = $15;
           $214 = $213&255;
           $215 = $35;
           $216 = (($214) - ($215))|0;
           $217 = $212 << $216;
           $221 = $217;
          } else {
           $221 = $212;
          }
         }
         $218 = $21;
         $219 = $25;
         $220 = (($218) - ($219))|0;
         $222 = ($221|0)>=($220|0);
         if ($222) {
          $223 = $5;
          $224 = $6;
          ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
          (_fc_solve_sfs_check_state_begin($223,$8,$$byval_copy,$224)|0);
          $225 = ((($8)) + 4|0);
          $226 = HEAP32[$225>>2]|0;
          $227 = ((($226)) + 24|0);
          $228 = HEAP32[$227>>2]|0;
          $229 = $19;
          $230 = 1 << $229;
          $231 = $228 & $230;
          $232 = ($231|0)!=(0);
          if (!($232)) {
           $233 = $19;
           $234 = 1 << $233;
           $235 = ((($8)) + 4|0);
           $236 = HEAP32[$235>>2]|0;
           $237 = ((($236)) + 24|0);
           $238 = HEAP32[$237>>2]|0;
           $239 = $238 | $234;
           HEAP32[$237>>2] = $239;
           $240 = HEAP32[$8>>2]|0;
           $241 = $19;
           $242 = (($240) + ($241<<2)|0);
           $243 = HEAP32[$242>>2]|0;
           $36 = $243;
           $244 = $10;
           $245 = $19;
           $246 = $245 << 7;
           $247 = (($244) + ($246)|0);
           $248 = $36;
           $249 = $36;
           $250 = HEAP8[$249>>0]|0;
           $251 = $250&255;
           $252 = (($251) + 1)|0;
           _memcpy(($247|0),($248|0),($252|0))|0;
           $253 = $10;
           $254 = $19;
           $255 = $254 << 7;
           $256 = (($253) + ($255)|0);
           $257 = HEAP32[$8>>2]|0;
           $258 = $19;
           $259 = (($257) + ($258<<2)|0);
           HEAP32[$259>>2] = $256;
          }
          $260 = ((($8)) + 4|0);
          $261 = HEAP32[$260>>2]|0;
          $262 = ((($261)) + 24|0);
          $263 = HEAP32[$262>>2]|0;
          $264 = $29;
          $265 = 1 << $264;
          $266 = $263 & $265;
          $267 = ($266|0)!=(0);
          if (!($267)) {
           $268 = $29;
           $269 = 1 << $268;
           $270 = ((($8)) + 4|0);
           $271 = HEAP32[$270>>2]|0;
           $272 = ((($271)) + 24|0);
           $273 = HEAP32[$272>>2]|0;
           $274 = $273 | $269;
           HEAP32[$272>>2] = $274;
           $275 = HEAP32[$8>>2]|0;
           $276 = $29;
           $277 = (($275) + ($276<<2)|0);
           $278 = HEAP32[$277>>2]|0;
           $37 = $278;
           $279 = $10;
           $280 = $29;
           $281 = $280 << 7;
           $282 = (($279) + ($281)|0);
           $283 = $37;
           $284 = $37;
           $285 = HEAP8[$284>>0]|0;
           $286 = $285&255;
           $287 = (($286) + 1)|0;
           _memcpy(($282|0),($283|0),($287|0))|0;
           $288 = $10;
           $289 = $29;
           $290 = $289 << 7;
           $291 = (($288) + ($290)|0);
           $292 = HEAP32[$8>>2]|0;
           $293 = $29;
           $294 = (($292) + ($293<<2)|0);
           HEAP32[$294>>2] = $291;
          }
          $295 = $29;
          HEAP32[$38>>2] = $295;
          $296 = ((($38)) + 4|0);
          HEAP32[$296>>2] = -1;
          $297 = ((($296)) + 4|0);
          HEAP32[$297>>2] = -1;
          $298 = $3;
          $299 = $6;
          $300 = $35;
          $301 = $34;
          $302 = (($300) + ($301))|0;
          _empty_two_cols_from_new_state($39,$298,$8,$299,$38,$302,0);
          $303 = HEAP32[$8>>2]|0;
          $304 = $6;
          $305 = $29;
          $306 = $19;
          $307 = $21;
          $308 = $25;
          $309 = (($307) - ($308))|0;
          _fc_solve_move_sequence_function($303,$304,$305,$306,$309);
          $310 = $4;
          $311 = $3;
          $312 = $6;
          ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
          $313 = (_fc_solve_sfs_check_state_end($311,$$byval_copy1,$8,$312)|0);
          $314 = $7;
          _fc_solve_derived_states_list_add_state($310,$313,$314);
         }
        }
       }
      }
      $315 = $18;
      $316 = $27;
      $317 = (($316) + ($315)|0);
      $27 = $317;
     }
     $318 = $25;
     $319 = (($318) + 1)|0;
     $25 = $319;
    }
   }
  } while(0);
  $320 = $19;
  $321 = (($320) + 1)|0;
  $19 = $321;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_empty_stack_into_freecells($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 72|0;
 $8 = sp + 40|0;
 $12 = sp + 92|0;
 $3 = $0;
 $4 = $2;
 $22 = $3;
 $23 = HEAP32[$22>>2]|0;
 $5 = $23;
 $24 = $5;
 $25 = ((($24)) + 40|0);
 $6 = $25;
 $7 = 0;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $9 = $27;
 $28 = $5;
 $29 = ((($28)) + 48|0);
 $10 = $29;
 $30 = $9;
 $31 = ((($30)) + 3|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = (2)?($33 >> 2):($33);
 $35 = $34 & 3;
 $11 = $35;
 $36 = $11;
 $37 = ($36|0)==(2);
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = $9;
 ;HEAP8[$12>>0]=HEAP8[$38>>0]|0;HEAP8[$12+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$38+3>>0]|0;
 $39 = $3;
 $40 = ((($39)) + 524|0);
 $41 = HEAP8[$40>>0]|0;
 $13 = $41;
 $42 = $13;
 $43 = ($42<<24>>24)!=(0);
 if (!($43)) {
  STACKTOP = sp;return;
 }
 $44 = $3;
 $45 = ((($44)) + 523|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = ($47|0)!=(0);
 if ($48) {
  STACKTOP = sp;return;
 }
 $14 = 0;
 while(1) {
  $49 = $14;
  $50 = ((($12)) + 1|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = ($49|0)<($52|0);
  if (!($53)) {
   break;
  }
  $54 = HEAP32[$1>>2]|0;
  $55 = $14;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $15 = $57;
  $58 = $15;
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $16 = $60;
  $61 = $16;
  $62 = ($61|0)!=(0);
  if ($62) {
   $63 = $16;
   $64 = $13;
   $65 = $64&255;
   $66 = ($63|0)>($65|0);
   if (!($66)) {
    $67 = $5;
    $68 = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($67,$8,$$byval_copy,$68)|0);
    $69 = ((($8)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 24|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $14;
    $74 = 1 << $73;
    $75 = $72 & $74;
    $76 = ($75|0)!=(0);
    if (!($76)) {
     $77 = $14;
     $78 = 1 << $77;
     $79 = ((($8)) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ((($80)) + 24|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $82 | $78;
     HEAP32[$81>>2] = $83;
     $84 = HEAP32[$8>>2]|0;
     $85 = $14;
     $86 = (($84) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $17 = $87;
     $88 = $10;
     $89 = $14;
     $90 = $89 << 7;
     $91 = (($88) + ($90)|0);
     $92 = $17;
     $93 = $17;
     $94 = HEAP8[$93>>0]|0;
     $95 = $94&255;
     $96 = (($95) + 1)|0;
     _memcpy(($91|0),($92|0),($96|0))|0;
     $97 = $10;
     $98 = $14;
     $99 = $98 << 7;
     $100 = (($97) + ($99)|0);
     $101 = HEAP32[$8>>2]|0;
     $102 = $14;
     $103 = (($101) + ($102<<2)|0);
     HEAP32[$103>>2] = $100;
    }
    $104 = HEAP32[$8>>2]|0;
    $105 = $14;
    $106 = (($104) + ($105<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $18 = $107;
    $19 = 0;
    $20 = 0;
    while(1) {
     $108 = $20;
     $109 = $16;
     $110 = ($108|0)<($109|0);
     if (!($110)) {
      break;
     }
     while(1) {
      $111 = $19;
      $112 = HEAP8[$12>>0]|0;
      $113 = $112&255;
      $114 = ($111|0)<($113|0);
      if (!($114)) {
       break;
      }
      $115 = HEAP32[$8>>2]|0;
      $116 = ((($115)) + 40|0);
      $117 = $19;
      $118 = (($116) + ($117)|0);
      $119 = HEAP8[$118>>0]|0;
      $120 = $119&255;
      $121 = ($120|0)==(0);
      if ($121) {
       break;
      }
      $122 = $19;
      $123 = (($122) + 1)|0;
      $19 = $123;
     }
     $124 = $18;
     $125 = $18;
     $126 = HEAP8[$125>>0]|0;
     $127 = $126&255;
     $128 = (($127) - 1)|0;
     $129 = (($128) + 1)|0;
     $130 = (($124) + ($129)|0);
     $131 = HEAP8[$130>>0]|0;
     $21 = $131;
     $132 = $18;
     $133 = $18;
     $134 = HEAP8[$133>>0]|0;
     $135 = (($134) + -1)<<24>>24;
     HEAP8[$133>>0] = $135;
     $136 = $135&255;
     $137 = (($136) + 1)|0;
     $138 = (($132) + ($137)|0);
     HEAP8[$138>>0] = 0;
     $139 = $21;
     $140 = HEAP32[$8>>2]|0;
     $141 = ((($140)) + 40|0);
     $142 = $19;
     $143 = (($141) + ($142)|0);
     HEAP8[$143>>0] = $139;
     $144 = $6;
     $145 = $14;
     $146 = $19;
     _fcs_move_stack_non_seq_push($144,1,$145,$146);
     $147 = $20;
     $148 = (($147) + 1)|0;
     $20 = $148;
     $149 = $19;
     $150 = (($149) + 1)|0;
     $19 = $150;
    }
    $151 = $4;
    $152 = $3;
    $153 = $6;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    $154 = (_fc_solve_sfs_check_state_end($152,$$byval_copy1,$8,$153)|0);
    $155 = $7;
    _fc_solve_derived_states_list_add_state($151,$154,$155);
   }
  }
  $156 = $14;
  $157 = (($156) + 1)|0;
  $14 = $157;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_atomic_move_card_to_empty_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 72|0;
 $8 = sp + 40|0;
 $12 = sp + 92|0;
 $3 = $0;
 $4 = $2;
 $20 = $3;
 $21 = HEAP32[$20>>2]|0;
 $5 = $21;
 $22 = $5;
 $23 = ((($22)) + 40|0);
 $6 = $23;
 $7 = 0;
 $24 = $5;
 $25 = HEAP32[$24>>2]|0;
 $9 = $25;
 $26 = $5;
 $27 = ((($26)) + 48|0);
 $10 = $27;
 $28 = $9;
 $29 = ((($28)) + 3|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (2)?($31 >> 2):($31);
 $33 = $32 & 3;
 $11 = $33;
 $34 = $11;
 $35 = ($34|0)==(2);
 if ($35) {
  STACKTOP = sp;return;
 }
 $36 = $3;
 $37 = ((($36)) + 523|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = ($39|0)==(0);
 if ($40) {
  STACKTOP = sp;return;
 }
 $41 = $9;
 ;HEAP8[$12>>0]=HEAP8[$41>>0]|0;HEAP8[$12+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$41+3>>0]|0;
 $13 = 0;
 while(1) {
  $42 = $13;
  $43 = ((($12)) + 1|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($42|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = HEAP32[$1>>2]|0;
  $48 = $13;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = ($52|0)==(0);
  if ($53) {
   break;
  }
  $54 = $13;
  $55 = (($54) + 1)|0;
  $13 = $55;
 }
 $14 = 0;
 while(1) {
  $56 = $14;
  $57 = ((($12)) + 1|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($56|0)<($59|0);
  if (!($60)) {
   break;
  }
  $61 = HEAP32[$1>>2]|0;
  $62 = $14;
  $63 = (($61) + ($62<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $15 = $64;
  $65 = $15;
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $16 = $67;
  $68 = $16;
  $69 = ($68|0)<=(1);
  do {
   if (!($69)) {
    $70 = $15;
    $71 = $16;
    $72 = (($71) - 1)|0;
    $73 = (($72) + 1)|0;
    $74 = (($70) + ($73)|0);
    $75 = HEAP8[$74>>0]|0;
    $17 = $75;
    $76 = $11;
    $77 = ($76|0)==(1);
    if ($77) {
     $78 = $17;
     $79 = (_fcs_card_is_king($78)|0);
     if (!($79)) {
      break;
     }
    }
    $80 = $5;
    $81 = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($80,$8,$$byval_copy,$81)|0);
    $82 = ((($8)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($83)) + 24|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $14;
    $87 = 1 << $86;
    $88 = $85 & $87;
    $89 = ($88|0)!=(0);
    if (!($89)) {
     $90 = $14;
     $91 = 1 << $90;
     $92 = ((($8)) + 4|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ((($93)) + 24|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $95 | $91;
     HEAP32[$94>>2] = $96;
     $97 = HEAP32[$8>>2]|0;
     $98 = $14;
     $99 = (($97) + ($98<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $18 = $100;
     $101 = $10;
     $102 = $14;
     $103 = $102 << 7;
     $104 = (($101) + ($103)|0);
     $105 = $18;
     $106 = $18;
     $107 = HEAP8[$106>>0]|0;
     $108 = $107&255;
     $109 = (($108) + 1)|0;
     _memcpy(($104|0),($105|0),($109|0))|0;
     $110 = $10;
     $111 = $14;
     $112 = $111 << 7;
     $113 = (($110) + ($112)|0);
     $114 = HEAP32[$8>>2]|0;
     $115 = $14;
     $116 = (($114) + ($115<<2)|0);
     HEAP32[$116>>2] = $113;
    }
    $117 = ((($8)) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ((($118)) + 24|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $13;
    $122 = 1 << $121;
    $123 = $120 & $122;
    $124 = ($123|0)!=(0);
    if (!($124)) {
     $125 = $13;
     $126 = 1 << $125;
     $127 = ((($8)) + 4|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($128)) + 24|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $130 | $126;
     HEAP32[$129>>2] = $131;
     $132 = HEAP32[$8>>2]|0;
     $133 = $13;
     $134 = (($132) + ($133<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $19 = $135;
     $136 = $10;
     $137 = $13;
     $138 = $137 << 7;
     $139 = (($136) + ($138)|0);
     $140 = $19;
     $141 = $19;
     $142 = HEAP8[$141>>0]|0;
     $143 = $142&255;
     $144 = (($143) + 1)|0;
     _memcpy(($139|0),($140|0),($144|0))|0;
     $145 = $10;
     $146 = $13;
     $147 = $146 << 7;
     $148 = (($145) + ($147)|0);
     $149 = HEAP32[$8>>2]|0;
     $150 = $13;
     $151 = (($149) + ($150<<2)|0);
     HEAP32[$151>>2] = $148;
    }
    $152 = HEAP32[$8>>2]|0;
    $153 = $14;
    _fcs_state_pop_col_top($152,$153);
    $154 = HEAP32[$8>>2]|0;
    $155 = $13;
    $156 = $17;
    _fcs_state_push_114($154,$155,$156);
    $157 = $6;
    $158 = $14;
    $159 = $13;
    _fcs_push_1card_seq($157,$158,$159);
    $160 = $4;
    $161 = $3;
    $162 = $6;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    $163 = (_fc_solve_sfs_check_state_end($161,$$byval_copy1,$8,$162)|0);
    $164 = $7;
    _fc_solve_derived_states_list_add_state($160,$163,$164);
   }
  } while(0);
  $165 = $14;
  $166 = (($165) + 1)|0;
  $14 = $166;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_atomic_move_card_to_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy1 = sp + 96|0;
 $$byval_copy = sp + 88|0;
 $8 = sp + 56|0;
 $13 = sp + 108|0;
 $3 = $0;
 $4 = $2;
 $25 = $3;
 $26 = HEAP32[$25>>2]|0;
 $5 = $26;
 $27 = $5;
 $28 = ((($27)) + 40|0);
 $6 = $28;
 $7 = 0;
 $29 = $5;
 $30 = HEAP32[$29>>2]|0;
 $9 = $30;
 $31 = $5;
 $32 = ((($31)) + 48|0);
 $10 = $32;
 $33 = $9;
 $34 = ((($33)) + 3|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 3;
 $11 = $37;
 $38 = $9;
 $39 = ((($38)) + 3|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = (2)?($41 >> 2):($41);
 $43 = $42 & 3;
 $12 = $43;
 $44 = $9;
 ;HEAP8[$13>>0]=HEAP8[$44>>0]|0;HEAP8[$13+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$44+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$44+3>>0]|0;
 $45 = $12;
 $46 = ($45|0)==(2);
 $47 = $46 ? 1 : 0;
 $14 = $47;
 $15 = 0;
 while(1) {
  $48 = $15;
  $49 = ((($13)) + 1|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = ($48|0)<($51|0);
  if (!($52)) {
   break;
  }
  $53 = HEAP32[$1>>2]|0;
  $54 = $15;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $16 = $56;
  $57 = $16;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $17 = $59;
  $60 = $17;
  $61 = $14;
  $62 = ($60|0)<=($61|0);
  L4: do {
   if (!($62)) {
    $63 = $16;
    $64 = $17;
    $65 = (($64) - 1)|0;
    $66 = (($65) + 1)|0;
    $67 = (($63) + ($66)|0);
    $68 = HEAP8[$67>>0]|0;
    $18 = $68;
    $19 = 0;
    while(1) {
     $69 = $19;
     $70 = ((($13)) + 1|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     $73 = ($69|0)<($72|0);
     if (!($73)) {
      break L4;
     }
     $74 = $19;
     $75 = $15;
     $76 = ($74|0)==($75|0);
     if (!($76)) {
      $77 = HEAP32[$1>>2]|0;
      $78 = $19;
      $79 = (($77) + ($78<<2)|0);
      $80 = HEAP32[$79>>2]|0;
      $20 = $80;
      $81 = $20;
      $82 = HEAP8[$81>>0]|0;
      $83 = $82&255;
      $21 = $83;
      $84 = $21;
      $85 = ($84|0)!=(0);
      if ($85) {
       $86 = $20;
       $87 = $20;
       $88 = HEAP8[$87>>0]|0;
       $89 = $88&255;
       $90 = (($89) - 1)|0;
       $91 = (($90) + 1)|0;
       $92 = (($86) + ($91)|0);
       $93 = HEAP8[$92>>0]|0;
       $22 = $93;
       $94 = $18;
       $95 = $22;
       $96 = $11;
       $97 = (_fcs_is_parent_card__helper($94,$95,$96)|0);
       if ($97) {
        $98 = $5;
        $99 = $6;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($98,$8,$$byval_copy,$99)|0);
        $100 = ((($8)) + 4|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ((($101)) + 24|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = $15;
        $105 = 1 << $104;
        $106 = $103 & $105;
        $107 = ($106|0)!=(0);
        if (!($107)) {
         $108 = $15;
         $109 = 1 << $108;
         $110 = ((($8)) + 4|0);
         $111 = HEAP32[$110>>2]|0;
         $112 = ((($111)) + 24|0);
         $113 = HEAP32[$112>>2]|0;
         $114 = $113 | $109;
         HEAP32[$112>>2] = $114;
         $115 = HEAP32[$8>>2]|0;
         $116 = $15;
         $117 = (($115) + ($116<<2)|0);
         $118 = HEAP32[$117>>2]|0;
         $23 = $118;
         $119 = $10;
         $120 = $15;
         $121 = $120 << 7;
         $122 = (($119) + ($121)|0);
         $123 = $23;
         $124 = $23;
         $125 = HEAP8[$124>>0]|0;
         $126 = $125&255;
         $127 = (($126) + 1)|0;
         _memcpy(($122|0),($123|0),($127|0))|0;
         $128 = $10;
         $129 = $15;
         $130 = $129 << 7;
         $131 = (($128) + ($130)|0);
         $132 = HEAP32[$8>>2]|0;
         $133 = $15;
         $134 = (($132) + ($133<<2)|0);
         HEAP32[$134>>2] = $131;
        }
        $135 = ((($8)) + 4|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ((($136)) + 24|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = $19;
        $140 = 1 << $139;
        $141 = $138 & $140;
        $142 = ($141|0)!=(0);
        if (!($142)) {
         $143 = $19;
         $144 = 1 << $143;
         $145 = ((($8)) + 4|0);
         $146 = HEAP32[$145>>2]|0;
         $147 = ((($146)) + 24|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = $148 | $144;
         HEAP32[$147>>2] = $149;
         $150 = HEAP32[$8>>2]|0;
         $151 = $19;
         $152 = (($150) + ($151<<2)|0);
         $153 = HEAP32[$152>>2]|0;
         $24 = $153;
         $154 = $10;
         $155 = $19;
         $156 = $155 << 7;
         $157 = (($154) + ($156)|0);
         $158 = $24;
         $159 = $24;
         $160 = HEAP8[$159>>0]|0;
         $161 = $160&255;
         $162 = (($161) + 1)|0;
         _memcpy(($157|0),($158|0),($162|0))|0;
         $163 = $10;
         $164 = $19;
         $165 = $164 << 7;
         $166 = (($163) + ($165)|0);
         $167 = HEAP32[$8>>2]|0;
         $168 = $19;
         $169 = (($167) + ($168<<2)|0);
         HEAP32[$169>>2] = $166;
        }
        $170 = HEAP32[$8>>2]|0;
        $171 = $15;
        _fcs_state_pop_col_top($170,$171);
        $172 = HEAP32[$8>>2]|0;
        $173 = $19;
        $174 = $18;
        _fcs_state_push_114($172,$173,$174);
        $175 = $6;
        $176 = $15;
        $177 = $19;
        _fcs_push_1card_seq($175,$176,$177);
        $178 = $4;
        $179 = $3;
        $180 = $6;
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        $181 = (_fc_solve_sfs_check_state_end($179,$$byval_copy1,$8,$180)|0);
        $182 = $7;
        _fc_solve_derived_states_list_add_state($178,$181,$182);
       }
      }
     }
     $183 = $19;
     $184 = (($183) + 1)|0;
     $19 = $184;
    }
   }
  } while(0);
  $185 = $15;
  $186 = (($185) + 1)|0;
  $15 = $186;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_atomic_move_card_to_freecell($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 72|0;
 $8 = sp + 40|0;
 $12 = sp + 92|0;
 $3 = $0;
 $4 = $2;
 $21 = $3;
 $22 = HEAP32[$21>>2]|0;
 $5 = $22;
 $23 = $5;
 $24 = ((($23)) + 40|0);
 $6 = $24;
 $7 = 0;
 $25 = $5;
 $26 = HEAP32[$25>>2]|0;
 $9 = $26;
 $27 = $5;
 $28 = ((($27)) + 48|0);
 $10 = $28;
 $29 = $9;
 $30 = ((($29)) + 3|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = (2)?($32 >> 2):($32);
 $34 = $33 & 3;
 $11 = $34;
 $35 = $9;
 ;HEAP8[$12>>0]=HEAP8[$35>>0]|0;HEAP8[$12+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$35+3>>0]|0;
 $36 = $3;
 $37 = ((($36)) + 524|0);
 $38 = HEAP8[$37>>0]|0;
 $13 = $38;
 $39 = $13;
 $40 = $39&255;
 $41 = ($40|0)==(0);
 if ($41) {
  STACKTOP = sp;return;
 }
 $42 = $11;
 $43 = ($42|0)==(2);
 $44 = $43 ? 1 : 0;
 $14 = $44;
 $15 = 0;
 while(1) {
  $45 = $15;
  $46 = HEAP8[$12>>0]|0;
  $47 = $46&255;
  $48 = ($45|0)<($47|0);
  if (!($48)) {
   break;
  }
  $49 = HEAP32[$1>>2]|0;
  $50 = ((($49)) + 40|0);
  $51 = $15;
  $52 = (($50) + ($51)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($54|0)==(0);
  if ($55) {
   break;
  }
  $56 = $15;
  $57 = (($56) + 1)|0;
  $15 = $57;
 }
 $16 = 0;
 while(1) {
  $58 = $16;
  $59 = ((($12)) + 1|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = ($58|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = HEAP32[$1>>2]|0;
  $64 = $16;
  $65 = (($63) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $17 = $66;
  $67 = $17;
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $18 = $69;
  $70 = $18;
  $71 = $14;
  $72 = ($70|0)<=($71|0);
  if (!($72)) {
   $73 = $17;
   $74 = $18;
   $75 = (($74) - 1)|0;
   $76 = (($75) + 1)|0;
   $77 = (($73) + ($76)|0);
   $78 = HEAP8[$77>>0]|0;
   $19 = $78;
   $79 = $5;
   $80 = $6;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
   (_fc_solve_sfs_check_state_begin($79,$8,$$byval_copy,$80)|0);
   $81 = ((($8)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($82)) + 24|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $16;
   $86 = 1 << $85;
   $87 = $84 & $86;
   $88 = ($87|0)!=(0);
   if (!($88)) {
    $89 = $16;
    $90 = 1 << $89;
    $91 = ((($8)) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ((($92)) + 24|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $94 | $90;
    HEAP32[$93>>2] = $95;
    $96 = HEAP32[$8>>2]|0;
    $97 = $16;
    $98 = (($96) + ($97<<2)|0);
    $99 = HEAP32[$98>>2]|0;
    $20 = $99;
    $100 = $10;
    $101 = $16;
    $102 = $101 << 7;
    $103 = (($100) + ($102)|0);
    $104 = $20;
    $105 = $20;
    $106 = HEAP8[$105>>0]|0;
    $107 = $106&255;
    $108 = (($107) + 1)|0;
    _memcpy(($103|0),($104|0),($108|0))|0;
    $109 = $10;
    $110 = $16;
    $111 = $110 << 7;
    $112 = (($109) + ($111)|0);
    $113 = HEAP32[$8>>2]|0;
    $114 = $16;
    $115 = (($113) + ($114<<2)|0);
    HEAP32[$115>>2] = $112;
   }
   $116 = HEAP32[$8>>2]|0;
   $117 = $16;
   _fcs_state_pop_col_top($116,$117);
   $118 = $19;
   $119 = HEAP32[$8>>2]|0;
   $120 = ((($119)) + 40|0);
   $121 = $15;
   $122 = (($120) + ($121)|0);
   HEAP8[$122>>0] = $118;
   $123 = $6;
   $124 = $16;
   $125 = $15;
   _fcs_move_stack_non_seq_push($123,1,$124,$125);
   $126 = $4;
   $127 = $3;
   $128 = $6;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
   $129 = (_fc_solve_sfs_check_state_end($127,$$byval_copy1,$8,$128)|0);
   $130 = $7;
   _fc_solve_derived_states_list_add_state($126,$129,$130);
  }
  $131 = $16;
  $132 = (($131) + 1)|0;
  $16 = $132;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_atomic_move_freecell_card_to_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 64|0;
 $8 = sp + 32|0;
 $12 = sp + 84|0;
 $3 = $0;
 $4 = $2;
 $20 = $3;
 $21 = HEAP32[$20>>2]|0;
 $5 = $21;
 $22 = $5;
 $23 = ((($22)) + 40|0);
 $6 = $23;
 $7 = 0;
 $24 = $5;
 $25 = HEAP32[$24>>2]|0;
 $9 = $25;
 $26 = $5;
 $27 = ((($26)) + 48|0);
 $10 = $27;
 $28 = $9;
 $29 = ((($28)) + 3|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $31 & 3;
 $11 = $32;
 $33 = $9;
 ;HEAP8[$12>>0]=HEAP8[$33>>0]|0;HEAP8[$12+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$33+3>>0]|0;
 $13 = 0;
 while(1) {
  $34 = $13;
  $35 = HEAP8[$12>>0]|0;
  $36 = $35&255;
  $37 = ($34|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = HEAP32[$1>>2]|0;
  $39 = ((($38)) + 40|0);
  $40 = $13;
  $41 = (($39) + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $14 = $42;
  $43 = $14;
  $44 = $43&255;
  $45 = ($44|0)==(0);
  L4: do {
   if (!($45)) {
    $15 = 0;
    while(1) {
     $46 = $15;
     $47 = ((($12)) + 1|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = ($46|0)<($49|0);
     if (!($50)) {
      break L4;
     }
     $51 = HEAP32[$1>>2]|0;
     $52 = $15;
     $53 = (($51) + ($52<<2)|0);
     $54 = HEAP32[$53>>2]|0;
     $16 = $54;
     $55 = $16;
     $56 = HEAP8[$55>>0]|0;
     $17 = $56;
     $57 = $17;
     $58 = ($57<<24>>24)!=(0);
     if ($58) {
      $59 = $16;
      $60 = $17;
      $61 = $60&255;
      $62 = (($61) - 1)|0;
      $63 = (($62) + 1)|0;
      $64 = (($59) + ($63)|0);
      $65 = HEAP8[$64>>0]|0;
      $18 = $65;
      $66 = $14;
      $67 = $18;
      $68 = $11;
      $69 = (_fcs_is_parent_card__helper($66,$67,$68)|0);
      if ($69) {
       $70 = $5;
       $71 = $6;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
       (_fc_solve_sfs_check_state_begin($70,$8,$$byval_copy,$71)|0);
       $72 = ((($8)) + 4|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ((($73)) + 24|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = $15;
       $77 = 1 << $76;
       $78 = $75 & $77;
       $79 = ($78|0)!=(0);
       if (!($79)) {
        $80 = $15;
        $81 = 1 << $80;
        $82 = ((($8)) + 4|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ((($83)) + 24|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = $85 | $81;
        HEAP32[$84>>2] = $86;
        $87 = HEAP32[$8>>2]|0;
        $88 = $15;
        $89 = (($87) + ($88<<2)|0);
        $90 = HEAP32[$89>>2]|0;
        $19 = $90;
        $91 = $10;
        $92 = $15;
        $93 = $92 << 7;
        $94 = (($91) + ($93)|0);
        $95 = $19;
        $96 = $19;
        $97 = HEAP8[$96>>0]|0;
        $98 = $97&255;
        $99 = (($98) + 1)|0;
        _memcpy(($94|0),($95|0),($99|0))|0;
        $100 = $10;
        $101 = $15;
        $102 = $101 << 7;
        $103 = (($100) + ($102)|0);
        $104 = HEAP32[$8>>2]|0;
        $105 = $15;
        $106 = (($104) + ($105<<2)|0);
        HEAP32[$106>>2] = $103;
       }
       $107 = HEAP32[$8>>2]|0;
       $108 = ((($107)) + 40|0);
       $109 = $13;
       $110 = (($108) + ($109)|0);
       HEAP8[$110>>0] = 0;
       $111 = HEAP32[$8>>2]|0;
       $112 = $15;
       $113 = $14;
       _fcs_state_push_114($111,$112,$113);
       $114 = $6;
       $115 = $13;
       $116 = $15;
       _fcs_move_stack_non_seq_push($114,2,$115,$116);
       $117 = $4;
       $118 = $3;
       $119 = $6;
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
       $120 = (_fc_solve_sfs_check_state_end($118,$$byval_copy1,$8,$119)|0);
       $121 = $7;
       _fc_solve_derived_states_list_add_state($117,$120,$121);
      }
     }
     $122 = $15;
     $123 = (($122) + 1)|0;
     $15 = $123;
    }
   }
  } while(0);
  $124 = $13;
  $125 = (($124) + 1)|0;
  $13 = $125;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_atomic_move_freecell_card_to_empty_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy2 = sp + 72|0;
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 56|0;
 $8 = sp + 24|0;
 $12 = sp + 84|0;
 $3 = $0;
 $4 = $2;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $5 = $18;
 $19 = $5;
 $20 = ((($19)) + 40|0);
 $6 = $20;
 $7 = 0;
 $21 = $5;
 $22 = HEAP32[$21>>2]|0;
 $9 = $22;
 $23 = $5;
 $24 = ((($23)) + 48|0);
 $10 = $24;
 $25 = $9;
 $26 = ((($25)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = (2)?($28 >> 2):($28);
 $30 = $29 & 3;
 $11 = $30;
 $31 = $9;
 ;HEAP8[$12>>0]=HEAP8[$31>>0]|0;HEAP8[$12+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$31+3>>0]|0;
 $32 = $11;
 $33 = ($32|0)==(2);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = $3;
 $35 = ((($34)) + 523|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = ($37|0)==(0);
 if ($38) {
  STACKTOP = sp;return;
 }
 $39 = ((($12)) + 1|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 $42 = (_find_empty_stack($$byval_copy,0,$41)|0);
 $13 = $42;
 $14 = 0;
 while(1) {
  $43 = $14;
  $44 = HEAP8[$12>>0]|0;
  $45 = $44&255;
  $46 = ($43|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = HEAP32[$1>>2]|0;
  $48 = ((($47)) + 40|0);
  $49 = $14;
  $50 = (($48) + ($49)|0);
  $51 = HEAP8[$50>>0]|0;
  $15 = $51;
  $52 = $15;
  $53 = $52&255;
  $54 = ($53|0)==(0);
  do {
   if (!($54)) {
    $55 = $11;
    $56 = ($55|0)==(1);
    if ($56) {
     $57 = $15;
     $58 = (_fcs_card_is_king($57)|0);
     if (!($58)) {
      break;
     }
    }
    $59 = $5;
    $60 = $6;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($59,$8,$$byval_copy1,$60)|0);
    $61 = ((($8)) + 4|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ((($62)) + 24|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $13;
    $66 = 1 << $65;
    $67 = $64 & $66;
    $68 = ($67|0)!=(0);
    if (!($68)) {
     $69 = $13;
     $70 = 1 << $69;
     $71 = ((($8)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ((($72)) + 24|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $74 | $70;
     HEAP32[$73>>2] = $75;
     $76 = HEAP32[$8>>2]|0;
     $77 = $13;
     $78 = (($76) + ($77<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $16 = $79;
     $80 = $10;
     $81 = $13;
     $82 = $81 << 7;
     $83 = (($80) + ($82)|0);
     $84 = $16;
     $85 = $16;
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&255;
     $88 = (($87) + 1)|0;
     _memcpy(($83|0),($84|0),($88|0))|0;
     $89 = $10;
     $90 = $13;
     $91 = $90 << 7;
     $92 = (($89) + ($91)|0);
     $93 = HEAP32[$8>>2]|0;
     $94 = $13;
     $95 = (($93) + ($94<<2)|0);
     HEAP32[$95>>2] = $92;
    }
    $96 = HEAP32[$8>>2]|0;
    $97 = ((($96)) + 40|0);
    $98 = $14;
    $99 = (($97) + ($98)|0);
    HEAP8[$99>>0] = 0;
    $100 = HEAP32[$8>>2]|0;
    $101 = $13;
    $102 = $15;
    _fcs_state_push_114($100,$101,$102);
    $103 = $6;
    $104 = $14;
    $105 = $13;
    _fcs_move_stack_non_seq_push($103,2,$104,$105);
    $106 = $4;
    $107 = $3;
    $108 = $6;
    ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
    $109 = (_fc_solve_sfs_check_state_end($107,$$byval_copy2,$8,$108)|0);
    $110 = $7;
    _fc_solve_derived_states_list_add_state($106,$109,$110);
   }
  } while(0);
  $111 = $14;
  $112 = (($111) + 1)|0;
  $14 = $112;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_raymond_prune($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 72|0;
 $$byval_copy = sp + 64|0;
 $6 = sp + 40|0;
 $9 = sp + 84|0;
 $3 = $0;
 $22 = $3;
 $23 = HEAP32[$22>>2]|0;
 $4 = $23;
 $24 = $4;
 $25 = ((($24)) + 40|0);
 $5 = $25;
 $26 = $4;
 $27 = HEAP32[$26>>2]|0;
 $7 = $27;
 $28 = $4;
 $29 = ((($28)) + 48|0);
 $8 = $29;
 $30 = $7;
 ;HEAP8[$9>>0]=HEAP8[$30>>0]|0;HEAP8[$9+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$30+3>>0]|0;
 $31 = $4;
 $32 = $5;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 (_fc_solve_sfs_check_state_begin($31,$6,$$byval_copy,$32)|0);
 $10 = 0;
 while(1) {
  $11 = 0;
  $12 = 0;
  while(1) {
   $33 = $12;
   $34 = ((($9)) + 1|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($33|0)<($36|0);
   if (!($37)) {
    break;
   }
   $38 = HEAP32[$6>>2]|0;
   $39 = $12;
   $40 = (($38) + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $13 = $41;
   $42 = $13;
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $14 = $44;
   $45 = $14;
   $46 = ($45|0)!=(0);
   if ($46) {
    $47 = $13;
    $48 = $14;
    $49 = (($48) - 1)|0;
    $50 = (($49) + 1)|0;
    $51 = (($47) + ($50)|0);
    $52 = HEAP8[$51>>0]|0;
    $15 = $52;
    $53 = $3;
    $54 = HEAP32[$6>>2]|0;
    $55 = $15;
    $56 = (_calc_foundation_to_put_card_on($53,$54,$55)|0);
    $16 = $56;
    $57 = $16;
    $58 = ($57|0)<(0);
    if (!($58)) {
     $11 = 1;
     $59 = ((($6)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ((($60)) + 24|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $12;
     $64 = 1 << $63;
     $65 = $62 & $64;
     $66 = ($65|0)!=(0);
     if (!($66)) {
      $67 = $12;
      $68 = 1 << $67;
      $69 = ((($6)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ((($70)) + 24|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = $72 | $68;
      HEAP32[$71>>2] = $73;
      $74 = HEAP32[$6>>2]|0;
      $75 = $12;
      $76 = (($74) + ($75<<2)|0);
      $77 = HEAP32[$76>>2]|0;
      $17 = $77;
      $78 = $8;
      $79 = $12;
      $80 = $79 << 7;
      $81 = (($78) + ($80)|0);
      $82 = $17;
      $83 = $17;
      $84 = HEAP8[$83>>0]|0;
      $85 = $84&255;
      $86 = (($85) + 1)|0;
      _memcpy(($81|0),($82|0),($86|0))|0;
      $87 = $8;
      $88 = $12;
      $89 = $88 << 7;
      $90 = (($87) + ($89)|0);
      $91 = HEAP32[$6>>2]|0;
      $92 = $12;
      $93 = (($91) + ($92<<2)|0);
      HEAP32[$93>>2] = $90;
     }
     $94 = HEAP32[$6>>2]|0;
     $95 = $12;
     _fcs_state_pop_col_top($94,$95);
     $96 = HEAP32[$6>>2]|0;
     $97 = ((($96)) + 48|0);
     $98 = $16;
     $99 = (($97) + ($98)|0);
     $100 = HEAP8[$99>>0]|0;
     $101 = (($100) + 1)<<24>>24;
     HEAP8[$99>>0] = $101;
     $102 = $5;
     $103 = $12;
     $104 = $16;
     _fcs_move_stack_non_seq_push($102,4,$103,$104);
    }
   }
   $105 = $12;
   $106 = (($105) + 1)|0;
   $12 = $106;
  }
  $18 = 0;
  while(1) {
   $107 = $18;
   $108 = HEAP8[$9>>0]|0;
   $109 = $108&255;
   $110 = ($107|0)<($109|0);
   if (!($110)) {
    break;
   }
   $111 = HEAP32[$6>>2]|0;
   $112 = ((($111)) + 40|0);
   $113 = $18;
   $114 = (($112) + ($113)|0);
   $115 = HEAP8[$114>>0]|0;
   $19 = $115;
   $116 = $19;
   $117 = $116&255;
   $118 = ($117|0)==(0);
   if (!($118)) {
    $119 = $3;
    $120 = HEAP32[$6>>2]|0;
    $121 = $19;
    $122 = (_calc_foundation_to_put_card_on($119,$120,$121)|0);
    $20 = $122;
    $123 = $20;
    $124 = ($123|0)<(0);
    if (!($124)) {
     $11 = 1;
     $125 = HEAP32[$6>>2]|0;
     $126 = ((($125)) + 40|0);
     $127 = $18;
     $128 = (($126) + ($127)|0);
     HEAP8[$128>>0] = 0;
     $129 = HEAP32[$6>>2]|0;
     $130 = ((($129)) + 48|0);
     $131 = $20;
     $132 = (($130) + ($131)|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = (($133) + 1)<<24>>24;
     HEAP8[$132>>0] = $134;
     $135 = $5;
     $136 = $18;
     $137 = $20;
     _fcs_move_stack_non_seq_push($135,5,$136,$137);
    }
   }
   $138 = $18;
   $139 = (($138) + 1)|0;
   $18 = $139;
  }
  $140 = $11;
  $141 = $140&1;
  if ($141) {
   $10 = 1;
  }
  $142 = $11;
  $143 = $142&1;
  if (!($143)) {
   break;
  }
 }
 $144 = $10;
 $145 = $144&1;
 if ($145) {
  $146 = $3;
  $147 = $5;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
  $148 = (_fc_solve_sfs_check_state_end($146,$$byval_copy1,$6,$147)|0);
  $21 = $148;
  $149 = $21;
  $150 = ((($149)) + 56|0);
  $151 = ((($150)) + 18|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&255;
  $154 = $153 | 16;
  $155 = $154&255;
  HEAP8[$151>>0] = $155;
  $156 = $21;
  $2 = $156;
  $157 = $2;
  STACKTOP = sp;return ($157|0);
 } else {
  $2 = 0;
  $157 = $2;
  STACKTOP = sp;return ($157|0);
 }
 return (0)|0;
}
function _calc_foundation_to_put_card_on($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $17 = $4;
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $7 = $19;
 $20 = $7;
 $21 = ((($20)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 & 3;
 $8 = $24;
 $25 = $6;
 $26 = $25&255;
 $27 = (2)?($26 >> 2):($26);
 $9 = $27;
 $28 = $6;
 $29 = $28&255;
 $30 = $29 & 3;
 $10 = $30;
 $31 = $9;
 $32 = (($31) - 1)|0;
 $11 = $32;
 $33 = $9;
 $34 = (($33) - 2)|0;
 $12 = $34;
 $13 = 0;
 L1: while(1) {
  $35 = $13;
  $36 = $7;
  $37 = ((($36)) + 2|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = ($35|0)<($39|0);
  if (!($40)) {
   label = 14;
   break;
  }
  $41 = $13;
  $42 = $41 << 2;
  $43 = $10;
  $44 = $42 | $43;
  $14 = $44;
  $45 = $5;
  $46 = ((($45)) + 48|0);
  $47 = $14;
  $48 = (($46) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $11;
  $52 = ($50|0)==($51|0);
  L4: do {
   if ($52) {
    $53 = $8;
    $54 = ($53|0)==(1);
    if ($54) {
     label = 5;
     break L1;
    }
    $56 = $7;
    $57 = ((($56)) + 2|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = $59 << 2;
    $15 = $60;
    $16 = 0;
    while(1) {
     $61 = $16;
     $62 = $15;
     $63 = ($61>>>0)<($62>>>0);
     if (!($63)) {
      label = 12;
      break L1;
     }
     $64 = $5;
     $65 = ((($64)) + 48|0);
     $66 = $16;
     $67 = (($65) + ($66)|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = $68&255;
     $70 = $12;
     $71 = $8;
     $72 = ($71|0)==(2);
     if ($72) {
      $82 = 0;
     } else {
      $73 = $16;
      $74 = $73 & 1;
      $75 = $6;
      $76 = $75&255;
      $77 = $76 & 3;
      $78 = $77 & 1;
      $79 = ($74|0)==($78|0);
      $80 = $79&1;
      $82 = $80;
     }
     $81 = (($70) - ($82))|0;
     $83 = ($69|0)<($81|0);
     if ($83) {
      break L4;
     }
     $84 = $16;
     $85 = (($84) + 1)|0;
     $16 = $85;
    }
   }
  } while(0);
  $87 = $13;
  $88 = (($87) + 1)|0;
  $13 = $88;
 }
 if ((label|0) == 5) {
  $55 = $14;
  $3 = $55;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 12) {
  $86 = $14;
  $3 = $86;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 }
 else if ((label|0) == 14) {
  $3 = -1;
  $89 = $3;
  STACKTOP = sp;return ($89|0);
 }
 return (0)|0;
}
function _fc_solve__hll_ms_rand__get_singleton() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8880|0);
}
function _fc_solve__hll_ms_rand__init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (_atoll($5)|0);
 $7 = (getTempRet0() | 0);
 $8 = $4;
 $9 = $8;
 HEAP32[$9>>2] = $6;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = $4;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + 4)|0;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = $18;
 $20 = $19;
 HEAP32[$20>>2] = $14;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $17;
 $23 = $4;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (_microsoft_rand__calc_init_seedx_116($25,$28)|0);
 $30 = (getTempRet0() | 0);
 $31 = $2;
 $32 = ((($31)) + 8|0);
 $33 = $32;
 $34 = $33;
 HEAP32[$34>>2] = $29;
 $35 = (($33) + 4)|0;
 $36 = $35;
 HEAP32[$36>>2] = $30;
 STACKTOP = sp;return;
}
function _microsoft_rand__calc_init_seedx_116($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(1);
 $14 = ($9>>>0)<(0);
 $15 = ($12|0)==(1);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $18 = $2;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (_i64Subtract(($20|0),($23|0),0,1)|0);
 $25 = (getTempRet0() | 0);
 $26 = $17 ? $20 : $24;
 $17 ? $23 : $25;
 setTempRet0((0) | 0);
 STACKTOP = sp;return ($26|0);
}
function _fc_solve__hll_ms_rand__mod_rand($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 8|0);
 $6 = $2;
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_microsoft_rand__game_num_rand_117($5,$9,$12)|0);
 $14 = $3;
 $15 = (($13>>>0) % ($14>>>0))&-1;
 STACKTOP = sp;return ($15|0);
}
function _microsoft_rand__game_num_rand_117($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $4 = $0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = $1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $2;
 $11 = $5;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)<(1);
 $18 = ($13>>>0)<(0);
 $19 = ($16|0)==(1);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $22 = $4;
 if ($21) {
  $23 = (_microsoft_rand_rand_118($22)|0);
  $6 = $23;
  $24 = $5;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + 4)|0;
  $28 = $27;
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)<(0);
  $31 = ($26>>>0)<(2147483648);
  $32 = ($29|0)==(0);
  $33 = $32 & $31;
  $34 = $30 | $33;
  $35 = $6;
  $36 = $35 | 32768;
  $37 = $34 ? $35 : $36;
  $3 = $37;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 } else {
  $38 = (_microsoft_rand_randp_119($22)|0);
  $39 = (($38) + 1)|0;
  $3 = $39;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _microsoft_rand_rand_118($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (___muldi3(($5|0),($8|0),214013,0)|0);
 $10 = (getTempRet0() | 0);
 $11 = (_i64Add(($9|0),($10|0),2531011,0)|0);
 $12 = (getTempRet0() | 0);
 $13 = $1;
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = $1;
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_bitshift64Ashr(($21|0),($24|0),16)|0);
 $26 = (getTempRet0() | 0);
 $27 = $25 & 32767;
 STACKTOP = sp;return ($27|0);
}
function _microsoft_rand_randp_119($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (___muldi3(($5|0),($8|0),214013,0)|0);
 $10 = (getTempRet0() | 0);
 $11 = (_i64Add(($9|0),($10|0),2531011,0)|0);
 $12 = (getTempRet0() | 0);
 $13 = $1;
 $14 = $13;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = $1;
 $19 = $18;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_bitshift64Ashr(($21|0),($24|0),16)|0);
 $26 = (getTempRet0() | 0);
 $27 = $25 & 65535;
 STACKTOP = sp;return ($27|0);
}
function _freecell_solver_user_stringify_move_ptr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$10+3>>0]|0;
 _freecell_solver_user_stringify_move_w_state($8,$9,$$byval_copy,$11);
 STACKTOP = sp;return;
}
function _fc_solve_free_soft_thread_by_depth_move_array($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $2 = $8;
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $3 = $11;
 $4 = 0;
 while(1) {
  $12 = $4;
  $13 = $3;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $2;
  $16 = $4;
  $17 = (($15) + (($16*12)|0)|0);
  $18 = ((($17)) + 4|0);
  _moves_order__free($18);
  $19 = $4;
  $20 = (($19) + 1)|0;
  $4 = $20;
 }
 $21 = $1;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = 0;
 $23 = $2;
 _free($23);
 $24 = $1;
 $25 = ((($24)) + 8|0);
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = 0;
 STACKTOP = sp;return;
}
function _moves_order__free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $4 = 0;
 while(1) {
  $10 = $4;
  $11 = $3;
  $12 = ($10>>>0)<($11>>>0);
  $13 = $2;
  if (!($12)) {
   break;
  }
  $14 = $4;
  $15 = (($13) + (($14*224)|0)|0);
  $16 = HEAP32[$15>>2]|0;
  _free($16);
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 _free($13);
 $19 = $1;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = $1;
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_foreach_soft_thread($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $11 = $6;
  $12 = $3;
  $13 = ((($12)) + 148|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11>>>0)<=($14>>>0);
  if (!($15)) {
   label = 11;
   break;
  }
  $16 = $6;
  $17 = $3;
  $18 = ((($17)) + 148|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16>>>0)<($19>>>0);
  $21 = $3;
  if ($20) {
   $22 = ((($21)) + 152|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $6;
   $25 = (($23) + (($24*1356)|0)|0);
   $7 = $25;
  } else {
   $26 = ((($21)) + 160|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)!=(0|0);
   if (!($28)) {
    label = 11;
    break;
   }
   $29 = $3;
   $30 = ((($29)) + 160|0);
   $31 = HEAP32[$30>>2]|0;
   $7 = $31;
  }
  $32 = $7;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $8 = $34;
  $35 = $8;
  $9 = $35;
  $36 = $8;
  $37 = $7;
  $38 = ((($37)) + 1344|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($36) + (($39*552)|0)|0);
  $10 = $40;
  while(1) {
   $41 = $9;
   $42 = $10;
   $43 = ($41>>>0)<($42>>>0);
   if (!($43)) {
    break;
   }
   $44 = $9;
   $45 = $4;
   $46 = $5;
   _soft_thread_run_cb($44,$45,$46);
   $47 = $9;
   $48 = ((($47)) + 552|0);
   $9 = $48;
  }
  $49 = $6;
  $50 = (($49) + 1)|0;
  $6 = $50;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function _soft_thread_run_cb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 switch ($7|0) {
 case 0:  {
  $8 = $3;
  _soft_thread_clean_soft_dfs($8);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $9 = $3;
  _fc_solve_free_instance_soft_thread_callback($9);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $10 = $5;
  $11 = $3;
  $12 = ((($11)) + 8|0);
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  _accumulate_tests_by_ptr($10,$15);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  HEAP32[$6>>2] = 0;
  $16 = $3;
  $17 = ((($16)) + 8|0);
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 4|0);
  _accumulate_tests_by_ptr($6,$20);
  $21 = HEAP32[$6>>2]|0;
  $22 = $5;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($21|0)==($23|0);
  $25 = $3;
  $26 = ((($25)) + 522|0);
  $27 = $24&1;
  HEAP8[$26>>0] = $27;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _soft_thread_clean_soft_dfs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 24|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $2 = $9;
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $2;
 $3 = $12;
 $13 = $3;
 $14 = $1;
 $15 = ((($14)) + 24|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($13) + (($17*244)|0)|0);
 $4 = $18;
 $19 = $3;
 $20 = $1;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($19) + (($22*244)|0)|0);
 $5 = $23;
 while(1) {
  $24 = $3;
  $25 = $4;
  $26 = ($24>>>0)<($25>>>0);
  if (!($26)) {
   break;
  }
  $27 = $3;
  $28 = ((($27)) + 4|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  _free($30);
  $31 = $3;
  $32 = ((($31)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  _free($33);
  $34 = $3;
  $35 = ((($34)) + 244|0);
  $3 = $35;
 }
 while(1) {
  $36 = $3;
  $37 = $5;
  $38 = ($36>>>0)<($37>>>0);
  if (!($38)) {
   break;
  }
  $39 = $3;
  $40 = ((($39)) + 4|0);
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0|0);
  $44 = $43 ^ 1;
  $45 = $44 ^ 1;
  if ($45) {
   $46 = $3;
   $47 = ((($46)) + 4|0);
   $48 = ((($47)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   _free($49);
   $50 = $3;
   $51 = ((($50)) + 28|0);
   $52 = HEAP32[$51>>2]|0;
   _free($52);
  }
  $53 = $3;
  $54 = ((($53)) + 244|0);
  $3 = $54;
 }
 $55 = $2;
 _free($55);
 $56 = $1;
 $57 = ((($56)) + 24|0);
 $58 = ((($57)) + 4|0);
 HEAP32[$58>>2] = 0;
 $59 = $1;
 $60 = ((($59)) + 24|0);
 HEAP32[$60>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_free_instance_soft_thread_callback($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 _st_free_pq($3);
 $4 = $1;
 _fcs_free_moves_list($4);
 $5 = $1;
 _fc_solve_free_soft_thread_by_depth_move_array($5);
 $6 = $1;
 $7 = ((($6)) + 544|0);
 $8 = HEAP32[$7>>2]|0;
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 _fc_solve_pats__recycle_soft_thread($11);
 $12 = $2;
 _fc_solve_pats__destroy_soft_thread($12);
 $13 = $2;
 _free($13);
 $14 = $1;
 $15 = ((($14)) + 544|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _accumulate_tests_by_ptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $10;
 $11 = $4;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + (($13*224)|0)|0);
 $5 = $14;
 while(1) {
  $15 = $4;
  $16 = $5;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $4;
  $19 = HEAP32[$18>>2]|0;
  $6 = $19;
  $20 = $6;
  $21 = $4;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($20) + ($23<<2)|0);
  $7 = $24;
  while(1) {
   $25 = $6;
   $26 = $7;
   $27 = ($25>>>0)<($26>>>0);
   if (!($27)) {
    break;
   }
   $28 = $6;
   $29 = HEAP32[$28>>2]|0;
   $30 = 1 << $29;
   $31 = $2;
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 | $30;
   HEAP32[$31>>2] = $33;
   $34 = $6;
   $35 = ((($34)) + 4|0);
   $6 = $35;
  }
  $36 = $4;
  $37 = ((($36)) + 224|0);
  $4 = $37;
 }
 STACKTOP = sp;return;
}
function _st_free_pq($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = ((($3)) + 32|0);
 $5 = ((($4)) + 216|0);
 $6 = ((($5)) + 16|0);
 _fc_solve_PQueueFree($6);
 STACKTOP = sp;return;
}
function _fcs_free_moves_list($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = ((($9)) + 32|0);
 $11 = ((($10)) + 208|0);
 $12 = HEAP32[$11>>2]|0;
 _free($12);
 $13 = $1;
 $14 = ((($13)) + 24|0);
 $15 = ((($14)) + 32|0);
 $16 = ((($15)) + 208|0);
 HEAP32[$16>>2] = 0;
 $17 = $1;
 $18 = ((($17)) + 24|0);
 $19 = ((($18)) + 20|0);
 $2 = $19;
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $3 = $21;
 $4 = 0;
 while(1) {
  $22 = $4;
  $23 = $3;
  $24 = ($22>>>0)<($23>>>0);
  $25 = $2;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  if (!($24)) {
   break;
  }
  $28 = $4;
  $29 = (($27) + (($28*12)|0)|0);
  $30 = ((($29)) + 4|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0|0);
  if ($33) {
   $34 = $2;
   $35 = ((($34)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $4;
   $38 = (($36) + (($37*12)|0)|0);
   $39 = ((($38)) + 4|0);
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $5 = $41;
   $42 = $2;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $4;
   $46 = (($44) + (($45*12)|0)|0);
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $6 = $48;
   $7 = 0;
   while(1) {
    $49 = $7;
    $50 = $6;
    $51 = ($49>>>0)<($50>>>0);
    $52 = $5;
    if (!($51)) {
     break;
    }
    $53 = $7;
    $54 = (($52) + (($53*224)|0)|0);
    $55 = HEAP32[$54>>2]|0;
    _free($55);
    $56 = $7;
    $57 = (($56) + 1)|0;
    $7 = $57;
   }
   _free($52);
  }
  $58 = $4;
  $59 = (($58) + 1)|0;
  $4 = $59;
 }
 _free($27);
 $60 = $2;
 $61 = ((($60)) + 4|0);
 HEAP32[$61>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_pats__recycle_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _fc_solve_pats__free_buckets($2);
 $3 = $1;
 _fc_solve_pats__free_clusters($3);
 $4 = $1;
 _fc_solve_pats__free_blocks($4);
 $5 = $1;
 $6 = ((($5)) + 37668|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $16 = $1;
  _fc_solve_pats__soft_thread_reset_helper($16);
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 37668|0);
 $11 = HEAP32[$10>>2]|0;
 _free($11);
 $12 = $1;
 $13 = ((($12)) + 37668|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 37672|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 _fc_solve_pats__soft_thread_reset_helper($16);
 STACKTOP = sp;return;
}
function _fc_solve_pats__destroy_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 37684|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $1;
 $6 = ((($5)) + 37684|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 37680|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 37676|0);
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function _fc_solve_pats__free_buckets($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(4093);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = ((($7)) + 2876|0);
  $9 = $2;
  $10 = (($8) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
  while(1) {
   $12 = $3;
   $13 = ($12|0)!=(0|0);
   if (!($13)) {
    break;
   }
   $14 = $3;
   $15 = ((($14)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $4 = $16;
   $17 = $1;
   $18 = $3;
   $19 = HEAP32[$18>>2]|0;
   $20 = $3;
   $21 = HEAP32[$20>>2]|0;
   $22 = (_strlen($21)|0);
   $23 = (($22) + 1)|0;
   $24 = $23;
   _fc_solve_pats__release($17,$19,$24);
   $25 = $1;
   $26 = $3;
   _fc_solve_pats__release($25,$26,16);
   $27 = $4;
   $3 = $27;
  }
  $28 = $1;
  $29 = ((($28)) + 2876|0);
  $30 = $2;
  $31 = (($29) + ($30<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = $2;
  $33 = (($32) + 1)|0;
  $2 = $33;
 }
 STACKTOP = sp;return;
}
function _fc_solve_pats__free_clusters($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(499);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = ((($7)) + 35660|0);
  $9 = $2;
  $10 = (($8) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
  while(1) {
   $12 = $3;
   $13 = ($12|0)!=(0|0);
   if (!($13)) {
    break;
   }
   $14 = $3;
   $15 = ((($14)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $4 = $16;
   $17 = $1;
   $18 = $3;
   _fc_solve_pats__release($17,$18,12);
   $19 = $4;
   $3 = $19;
  }
  $20 = $1;
  $21 = ((($20)) + 35660|0);
  $22 = $2;
  $23 = (($21) + ($22<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = $2;
  $25 = (($24) + 1)|0;
  $2 = $25;
 }
 STACKTOP = sp;return;
}
function _fc_solve_pats__free_blocks($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 37656|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 while(1) {
  $7 = $2;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
  $12 = $1;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  _fc_solve_pats__release($12,$14,131072);
  $15 = $1;
  $16 = $2;
  _fc_solve_pats__release($15,$16,16);
  $17 = $3;
  $2 = $17;
 }
 $18 = $1;
 $19 = ((($18)) + 37656|0);
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_pats__soft_thread_reset_helper($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 816|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 2788|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 2796|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 35644|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 35656|0);
 HEAP32[$11>>2] = 1;
 $12 = $1;
 $13 = ((($12)) + 37664|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 37660|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 37676|0);
 HEAP32[$17>>2] = 0;
 $18 = $1;
 $19 = ((($18)) + 37688|0);
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_pats__release($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 _free($6);
 $7 = $5;
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($7))|0;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _fc_solve_PQueueFree($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_instance__init_hard_thread($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 HEAP32[$6>>2] = $5;
 $7 = $3;
 $8 = ((($7)) + 1344|0);
 HEAP32[$8>>2] = 0;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = $3;
 (_fc_solve_new_soft_thread($11)|0);
 $12 = $3;
 $13 = ((($12)) + 1352|0);
 HEAP32[$13>>2] = 0;
 $14 = $3;
 $15 = ((($14)) + 1336|0);
 HEAP32[$15>>2] = 0;
 $16 = $3;
 $17 = ((($16)) + 1328|0);
 HEAP32[$17>>2] = 0;
 $18 = $3;
 _fc_solve_reset_hard_thread($18);
 $19 = $3;
 $20 = ((($19)) + 20|0);
 $21 = $2;
 $22 = ((($21)) + 292|0);
 $23 = HEAP32[$22>>2]|0;
 _fc_solve_compact_allocator_init($20,$23);
 $24 = $3;
 $25 = ((($24)) + 40|0);
 _fcs_move_stack__new($4);
 ;HEAP32[$25>>2]=HEAP32[$4>>2]|0;HEAP32[$25+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function _fc_solve_new_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 192|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(32);
 if ($8) {
  $1 = 0;
  $30 = $1;
  STACKTOP = sp;return ($30|0);
 } else {
  $9 = $2;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = ((($12)) + 1344|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  $16 = ($15*552)|0;
  $17 = (_realloc($11,$16)|0);
  $18 = $2;
  $19 = ((($18)) + 4|0);
  HEAP32[$19>>2] = $17;
  $20 = $2;
  $21 = $2;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = ((($24)) + 1344|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = (($23) + (($26*552)|0)|0);
  $3 = $28;
  _fc_solve_init_soft_thread($20,$28);
  $29 = $3;
  $1 = $29;
  $30 = $1;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _fc_solve_reset_hard_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = 2147483647;
 $6 = $1;
 $7 = ((($6)) + 1348|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function _fcs_move_stack__new($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(64)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _fc_solve_init_soft_thread($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(576|0);
 $4 = sp;
 $5 = sp + 552|0;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 _memset(($4|0),0,552)|0;
 $7 = $2;
 HEAP32[$4>>2] = $7;
 $8 = ((($4)) + 4|0);
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 192|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$11>>2] = $13;
 HEAP32[$8>>2] = $12;
 $14 = ((($4)) + 8|0);
 HEAP32[$14>>2] = 1;
 $15 = ((($14)) + 4|0);
 $16 = (_malloc(12)|0);
 HEAP32[$15>>2] = $16;
 $17 = ((($4)) + 16|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($4)) + 24|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($18)) + 8|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($18)) + 16|0);
 HEAP32[$20>>2] = 24;
 $21 = ((($18)) + 20|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($18)) + 32|0);
 $23 = ((($22)) + 216|0);
 $24 = ((($23)) + 16|0);
 $25 = ((($24)) + 16|0);
 $26 = ((($25)) + 160|0);
 dest=$26; src=8896; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $27 = ((($4)) + 528|0);
 HEAP32[$27>>2] = 50;
 $28 = ((($4)) + 532|0);
 dest=$28; src=15232; stop=dest+10|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $29 = ((($4)) + 542|0);
 HEAP8[$29>>0] = 0;
 $30 = ((($4)) + 548|0);
 HEAP8[$30>>0] = 0;
 $31 = ((($4)) + 549|0);
 HEAP8[$31>>0] = 0;
 $32 = ((($4)) + 550|0);
 HEAP8[$32>>0] = 0;
 _memcpy(($6|0),($4|0),552)|0;
 $33 = $3;
 $34 = ((($33)) + 8|0);
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$5>>2] = 2147483647;
 $37 = ((($5)) + 4|0);
 $38 = $3;
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 164|0);
 _moves_order_dup($37,$41);
 ;HEAP32[$36>>2]=HEAP32[$5>>2]|0;HEAP32[$36+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$5+8>>2]|0;
 $42 = $3;
 _fc_solve_reset_soft_thread($42);
 STACKTOP = sp;return;
}
function _moves_order_dup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $2 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 $8 = $3;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 4|0);
 $10 = $2;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $14 = $13 & -16;
 $15 = (($14) + 16)|0;
 $16 = ($15*224)|0;
 $17 = (_memdup($12,$16)|0);
 HEAP32[$9>>2] = $17;
 $5 = 0;
 while(1) {
  $18 = $5;
  $19 = $3;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = ((($4)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $5;
  $24 = (($22) + (($23*224)|0)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($4)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + (($28*224)|0)|0);
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 & -16;
  $33 = (($32) + 16)|0;
  $34 = $33<<2;
  $35 = (_memdup($25,$34)|0);
  $36 = ((($4)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + (($38*224)|0)|0);
  HEAP32[$39>>2] = $35;
  $40 = $5;
  $41 = (($40) + 1)|0;
  $5 = $41;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function _fc_solve_reset_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 520|0);
 HEAP8[$3>>0] = 0;
 $4 = $1;
 $5 = ((($4)) + 521|0);
 HEAP8[$5>>0] = 0;
 STACKTOP = sp;return;
}
function _memdup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = (_malloc($6)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $10 = $5;
  $11 = $3;
  $12 = $4;
  _memcpy(($10|0),($11|0),($12|0))|0;
  $13 = $5;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _fc_solve_trace_solution($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1520|0);
 $$byval_copy2 = sp + 1508|0;
 $$byval_copy1 = sp + 1504|0;
 $$byval_copy = sp + 1500|0;
 $2 = sp + 1496|0;
 $3 = sp + 1456|0;
 $6 = sp + 1478|0;
 $9 = sp + 1356|0;
 $10 = sp;
 $19 = sp + 1472|0;
 $24 = sp + 1304|0;
 $26 = sp + 1296|0;
 $1 = $0;
 ;HEAP8[$2>>0]=HEAP8[15242>>0]|0;HEAP8[$2+1>>0]=HEAP8[15242+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[15242+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[15242+3>>0]|0;
 HEAP8[$2>>0] = 12;
 $31 = $1;
 _instance_free_solution_moves($31);
 $32 = $1;
 $33 = ((($32)) + 284|0);
 _fcs_move_stack__new($3);
 ;HEAP32[$33>>2]=HEAP32[$3>>2]|0;HEAP32[$33+4>>2]=HEAP32[$3+4>>2]|0;
 $34 = $1;
 $35 = ((($34)) + 284|0);
 $4 = $35;
 $36 = $1;
 $37 = ((($36)) + 296|0);
 $38 = HEAP32[$37>>2]|0;
 $5 = $38;
 $39 = $5;
 $40 = ((($39)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(2);
 if (!($42)) {
  $208 = $1;
  $209 = ((($208)) + 280|0);
  $210 = HEAP32[$209>>2]|0;
  $27 = $210;
  while(1) {
   $211 = $27;
   $212 = ((($211)) + 56|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = ($213|0)!=(0|0);
   $215 = $27;
   $216 = ((($215)) + 56|0);
   $217 = ((($216)) + 18|0);
   $218 = HEAP8[$217>>0]|0;
   $219 = $218&255;
   $220 = $219 | 1;
   $221 = $220&255;
   HEAP8[$217>>0] = $221;
   if (!($214)) {
    break;
   }
   $222 = $4;
   ;HEAP8[$$byval_copy1>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$2+3>>0]|0;
   _fcs_move_stack_push_122($222,$$byval_copy1);
   $223 = $27;
   $224 = ((($223)) + 56|0);
   $225 = ((($224)) + 4|0);
   $226 = HEAP32[$225>>2]|0;
   $28 = $226;
   $227 = $28;
   $228 = HEAP32[$227>>2]|0;
   $29 = $228;
   $229 = $28;
   $230 = ((($229)) + 4|0);
   $231 = HEAP32[$230>>2]|0;
   $232 = (($231) - 1)|0;
   $30 = $232;
   while(1) {
    $233 = $30;
    $234 = ($233|0)>=(0);
    if (!($234)) {
     break;
    }
    $235 = $4;
    $236 = $29;
    $237 = $30;
    $238 = (($236) + ($237<<2)|0);
    ;HEAP8[$$byval_copy2>>0]=HEAP8[$238>>0]|0;HEAP8[$$byval_copy2+1>>0]=HEAP8[$238+1>>0]|0;HEAP8[$$byval_copy2+2>>0]=HEAP8[$238+2>>0]|0;HEAP8[$$byval_copy2+3>>0]=HEAP8[$238+3>>0]|0;
    _fcs_move_stack_push_122($235,$$byval_copy2);
    $239 = $30;
    $240 = (($239) + -1)|0;
    $30 = $240;
   }
   $241 = $27;
   $242 = ((($241)) + 56|0);
   $243 = HEAP32[$242>>2]|0;
   $27 = $243;
  }
  STACKTOP = sp;return;
 }
 _fc_solve_init_locs($6);
 $43 = $5;
 $44 = ((($43)) + 544|0);
 $45 = HEAP32[$44>>2]|0;
 $7 = $45;
 $46 = $7;
 $47 = ((($46)) + 37672|0);
 $48 = HEAP32[$47>>2]|0;
 $8 = $48;
 $49 = $1;
 $50 = ((($49)) + 196|0);
 dest=$9; src=$50; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $51 = ((($9)) + 56|0);
 $52 = ((($51)) + 24|0);
 HEAP32[$52>>2] = 0;
 $53 = $1;
 $54 = ((($53)) + 1|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $11 = $56;
 $57 = $1;
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $12 = $59;
 $13 = $9;
 $14 = 0;
 while(1) {
  $60 = $14;
  $61 = $11;
  $62 = ($60|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = ((($9)) + 56|0);
  $64 = ((($63)) + 24|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $14;
  $67 = 1 << $66;
  $68 = $65 & $67;
  $69 = ($68|0)!=(0);
  if (!($69)) {
   $70 = $14;
   $71 = 1 << $70;
   $72 = ((($9)) + 56|0);
   $73 = ((($72)) + 24|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 | $71;
   HEAP32[$73>>2] = $75;
   $76 = $14;
   $77 = (($9) + ($76<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $15 = $78;
   $79 = $14;
   $80 = $79 << 7;
   $81 = (($10) + ($80)|0);
   $82 = $15;
   $83 = $15;
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $86 = (($85) + 1)|0;
   _memcpy(($81|0),($82|0),($86|0))|0;
   $87 = $14;
   $88 = $87 << 7;
   $89 = (($10) + ($88)|0);
   $90 = $14;
   $91 = (($9) + ($90<<2)|0);
   HEAP32[$91>>2] = $89;
  }
  $92 = $14;
  $93 = (($92) + 1)|0;
  $14 = $93;
 }
 $94 = $8;
 $95 = $4;
 $96 = ((($95)) + 4|0);
 HEAP32[$96>>2] = $94;
 $97 = $4;
 $98 = HEAP32[$97>>2]|0;
 $99 = $8;
 $100 = $99<<2;
 $101 = (_realloc($98,$100)|0);
 $102 = $4;
 HEAP32[$102>>2] = $101;
 $103 = $7;
 $104 = ((($103)) + 37668|0);
 $105 = HEAP32[$104>>2]|0;
 $16 = $105;
 $17 = 0;
 while(1) {
  $106 = $17;
  $107 = $8;
  $108 = ($106>>>0)<($107>>>0);
  if (!($108)) {
   break;
  }
  $109 = $16;
  $110 = HEAP8[$109>>0]|0;
  $18 = $110;
  ;HEAP8[$19>>0]=HEAP8[15242>>0]|0;HEAP8[$19+1>>0]=HEAP8[15242+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[15242+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[15242+3>>0]|0;
  $111 = $16;
  $112 = ((($111)) + 4|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  L22: do {
   switch ($114|0) {
   case 2:  {
    $20 = 0;
    while(1) {
     $115 = $20;
     $116 = $11;
     $117 = ($115|0)<($116|0);
     if (!($117)) {
      break;
     }
     $118 = $20;
     $119 = (($9) + ($118<<2)|0);
     $120 = HEAP32[$119>>2]|0;
     $21 = $120;
     $121 = $21;
     $122 = HEAP8[$121>>0]|0;
     $123 = $122&255;
     $22 = $123;
     $124 = $22;
     $125 = ($124|0)!=(0);
     if ($125) {
      $126 = $18;
      $127 = $126&255;
      $128 = $21;
      $129 = $22;
      $130 = (($129) - 1)|0;
      $131 = (($130) + 1)|0;
      $132 = (($128) + ($131)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($127|0)==($134|0);
      if ($135) {
       break;
      }
     }
     $136 = $20;
     $137 = (($136) + 1)|0;
     $20 = $137;
    }
    $23 = 0;
    while(1) {
     $138 = $23;
     $139 = $12;
     $140 = ($138|0)<($139|0);
     if (!($140)) {
      break L22;
     }
     $141 = ((($9)) + 40|0);
     $142 = $23;
     $143 = (($141) + ($142)|0);
     $144 = HEAP8[$143>>0]|0;
     $145 = $144&255;
     $146 = ($145|0)==(0);
     if ($146) {
      break;
     }
     $153 = $23;
     $154 = (($153) + 1)|0;
     $23 = $154;
    }
    HEAP8[$19>>0] = 1;
    $147 = $20;
    $148 = $147&255;
    $149 = ((($19)) + 1|0);
    HEAP8[$149>>0] = $148;
    $150 = $23;
    $151 = $150&255;
    $152 = ((($19)) + 2|0);
    HEAP8[$152>>0] = $151;
    break;
   }
   case 1:  {
    $155 = $18;
    $156 = $12;
    $157 = $11;
    _find_card_src_string($24,$9,$155,$156,$157);
    $158 = ((($24)) + 4|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==(0);
    if ($160) {
     HEAP8[$19>>0] = 5;
    } else {
     HEAP8[$19>>0] = 4;
    }
    $161 = HEAP32[$24>>2]|0;
    $162 = $161&255;
    $163 = ((($19)) + 1|0);
    HEAP8[$163>>0] = $162;
    $164 = $18;
    $165 = $164&255;
    $166 = $165 & 3;
    $167 = $166&255;
    $168 = ((($19)) + 2|0);
    HEAP8[$168>>0] = $167;
    break;
   }
   default: {
    $169 = $16;
    $170 = ((($169)) + 6|0);
    $171 = HEAP8[$170>>0]|0;
    $25 = $171;
    $172 = $13;
    $173 = $18;
    $174 = $12;
    $175 = $11;
    _find_card_src_string($26,$172,$173,$174,$175);
    $176 = ((($26)) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($177|0)==(0);
    if ($178) {
     HEAP8[$19>>0] = 2;
    } else {
     HEAP8[$19>>0] = 0;
     $179 = ((($19)) + 3|0);
     HEAP8[$179>>0] = 1;
    }
    $180 = HEAP32[$26>>2]|0;
    $181 = $180&255;
    $182 = ((($19)) + 1|0);
    HEAP8[$182>>0] = $181;
    $183 = $25;
    $184 = $183&255;
    $185 = ($184|0)==(0);
    $186 = $13;
    if ($185) {
     $187 = $11;
     $188 = (_find_empty_col($186,$187)|0);
     $193 = $188;
    } else {
     $189 = $25;
     $190 = $11;
     $191 = (_find_col_card($186,$189,$190)|0);
     $193 = $191;
    }
    $192 = $193&255;
    $194 = ((($19)) + 2|0);
    HEAP8[$194>>0] = $192;
   }
   }
  } while(0);
  $195 = $12;
  $196 = $11;
  ;HEAP8[$$byval_copy>>0]=HEAP8[$19>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$19+3>>0]|0;
  _fc_solve_apply_move($9,$6,$$byval_copy,$195,$196);
  $197 = $4;
  $198 = HEAP32[$197>>2]|0;
  $199 = $8;
  $200 = (($199) - 1)|0;
  $201 = $17;
  $202 = (($200) - ($201))|0;
  $203 = (($198) + ($202<<2)|0);
  ;HEAP8[$203>>0]=HEAP8[$19>>0]|0;HEAP8[$203+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$203+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$203+3>>0]=HEAP8[$19+3>>0]|0;
  $204 = $17;
  $205 = (($204) + 1)|0;
  $17 = $205;
  $206 = $16;
  $207 = ((($206)) + 8|0);
  $16 = $207;
 }
 STACKTOP = sp;return;
}
function _instance_free_solution_moves($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 284|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 284|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = $1;
 $10 = ((($9)) + 284|0);
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_init_locs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $4 = $2;
  $5 = ($4|0)<(10);
  if (!($5)) {
   break;
  }
  $6 = $2;
  $7 = $6&255;
  $8 = $1;
  $9 = $2;
  $10 = (($8) + ($9)|0);
  HEAP8[$10>>0] = $7;
  $11 = $2;
  $12 = (($11) + 1)|0;
  $2 = $12;
 }
 $3 = 0;
 while(1) {
  $13 = $3;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $3;
  $16 = $15&255;
  $17 = $1;
  $18 = ((($17)) + 10|0);
  $19 = $3;
  $20 = (($18) + ($19)|0);
  HEAP8[$20>>0] = $16;
  $21 = $3;
  $22 = (($21) + 1)|0;
  $3 = $22;
 }
 STACKTOP = sp;return;
}
function _find_card_src_string($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $8;
 $13 = (_find_col_card($10,$11,$12)|0);
 $9 = $13;
 $14 = $9;
 $15 = ($14|0)<(0);
 if ($15) {
  $16 = $5;
  $17 = $6;
  $18 = $7;
  $19 = (_find_fc_card($16,$17,$18)|0);
  HEAP32[$0>>2] = $19;
  $20 = ((($0)) + 4|0);
  HEAP32[$20>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $21 = $9;
  HEAP32[$0>>2] = $21;
  $22 = ((($0)) + 4|0);
  HEAP32[$22>>2] = 1;
  STACKTOP = sp;return;
 }
}
function _find_empty_col($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $4;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $3;
  $10 = $5;
  $11 = (($9) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = ($14|0)==(0);
  $16 = $5;
  if ($15) {
   label = 4;
   break;
  }
  $17 = (($16) + 1)|0;
  $5 = $17;
 }
 if ((label|0) == 4) {
  $2 = $16;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $2 = -1;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _find_col_card($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $6;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   label = 7;
   break;
  }
  $13 = $4;
  $14 = $7;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $8 = $16;
  $17 = $8;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $9 = $19;
  $20 = $9;
  $21 = ($20|0)>(0);
  if ($21) {
   $22 = $8;
   $23 = $9;
   $24 = (($23) - 1)|0;
   $25 = (($24) + 1)|0;
   $26 = (($22) + ($25)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $5;
   $30 = $29&255;
   $31 = ($28|0)==($30|0);
   if ($31) {
    label = 5;
    break;
   }
  }
  $33 = $7;
  $34 = (($33) + 1)|0;
  $7 = $34;
 }
 if ((label|0) == 5) {
  $32 = $7;
  $3 = $32;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 else if ((label|0) == 7) {
  $3 = -1;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _fcs_move_stack_push_122($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $3 = $7;
 $8 = $3;
 $9 = $8 & 15;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $14 = (($13) + 16)|0;
  $15 = $14<<2;
  $16 = (_realloc($12,$15)|0);
  $17 = $2;
  HEAP32[$17>>2] = $16;
 }
 $18 = $2;
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 $21 = (($20) - 1)|0;
 $22 = (($19) + ($21<<2)|0);
 ;HEAP8[$22>>0]=HEAP8[$1>>0]|0;HEAP8[$22+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$22+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$22+3>>0]=HEAP8[$1+3>>0]|0;
 STACKTOP = sp;return;
}
function _find_fc_card($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $6;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $4;
  $12 = ((($11)) + 40|0);
  $13 = $7;
  $14 = (($12) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $5;
  $18 = $17&255;
  $19 = ($16|0)==($18|0);
  $20 = $7;
  if ($19) {
   label = 4;
   break;
  }
  $21 = (($20) + 1)|0;
  $7 = $21;
 }
 if ((label|0) == 4) {
  $3 = $20;
  $22 = $3;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  $3 = -1;
  $22 = $3;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _fc_solve_finish_instance($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 32|0);
 _fc_solve_hash_free($3);
 $4 = $1;
 $5 = ((($4)) + 80|0);
 _fc_solve_hash_free($5);
 $6 = $1;
 $7 = ((($6)) + 144|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 _fc_solve_foreach_soft_thread($8,0,0);
 STACKTOP = sp;return;
}
function _fc_solve_hash_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 _fc_solve_compact_allocator_finish($3);
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 _free($5);
 $6 = $1;
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _freecell_solver_user_alloc() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(3928)|0);
 $0 = $1;
 $2 = $0;
 _user_initialize($2);
 $3 = $0;
 STACKTOP = sp;return ($3|0);
}
function _freecell_solver_user_apply_preset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 28|0;
 $3 = $0;
 $4 = $1;
 $13 = $3;
 $6 = $13;
 $14 = $4;
 $15 = (_fc_solve_get_preset_by_name($14,$5)|0);
 $7 = $15;
 $16 = $7;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $7;
  $2 = $18;
  $49 = $2;
  STACKTOP = sp;return ($49|0);
 }
 $19 = $6;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $8 = $21;
 $22 = $6;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $9 = $24;
 L5: while(1) {
  $25 = $9;
  $26 = $8;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   label = 11;
   break;
  }
  $28 = $9;
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $10 = $30;
  $31 = $9;
  $32 = HEAP32[$31>>2]|0;
  $11 = $32;
  while(1) {
   $33 = $11;
   $34 = $10;
   $35 = ($33>>>0)<($34>>>0);
   if (!($35)) {
    break;
   }
   $36 = $11;
   $37 = HEAP32[$5>>2]|0;
   $38 = (_fc_solve_apply_preset_by_ptr($36,$37)|0);
   $12 = $38;
   $39 = $12;
   $40 = ($39|0)!=(0);
   if ($40) {
    label = 8;
    break L5;
   }
   $42 = $11;
   $43 = ((($42)) + 400|0);
   $11 = $43;
  }
  $44 = $9;
  $45 = ((($44)) + 40|0);
  $9 = $45;
 }
 if ((label|0) == 8) {
  $41 = $12;
  $2 = $41;
  $49 = $2;
  STACKTOP = sp;return ($49|0);
 }
 else if ((label|0) == 11) {
  $46 = $6;
  $47 = ((($46)) + 3704|0);
  $48 = HEAP32[$5>>2]|0;
  dest=$47; src=$48; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $2 = 0;
  $49 = $2;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _freecell_solver_user_limit_iterations_long($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 12|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _freecell_solver_user_limit_iterations($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _freecell_solver_user_limit_iterations_long($4,$5);
 STACKTOP = sp;return;
}
function _freecell_solver_user_limit_current_instance_iterations($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = (_curr_inst($5)|0);
 $7 = ((($6)) + 36|0);
 HEAP32[$7>>2] = $4;
 STACKTOP = sp;return;
}
function _freecell_solver_user_set_depth_tests_order($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $11 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $5;
 $15 = (_api_soft_thread($14)|0);
 $9 = $15;
 $16 = $6;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = (___strdup(13075)|0);
  $19 = $8;
  HEAP32[$19>>2] = $18;
  $4 = 1;
  $131 = $4;
  STACKTOP = sp;return ($131|0);
 }
 $10 = 0;
 $20 = $6;
 $21 = ($20|0)>(0);
 if ($21) {
  while(1) {
   $22 = $10;
   $23 = $9;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) - 1)|0;
   $27 = ($22|0)==($26|0);
   if ($27) {
    break;
   }
   $28 = $6;
   $29 = $9;
   $30 = ((($29)) + 8|0);
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $10;
   $34 = (($32) + (($33*12)|0)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($28|0)<=($35|0);
   if ($36) {
    break;
   }
   $37 = $10;
   $38 = (($37) + 1)|0;
   $10 = $38;
  }
  $39 = $10;
  $40 = (($39) + 1)|0;
  $10 = $40;
 }
 $41 = $10;
 $42 = $9;
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($41|0)==($44|0);
 if ($45) {
  $46 = $9;
  $47 = ((($46)) + 8|0);
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $9;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 1)|0;
  HEAP32[$51>>2] = $53;
  $54 = ($53*12)|0;
  $55 = (_realloc($49,$54)|0);
  $56 = $9;
  $57 = ((($56)) + 8|0);
  $58 = ((($57)) + 4|0);
  HEAP32[$58>>2] = $55;
  $59 = $9;
  $60 = ((($59)) + 8|0);
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $10;
  $64 = (($62) + (($63*12)|0)|0);
  $65 = ((($64)) + 4|0);
  HEAP32[$65>>2] = 0;
  $66 = $9;
  $67 = ((($66)) + 8|0);
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $10;
  $71 = (($69) + (($70*12)|0)|0);
  $72 = ((($71)) + 4|0);
  $73 = ((($72)) + 4|0);
  HEAP32[$73>>2] = 0;
 }
 $74 = $10;
 $75 = ($74>>>0)>(0);
 if ($75) {
  $76 = $6;
  $77 = $9;
  $78 = ((($77)) + 8|0);
  $79 = ((($78)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $10;
  $82 = (($81) - 1)|0;
  $83 = (($80) + (($82*12)|0)|0);
  HEAP32[$83>>2] = $76;
 }
 $84 = $9;
 $85 = ((($84)) + 8|0);
 $86 = ((($85)) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $10;
 $89 = (($87) + (($88*12)|0)|0);
 HEAP32[$89>>2] = 2147483647;
 $90 = $9;
 $91 = ((($90)) + 8|0);
 $92 = ((($91)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $10;
 $95 = (($93) + (($94*12)|0)|0);
 $96 = ((($95)) + 4|0);
 $97 = $7;
 $98 = (_fc_solve_apply_moves_order($96,$97,$11)|0);
 $12 = $98;
 $99 = HEAP8[$11>>0]|0;
 $100 = $99 << 24 >> 24;
 $101 = ($100|0)!=(0);
 if ($101) {
  $102 = (___strdup($11)|0);
  $104 = $102;
 } else {
  $104 = 0;
 }
 $103 = $8;
 HEAP32[$103>>2] = $104;
 $105 = $10;
 $106 = (($105) + 1)|0;
 $13 = $106;
 while(1) {
  $107 = $13;
  $108 = $9;
  $109 = ((($108)) + 8|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($107>>>0)<($110>>>0);
  $112 = $9;
  $113 = ((($112)) + 8|0);
  $114 = ((($113)) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  if (!($111)) {
   break;
  }
  $116 = $13;
  $117 = (($115) + (($116*12)|0)|0);
  $118 = ((($117)) + 4|0);
  _moves_order__free_206($118);
  $119 = $13;
  $120 = (($119) + 1)|0;
  $13 = $120;
 }
 $121 = $10;
 $122 = (($121) + 1)|0;
 $123 = $9;
 $124 = ((($123)) + 8|0);
 HEAP32[$124>>2] = $122;
 $125 = ($122*12)|0;
 $126 = (_realloc($115,$125)|0);
 $127 = $9;
 $128 = ((($127)) + 8|0);
 $129 = ((($128)) + 4|0);
 HEAP32[$129>>2] = $126;
 $130 = $12;
 $4 = $130;
 $131 = $4;
 STACKTOP = sp;return ($131|0);
}
function _freecell_solver_user_set_tests_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_freecell_solver_user_set_depth_tests_order($6,0,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _freecell_solver_user_resume_solution($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_resume_solution($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _freecell_solver_user_solve_board($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $16 = $3;
 $5 = $16;
 $17 = $5;
 $18 = ((($17)) + 1652|0);
 $19 = $4;
 $20 = (_duplicate_string_while_adding_a_trailing_newline($18,$19)|0);
 if (!($20)) {
  $2 = 4;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $21 = $5;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $5;
 HEAP32[$24>>2] = $23;
 $25 = $5;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $6 = $27;
 $28 = $5;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $7 = $30;
 while(1) {
  $31 = $7;
  $32 = $6;
  $33 = ($31>>>0)<($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = $7;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $8 = $36;
  $37 = $7;
  $38 = HEAP32[$37>>2]|0;
  $9 = $38;
  while(1) {
   $39 = $9;
   $40 = $8;
   $41 = ($39>>>0)<($40>>>0);
   if (!($41)) {
    break;
   }
   $42 = $9;
   $43 = $5;
   $44 = ((($43)) + 3704|0);
   (_fc_solve_apply_preset_by_ptr($42,$44)|0);
   $45 = $9;
   $46 = ((($45)) + 400|0);
   $9 = $46;
  }
  $47 = $7;
  $48 = ((($47)) + 40|0);
  $7 = $48;
 }
 $49 = $5;
 $50 = (_user_compile_all_flares_plans($49)|0);
 $51 = ($50|0)!=(0);
 if ($51) {
  $2 = 12;
  $84 = $2;
  STACKTOP = sp;return ($84|0);
 }
 $52 = $5;
 $53 = ((($52)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $10 = $54;
 $55 = $5;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $11 = $57;
 while(1) {
  $58 = $11;
  $59 = $10;
  $60 = ($58>>>0)<($59>>>0);
  if (!($60)) {
   break;
  }
  $61 = $11;
  $62 = ((($61)) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  $12 = $63;
  $64 = $11;
  $65 = ((($64)) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $13 = $66;
  $14 = 0;
  while(1) {
   $67 = $14;
   $68 = $12;
   $69 = ($67>>>0)<($68>>>0);
   if (!($69)) {
    break;
   }
   $70 = $13;
   $71 = $14;
   $72 = (($70) + (($71*20)|0)|0);
   $15 = $72;
   $73 = $15;
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $15;
   $77 = ((($76)) + 8|0);
   HEAP32[$77>>2] = $75;
   $78 = $14;
   $79 = (($78) + 1)|0;
   $14 = $79;
  }
  $80 = $11;
  $81 = ((($80)) + 40|0);
  $11 = $81;
 }
 $82 = $3;
 $83 = (_freecell_solver_user_resume_solution($82)|0);
 $2 = $83;
 $84 = $2;
 STACKTOP = sp;return ($84|0);
}
function _freecell_solver_user_get_next_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 28|0;
 $8 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $5 = $9;
 $10 = $5;
 $11 = ((($10)) + 324|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = $5;
  $15 = ((($14)) + 324|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(5);
  if (!($17)) {
   $2 = 1;
   $48 = $2;
   STACKTOP = sp;return ($48|0);
  }
 }
 $18 = $5;
 $19 = (_calc_moves_flare($18)|0);
 $6 = $19;
 $20 = $6;
 $21 = ((($20)) + 348|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $6;
 $24 = ((($23)) + 352|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22|0)==($25|0);
 if ($26) {
  $2 = 1;
  $48 = $2;
  STACKTOP = sp;return ($48|0);
 } else {
  $27 = $5;
  $28 = (_user_obj($27)|0);
  $7 = $28;
  $29 = $5;
  $30 = ((($29)) + 120|0);
  $31 = $4;
  $32 = $6;
  $33 = ((($32)) + 352|0);
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $6;
  $37 = ((($36)) + 348|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$37>>2] = $39;
  $40 = (($35) + ($38<<2)|0);
  ;HEAP8[$31>>0]=HEAP8[$40>>0]|0;HEAP8[$31+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$40+3>>0]|0;
  ;HEAP8[$8>>0]=HEAP8[$31>>0]|0;HEAP8[$8+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$8+3>>0]=HEAP8[$31+3>>0]|0;
  $41 = $7;
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $7;
  $45 = ((($44)) + 1|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  ;HEAP8[$$byval_copy>>0]=HEAP8[$8>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$8+3>>0]|0;
  _fc_solve_apply_move($30,0,$$byval_copy,$43,$47);
  $2 = 0;
  $48 = $2;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _freecell_solver_user_current_state_stringify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $12 = $5;
 $10 = $12;
 $13 = $10;
 $14 = (_user_obj($13)|0);
 $11 = $14;
 $15 = $6;
 $16 = $10;
 $17 = ((($16)) + 120|0);
 $18 = $10;
 $19 = ((($18)) + 306|0);
 $20 = $11;
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $11;
 $24 = ((($23)) + 1|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $11;
 $28 = ((($27)) + 2|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $7;
 $32 = ($31|0)!=(0);
 $33 = $8;
 $34 = ($33|0)!=(0);
 $35 = $9;
 $36 = ($35|0)!=(0);
 _fc_solve_state_as_string($15,$17,$19,$22,$26,$30,$32,$34,$36);
 STACKTOP = sp;return;
}
function _freecell_solver_user_current_state_as_string($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = (_malloc(1000)|0);
 $8 = $9;
 $10 = $4;
 $11 = $8;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 _freecell_solver_user_current_state_stringify($10,$11,$12,$13,$14);
 $15 = $8;
 STACKTOP = sp;return ($15|0);
}
function _freecell_solver_user_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 _user_free_resources($4);
 $5 = $2;
 _free($5);
 STACKTOP = sp;return;
}
function _freecell_solver_user_get_current_depth($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_api_soft_thread($2)|0);
 $4 = ((($3)) + 24|0);
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _freecell_solver_user_set_patsolve_x_param($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = (_api_soft_thread($10)|0);
 $12 = ((($11)) + 544|0);
 $13 = HEAP32[$12>>2]|0;
 $9 = $13;
 $14 = $9;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $16 = (___strdup(12657)|0);
  $17 = $8;
  HEAP32[$17>>2] = $16;
  $4 = 1;
  $30 = $4;
  STACKTOP = sp;return ($30|0);
 }
 $18 = $6;
 $19 = ($18|0)<(0);
 $20 = $6;
 $21 = ($20|0)>=(11);
 $or$cond = $19 | $21;
 if ($or$cond) {
  $22 = (___strdup(12688)|0);
  $23 = $8;
  HEAP32[$23>>2] = $22;
  $4 = 2;
  $30 = $4;
  STACKTOP = sp;return ($30|0);
 } else {
  $24 = $7;
  $25 = $9;
  $26 = ((($25)) + 2800|0);
  $27 = $6;
  $28 = (($26) + ($27<<2)|0);
  HEAP32[$28>>2] = $24;
  $29 = $9;
  _fc_solve_pats__set_cut_off($29);
  $4 = 0;
  $30 = $4;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_patsolve_y_param($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = (_api_soft_thread($10)|0);
 $12 = ((($11)) + 544|0);
 $13 = HEAP32[$12>>2]|0;
 $9 = $13;
 $14 = $9;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $16 = (___strdup(12657)|0);
  $17 = $8;
  HEAP32[$17>>2] = $16;
  $4 = 1;
  $30 = $4;
  STACKTOP = sp;return ($30|0);
 }
 $18 = $6;
 $19 = ($18|0)<(0);
 $20 = $6;
 $21 = ($20|0)>=(3);
 $or$cond = $19 | $21;
 if ($or$cond) {
  $22 = (___strdup(12688)|0);
  $23 = $8;
  HEAP32[$23>>2] = $22;
  $4 = 2;
  $30 = $4;
  STACKTOP = sp;return ($30|0);
 } else {
  $24 = $7;
  $25 = $9;
  $26 = ((($25)) + 2800|0);
  $27 = ((($26)) + 48|0);
  $28 = $6;
  $29 = (($27) + ($28<<3)|0);
  HEAPF64[$29>>3] = $24;
  $4 = 0;
  $30 = $4;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_solving_method($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = $2;
  _freecell_solver_user_set_solving_method($9,1);
  STACKTOP = sp;return;
 }
 $4 = 1;
 $10 = $2;
 $11 = (_api_soft_thread($10)|0);
 $5 = $11;
 $12 = $3;
 switch ($12|0) {
 case 2:  {
  $13 = $5;
  $14 = ((($13)) + 549|0);
  HEAP8[$14>>0] = 0;
  break;
 }
 case 3:  {
  $15 = $5;
  $16 = ((($15)) + 549|0);
  HEAP8[$16>>0] = 1;
  break;
 }
 case 1: case 5:  {
  $4 = 0;
  $17 = $3;
  $18 = ($17|0)==(5);
  $19 = $5;
  $20 = ((($19)) + 548|0);
  $21 = $18&1;
  HEAP8[$20>>0] = $21;
  break;
 }
 case 6:  {
  $4 = 2;
  $22 = $5;
  $23 = ((($22)) + 544|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   $26 = (_malloc(37696)|0);
   $27 = $5;
   $28 = ((($27)) + 544|0);
   HEAP32[$28>>2] = $26;
   $6 = $26;
   $29 = $6;
   $30 = $5;
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP32[$31>>2]|0;
   _fc_solve_pats__init_soft_thread($29,$32);
   $33 = $6;
   $34 = ((($33)) + 35648|0);
   HEAP8[$34>>0] = 1;
   $35 = $6;
   $36 = ((($35)) + 2800|0);
   dest=$36; src=4560; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $37 = $6;
   _fc_solve_pats__set_cut_off($37);
  }
  break;
 }
 default: {
 }
 }
 $38 = $4;
 $39 = $5;
 $40 = ((($39)) + 16|0);
 HEAP32[$40>>2] = $38;
 STACKTOP = sp;return;
}
function _freecell_solver_user_set_num_freecells($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)<(0);
 $8 = $4;
 $9 = ($8|0)>(8);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $2 = 1;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 } else {
  $10 = $3;
  $5 = $10;
  $11 = $4;
  $12 = $11&255;
  $13 = $5;
  $14 = ((($13)) + 3704|0);
  $15 = ((($14)) + 12|0);
  HEAP8[$15>>0] = $12;
  $16 = $5;
  _apply_game_params_for_all_instances($16);
  $2 = 0;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _freecell_solver_user_get_num_freecells($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 3704|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 STACKTOP = sp;return ($6|0);
}
function _freecell_solver_user_set_num_stacks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)<(0);
 $8 = $4;
 $9 = ($8|0)>(10);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $2 = 1;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 } else {
  $10 = $3;
  $5 = $10;
  $11 = $4;
  $12 = $11&255;
  $13 = $5;
  $14 = ((($13)) + 3704|0);
  $15 = ((($14)) + 12|0);
  $16 = ((($15)) + 1|0);
  HEAP8[$16>>0] = $12;
  $17 = $5;
  _apply_game_params_for_all_instances($17);
  $2 = 0;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _freecell_solver_user_get_num_stacks($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 3704|0);
 $4 = ((($3)) + 12|0);
 $5 = ((($4)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 STACKTOP = sp;return ($7|0);
}
function _freecell_solver_user_set_num_decks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $5 = $6;
 $7 = $4;
 $8 = ($7|0)<(0);
 $9 = $4;
 $10 = ($9|0)>(2);
 $or$cond = $8 | $10;
 if ($or$cond) {
  $2 = 1;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 } else {
  $11 = $4;
  $12 = $11&255;
  $13 = $5;
  $14 = ((($13)) + 3704|0);
  $15 = ((($14)) + 12|0);
  $16 = ((($15)) + 2|0);
  HEAP8[$16>>0] = $12;
  $17 = $5;
  _apply_game_params_for_all_instances($17);
  $2 = 0;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_game($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $8;
 $16 = $9;
 $17 = (_freecell_solver_user_set_num_freecells($15,$16)|0);
 $18 = ($17|0)!=(0);
 do {
  if ($18) {
   $7 = 1;
  } else {
   $19 = $8;
   $20 = $10;
   $21 = (_freecell_solver_user_set_num_stacks($19,$20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    $7 = 2;
    break;
   }
   $23 = $8;
   $24 = $11;
   $25 = (_freecell_solver_user_set_num_decks($23,$24)|0);
   $26 = ($25|0)!=(0);
   if ($26) {
    $7 = 3;
    break;
   }
   $27 = $8;
   $28 = $12;
   $29 = (_freecell_solver_user_set_sequences_are_built_by_type($27,$28)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $7 = 4;
    break;
   }
   $31 = $8;
   $32 = $13;
   $33 = (_freecell_solver_user_set_sequence_move($31,$32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    $7 = 5;
    break;
   }
   $35 = $8;
   $36 = $14;
   $37 = (_freecell_solver_user_set_empty_stacks_filled_by($35,$36)|0);
   $38 = ($37|0)!=(0);
   if ($38) {
    $7 = 6;
    break;
   } else {
    $7 = 0;
    break;
   }
  }
 } while(0);
 $39 = $7;
 STACKTOP = sp;return ($39|0);
}
function _freecell_solver_user_get_num_times_long($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 372|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = (_user_obj($12)|0);
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($11|0)>($15|0);
 $17 = $2;
 if ($16) {
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 372|0);
  $21 = HEAP32[$20>>2]|0;
  $26 = $21;
 } else {
  $22 = (_user_obj($17)|0);
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $26 = $24;
 }
 $25 = (($6) + ($26))|0;
 $27 = $2;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($25) - ($29))|0;
 STACKTOP = sp;return ($30|0);
}
function _freecell_solver_user_get_num_times($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_freecell_solver_user_get_num_times_long($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _freecell_solver_user_get_limit_iterations($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_active_obj($2)|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _freecell_solver_user_get_moves_left($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $3 = $5;
 $6 = $3;
 $7 = ((($6)) + 324|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $3;
  $11 = (_calc_moves_flare($10)|0);
  $4 = $11;
  $12 = $4;
  $13 = ((($12)) + 352|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $4;
  $16 = ((($15)) + 348|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($14) - ($17))|0;
  $1 = $18;
  $19 = $1;
  STACKTOP = sp;return ($19|0);
 } else {
  $1 = 0;
  $19 = $1;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_solution_optimization($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)!=(0);
 $6 = $2;
 $7 = (_active_obj($6)|0);
 $8 = ((($7)) + 136|0);
 $9 = $5&1;
 HEAP8[$8>>0] = $9;
 STACKTOP = sp;return;
}
function _freecell_solver_user_stringify_move_w_state($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $3;
 $8 = $4;
 $7 = $8;
 $9 = $5;
 $10 = $7;
 $11 = ((($10)) + 120|0);
 $12 = $6;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$2>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$2+3>>0]|0;
 _fc_solve_move_to_string_w_state($9,$11,$$byval_copy,$12);
 STACKTOP = sp;return;
}
function _freecell_solver_user_move_to_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 8|0;
 $2 = $1;
 $4 = (_malloc(256)|0);
 $3 = $4;
 $5 = $3;
 $6 = $2;
 $7 = ($6|0)==(2);
 $8 = $2;
 $9 = $7 ? 1 : $8;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$0>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$0+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$0+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$0+3>>0]|0;
 _fc_solve_move_to_string_w_state($5,0,$$byval_copy,$9);
 $10 = $3;
 STACKTOP = sp;return ($10|0);
}
function _freecell_solver_user_move_to_string_w_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $3 = $0;
 $4 = $2;
 $6 = (_malloc(256)|0);
 $5 = $6;
 $7 = $3;
 $8 = $5;
 $9 = $4;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$1>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$1+3>>0]|0;
 _freecell_solver_user_stringify_move_w_state($7,$8,$$byval_copy,$9);
 $10 = $5;
 STACKTOP = sp;return ($10|0);
}
function _freecell_solver_user_limit_depth($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return;
}
function _freecell_solver_user_get_max_num_freecells() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 8;
}
function _freecell_solver_user_get_max_num_stacks() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 10;
}
function _freecell_solver_user_get_max_num_decks() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function _freecell_solver_user_get_invalid_state_error_into_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $8 = sp + 28|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $6 = $9;
 $10 = $6;
 $11 = ((($10)) + 332|0);
 $12 = HEAP32[$11>>2]|0;
 $7 = $12;
 $13 = $7;
 switch ($13|0) {
 case 0:  {
  $14 = $4;
  HEAP8[$14>>0] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $15 = $4;
  (_strcpy($15,12189)|0);
  STACKTOP = sp;return;
  break;
 }
 case 2: case 1:  {
  $16 = $6;
  $17 = ((($16)) + 336|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $5;
  $20 = ($19|0)!=(0);
  _fc_solve_card_stringify($18,$8,$20);
  $21 = $4;
  $22 = $7;
  $23 = ($22|0)==(2);
  $24 = $23 ? 12233 : 12257;
  HEAP32[$vararg_buffer>>2] = $24;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  (_sprintf($21,12282,$vararg_buffer)|0);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $25 = $4;
  (_strcpy($25,12288)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _freecell_solver_user_get_invalid_state_error_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_malloc(80)|0);
 $4 = $5;
 $6 = $2;
 $7 = $4;
 $8 = $3;
 _freecell_solver_user_get_invalid_state_error_into_string($6,$7,$8);
 $9 = $4;
 STACKTOP = sp;return ($9|0);
}
function _freecell_solver_user_set_sequences_are_built_by_type($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)<(0);
 $8 = $4;
 $9 = ($8|0)>(2);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $2 = 1;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 } else {
  $10 = $3;
  $5 = $10;
  $11 = $5;
  $12 = ((($11)) + 3704|0);
  $13 = ((($12)) + 12|0);
  $14 = ((($13)) + 3|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 & -4;
  $18 = $17&255;
  HEAP8[$14>>0] = $18;
  $19 = $4;
  $20 = $5;
  $21 = ((($20)) + 3704|0);
  $22 = ((($21)) + 12|0);
  $23 = ((($22)) + 3|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 | $19;
  $27 = $26&255;
  HEAP8[$23>>0] = $27;
  $28 = $5;
  _apply_game_params_for_all_instances($28);
  $2 = 0;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_sequence_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $4;
 $7 = ((($6)) + 3704|0);
 $8 = ((($7)) + 12|0);
 $9 = ((($8)) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & -17;
 $13 = $12&255;
 HEAP8[$9>>0] = $13;
 $14 = $3;
 $15 = ($14|0)!=(0);
 $16 = $15&1;
 $17 = $16 << 4;
 $18 = $4;
 $19 = ((($18)) + 3704|0);
 $20 = ((($19)) + 12|0);
 $21 = ((($20)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 | $17;
 $25 = $24&255;
 HEAP8[$21>>0] = $25;
 $26 = $4;
 _apply_game_params_for_all_instances($26);
 STACKTOP = sp;return 0;
}
function _freecell_solver_user_set_empty_stacks_filled_by($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6|0)<(0);
 $8 = $4;
 $9 = ($8|0)>(2);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $2 = 1;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 } else {
  $10 = $3;
  $5 = $10;
  $11 = $5;
  $12 = ((($11)) + 3704|0);
  $13 = ((($12)) + 12|0);
  $14 = ((($13)) + 3|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 & -13;
  $18 = $17&255;
  HEAP8[$14>>0] = $18;
  $19 = $4;
  $20 = $19 << 2;
  $21 = $5;
  $22 = ((($21)) + 3704|0);
  $23 = ((($22)) + 12|0);
  $24 = ((($23)) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 | $20;
  $28 = $27&255;
  HEAP8[$24>>0] = $28;
  $29 = $5;
  _apply_game_params_for_all_instances($29);
  $2 = 0;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_a_star_weight($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (_api_soft_thread($8)|0);
 $7 = $9;
 $10 = $5;
 $11 = ($10|0)<(0);
 $12 = $5;
 $13 = ($12|0)>=(6);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $3 = 1;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 $14 = $6;
 $15 = $14 < 0.0;
 if ($15) {
  $3 = 2;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 } else {
  $16 = $6;
  $17 = $7;
  $18 = ((($17)) + 24|0);
  $19 = ((($18)) + 32|0);
  $20 = ((($19)) + 216|0);
  $21 = ((($20)) + 16|0);
  $22 = ((($21)) + 16|0);
  $23 = ((($22)) + 160|0);
  $24 = $5;
  $25 = (($23) + ($24<<3)|0);
  HEAPF64[$25>>3] = $16;
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_iter_handler_long($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _set_any_iter_handler($6,$7,0,$8);
 STACKTOP = sp;return;
}
function _freecell_solver_user_set_iter_handler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _set_any_iter_handler($6,0,$7,$8);
 STACKTOP = sp;return;
}
function _freecell_solver_user_iter_state_stringify($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $6;
 $15 = (_active_obj($14)|0);
 $12 = $15;
 $16 = $8;
 $13 = $16;
 $17 = $7;
 $18 = $13;
 $19 = HEAP32[$18>>2]|0;
 $20 = $13;
 $21 = ((($20)) + 4|0);
 $22 = $12;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $12;
 $26 = ((($25)) + 1|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $12;
 $30 = ((($29)) + 2|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $9;
 $34 = ($33|0)!=(0);
 $35 = $10;
 $36 = ($35|0)!=(0);
 $37 = $11;
 $38 = ($37|0)!=(0);
 _fc_solve_state_as_string($17,$19,$21,$24,$28,$32,$34,$36,$38);
 STACKTOP = sp;return;
}
function _freecell_solver_user_iter_state_as_string($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = (_malloc(1000)|0);
 $10 = $11;
 $12 = $5;
 $13 = $10;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 _freecell_solver_user_iter_state_stringify($12,$13,$14,$15,$16,$17);
 $18 = $10;
 STACKTOP = sp;return ($18|0);
}
function _freecell_solver_user_set_random_seed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = (_api_soft_thread($5)|0);
 $7 = ((($6)) + 24|0);
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = $4;
 STACKTOP = sp;return;
}
function _freecell_solver_user_get_num_states_in_collection_long($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 16|0);
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 372|0);
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($7) + ($13))|0;
 $15 = $2;
 $16 = ((($15)) + 24|0);
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($14) - ($18))|0;
 STACKTOP = sp;return ($19|0);
}
function _freecell_solver_user_get_num_states_in_collection($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_freecell_solver_user_get_num_states_in_collection_long($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _freecell_solver_user_limit_num_states_in_collection_long($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)<(0);
 $6 = $3;
 $7 = $5 ? 2147483647 : $6;
 $8 = $2;
 $9 = (_active_obj($8)|0);
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = $7;
 STACKTOP = sp;return;
}
function _freecell_solver_user_limit_num_states_in_collection($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _freecell_solver_user_limit_num_states_in_collection_long($4,$5);
 STACKTOP = sp;return;
}
function _freecell_solver_set_stored_states_trimming_limit($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)<(0);
 $6 = $3;
 $7 = $5 ? 2147483647 : $6;
 $8 = $2;
 $9 = (_active_obj($8)|0);
 $10 = ((($9)) + 20|0);
 HEAP32[$10>>2] = $7;
 STACKTOP = sp;return;
}
function _freecell_solver_user_next_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $3 = $5;
 $6 = $3;
 $7 = ((($6)) + 368|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (_fc_solve_new_soft_thread($9)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $1 = 1;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 } else {
  $13 = $4;
  $14 = $3;
  $15 = ((($14)) + 368|0);
  HEAP32[$15>>2] = $13;
  $1 = 0;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_soft_thread_step($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = (_api_soft_thread($5)|0);
 $7 = ((($6)) + 528|0);
 HEAP32[$7>>2] = $4;
 STACKTOP = sp;return;
}
function _freecell_solver_user_next_hard_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $3 = $5;
 $6 = $3;
 $7 = (_user_obj($6)|0);
 $8 = (_new_hard_thread($7)|0);
 $4 = $8;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $1 = 1;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $11 = $4;
  $12 = $3;
  $13 = ((($12)) + 368|0);
  HEAP32[$13>>2] = $11;
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _freecell_solver_user_get_num_soft_threads_in_instance($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_active_obj($2)|0);
 $4 = ((($3)) + 192|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _freecell_solver_user_set_calc_real_depth($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)!=(0);
 $6 = $2;
 $7 = (_active_obj($6)|0);
 $8 = ((($7)) + 132|0);
 $9 = $5&1;
 HEAP8[$8>>0] = $9;
 STACKTOP = sp;return;
}
function _freecell_solver_user_set_soft_thread_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_api_soft_thread($5)|0);
 $4 = $6;
 $7 = $4;
 $8 = ((($7)) + 532|0);
 $9 = $3;
 (_strncpy($8,$9,10)|0);
 $10 = $4;
 $11 = ((($10)) + 532|0);
 $12 = ((($11)) + 9|0);
 HEAP8[$12>>0] = 0;
 STACKTOP = sp;return;
}
function _freecell_solver_user_set_flare_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (_curr_inst($5)|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + -400|0);
 $4 = $9;
 $10 = $4;
 $11 = ((($10)) + 317|0);
 $12 = $3;
 (_strncpy($11,$12,30)|0);
 $13 = $4;
 $14 = ((($13)) + 317|0);
 $15 = ((($14)) + 29|0);
 HEAP8[$15>>0] = 0;
 STACKTOP = sp;return;
}
function _freecell_solver_user_set_hard_thread_prelude($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $4 = $6;
 $7 = $4;
 $8 = ((($7)) + 368|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $5;
 $12 = ((($11)) + 1352|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 $14 = $3;
 $15 = (___strdup($14)|0);
 $16 = $5;
 $17 = ((($16)) + 1352|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return 0;
}
function _freecell_solver_user_set_flares_plan($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $4 = $6;
 $7 = $4;
 $8 = (_curr_inst($7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 _free($11);
 $12 = $3;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $3;
  $15 = (___strdup($14)|0);
  $18 = $15;
 } else {
  $18 = 0;
 }
 $16 = $5;
 $17 = ((($16)) + 28|0);
 HEAP32[$17>>2] = $18;
 $19 = $5;
 $20 = ((($19)) + 32|0);
 HEAP8[$20>>0] = 0;
 STACKTOP = sp;return 0;
}
function _freecell_solver_user_recycle($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $2 = $5;
 $6 = $2;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 $9 = $2;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 while(1) {
  $12 = $4;
  $13 = $3;
  $14 = ($12>>>0)<($13>>>0);
  $15 = $2;
  if (!($14)) {
   break;
  }
  $16 = $4;
  _recycle_instance($15,$16);
  $17 = $4;
  $18 = ((($17)) + 40|0);
  $4 = $18;
 }
 $19 = ((($15)) + 16|0);
 ;HEAP32[$19>>2]=HEAP32[14640>>2]|0;HEAP32[$19+4>>2]=HEAP32[14640+4>>2]|0;
 STACKTOP = sp;return;
}
function _freecell_solver_user_set_optimization_scan_tests_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = (_active_obj($9)|0);
 $6 = $10;
 $11 = $6;
 $12 = ((($11)) + 176|0);
 _moves_order__free_206($12);
 $13 = $6;
 $14 = ((($13)) + 138|0);
 HEAP8[$14>>0] = 0;
 $15 = $6;
 $16 = ((($15)) + 176|0);
 $17 = $4;
 $18 = (_fc_solve_apply_moves_order($16,$17,$7)|0);
 $8 = $18;
 $19 = HEAP8[$7>>0]|0;
 $20 = $19 << 24 >> 24;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = (___strdup($7)|0);
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = $5;
 HEAP32[$23>>2] = $24;
 $25 = $8;
 $26 = ($25|0)!=(0);
 if ($26) {
  $29 = $8;
  STACKTOP = sp;return ($29|0);
 }
 $27 = $6;
 $28 = ((($27)) + 138|0);
 HEAP8[$28>>0] = 1;
 $29 = $8;
 STACKTOP = sp;return ($29|0);
}
function _freecell_solver_user_set_pruning($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (_api_soft_thread($8)|0);
 $7 = $9;
 $10 = $5;
 $11 = (_strcmp($10,12135)|0);
 $12 = ($11|0)!=(0);
 do {
  if ($12) {
   $15 = $5;
   $16 = HEAP8[$15>>0]|0;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = $7;
    $20 = ((($19)) + 542|0);
    HEAP8[$20>>0] = 0;
    break;
   }
   $21 = (___strdup(12140)|0);
   $22 = $6;
   HEAP32[$22>>2] = $21;
   $3 = 1;
   $23 = $3;
   STACKTOP = sp;return ($23|0);
  } else {
   $13 = $7;
   $14 = ((($13)) + 542|0);
   HEAP8[$14>>0] = 1;
  }
 } while(0);
 $3 = 0;
 $23 = $3;
 STACKTOP = sp;return ($23|0);
}
function _freecell_solver_user_set_reparent_states($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)!=(0);
 $6 = $2;
 $7 = (_active_obj($6)|0);
 $8 = ((($7)) + 135|0);
 $9 = $5&1;
 HEAP8[$8>>0] = $9;
 STACKTOP = sp;return;
}
function _freecell_solver_user_set_scans_synergy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)!=(0);
 $6 = $2;
 $7 = (_active_obj($6)|0);
 $8 = ((($7)) + 134|0);
 $9 = $5&1;
 HEAP8[$8>>0] = $9;
 STACKTOP = sp;return;
}
function _freecell_solver_user_next_instance($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _user_next_instance($2);
 STACKTOP = sp;return 0;
}
function _freecell_solver_user_next_flare($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _user_next_flare($2);
 STACKTOP = sp;return 0;
}
function _freecell_solver_user_reset($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 _user_free_resources($4);
 $5 = $2;
 _user_initialize($5);
 STACKTOP = sp;return 0;
}
function _freecell_solver_user_get_lib_version($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (12120|0);
}
function _freecell_solver_user_get_current_soft_thread_name($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_active_obj($3)|0);
 $5 = ((($4)) + 156|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($9) + (($12*552)|0)|0);
 $14 = ((($13)) + 532|0);
 STACKTOP = sp;return ($14|0);
}
function _freecell_solver_user_get_last_error_string($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 3800|0);
 STACKTOP = sp;return ($3|0);
}
function _freecell_solver_user_get_moves_sequence($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $5 = $7;
 $8 = $5;
 $9 = ((($8)) + 324|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $2 = -2;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 } else {
  $12 = $5;
  $13 = (_SINGLE_FLARE($12)|0);
  $14 = ((($13)) + 352|0);
  $6 = $14;
  $15 = $6;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $6;
  $19 = HEAP32[$18>>2]|0;
  $20 = $4;
  HEAP32[$20>>2] = $19;
  $21 = $19<<2;
  $22 = (_memdup_202($17,$21)|0);
  $23 = $4;
  $24 = ((($23)) + 4|0);
  HEAP32[$24>>2] = $22;
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _freecell_solver_user_set_flares_choice($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $5 = $6;
 $7 = $4;
 $8 = (_strcmp($7,12105)|0);
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $12 = $4;
   $13 = (_strcmp($12,12114)|0);
   $14 = ($13|0)!=(0);
   if (!($14)) {
    $15 = $5;
    $16 = ((($15)) + 352|0);
    HEAP32[$16>>2] = 1;
    break;
   }
   $2 = -1;
   $17 = $2;
   STACKTOP = sp;return ($17|0);
  } else {
   $10 = $5;
   $11 = ((($10)) + 352|0);
   HEAP32[$11>>2] = 0;
  }
 } while(0);
 $2 = 0;
 $17 = $2;
 STACKTOP = sp;return ($17|0);
}
function _freecell_solver_user_set_flares_iters_factor($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 360|0);
 HEAPF64[$8>>3] = $6;
 STACKTOP = sp;return;
}
function _SINGLE_FLARE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_curr_inst($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 $9 = $2;
 if ($8) {
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
  STACKTOP = sp;return ($14|0);
 } else {
  $12 = ((($9)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _memdup_202($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = (_malloc($6)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $10 = $5;
  $11 = $3;
  $12 = $4;
  _memcpy(($10|0),($11|0),($12|0))|0;
  $13 = $5;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _curr_inst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _active_obj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_user_obj($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _user_obj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _user_free_resources($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $8 = $1;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $2 = $10;
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $3 = $13;
 while(1) {
  $14 = $3;
  $15 = $2;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $3;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $4 = $19;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $5 = $21;
  while(1) {
   $22 = $5;
   $23 = $4;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $5;
   $26 = ((($25)) + 312|0);
   $27 = HEAP32[$26>>2]|0;
   $6 = $27;
   $28 = $5;
   $7 = $28;
   $29 = $6;
   $30 = ($29|0)!=(9);
   $31 = $6;
   $32 = ($31|0)!=(8);
   $or$cond = $30 & $32;
   if ($or$cond) {
    $33 = $5;
    $34 = ((($33)) + 316|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&1;
    if (!($36)) {
     $37 = $7;
     _fc_solve_finish_instance($37);
    }
   }
   $38 = $7;
   _free_instance($38);
   $39 = $5;
   $40 = ((($39)) + 317|0);
   HEAP8[$40>>0] = 0;
   $41 = $5;
   $42 = ((($41)) + 360|0);
   _fc_solve_moves_processed_free($42);
   $43 = $5;
   $44 = ((($43)) + 352|0);
   $45 = ((($44)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)!=(0|0);
   if ($47) {
    $48 = $5;
    $49 = ((($48)) + 352|0);
    $50 = ((($49)) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    _free($51);
    $52 = $5;
    $53 = ((($52)) + 352|0);
    $54 = ((($53)) + 4|0);
    HEAP32[$54>>2] = 0;
    $55 = $5;
    $56 = ((($55)) + 352|0);
    HEAP32[$56>>2] = 0;
   }
   $57 = $5;
   $58 = ((($57)) + 400|0);
   $5 = $58;
  }
  $59 = $3;
  $60 = HEAP32[$59>>2]|0;
  _free($60);
  $61 = $3;
  $62 = ((($61)) + 28|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)!=(0|0);
  if ($64) {
   $65 = $3;
   $66 = ((($65)) + 28|0);
   $67 = HEAP32[$66>>2]|0;
   _free($67);
  }
  $68 = $3;
  $69 = ((($68)) + 16|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)!=(0|0);
  if ($71) {
   $72 = $3;
   $73 = ((($72)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   _free($74);
  }
  $75 = $3;
  $76 = ((($75)) + 40|0);
  $3 = $76;
 }
 $77 = $1;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 _free($79);
 $80 = $1;
 $81 = ((($80)) + 3920|0);
 _fc_solve_meta_compact_allocator_finish($81);
 STACKTOP = sp;return;
}
function _user_initialize($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 (_fc_solve_get_preset_by_name(12126,$2)|0);
 $3 = $1;
 $4 = ((($3)) + 3704|0);
 $5 = HEAP32[$2>>2]|0;
 dest=$4; src=$5; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = $1;
 $7 = ((($6)) + 3920|0);
 _fc_solve_meta_compact_allocator_init($7);
 $8 = $1;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 344|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 340|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 12|0);
 HEAP32[$17>>2] = -1;
 $18 = $1;
 $19 = ((($18)) + 16|0);
 ;HEAP32[$19>>2]=HEAP32[14640>>2]|0;HEAP32[$19+4>>2]=HEAP32[14640+4>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 328|0);
 HEAP8[$21>>0] = 1;
 $22 = $1;
 $23 = ((($22)) + 352|0);
 HEAP32[$23>>2] = 0;
 $24 = $1;
 $25 = ((($24)) + 360|0);
 HEAPF64[$25>>3] = 1.0;
 $26 = $1;
 _clear_error($26);
 $27 = $1;
 _user_next_instance($27);
 STACKTOP = sp;return;
}
function _fc_solve_meta_compact_allocator_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _clear_error($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 3800|0);
 HEAP8[$3>>0] = 0;
 STACKTOP = sp;return;
}
function _user_next_instance($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp;
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $6;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $13 = (($12|0) / 40)&-1;
 $2 = $13;
 $14 = $1;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = (($17) + 1)|0;
 $19 = ($18*40)|0;
 $20 = (_realloc($16,$19)|0);
 $21 = $1;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $2;
 $27 = (($25) + (($26*40)|0)|0);
 $28 = $1;
 HEAP32[$28>>2] = $27;
 $29 = ((($27)) + 40|0);
 $30 = $1;
 $31 = ((($30)) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $1;
 $33 = (_curr_inst($32)|0);
 dest=$3; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $34 = ((($3)) + 20|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($3)) + 24|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($3)) + 32|0);
 HEAP8[$36>>0] = 0;
 $37 = ((($3)) + 33|0);
 HEAP8[$37>>0] = 1;
 dest=$33; src=$3; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $38 = $1;
 _user_next_flare($38);
 STACKTOP = sp;return;
}
function _user_next_flare($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = (_curr_inst($6)|0);
 $2 = $7;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = $10;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $16 = (($15|0) / 400)&-1;
 $3 = $16;
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (($19) + 1)|0;
 $21 = ($20*400)|0;
 $22 = (_realloc($18,$21)|0);
 $23 = $2;
 HEAP32[$23>>2] = $22;
 $24 = $2;
 $25 = HEAP32[$24>>2]|0;
 $26 = $3;
 $27 = (($25) + (($26*400)|0)|0);
 $4 = $27;
 $28 = $4;
 $29 = ((($28)) + 400|0);
 $30 = $2;
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = $29;
 $32 = $2;
 $33 = ((($32)) + 36|0);
 HEAP32[$33>>2] = -1;
 $34 = $4;
 $5 = $34;
 $35 = $4;
 $36 = $1;
 $37 = ((($36)) + 32|0);
 HEAP32[$37>>2] = $35;
 $38 = $5;
 $39 = $1;
 $40 = ((($39)) + 3920|0);
 _alloc_instance($38,$40);
 $41 = $5;
 $42 = ((($41)) + 152|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $1;
 $47 = ((($46)) + 368|0);
 HEAP32[$47>>2] = $45;
 $48 = $5;
 $49 = $1;
 $50 = ((($49)) + 3704|0);
 (_fc_solve_apply_preset_by_ptr($48,$50)|0);
 $51 = $5;
 _calc_variant_suit_mask_and_desired_suit_value($51);
 $52 = $4;
 $53 = ((($52)) + 312|0);
 HEAP32[$53>>2] = 9;
 $54 = $1;
 $55 = ((($54)) + 324|0);
 HEAP32[$55>>2] = 9;
 $56 = $1;
 $57 = ((($56)) + 340|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)!=(0|0);
 if ($59) {
  $64 = 1;
 } else {
  $60 = $1;
  $61 = ((($60)) + 344|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)!=(0|0);
  $64 = $63;
 }
 $65 = $64 ? 30 : 0;
 $66 = $5;
 $67 = ((($66)) + 184|0);
 HEAP32[$67>>2] = $65;
 $68 = $1;
 $69 = $5;
 $70 = ((($69)) + 188|0);
 HEAP32[$70>>2] = $68;
 $71 = $4;
 $72 = ((($71)) + 352|0);
 HEAP32[$72>>2] = 0;
 $73 = $4;
 $74 = ((($73)) + 352|0);
 $75 = ((($74)) + 4|0);
 HEAP32[$75>>2] = 0;
 $76 = $4;
 $77 = ((($76)) + 317|0);
 HEAP8[$77>>0] = 0;
 $78 = $4;
 $79 = ((($78)) + 360|0);
 $80 = ((($79)) + 8|0);
 HEAP32[$80>>2] = 0;
 $81 = $4;
 $82 = ((($81)) + 316|0);
 HEAP8[$82>>0] = 1;
 $83 = $4;
 $84 = ((($83)) + 372|0);
 ;HEAP32[$84>>2]=HEAP32[14640>>2]|0;HEAP32[$84+4>>2]=HEAP32[14640+4>>2]|0;
 STACKTOP = sp;return;
}
function _alloc_instance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 _memset(($4|0),0,312)|0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($4)) + 12|0);
 HEAP32[$7>>2] = 2147483647;
 $8 = ((($4)) + 16|0);
 HEAP32[$8>>2] = 2147483647;
 $9 = ((($4)) + 20|0);
 HEAP32[$9>>2] = 2147483647;
 $10 = ((($4)) + 132|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($4)) + 133|0);
 HEAP8[$11>>0] = 0;
 $12 = ((($4)) + 134|0);
 HEAP8[$12>>0] = 1;
 $13 = ((($4)) + 135|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($4)) + 136|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($4)) + 137|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($4)) + 138|0);
 HEAP8[$16>>0] = 0;
 $17 = ((($4)) + 140|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($4)) + 144|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($4)) + 148|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($4)) + 164|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($4)) + 172|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($4)) + 176|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($4)) + 192|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($4)) + 284|0);
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($4)) + 292|0);
 $27 = $3;
 HEAP32[$26>>2] = $27;
 $28 = ((($4)) + 304|0);
 HEAP8[$28>>0] = 0;
 _memcpy(($5|0),($4|0),312)|0;
 $29 = $2;
 _apply_preset_by_name($29,12126);
 $30 = $2;
 (_new_hard_thread($30)|0);
 STACKTOP = sp;return;
}
function _calc_variant_suit_mask_and_desired_suit_value($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 HEAP8[$3>>0] = 1;
 $4 = $1;
 $5 = ((($4)) + 5|0);
 HEAP8[$5>>0] = 1;
 $6 = $1;
 $7 = ((($6)) + 3|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 3;
 $11 = ($10|0)==(1);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $1;
 $13 = ((($12)) + 4|0);
 HEAP8[$13>>0] = 3;
 $14 = $1;
 $15 = ((($14)) + 5|0);
 HEAP8[$15>>0] = 0;
 STACKTOP = sp;return;
}
function _iter_handler_wrapper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $14 = $6;
 $12 = $14;
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP32[$13+12>>2]=0|0;HEAP32[$13+16>>2]=0|0;HEAP32[$13+20>>2]=0|0;
 $15 = $10;
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$13>>2] = $16;
 $17 = ((($13)) + 4|0);
 _fc_solve_init_locs_205($17);
 $18 = $12;
 $19 = ((($18)) + 344|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 $22 = $12;
 if ($21) {
  $23 = ((($22)) + 344|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $6;
  $26 = $7;
  $27 = $8;
  $28 = $11;
  $29 = $12;
  $30 = ((($29)) + 348|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_viiiiii[$24 & 31]($25,$26,$27,$13,$28,$31);
  STACKTOP = sp;return;
 } else {
  $32 = ((($22)) + 340|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $6;
  $35 = $7;
  $36 = $8;
  $37 = $11;
  $38 = $12;
  $39 = ((($38)) + 348|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_viiiiii[$33 & 31]($34,$35,$36,$13,$37,$40);
  STACKTOP = sp;return;
 }
}
function _fc_solve_init_locs_205($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $4 = $2;
  $5 = ($4|0)<(10);
  if (!($5)) {
   break;
  }
  $6 = $2;
  $7 = $6&255;
  $8 = $1;
  $9 = $2;
  $10 = (($8) + ($9)|0);
  HEAP8[$10>>0] = $7;
  $11 = $2;
  $12 = (($11) + 1)|0;
  $2 = $12;
 }
 $3 = 0;
 while(1) {
  $13 = $3;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $3;
  $16 = $15&255;
  $17 = $1;
  $18 = ((($17)) + 10|0);
  $19 = $3;
  $20 = (($18) + ($19)|0);
  HEAP8[$20>>0] = $16;
  $21 = $3;
  $22 = (($21) + 1)|0;
  $3 = $22;
 }
 STACKTOP = sp;return;
}
function _apply_preset_by_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = (_fc_solve_get_preset_by_name($6,$4)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = $2;
 $11 = HEAP32[$4>>2]|0;
 (_fc_solve_apply_preset_by_ptr($10,$11)|0);
 STACKTOP = sp;return;
}
function _new_hard_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $9 = $2;
 $10 = ((($9)) + 192|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(32);
 if ($12) {
  $1 = 0;
  $67 = $1;
  STACKTOP = sp;return ($67|0);
 }
 $13 = $2;
 $14 = ((($13)) + 152|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = ((($16)) + 148|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1)|0;
 $20 = ($19*1356)|0;
 $21 = (_realloc($15,$20)|0);
 $22 = $2;
 $23 = ((($22)) + 152|0);
 HEAP32[$23>>2] = $21;
 $24 = $2;
 $25 = ((($24)) + 152|0);
 $26 = HEAP32[$25>>2]|0;
 $4 = $26;
 $27 = $4;
 $28 = $2;
 $29 = ((($28)) + 148|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($27) + (($30*1356)|0)|0);
 $5 = $31;
 while(1) {
  $32 = $4;
  $33 = $5;
  $34 = ($32>>>0)<($33>>>0);
  if (!($34)) {
   break;
  }
  $35 = $4;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $6 = $37;
  $38 = $6;
  $7 = $38;
  $39 = $6;
  $40 = $4;
  $41 = ((($40)) + 1344|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($39) + (($42*552)|0)|0);
  $8 = $43;
  while(1) {
   $44 = $7;
   $45 = $8;
   $46 = ($44>>>0)<($45>>>0);
   $47 = $4;
   if (!($46)) {
    break;
   }
   $48 = $7;
   HEAP32[$48>>2] = $47;
   $49 = $7;
   $50 = ((($49)) + 552|0);
   $7 = $50;
  }
  $51 = ((($47)) + 1356|0);
  $4 = $51;
 }
 $52 = $2;
 $53 = $2;
 $54 = ((($53)) + 152|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $2;
 $57 = ((($56)) + 148|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($55) + (($58*1356)|0)|0);
 $3 = $59;
 _fc_solve_instance__init_hard_thread($52,$59);
 $60 = $2;
 $61 = ((($60)) + 148|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + 1)|0;
 HEAP32[$61>>2] = $63;
 $64 = $3;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $1 = $66;
 $67 = $1;
 STACKTOP = sp;return ($67|0);
}
function _free_instance($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 _fc_solve_foreach_soft_thread($4,1,0);
 $5 = $1;
 $6 = ((($5)) + 152|0);
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $2;
 $9 = $1;
 $10 = ((($9)) + 148|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($8) + (($11*1356)|0)|0);
 $3 = $12;
 while(1) {
  $13 = $2;
  $14 = $3;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $2;
  _free_hard_thread($16);
  $17 = $2;
  $18 = ((($17)) + 1356|0);
  $2 = $18;
 }
 $19 = $1;
 $20 = ((($19)) + 152|0);
 $21 = HEAP32[$20>>2]|0;
 _free($21);
 $22 = $1;
 $23 = ((($22)) + 160|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $1;
  $27 = ((($26)) + 160|0);
  $28 = HEAP32[$27>>2]|0;
  _free_hard_thread($28);
  $29 = $1;
  $30 = ((($29)) + 160|0);
  $31 = HEAP32[$30>>2]|0;
  _free($31);
 }
 $32 = $1;
 $33 = ((($32)) + 164|0);
 _moves_order__free_206($33);
 $34 = $1;
 $35 = ((($34)) + 138|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 if (!($37)) {
  $40 = $1;
  _instance_free_solution_moves_207($40);
  STACKTOP = sp;return;
 }
 $38 = $1;
 $39 = ((($38)) + 176|0);
 _moves_order__free_206($39);
 $40 = $1;
 _instance_free_solution_moves_207($40);
 STACKTOP = sp;return;
}
function _fc_solve_moves_processed_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _free_hard_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 1352|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $1;
 $6 = ((($5)) + 1336|0);
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = $1;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 _free($10);
 $11 = $1;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 _free($13);
 $14 = $1;
 $15 = ((($14)) + 20|0);
 _fc_solve_compact_allocator_finish($15);
 STACKTOP = sp;return;
}
function _moves_order__free_206($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $4 = 0;
 while(1) {
  $10 = $4;
  $11 = $3;
  $12 = ($10>>>0)<($11>>>0);
  $13 = $2;
  if (!($12)) {
   break;
  }
  $14 = $4;
  $15 = (($13) + (($14*224)|0)|0);
  $16 = HEAP32[$15>>2]|0;
  _free($16);
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 _free($13);
 $19 = $1;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = $1;
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return;
}
function _instance_free_solution_moves_207($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 284|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = ((($6)) + 284|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 $9 = $1;
 $10 = ((($9)) + 284|0);
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function _api_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 368|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _recycle_instance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 while(1) {
  $11 = $5;
  $12 = $4;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $5;
  $15 = ((($14)) + 360|0);
  _fc_solve_moves_processed_free($15);
  $16 = $5;
  $17 = ((($16)) + 312|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(9);
  if ($19) {
   $20 = $5;
   _recycle_flare($20);
   $21 = $2;
   $22 = ((($21)) + 24|0);
   ;HEAP32[$22>>2]=HEAP32[14640>>2]|0;HEAP32[$22+4>>2]=HEAP32[14640+4>>2]|0;
   $23 = $5;
   $24 = ((($23)) + 312|0);
   HEAP32[$24>>2] = 9;
  }
  $25 = $5;
  $26 = ((($25)) + 352|0);
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $5;
   $31 = ((($30)) + 352|0);
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   _free($33);
   $34 = $5;
   $35 = ((($34)) + 352|0);
   $36 = ((($35)) + 4|0);
   HEAP32[$36>>2] = 0;
   $37 = $5;
   $38 = ((($37)) + 352|0);
   HEAP32[$38>>2] = 0;
   $39 = $5;
   $40 = ((($39)) + 348|0);
   HEAP32[$40>>2] = 0;
  }
  $41 = $5;
  $42 = ((($41)) + 372|0);
  ;HEAP32[$42>>2]=HEAP32[14640>>2]|0;HEAP32[$42+4>>2]=HEAP32[14640+4>>2]|0;
  $43 = $5;
  $44 = ((($43)) + 400|0);
  $5 = $44;
 }
 $45 = $3;
 $46 = ((($45)) + 24|0);
 HEAP32[$46>>2] = 0;
 $47 = $3;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = 0;
 $49 = $3;
 $50 = ((($49)) + 12|0);
 HEAP32[$50>>2] = 0;
 STACKTOP = sp;return;
}
function _recycle_flare($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 316|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 _recycle_inst($6);
 $7 = $1;
 $8 = ((($7)) + 316|0);
 HEAP8[$8>>0] = 1;
 STACKTOP = sp;return;
}
function _recycle_inst($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 _fc_solve_finish_instance($3);
 $4 = $1;
 _instance_free_solution_moves_207($4);
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 172|0);
 HEAP32[$8>>2] = 0;
 $2 = 0;
 while(1) {
  $9 = $2;
  $10 = $1;
  $11 = ((($10)) + 148|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)<($12>>>0);
  $14 = $1;
  if (!($13)) {
   break;
  }
  $15 = ((($14)) + 152|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = (($16) + (($17*1356)|0)|0);
  _recycle_ht($18);
  $19 = $2;
  $20 = (($19) + 1)|0;
  $2 = $20;
 }
 $21 = ((($14)) + 160|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if (!($23)) {
  $27 = $1;
  $28 = ((($27)) + 137|0);
  HEAP8[$28>>0] = 0;
  STACKTOP = sp;return;
 }
 $24 = $1;
 $25 = ((($24)) + 160|0);
 $26 = HEAP32[$25>>2]|0;
 _recycle_ht($26);
 $27 = $1;
 $28 = ((($27)) + 137|0);
 HEAP8[$28>>0] = 0;
 STACKTOP = sp;return;
}
function _recycle_ht($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 _fc_solve_reset_hard_thread_210($6);
 $7 = $1;
 $8 = ((($7)) + 20|0);
 _fc_solve_compact_allocator_recycle($8);
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $2 = $11;
 $12 = $2;
 $3 = $12;
 $13 = $2;
 $14 = $1;
 $15 = ((($14)) + 1344|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13) + (($16*552)|0)|0);
 $4 = $17;
 while(1) {
  $18 = $3;
  $19 = $4;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $3;
  _st_free_pq_211($21);
  $22 = $3;
  _fc_solve_reset_soft_thread_212($22);
  $23 = $3;
  $24 = ((($23)) + 544|0);
  $25 = HEAP32[$24>>2]|0;
  $5 = $25;
  $26 = $5;
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = $5;
   _fc_solve_pats__recycle_soft_thread_213($28);
  }
  $29 = $3;
  $30 = ((($29)) + 552|0);
  $3 = $30;
 }
 STACKTOP = sp;return;
}
function _fc_solve_reset_hard_thread_210($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = 2147483647;
 $6 = $1;
 $7 = ((($6)) + 1348|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_compact_allocator_recycle($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _fc_solve_compact_allocator_finish($2);
 $3 = $1;
 _fc_solve_compact_allocator_init_helper($3);
 STACKTOP = sp;return;
}
function _st_free_pq_211($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = ((($3)) + 32|0);
 $5 = ((($4)) + 216|0);
 $6 = ((($5)) + 16|0);
 _fc_solve_PQueueFree_219($6);
 STACKTOP = sp;return;
}
function _fc_solve_reset_soft_thread_212($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 520|0);
 HEAP8[$3>>0] = 0;
 $4 = $1;
 $5 = ((($4)) + 521|0);
 HEAP8[$5>>0] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_pats__recycle_soft_thread_213($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _fc_solve_pats__free_buckets_214($2);
 $3 = $1;
 _fc_solve_pats__free_clusters_215($3);
 $4 = $1;
 _fc_solve_pats__free_blocks_216($4);
 $5 = $1;
 $6 = ((($5)) + 37668|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $16 = $1;
  _fc_solve_pats__soft_thread_reset_helper_217($16);
  STACKTOP = sp;return;
 }
 $9 = $1;
 $10 = ((($9)) + 37668|0);
 $11 = HEAP32[$10>>2]|0;
 _free($11);
 $12 = $1;
 $13 = ((($12)) + 37668|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 37672|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 _fc_solve_pats__soft_thread_reset_helper_217($16);
 STACKTOP = sp;return;
}
function _fc_solve_pats__free_buckets_214($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(4093);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = ((($7)) + 2876|0);
  $9 = $2;
  $10 = (($8) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
  while(1) {
   $12 = $3;
   $13 = ($12|0)!=(0|0);
   if (!($13)) {
    break;
   }
   $14 = $3;
   $15 = ((($14)) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $4 = $16;
   $17 = $1;
   $18 = $3;
   $19 = HEAP32[$18>>2]|0;
   $20 = $3;
   $21 = HEAP32[$20>>2]|0;
   $22 = (_strlen($21)|0);
   $23 = (($22) + 1)|0;
   $24 = $23;
   _fc_solve_pats__release_218($17,$19,$24);
   $25 = $1;
   $26 = $3;
   _fc_solve_pats__release_218($25,$26,16);
   $27 = $4;
   $3 = $27;
  }
  $28 = $1;
  $29 = ((($28)) + 2876|0);
  $30 = $2;
  $31 = (($29) + ($30<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = $2;
  $33 = (($32) + 1)|0;
  $2 = $33;
 }
 STACKTOP = sp;return;
}
function _fc_solve_pats__free_clusters_215($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(499);
  if (!($6)) {
   break;
  }
  $7 = $1;
  $8 = ((($7)) + 35660|0);
  $9 = $2;
  $10 = (($8) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
  while(1) {
   $12 = $3;
   $13 = ($12|0)!=(0|0);
   if (!($13)) {
    break;
   }
   $14 = $3;
   $15 = ((($14)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $4 = $16;
   $17 = $1;
   $18 = $3;
   _fc_solve_pats__release_218($17,$18,12);
   $19 = $4;
   $3 = $19;
  }
  $20 = $1;
  $21 = ((($20)) + 35660|0);
  $22 = $2;
  $23 = (($21) + ($22<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = $2;
  $25 = (($24) + 1)|0;
  $2 = $25;
 }
 STACKTOP = sp;return;
}
function _fc_solve_pats__free_blocks_216($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 37656|0);
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 while(1) {
  $7 = $2;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $3 = $11;
  $12 = $1;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  _fc_solve_pats__release_218($12,$14,131072);
  $15 = $1;
  $16 = $2;
  _fc_solve_pats__release_218($15,$16,16);
  $17 = $3;
  $2 = $17;
 }
 $18 = $1;
 $19 = ((($18)) + 37656|0);
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_pats__soft_thread_reset_helper_217($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 816|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 $5 = ((($4)) + 2788|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 2796|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 35644|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 35656|0);
 HEAP32[$11>>2] = 1;
 $12 = $1;
 $13 = ((($12)) + 37664|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 37660|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ((($16)) + 37676|0);
 HEAP32[$17>>2] = 0;
 $18 = $1;
 $19 = ((($18)) + 37688|0);
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_pats__release_218($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 _free($6);
 $7 = $5;
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($7))|0;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _fc_solve_PQueueFree_219($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_compact_allocator_init_helper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 _fc_solve_compact_allocator_extend($3);
 STACKTOP = sp;return;
}
function _set_any_iter_handler($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $8 = $10;
 $11 = $5;
 $12 = $8;
 $13 = ((($12)) + 344|0);
 HEAP32[$13>>2] = $11;
 $14 = $6;
 $15 = $8;
 $16 = ((($15)) + 340|0);
 HEAP32[$16>>2] = $14;
 $9 = 0;
 $17 = $6;
 $18 = ($17|0)!=(0|0);
 $19 = $5;
 $20 = ($19|0)!=(0|0);
 $or$cond = $18 | $20;
 if (!($or$cond)) {
  $24 = $8;
  $25 = $9;
  _set_debug_iter_output_func_to_val($24,$25);
  STACKTOP = sp;return;
 }
 $21 = $7;
 $22 = $8;
 $23 = ((($22)) + 348|0);
 HEAP32[$23>>2] = $21;
 $9 = 30;
 $24 = $8;
 $25 = $9;
 _set_debug_iter_output_func_to_val($24,$25);
 STACKTOP = sp;return;
}
function _set_debug_iter_output_func_to_val($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $4 = $10;
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 while(1) {
  $14 = $5;
  $15 = $4;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   break;
  }
  $17 = $5;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $6 = $19;
  $20 = $5;
  $21 = HEAP32[$20>>2]|0;
  $7 = $21;
  while(1) {
   $22 = $7;
   $23 = $6;
   $24 = ($22>>>0)<($23>>>0);
   if (!($24)) {
    break;
   }
   $25 = $3;
   $26 = $7;
   $27 = ((($26)) + 184|0);
   HEAP32[$27>>2] = $25;
   $28 = $7;
   $29 = ((($28)) + 400|0);
   $7 = $29;
  }
  $30 = $5;
  $31 = ((($30)) + 40|0);
  $5 = $31;
 }
 STACKTOP = sp;return;
}
function _apply_game_params_for_all_instances($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $2 = $9;
 $10 = $1;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $3 = $12;
 while(1) {
  $13 = $3;
  $14 = $2;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $3;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $4 = $18;
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $5 = $20;
  while(1) {
   $21 = $5;
   $22 = $4;
   $23 = ($21>>>0)<($22>>>0);
   if (!($23)) {
    break;
   }
   $24 = $5;
   $6 = $24;
   $25 = $6;
   $26 = $1;
   $27 = ((($26)) + 3704|0);
   $28 = ((($27)) + 12|0);
   ;HEAP32[$25>>2]=HEAP32[$28>>2]|0;
   $29 = $6;
   _calc_variant_suit_mask_and_desired_suit_value($29);
   $30 = $5;
   $31 = ((($30)) + 400|0);
   $5 = $31;
  }
  $32 = $3;
  $33 = ((($32)) + 40|0);
  $3 = $33;
 }
 STACKTOP = sp;return;
}
function _fc_solve_move_to_string_w_state($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0;
 var $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr35 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer51 = sp + 128|0;
 $vararg_buffer48 = sp + 120|0;
 $vararg_buffer45 = sp + 112|0;
 $vararg_buffer42 = sp + 104|0;
 $vararg_buffer39 = sp + 96|0;
 $vararg_buffer36 = sp + 88|0;
 $vararg_buffer32 = sp + 80|0;
 $vararg_buffer28 = sp + 72|0;
 $vararg_buffer24 = sp + 64|0;
 $vararg_buffer20 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $3;
 $7 = HEAP8[$2>>0]|0;
 $8 = $7&255;
 switch ($8|0) {
 case 0:  {
  $9 = $6;
  $10 = ($9|0)==(2);
  if ($10) {
   $11 = ((($2)) + 3|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)>(1);
   if ($14) {
    $15 = $5;
    $16 = ((($2)) + 2|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = (($15) + ($18<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = ((($2)) + 3|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = ($22|0)==($25|0);
    if ($26) {
     $27 = $4;
     $28 = ((($2)) + 1|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&255;
     $31 = (1 + ($30))|0;
     $32 = ((($2)) + 2|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = (1 + ($34))|0;
     $36 = ((($2)) + 3|0);
     $37 = HEAP8[$36>>0]|0;
     $38 = $37&255;
     HEAP32[$vararg_buffer>>2] = $31;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $35;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $38;
     (_sprintf($27,12306,$vararg_buffer)|0);
     STACKTOP = sp;return;
    }
   }
  }
  $39 = $6;
  $40 = ($39|0)!=(0);
  $41 = $4;
  if ($40) {
   $42 = ((($2)) + 1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = (1 + ($44))|0;
   $46 = ((($2)) + 2|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = (1 + ($48))|0;
   HEAP32[$vararg_buffer3>>2] = $45;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $49;
   (_sprintf($41,12314,$vararg_buffer3)|0);
   STACKTOP = sp;return;
  } else {
   $50 = ((($2)) + 3|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = ((($2)) + 1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = ((($2)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   HEAP32[$vararg_buffer7>>2] = $52;
   $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
   HEAP32[$vararg_ptr10>>2] = $55;
   $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
   HEAP32[$vararg_ptr11>>2] = $58;
   (_sprintf($41,12319,$vararg_buffer7)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 2:  {
  $59 = $6;
  $60 = ($59|0)!=(0);
  $61 = $4;
  $62 = ((($2)) + 1|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  if ($60) {
   $65 = (_fc_solve__freecell_to_char($64)|0);
   $66 = $65 << 24 >> 24;
   $67 = ((($2)) + 2|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = (1 + ($69))|0;
   HEAP32[$vararg_buffer12>>2] = $66;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $70;
   (_sprintf($61,12359,$vararg_buffer12)|0);
   STACKTOP = sp;return;
  } else {
   $71 = ((($2)) + 2|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   HEAP32[$vararg_buffer16>>2] = $64;
   $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
   HEAP32[$vararg_ptr19>>2] = $73;
   (_sprintf($61,12364,$vararg_buffer16)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 3:  {
  $74 = $6;
  $75 = ($74|0)!=(0);
  $76 = $4;
  $77 = ((($2)) + 1|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  if ($75) {
   $80 = (_fc_solve__freecell_to_char($79)|0);
   $81 = $80 << 24 >> 24;
   $82 = ((($2)) + 2|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = (_fc_solve__freecell_to_char($84)|0);
   $86 = $85 << 24 >> 24;
   HEAP32[$vararg_buffer20>>2] = $81;
   $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
   HEAP32[$vararg_ptr23>>2] = $86;
   (_sprintf($76,12405,$vararg_buffer20)|0);
   STACKTOP = sp;return;
  } else {
   $87 = ((($2)) + 2|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   HEAP32[$vararg_buffer24>>2] = $79;
   $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
   HEAP32[$vararg_ptr27>>2] = $89;
   (_sprintf($76,12410,$vararg_buffer24)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  $90 = $6;
  $91 = ($90|0)!=(0);
  $92 = $4;
  $93 = ((($2)) + 1|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  if ($91) {
   $96 = (1 + ($95))|0;
   $97 = ((($2)) + 2|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = $98&255;
   $100 = (_fc_solve__freecell_to_char($99)|0);
   $101 = $100 << 24 >> 24;
   HEAP32[$vararg_buffer28>>2] = $96;
   $vararg_ptr31 = ((($vararg_buffer28)) + 4|0);
   HEAP32[$vararg_ptr31>>2] = $101;
   (_sprintf($92,12454,$vararg_buffer28)|0);
   STACKTOP = sp;return;
  } else {
   $102 = ((($2)) + 2|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   HEAP32[$vararg_buffer32>>2] = $95;
   $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
   HEAP32[$vararg_ptr35>>2] = $104;
   (_sprintf($92,12459,$vararg_buffer32)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 4:  {
  $105 = $6;
  $106 = ($105|0)!=(0);
  $107 = $4;
  $108 = ((($2)) + 1|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  if ($106) {
   $111 = (1 + ($110))|0;
   HEAP32[$vararg_buffer36>>2] = $111;
   (_sprintf($107,12500,$vararg_buffer36)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer39>>2] = $110;
   (_sprintf($107,12504,$vararg_buffer39)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 5:  {
  $112 = $6;
  $113 = ($112|0)!=(0);
  $114 = $4;
  $115 = ((($2)) + 1|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = $116&255;
  if ($113) {
   $118 = (_fc_solve__freecell_to_char($117)|0);
   $119 = $118 << 24 >> 24;
   HEAP32[$vararg_buffer42>>2] = $119;
   (_sprintf($114,12549,$vararg_buffer42)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer45>>2] = $117;
   (_sprintf($114,12553,$vararg_buffer45)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 11:  {
  $120 = $6;
  $121 = ($120|0)!=(0);
  $122 = $4;
  $123 = ((($2)) + 1|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  if ($121) {
   HEAP32[$vararg_buffer48>>2] = $125;
   (_sprintf($122,12500,$vararg_buffer48)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer51>>2] = $125;
   (_sprintf($122,12601,$vararg_buffer51)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  $126 = $4;
  HEAP8[$126>>0] = 0;
  STACKTOP = sp;return;
 }
 }
}
function _fc_solve__freecell_to_char($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_fc_solve_move__convert_freecell_num($2)|0);
 $4 = (97 + ($3))|0;
 $5 = $4&255;
 STACKTOP = sp;return ($5|0);
}
function _fc_solve_move__convert_freecell_num($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)>=(7);
 $4 = $1;
 $5 = (($4) + 3)|0;
 $6 = $3 ? $5 : $4;
 STACKTOP = sp;return ($6|0);
}
function _calc_moves_flare($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_SINGLE_FLARE($3)|0);
 $2 = $4;
 $5 = $1;
 $6 = $2;
 _trace_flare_solution($5,$6);
 $7 = $2;
 STACKTOP = sp;return ($7|0);
}
function _trace_flare_solution($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = ((($5)) + 380|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $3;
 $4 = $9;
 $10 = $4;
 _fc_solve_trace_solution($10);
 $11 = $3;
 $12 = ((($11)) + 381|0);
 $13 = $2;
 $14 = ((($13)) + 288|0);
 dest=$12; src=$14; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $15 = $4;
 $16 = ((($15)) + 284|0);
 $17 = $2;
 $18 = ((($17)) + 36|0);
 $19 = $3;
 $20 = ((($19)) + 381|0);
 $21 = $4;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $4;
 $25 = ((($24)) + 1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 _fc_solve_move_stack_normalize($16,$18,$20,$23,$27);
 $28 = $4;
 $29 = ((($28)) + 284|0);
 $30 = $3;
 $31 = ((($30)) + 352|0);
 _calc_moves_seq($29,$31);
 $32 = $4;
 _instance_free_solution_moves_207($32);
 $33 = $3;
 $34 = ((($33)) + 348|0);
 HEAP32[$34>>2] = 0;
 $35 = $4;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $3;
 $39 = ((($38)) + 372|0);
 HEAP32[$39>>2] = $37;
 $40 = $4;
 $41 = ((($40)) + 144|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $3;
 $44 = ((($43)) + 372|0);
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = $42;
 $46 = $3;
 _recycle_flare($46);
 $47 = $3;
 $48 = ((($47)) + 380|0);
 HEAP8[$48>>0] = 1;
 STACKTOP = sp;return;
}
function _fc_solve_move_stack_normalize($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1424|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1424|0);
 $$byval_copy1 = sp + 1420|0;
 $$byval_copy = sp + 1416|0;
 $10 = sp + 1412|0;
 $11 = sp + 1304|0;
 $12 = sp;
 $13 = sp + 1408|0;
 $16 = sp + 1288|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 ;HEAP8[$13>>0]=HEAP8[15242>>0]|0;HEAP8[$13+1>>0]=HEAP8[15242+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[15242+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[15242+3>>0]|0;
 $18 = $6;
 dest=$11; src=$18; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $19 = ((($11)) + 56|0);
 $20 = ((($19)) + 24|0);
 HEAP32[$20>>2] = 0;
 $14 = 0;
 while(1) {
  $21 = $14;
  $22 = $9;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = ((($11)) + 56|0);
  $25 = ((($24)) + 24|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $14;
  $28 = 1 << $27;
  $29 = $26 & $28;
  $30 = ($29|0)!=(0);
  if (!($30)) {
   $31 = $14;
   $32 = 1 << $31;
   $33 = ((($11)) + 56|0);
   $34 = ((($33)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 | $32;
   HEAP32[$34>>2] = $36;
   $37 = $14;
   $38 = (($11) + ($37<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $15 = $39;
   $40 = $14;
   $41 = $40 << 7;
   $42 = (($12) + ($41)|0);
   $43 = $15;
   $44 = $15;
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = (($46) + 1)|0;
   _memcpy(($42|0),($43|0),($47|0))|0;
   $48 = $14;
   $49 = $48 << 7;
   $50 = (($12) + ($49)|0);
   $51 = $14;
   $52 = (($11) + ($51<<2)|0);
   HEAP32[$52>>2] = $50;
  }
  $53 = $14;
  $54 = (($53) + 1)|0;
  $14 = $54;
 }
 _fcs_move_stack__new_239($16);
 while(1) {
  $55 = $5;
  $56 = (_fc_solve_move_stack_pop($55,$10)|0);
  $57 = $56 ^ 1;
  if (!($57)) {
   break;
  }
  $58 = $7;
  $59 = $8;
  $60 = $9;
  ;HEAP8[$$byval_copy>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$10+3>>0]|0;
  _fc_solve_apply_move($11,$58,$$byval_copy,$59,$60);
  $61 = HEAP8[$10>>0]|0;
  $62 = $61&255;
  $17 = $62;
  $63 = $17;
  $64 = ($63|0)==(12);
  if ($64) {
   continue;
  }
  $65 = $17;
  $66 = $65&255;
  HEAP8[$13>>0] = $66;
  $67 = $17;
  switch ($67|0) {
  case 11: case 4: case 1: case 0:  {
   $68 = $7;
   $69 = ((($10)) + 1|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = (($68) + ($71)|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = ((($13)) + 1|0);
   HEAP8[$74>>0] = $73;
   break;
  }
  case 5: case 3: case 2:  {
   $75 = $7;
   $76 = ((($75)) + 10|0);
   $77 = ((($10)) + 1|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = (($76) + ($79)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = ((($13)) + 1|0);
   HEAP8[$82>>0] = $81;
   break;
  }
  default: {
  }
  }
  $83 = $17;
  switch ($83|0) {
  case 2: case 0:  {
   $84 = $7;
   $85 = ((($10)) + 2|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = (($84) + ($87)|0);
   $89 = HEAP8[$88>>0]|0;
   $90 = ((($13)) + 2|0);
   HEAP8[$90>>0] = $89;
   break;
  }
  case 3: case 1:  {
   $91 = $7;
   $92 = ((($91)) + 10|0);
   $93 = ((($10)) + 2|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $96 = (($92) + ($95)|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = ((($13)) + 2|0);
   HEAP8[$98>>0] = $97;
   break;
  }
  case 11: case 5: case 4:  {
   $99 = ((($10)) + 2|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = ((($13)) + 2|0);
   HEAP8[$101>>0] = $100;
   break;
  }
  default: {
  }
  }
  $102 = $17;
  $103 = ($102|0)==(0);
  if ($103) {
   $104 = ((($10)) + 3|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = ((($13)) + 3|0);
   HEAP8[$106>>0] = $105;
  }
  ;HEAP8[$$byval_copy1>>0]=HEAP8[$13>>0]|0;HEAP8[$$byval_copy1+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$$byval_copy1+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$$byval_copy1+3>>0]=HEAP8[$13+3>>0]|0;
  _fcs_move_stack_push_240($16,$$byval_copy1);
 }
 $107 = $5;
 $108 = ((($107)) + 4|0);
 HEAP32[$108>>2] = 0;
 $109 = $5;
 _fc_solve_move_stack_swallow_stack($109,$16);
 $110 = HEAP32[$16>>2]|0;
 _free($110);
 STACKTOP = sp;return;
}
function _calc_moves_seq($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 HEAP32[$8>>2] = 0;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $4 = $13;
 $14 = $2;
 $15 = HEAP32[$14>>2]|0;
 $16 = $4;
 $17 = (($15) + ($16<<2)|0);
 $5 = $17;
 $18 = $4;
 $19 = $18<<2;
 $20 = (_malloc($19)|0);
 $6 = $20;
 $21 = $6;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $7 = 0;
 while(1) {
  $23 = $7;
  $24 = $4;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = $6;
  $27 = $7;
  $28 = (($26) + ($27<<2)|0);
  $29 = $5;
  $30 = ((($29)) + -4|0);
  $5 = $30;
  ;HEAP8[$28>>0]=HEAP8[$30>>0]|0;HEAP8[$28+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$28+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$28+3>>0]=HEAP8[$30+3>>0]|0;
  $31 = $7;
  $32 = (($31) + 1)|0;
  $7 = $32;
 }
 $33 = $4;
 $34 = $3;
 HEAP32[$34>>2] = $33;
 $35 = $6;
 $36 = $3;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = $35;
 STACKTOP = sp;return;
}
function _fcs_move_stack__new_239($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_malloc(64)|0);
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _fc_solve_move_stack_pop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(0);
 if ($8) {
  $9 = $4;
  $10 = $3;
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + -1)|0;
  HEAP32[$13>>2] = $15;
  $16 = (($11) + ($15<<2)|0);
  ;HEAP8[$9>>0]=HEAP8[$16>>0]|0;HEAP8[$9+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$16+3>>0]|0;
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $17 = $$pre_trunc&1;
  STACKTOP = sp;return ($17|0);
 } else {
  $$expand_i1_val2 = 1;
  HEAP8[$2>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $17 = $$pre_trunc&1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _fcs_move_stack_push_240($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $3 = $7;
 $8 = $3;
 $9 = $8 & 15;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $14 = (($13) + 16)|0;
  $15 = $14<<2;
  $16 = (_realloc($12,$15)|0);
  $17 = $2;
  HEAP32[$17>>2] = $16;
 }
 $18 = $2;
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 $21 = (($20) - 1)|0;
 $22 = (($19) + ($21<<2)|0);
 ;HEAP8[$22>>0]=HEAP8[$1>>0]|0;HEAP8[$22+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$22+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$22+3>>0]=HEAP8[$1+3>>0]|0;
 STACKTOP = sp;return;
}
function _fc_solve_move_stack_swallow_stack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $4 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 while(1) {
  $5 = $3;
  $6 = (_fc_solve_move_stack_pop($5,$4)|0);
  $7 = $6 ^ 1;
  if (!($7)) {
   break;
  }
  $8 = $2;
  ;HEAP8[$$byval_copy>>0]=HEAP8[$4>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$4+3>>0]|0;
  _fcs_move_stack_push_240($8,$$byval_copy);
 }
 STACKTOP = sp;return;
}
function _fc_solve_pats__init_soft_thread($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 HEAP32[$5>>2] = $4;
 $6 = $2;
 $7 = ((($6)) + 35640|0);
 HEAP8[$7>>0] = 0;
 $8 = $2;
 $9 = ((($8)) + 35648|0);
 HEAP8[$9>>0] = 0;
 $10 = $2;
 $11 = ((($10)) + 35652|0);
 HEAP32[$11>>2] = 1;
 $12 = $2;
 $13 = ((($12)) + 4|0);
 HEAP32[$13>>2] = 50000000;
 $14 = $2;
 $15 = ((($14)) + 816|0);
 HEAP32[$15>>2] = 0;
 $16 = $2;
 $17 = ((($16)) + 2792|0);
 HEAP32[$17>>2] = -1;
 $18 = $2;
 $19 = ((($18)) + 37668|0);
 HEAP32[$19>>2] = 0;
 $20 = $2;
 $21 = ((($20)) + 37672|0);
 HEAP32[$21>>2] = 0;
 $22 = $2;
 _fc_solve_pats__soft_thread_reset_helper_217($22);
 $23 = $2;
 $24 = ((($23)) + 37680|0);
 HEAP32[$24>>2] = 16;
 $25 = $2;
 $26 = ((($25)) + 37680|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27*28)|0;
 $29 = (_malloc($28)|0);
 $30 = $2;
 $31 = ((($30)) + 37684|0);
 HEAP32[$31>>2] = $29;
 STACKTOP = sp;return;
}
function _fc_solve_pats__set_cut_off($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 2800|0);
 $4 = ((($3)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = ((($6)) + 35652|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _duplicate_string_while_adding_a_trailing_newline($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = (_strlen($7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)!=(0);
 do {
  if ($10) {
   $11 = $5;
   $12 = ($11>>>0)>=(2045);
   if ($12) {
    $$expand_i1_val = 0;
    HEAP8[$2>>0] = $$expand_i1_val;
    $$pre_trunc = HEAP8[$2>>0]|0;
    $30 = $$pre_trunc&1;
    STACKTOP = sp;return ($30|0);
   } else {
    $13 = $3;
    $14 = $4;
    (_strcpy($13,$14)|0);
    $15 = $3;
    $16 = $5;
    $17 = (($15) + ($16)|0);
    $18 = ((($17)) + -1|0);
    $6 = $18;
    $19 = $6;
    $20 = HEAP8[$19>>0]|0;
    $21 = $20 << 24 >> 24;
    $22 = ($21|0)!=(10);
    if (!($22)) {
     break;
    }
    $23 = $6;
    $24 = ((($23)) + 1|0);
    $6 = $24;
    HEAP8[$24>>0] = 10;
    $25 = $6;
    $26 = ((($25)) + 1|0);
    $6 = $26;
    HEAP8[$26>>0] = 0;
    break;
   }
  } else {
   $27 = $3;
   HEAP8[$27>>0] = 10;
   $28 = $3;
   $29 = ((($28)) + 1|0);
   HEAP8[$29>>0] = 0;
  }
 } while(0);
 $$expand_i1_val2 = 1;
 HEAP8[$2>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$2>>0]|0;
 $30 = $$pre_trunc&1;
 STACKTOP = sp;return ($30|0);
}
function _user_compile_all_flares_plans($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $7 = sp + 84|0;
 $8 = sp + 64|0;
 $2 = $0;
 $24 = $2;
 $25 = ((($24)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $3 = $26;
 $27 = $2;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $4 = $29;
 L1: while(1) {
  $30 = $4;
  $31 = $3;
  $32 = ($30>>>0)<($31>>>0);
  if (!($32)) {
   label = 45;
   break;
  }
  $33 = $4;
  $34 = ((($33)) + 32|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&1;
  do {
   if (!($36)) {
    $37 = $4;
    $38 = HEAP32[$37>>2]|0;
    $5 = $38;
    $39 = $4;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $6 = $41;
    $42 = $4;
    $43 = ((($42)) + 28|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)!=(0|0);
    if ($45) {
     $46 = $4;
     $47 = ((($46)) + 28|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = HEAP8[$48>>0]|0;
     $50 = ($49<<24>>24)!=(0);
     if ($50) {
      $78 = $4;
      $79 = ((($78)) + 28|0);
      $80 = HEAP32[$79>>2]|0;
      $10 = $80;
      $81 = $4;
      $82 = ((($81)) + 16|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)!=(0|0);
      if ($84) {
       $85 = $4;
       $86 = ((($85)) + 16|0);
       $87 = HEAP32[$86>>2]|0;
       _free($87);
       $88 = $4;
       $89 = ((($88)) + 16|0);
       HEAP32[$89>>2] = 0;
       $90 = $4;
       $91 = ((($90)) + 20|0);
       HEAP32[$91>>2] = 0;
      }
      while(1) {
       $92 = $10;
       $93 = (_strchr($92,58)|0);
       $11 = $93;
       $94 = $11;
       $95 = ($94|0)!=(0|0);
       if (!($95)) {
        label = 13;
        break L1;
       }
       $98 = $10;
       $99 = $11;
       $100 = (_string_starts_with($98,12747,$99)|0);
       do {
        if ($100) {
         $101 = $11;
         $102 = ((($101)) + 1|0);
         $11 = $102;
         $103 = (_atoi($102)|0);
         $12 = $103;
         $104 = $11;
         $13 = $104;
         while(1) {
          $105 = $13;
          $106 = HEAP8[$105>>0]|0;
          $107 = $106 << 24 >> 24;
          $108 = ($107|0)!=(0);
          if ($108) {
           $109 = $13;
           $110 = HEAP8[$109>>0]|0;
           $111 = $110 << 24 >> 24;
           $112 = (_isdigit($111)|0);
           $113 = ($112|0)!=(0);
           $257 = $113;
          } else {
           $257 = 0;
          }
          $114 = $13;
          if (!($257)) {
           break;
          }
          $115 = ((($114)) + 1|0);
          $13 = $115;
         }
         $116 = HEAP8[$114>>0]|0;
         $117 = $116 << 24 >> 24;
         $118 = ($117|0)!=(64);
         if ($118) {
          label = 21;
          break L1;
         }
         $121 = $13;
         $122 = ((($121)) + 1|0);
         $14 = $122;
         $123 = $14;
         $124 = (_strchr($123,44)|0);
         $9 = $124;
         $125 = ($124|0)!=(0|0);
         if (!($125)) {
          $126 = $14;
          $127 = (_strchr($126,0)|0);
          $9 = $127;
         }
         $128 = $5;
         $129 = $6;
         $130 = $14;
         $131 = $9;
         $132 = $14;
         $133 = $131;
         $134 = $132;
         $135 = (($133) - ($134))|0;
         $136 = (_find_flare($128,$129,$130,$135)|0);
         $15 = $136;
         $137 = $15;
         $138 = ($137|0)!=(0|0);
         if (!($138)) {
          label = 25;
          break L1;
         }
         $141 = $4;
         $142 = $15;
         $143 = $12;
         _add_to_plan($141,1,$142,$143);
        } else {
         $144 = $10;
         $145 = $11;
         $146 = (_string_starts_with($144,12844,$145)|0);
         if ($146) {
          $147 = $11;
          $148 = ((($147)) + 1|0);
          $9 = $148;
          $149 = $9;
          $150 = HEAP8[$149>>0]|0;
          $151 = $150 << 24 >> 24;
          $152 = ($151|0)==(44);
          if (!($152)) {
           $153 = $9;
           $154 = HEAP8[$153>>0]|0;
           $155 = ($154<<24>>24)!=(0);
           if ($155) {
            label = 30;
            break L1;
           }
          }
          $158 = $4;
          _add_checkpoint_to_plan($158);
          break;
         }
         $159 = $10;
         $160 = $11;
         $161 = (_string_starts_with($159,12883,$160)|0);
         if (!($161)) {
          label = 38;
          break L1;
         }
         $162 = $11;
         $163 = ((($162)) + 1|0);
         $11 = $163;
         $164 = (_strchr($163,44)|0);
         $165 = ($164|0)!=(0|0);
         if ($165) {
          label = 34;
          break L1;
         }
         $168 = $11;
         $169 = (_strchr($168,0)|0);
         $9 = $169;
         $170 = $5;
         $171 = $6;
         $172 = $11;
         $173 = $9;
         $174 = $11;
         $175 = $173;
         $176 = $174;
         $177 = (($175) - ($176))|0;
         $178 = (_find_flare($170,$171,$172,$177)|0);
         $16 = $178;
         $179 = $16;
         $180 = ($179|0)!=(0|0);
         if (!($180)) {
          label = 36;
          break L1;
         }
         $183 = $4;
         $184 = $16;
         _add_to_plan($183,0,$184,-1);
        }
       } while(0);
       $187 = $9;
       $188 = ((($187)) + 1|0);
       $10 = $188;
       $189 = $9;
       $190 = HEAP8[$189>>0]|0;
       $191 = ($190<<24>>24)!=(0);
       if (!($191)) {
        break;
       }
      }
      $192 = $4;
      $193 = ((($192)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)!=(0|0);
      if ($195) {
       $196 = $4;
       $197 = ((($196)) + 16|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $4;
       $200 = ((($199)) + 20|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = (($201) - 1)|0;
       $203 = (($198) + (($202*20)|0)|0);
       $204 = ((($203)) + 4|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)!=(2);
       if ($206) {
        label = 42;
       }
      } else {
       label = 42;
      }
      if ((label|0) == 42) {
       label = 0;
       $207 = $4;
       _add_checkpoint_to_plan($207);
      }
      $208 = $4;
      $209 = ((($208)) + 32|0);
      HEAP8[$209>>0] = 1;
      break;
     }
    }
    $51 = $4;
    $52 = ((($51)) + 16|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)!=(0|0);
    if ($54) {
     $55 = $4;
     $56 = ((($55)) + 16|0);
     $57 = HEAP32[$56>>2]|0;
     _free($57);
    }
    $58 = $4;
    $59 = ((($58)) + 20|0);
    HEAP32[$59>>2] = 2;
    $60 = $4;
    $61 = ((($60)) + 20|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62*20)|0;
    $64 = (_malloc($63)|0);
    $65 = $4;
    $66 = ((($65)) + 16|0);
    HEAP32[$66>>2] = $64;
    $67 = $4;
    $68 = ((($67)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $4;
    $71 = HEAP32[$70>>2]|0;
    _create_plan_item($7,0,$71,-1);
    ;HEAP32[$69>>2]=HEAP32[$7>>2]|0;HEAP32[$69+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$69+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$69+16>>2]=HEAP32[$7+16>>2]|0;
    $72 = $4;
    $73 = ((($72)) + 16|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ((($74)) + 20|0);
    _create_plan_item($8,2,0,-1);
    ;HEAP32[$75>>2]=HEAP32[$8>>2]|0;HEAP32[$75+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$75+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$75+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$75+16>>2]=HEAP32[$8+16>>2]|0;
    $76 = $4;
    $77 = ((($76)) + 32|0);
    HEAP8[$77>>0] = 1;
   }
  } while(0);
  $210 = $4;
  $211 = ((($210)) + 40|0);
  $4 = $211;
 }
 if ((label|0) == 13) {
  $96 = $2;
  $97 = ((($96)) + 3800|0);
  (_strcpy($97,12711)|0);
  $1 = 1;
  $256 = $1;
  STACKTOP = sp;return ($256|0);
 }
 else if ((label|0) == 21) {
  $119 = $2;
  $120 = ((($119)) + 3800|0);
  (_strcpy($120,12751)|0);
  $1 = 2;
  $256 = $1;
  STACKTOP = sp;return ($256|0);
 }
 else if ((label|0) == 25) {
  $139 = $2;
  $140 = ((($139)) + 3800|0);
  (_strcpy($140,12824)|0);
  $1 = 3;
  $256 = $1;
  STACKTOP = sp;return ($256|0);
 }
 else if ((label|0) == 30) {
  $156 = $2;
  $157 = ((($156)) + 3800|0);
  (_strcpy($157,12847)|0);
  $1 = 4;
  $256 = $1;
  STACKTOP = sp;return ($256|0);
 }
 else if ((label|0) == 34) {
  $166 = $2;
  $167 = ((($166)) + 3800|0);
  (_strcpy($167,12892)|0);
  $1 = 6;
  $256 = $1;
  STACKTOP = sp;return ($256|0);
 }
 else if ((label|0) == 36) {
  $181 = $2;
  $182 = ((($181)) + 3800|0);
  (_strcpy($182,12953)|0);
  $1 = 3;
  $256 = $1;
  STACKTOP = sp;return ($256|0);
 }
 else if ((label|0) == 38) {
  $185 = $2;
  $186 = ((($185)) + 3800|0);
  (_strcpy($186,12993)|0);
  $1 = 5;
  $256 = $1;
  STACKTOP = sp;return ($256|0);
 }
 else if ((label|0) == 45) {
  $212 = $2;
  $213 = ((($212)) + 360|0);
  $214 = +HEAPF64[$213>>3];
  $17 = $214;
  $215 = $2;
  $216 = ((($215)) + 8|0);
  $217 = HEAP32[$216>>2]|0;
  $18 = $217;
  $218 = $2;
  $219 = ((($218)) + 4|0);
  $220 = HEAP32[$219>>2]|0;
  $19 = $220;
  while(1) {
   $221 = $19;
   $222 = $18;
   $223 = ($221>>>0)<($222>>>0);
   if (!($223)) {
    break;
   }
   $224 = $19;
   $225 = ((($224)) + 20|0);
   $226 = HEAP32[$225>>2]|0;
   $20 = $226;
   $227 = $19;
   $228 = ((($227)) + 16|0);
   $229 = HEAP32[$228>>2]|0;
   $21 = $229;
   $22 = 0;
   while(1) {
    $230 = $22;
    $231 = $20;
    $232 = ($230>>>0)<($231>>>0);
    if (!($232)) {
     break;
    }
    $233 = $21;
    $234 = $22;
    $235 = (($233) + (($234*20)|0)|0);
    $23 = $235;
    $236 = $23;
    $237 = ((($236)) + 4|0);
    $238 = HEAP32[$237>>2]|0;
    switch ($238|0) {
    case 1:  {
     $239 = $17;
     $240 = $23;
     $241 = ((($240)) + 16|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = (+($242|0));
     $244 = $239 * $243;
     $245 = (~~(($244)));
     $246 = (_normalize_iters_quota($245)|0);
     $247 = $23;
     $248 = ((($247)) + 12|0);
     HEAP32[$248>>2] = $246;
     break;
    }
    case 0: case 2:  {
     $249 = $23;
     $250 = ((($249)) + 12|0);
     HEAP32[$250>>2] = -1;
     break;
    }
    default: {
    }
    }
    $251 = $22;
    $252 = (($251) + 1)|0;
    $22 = $252;
   }
   $253 = $19;
   $254 = ((($253)) + 40|0);
   $19 = $254;
  }
  $255 = $2;
  _clear_error($255);
  $1 = 0;
  $256 = $1;
  STACKTOP = sp;return ($256|0);
 }
 return (0)|0;
}
function _create_plan_item($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $5;
 HEAP32[$0>>2] = $7;
 $8 = ((($0)) + 4|0);
 $9 = $4;
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 16|0);
 $13 = $6;
 HEAP32[$12>>2] = $13;
 STACKTOP = sp;return;
}
function _string_starts_with($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = $3;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $6 = $11;
 $12 = $6;
 $13 = $4;
 $14 = (_strlen($13)|0);
 $15 = ($12|0)==($14|0);
 if (!($15)) {
  $22 = 0;
  STACKTOP = sp;return ($22|0);
 }
 $16 = $3;
 $17 = $4;
 $18 = $6;
 $19 = (_strncmp($16,$17,$18)|0);
 $20 = ($19|0)!=(0);
 $21 = $20 ^ 1;
 $22 = $21;
 STACKTOP = sp;return ($22|0);
}
function _find_flare($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 (_strncpy($9,$11,31)|0);
 $12 = $8;
 $13 = (31)<($12>>>0);
 $14 = $8;
 $15 = $13 ? 31 : $14;
 $16 = (($9) + ($15)|0);
 HEAP8[$16>>0] = 0;
 $17 = $5;
 $10 = $17;
 while(1) {
  $18 = $10;
  $19 = $6;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   label = 6;
   break;
  }
  $21 = $10;
  $22 = ((($21)) + 317|0);
  $23 = (_strcmp($22,$9)|0);
  $24 = ($23|0)!=(0);
  $25 = $10;
  if (!($24)) {
   label = 4;
   break;
  }
  $26 = ((($25)) + 400|0);
  $10 = $26;
 }
 if ((label|0) == 4) {
  $4 = $25;
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 6) {
  $4 = 0;
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _add_to_plan($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $8 = $12;
 $13 = $4;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $4;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[$17>>2] = $19;
 $20 = ($19*20)|0;
 $21 = (_realloc($15,$20)|0);
 $22 = $4;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = $21;
 $24 = $4;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $8;
 $28 = (($26) + (($27*20)|0)|0);
 $29 = $5;
 $30 = $6;
 $31 = $7;
 _create_plan_item($9,$29,$30,$31);
 ;HEAP32[$28>>2]=HEAP32[$9>>2]|0;HEAP32[$28+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$28+12>>2]=HEAP32[$9+12>>2]|0;HEAP32[$28+16>>2]=HEAP32[$9+16>>2]|0;
 STACKTOP = sp;return;
}
function _add_checkpoint_to_plan($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _add_to_plan($2,2,0,-1);
 STACKTOP = sp;return;
}
function _normalize_iters_quota($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)>(0);
 $4 = $1;
 $5 = $3 ? $4 : 0;
 STACKTOP = sp;return ($5|0);
}
function _resume_solution($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 16|0;
 $2 = $0;
 $3 = 1;
 $17 = $2;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $4 = $19;
 L1: while(1) {
  $20 = $2;
  $21 = (_curr_inst($20)|0);
  $5 = $21;
  $22 = $5;
  $23 = ((($22)) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $5;
  $26 = ((($25)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24|0)==($27|0);
  do {
   if ($28) {
    $29 = $5;
    $30 = ((($29)) + 33|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = $31&1;
    if ($32) {
     $33 = $2;
     $34 = $5;
     _recycle_instance($33,$34);
     $35 = $2;
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($36)) + 40|0);
     HEAP32[$35>>2] = $37;
     break;
    } else {
     $38 = $5;
     $39 = ((($38)) + 33|0);
     HEAP8[$39>>0] = 1;
     $40 = $5;
     $41 = ((($40)) + 24|0);
     HEAP32[$41>>2] = 0;
     label = 6;
     break;
    }
   } else {
    label = 6;
   }
  } while(0);
  do {
   if ((label|0) == 6) {
    label = 0;
    $42 = $5;
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $5;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[$46>>2] = $48;
    $49 = (($44) + (($47*20)|0)|0);
    $6 = $49;
    $50 = $6;
    $51 = ((($50)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)==(2);
    if ($53) {
     $54 = $5;
     $55 = ((($54)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)!=(0|0);
     if ($57) {
      label = 8;
      break L1;
     } else {
      break;
     }
    }
    $71 = $6;
    $72 = ((($71)) + 8|0);
    $73 = HEAP32[$72>>2]|0;
    $7 = $73;
    $74 = $6;
    $75 = HEAP32[$74>>2]|0;
    $8 = $75;
    $76 = $8;
    $9 = $76;
    $77 = $8;
    $78 = $2;
    $79 = ((($78)) + 32|0);
    HEAP32[$79>>2] = $77;
    $80 = $8;
    $81 = ((($80)) + 312|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==(9);
    $84 = $83&1;
    $10 = $84;
    $85 = $10;
    $86 = $85&1;
    if ($86) {
     $87 = $2;
     $88 = ((($87)) + 1652|0);
     $89 = $2;
     $90 = ((($89)) + 36|0);
     $91 = $9;
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $9;
     $95 = ((($94)) + 1|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96&255;
     $98 = $9;
     $99 = ((($98)) + 2|0);
     $100 = HEAP8[$99>>0]|0;
     $101 = $100&255;
     $102 = $2;
     $103 = ((($102)) + 372|0);
     $104 = (_fc_solve_initial_user_state_to_c_proto($88,$90,$93,$97,$101,$103)|0);
     $105 = $2;
     if (!($104)) {
      label = 11;
      break L1;
     }
     $109 = ((($105)) + 36|0);
     $110 = $9;
     $111 = HEAP8[$110>>0]|0;
     $112 = $111&255;
     $113 = $9;
     $114 = ((($113)) + 1|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = $115&255;
     $117 = $9;
     $118 = ((($117)) + 2|0);
     $119 = HEAP8[$118>>0]|0;
     $120 = $119&255;
     $121 = $2;
     $122 = ((($121)) + 336|0);
     $123 = (_fc_solve_check_state_validity($109,$112,$116,$120,$122)|0);
     $124 = $2;
     $125 = ((($124)) + 332|0);
     HEAP32[$125>>2] = $123;
     $126 = (0)!=($123|0);
     $127 = $2;
     if ($126) {
      label = 13;
      break L1;
     }
     $129 = ((($127)) + 306|0);
     _fc_solve_init_locs_205($129);
     $130 = $2;
     $131 = ((($130)) + 288|0);
     $132 = $2;
     $133 = ((($132)) + 306|0);
     dest=$131; src=$133; stop=dest+18|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
     $134 = $2;
     $135 = ((($134)) + 120|0);
     $136 = $2;
     $137 = ((($136)) + 36|0);
     dest=$135; src=$137; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     $138 = $2;
     $139 = ((($138)) + 120|0);
     $140 = ((($139)) + 56|0);
     $141 = ((($140)) + 24|0);
     HEAP32[$141>>2] = 0;
     $142 = $2;
     $143 = ((($142)) + 204|0);
     $144 = $2;
     $145 = ((($144)) + 36|0);
     dest=$143; src=$145; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     $146 = $2;
     $147 = ((($146)) + 204|0);
     $148 = ((($147)) + 56|0);
     $149 = ((($148)) + 24|0);
     HEAP32[$149>>2] = 0;
     $150 = $2;
     $151 = ((($150)) + 36|0);
     $152 = $2;
     $153 = ((($152)) + 288|0);
     $154 = $9;
     $155 = HEAP8[$154>>0]|0;
     $156 = $155&255;
     $157 = $9;
     $158 = ((($157)) + 1|0);
     $159 = HEAP8[$158>>0]|0;
     $160 = $159&255;
     _fc_solve_canonize_state_with_locs($151,$153,$156,$160);
     $161 = $9;
     _init_instance($161);
    }
    $162 = $2;
    $163 = ((($162)) + 12|0);
    $164 = HEAP32[$163>>2]|0;
    HEAP32[$11>>2] = $164;
    $165 = ((($11)) + 4|0);
    $166 = $7;
    $167 = ($166|0)<(0);
    if ($167) {
     $173 = -1;
    } else {
     $168 = $2;
     $169 = ((($168)) + 16|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = $7;
     $172 = (($170) + ($171))|0;
     $173 = $172;
    }
    HEAP32[$165>>2] = $173;
    $174 = $5;
    $175 = ((($174)) + 36|0);
    $176 = HEAP32[$175>>2]|0;
    $12 = $176;
    $13 = 0;
    while(1) {
     $177 = $13;
     $178 = ($177>>>0)<(2);
     if (!($178)) {
      break;
     }
     $179 = $13;
     $180 = (($11) + ($179<<2)|0);
     $181 = HEAP32[$180>>2]|0;
     $14 = $181;
     $182 = $14;
     $183 = ($182|0)>=(0);
     if ($183) {
      $184 = $12;
      $185 = ($184|0)<(0);
      if ($185) {
       $186 = $14;
       $193 = $186;
      } else {
       $187 = $12;
       $188 = $14;
       $189 = ($187|0)<($188|0);
       $190 = $12;
       $191 = $14;
       $192 = $189 ? $190 : $191;
       $193 = $192;
      }
      $12 = $193;
     }
     $194 = $13;
     $195 = (($194) + 1)|0;
     $13 = $195;
    }
    $196 = $12;
    $197 = ($196|0)<(0);
    if ($197) {
     $209 = 2147483647;
    } else {
     $198 = $9;
     $199 = ((($198)) + 8|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = $12;
     $202 = (($200) + ($201))|0;
     $203 = $2;
     $204 = ((($203)) + 16|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = (($202) - ($205))|0;
     $209 = $206;
    }
    $207 = $9;
    $208 = ((($207)) + 12|0);
    HEAP32[$208>>2] = $209;
    $210 = $9;
    $211 = ((($210)) + 8|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = $2;
    $214 = ((($213)) + 24|0);
    HEAP32[$214>>2] = $212;
    $215 = $9;
    $216 = ((($215)) + 144|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $2;
    $219 = ((($218)) + 24|0);
    $220 = ((($219)) + 4|0);
    HEAP32[$220>>2] = $217;
    $221 = $10;
    $222 = $221&1;
    if ($222) {
     $223 = $9;
     $224 = $2;
     $225 = ((($224)) + 36|0);
     $226 = $2;
     $227 = ((($226)) + 204|0);
     _start_process_with_board($223,$225,$227);
    }
    $228 = $8;
    $229 = ((($228)) + 312|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = ($230|0)==(5);
    if ($231) {
     $237 = 1;
    } else {
     $232 = $8;
     $233 = ((($232)) + 312|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = ($234|0)==(9);
     $237 = $235;
    }
    $236 = $237&1;
    $15 = $236;
    $238 = $15;
    $239 = $238&1;
    if ($239) {
     $240 = $9;
     $241 = (_resume_instance($240)|0);
     $242 = $8;
     $243 = ((($242)) + 312|0);
     HEAP32[$243>>2] = $241;
     $244 = $2;
     $245 = ((($244)) + 324|0);
     HEAP32[$245>>2] = $241;
     $3 = $241;
     $246 = $8;
     $247 = ((($246)) + 316|0);
     HEAP8[$247>>0] = 0;
    }
    $248 = $3;
    $249 = ($248|0)!=(5);
    if ($249) {
     $250 = $2;
     $251 = ((($250)) + 328|0);
     HEAP8[$251>>0] = 0;
    }
    $252 = $9;
    $253 = ((($252)) + 8|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = $8;
    $256 = ((($255)) + 372|0);
    HEAP32[$256>>2] = $254;
    $257 = $9;
    $258 = ((($257)) + 144|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = $8;
    $261 = ((($260)) + 372|0);
    $262 = ((($261)) + 4|0);
    HEAP32[$262>>2] = $259;
    $263 = $8;
    $264 = ((($263)) + 372|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = $2;
    $267 = ((($266)) + 24|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = (($265) - ($268))|0;
    $16 = $269;
    $270 = $16;
    $271 = $2;
    $272 = ((($271)) + 16|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = (($273) + ($270))|0;
    HEAP32[$272>>2] = $274;
    $275 = $7;
    $276 = ($275|0)>=(0);
    if ($276) {
     $277 = $7;
     $278 = $16;
     $279 = (($277) - ($278))|0;
     $280 = (_normalize_iters_quota($279)|0);
     $281 = $6;
     $282 = ((($281)) + 8|0);
     HEAP32[$282>>2] = $280;
    }
    $283 = $8;
    $284 = ((($283)) + 372|0);
    $285 = ((($284)) + 4|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = $2;
    $288 = ((($287)) + 24|0);
    $289 = ((($288)) + 4|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = (($286) - ($290))|0;
    $292 = $2;
    $293 = ((($292)) + 16|0);
    $294 = ((($293)) + 4|0);
    $295 = HEAP32[$294>>2]|0;
    $296 = (($295) + ($291))|0;
    HEAP32[$294>>2] = $296;
    $297 = $2;
    $298 = ((($297)) + 24|0);
    $299 = $8;
    $300 = ((($299)) + 372|0);
    ;HEAP32[$298>>2]=HEAP32[$300>>2]|0;HEAP32[$298+4>>2]=HEAP32[$300+4>>2]|0;
    $301 = $2;
    $302 = ((($301)) + 324|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = ($303|0)==(0);
    if ($304) {
     $305 = $8;
     $306 = ((($305)) + 380|0);
     HEAP8[$306>>0] = 0;
     $307 = $5;
     $308 = ((($307)) + 8|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = ($309|0)!=(0|0);
     if ($310) {
      $311 = $2;
      $312 = $5;
      $313 = ((($312)) + 8|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = (_get_flare_move_count($311,$314)|0);
      $316 = $2;
      $317 = $8;
      $318 = (_get_flare_move_count($316,$317)|0);
      $319 = ($315|0)>($318|0);
      if ($319) {
       label = 40;
      }
     } else {
      label = 40;
     }
     if ((label|0) == 40) {
      label = 0;
      $320 = $8;
      $321 = $5;
      $322 = ((($321)) + 8|0);
      HEAP32[$322>>2] = $320;
     }
     $323 = $2;
     $324 = ((($323)) + 324|0);
     HEAP32[$324>>2] = 1;
     $3 = 1;
     break;
    }
    $325 = $2;
    $326 = ((($325)) + 324|0);
    $327 = HEAP32[$326>>2]|0;
    $328 = ($327|0)==(1);
    if ($328) {
     $329 = $15;
     $330 = $329&1;
     if (!($330)) {
      break;
     }
     $331 = $9;
     _recycle_inst($331);
     $332 = $8;
     $333 = ((($332)) + 316|0);
     HEAP8[$333>>0] = 1;
     break;
    }
    $334 = $2;
    $335 = ((($334)) + 324|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = ($336|0)==(5);
    if ($337) {
     $338 = $8;
     $339 = $5;
     $340 = ((($339)) + 12|0);
     HEAP32[$340>>2] = $338;
     $341 = $8;
     $342 = ((($341)) + 380|0);
     HEAP8[$342>>0] = 0;
     $343 = $2;
     $344 = ((($343)) + 12|0);
     $345 = HEAP32[$344>>2]|0;
     $346 = ($345|0)>=(0);
     if ($346) {
      $347 = $2;
      $348 = ((($347)) + 16|0);
      $349 = HEAP32[$348>>2]|0;
      $350 = $2;
      $351 = ((($350)) + 12|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = ($349|0)>=($352|0);
      if ($353) {
       label = 49;
       break L1;
      }
     }
     $354 = $9;
     $355 = ((($354)) + 144|0);
     $356 = HEAP32[$355>>2]|0;
     $357 = $9;
     $358 = ((($357)) + 16|0);
     $359 = HEAP32[$358>>2]|0;
     $360 = ($356|0)>=($359|0);
     if ($360) {
      label = 49;
      break L1;
     }
     $365 = $6;
     $366 = ((($365)) + 12|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = $6;
     $369 = ((($368)) + 8|0);
     HEAP32[$369>>2] = $367;
     $3 = 1;
     $370 = $5;
     $371 = ((($370)) + 36|0);
     $372 = HEAP32[$371>>2]|0;
     $373 = ($372|0)>=(0);
     if ($373) {
      $374 = $9;
      $375 = ((($374)) + 8|0);
      $376 = HEAP32[$375>>2]|0;
      $377 = $5;
      $378 = ((($377)) + 36|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = ($376|0)>=($379|0);
      if ($380) {
       $381 = $9;
       $382 = ((($381)) + 8|0);
       $383 = HEAP32[$382>>2]|0;
       $384 = $8;
       $385 = ((($384)) + 372|0);
       HEAP32[$385>>2] = $383;
       $386 = $9;
       $387 = ((($386)) + 144|0);
       $388 = HEAP32[$387>>2]|0;
       $389 = $8;
       $390 = ((($389)) + 372|0);
       $391 = ((($390)) + 4|0);
       HEAP32[$391>>2] = $388;
       $392 = $2;
       $393 = $5;
       _recycle_instance($392,$393);
       $394 = $2;
       $395 = HEAP32[$394>>2]|0;
       $396 = ((($395)) + 40|0);
       HEAP32[$394>>2] = $396;
       break;
      }
     }
     $397 = $5;
     $398 = ((($397)) + 33|0);
     HEAP8[$398>>0] = 0;
    }
   }
  } while(0);
  $399 = $2;
  $400 = HEAP32[$399>>2]|0;
  $401 = $4;
  $402 = ($400>>>0)<($401>>>0);
  $403 = $3;
  $404 = ($403|0)==(1);
  $405 = $402 ? $404 : 0;
  if (!($405)) {
   break;
  }
 }
 if ((label|0) == 8) {
  $58 = $5;
  $59 = ((($58)) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $2;
  $62 = ((($61)) + 32|0);
  HEAP32[$62>>2] = $60;
  $63 = $2;
  $64 = ((($63)) + 24|0);
  $65 = $2;
  $66 = ((($65)) + 32|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ((($67)) + 372|0);
  ;HEAP32[$64>>2]=HEAP32[$68>>2]|0;HEAP32[$64+4>>2]=HEAP32[$68+4>>2]|0;
  $69 = $2;
  $70 = ((($69)) + 324|0);
  HEAP32[$70>>2] = 0;
  $3 = 0;
 }
 else if ((label|0) == 11) {
  $106 = ((($105)) + 332|0);
  HEAP32[$106>>2] = 4;
  $107 = $2;
  $108 = ((($107)) + 324|0);
  HEAP32[$108>>2] = 8;
  $1 = 8;
  $412 = $1;
  STACKTOP = sp;return ($412|0);
 }
 else if ((label|0) == 13) {
  $128 = ((($127)) + 324|0);
  HEAP32[$128>>2] = 8;
  $1 = 8;
  $412 = $1;
  STACKTOP = sp;return ($412|0);
 }
 else if ((label|0) == 49) {
  $361 = $5;
  $362 = ((($361)) + 24|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = (($363) + -1)|0;
  HEAP32[$362>>2] = $364;
 }
 $406 = $2;
 $407 = ((($406)) + 328|0);
 $408 = HEAP8[$407>>0]|0;
 $409 = $408&1;
 $410 = $3;
 $411 = $409 ? 5 : $410;
 $1 = $411;
 $412 = $1;
 STACKTOP = sp;return ($412|0);
}
function _fc_solve_initial_user_state_to_c_proto($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val18 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
 var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
 var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = sp + 88|0;
 $23 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $29 = $8;
 $30 = $10;
 $31 = $12;
 _fc_solve_state_init_proto($29,$30,$31);
 $32 = $7;
 $13 = $32;
 $14 = 1;
 $15 = 0;
 L1: while(1) {
  $33 = $15;
  $34 = $10;
  $35 = ($33>>>0)<($34>>>0);
  if (!($35)) {
   label = 106;
   break;
  }
  $36 = $14;
  $37 = $36&1;
  if (!($37)) {
   while(1) {
    $38 = $13;
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)!=(10);
    $42 = $13;
    if (!($41)) {
     break;
    }
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = ($44|0)==(0);
    if ($45) {
     label = 7;
     break L1;
    }
    $46 = $13;
    $47 = ((($46)) + 1|0);
    $13 = $47;
   }
   $48 = ((($42)) + 1|0);
   $13 = $48;
  }
  $14 = 0;
  $49 = $13;
  $50 = (_fc_solve__try_prefixes($49,1584)|0);
  $16 = $50;
  $51 = $16;
  $52 = ($51|0)!=(0|0);
  L12: do {
   if ($52) {
    $53 = $16;
    $13 = $53;
    $17 = 0;
    while(1) {
     $54 = $17;
     $55 = $9;
     $56 = ($54>>>0)<($55>>>0);
     if (!($56)) {
      break;
     }
     $57 = $8;
     $58 = ((($57)) + 40|0);
     $59 = $17;
     $60 = (($58) + ($59)|0);
     HEAP8[$60>>0] = 0;
     $61 = $17;
     $62 = (($61) + 1)|0;
     $17 = $62;
    }
    $18 = 0;
    while(1) {
     $63 = $18;
     $64 = $9;
     $65 = ($63>>>0)<($64>>>0);
     if (!($65)) {
      break;
     }
     $66 = $18;
     $67 = ($66|0)!=(0);
     if ($67) {
      while(1) {
       $68 = $13;
       $69 = HEAP8[$68>>0]|0;
       $70 = $69 << 24 >> 24;
       $71 = ($70|0)!=(32);
       if ($71) {
        $72 = $13;
        $73 = HEAP8[$72>>0]|0;
        $74 = $73 << 24 >> 24;
        $75 = ($74|0)!=(9);
        if ($75) {
         $76 = $13;
         $77 = HEAP8[$76>>0]|0;
         $78 = $77 << 24 >> 24;
         $79 = ($78|0)!=(10);
         if ($79) {
          $80 = $13;
          $81 = HEAP8[$80>>0]|0;
          $82 = $81 << 24 >> 24;
          $83 = ($82|0)!=(13);
          $326 = $83;
         } else {
          $326 = 0;
         }
        } else {
         $326 = 0;
        }
       } else {
        $326 = 0;
       }
       $84 = $13;
       $85 = HEAP8[$84>>0]|0;
       $86 = $85 << 24 >> 24;
       if (!($326)) {
        break;
       }
       $87 = ($86|0)==(0);
       if ($87) {
        label = 24;
        break L1;
       }
       $88 = $13;
       $89 = ((($88)) + 1|0);
       $13 = $89;
      }
      $90 = ($86|0)==(10);
      if ($90) {
       break;
      }
      $91 = $13;
      $92 = HEAP8[$91>>0]|0;
      $93 = $92 << 24 >> 24;
      $94 = ($93|0)==(13);
      if ($94) {
       break;
      }
      $95 = $13;
      $96 = ((($95)) + 1|0);
      $13 = $96;
     }
     while(1) {
      $97 = $13;
      $98 = HEAP8[$97>>0]|0;
      $99 = $98 << 24 >> 24;
      $100 = ($99|0)==(32);
      if ($100) {
       $327 = 1;
      } else {
       $101 = $13;
       $102 = HEAP8[$101>>0]|0;
       $103 = $102 << 24 >> 24;
       $104 = ($103|0)==(9);
       $327 = $104;
      }
      $105 = $13;
      if (!($327)) {
       break;
      }
      $106 = ((($105)) + 1|0);
      $13 = $106;
     }
     $107 = HEAP8[$105>>0]|0;
     $108 = $107 << 24 >> 24;
     $109 = ($108|0)==(13);
     if ($109) {
      break;
     }
     $110 = $13;
     $111 = HEAP8[$110>>0]|0;
     $112 = $111 << 24 >> 24;
     $113 = ($112|0)==(10);
     if ($113) {
      break;
     }
     $114 = $13;
     $115 = HEAP8[$114>>0]|0;
     $116 = $115 << 24 >> 24;
     $117 = ($116|0)==(42);
     if ($117) {
      $135 = 0;
     } else {
      $118 = $13;
      $119 = HEAP8[$118>>0]|0;
      $120 = $119 << 24 >> 24;
      $121 = ($120|0)==(45);
      if ($121) {
       $135 = 0;
      } else {
       $122 = $13;
       $123 = (_fcs_str2rank($122)|0);
       $124 = $123&255;
       $19 = $124;
       $125 = $19;
       $126 = ($125<<24>>24)!=(0);
       if (!($126)) {
        label = 39;
        break L1;
       }
       $127 = $19;
       $128 = $127 << 24 >> 24;
       $129 = $13;
       $130 = (_fcs_str2suit($129)|0);
       $131 = (_fcs_make_card($128,$130)|0);
       $20 = $131;
       $132 = $20;
       $133 = $132&255;
       $135 = $133;
      }
     }
     $134 = $135&255;
     $136 = $8;
     $137 = ((($136)) + 40|0);
     $138 = $18;
     $139 = (($137) + ($138)|0);
     HEAP8[$139>>0] = $134;
     $140 = $18;
     $141 = (($140) + 1)|0;
     $18 = $141;
    }
    while(1) {
     $142 = $13;
     $143 = HEAP8[$142>>0]|0;
     $144 = $143 << 24 >> 24;
     $145 = ($144|0)!=(10);
     if (!($145)) {
      break;
     }
     $146 = $13;
     $147 = HEAP8[$146>>0]|0;
     $148 = $147 << 24 >> 24;
     $149 = ($148|0)==(0);
     if ($149) {
      label = 45;
      break L1;
     }
     $150 = $13;
     $151 = ((($150)) + 1|0);
     $13 = $151;
    }
    $152 = $15;
    $153 = (($152) + -1)|0;
    $15 = $153;
   } else {
    $154 = $13;
    $155 = (_fc_solve__try_prefixes($154,1600)|0);
    $21 = $155;
    $156 = $21;
    $157 = ($156|0)!=(0|0);
    if (!($157)) {
     $245 = $13;
     $246 = HEAP8[$245>>0]|0;
     $247 = $246 << 24 >> 24;
     $248 = ($247|0)==(58);
     if ($248) {
      $249 = $13;
      $250 = ((($249)) + 1|0);
      $13 = $250;
     }
     $251 = $8;
     $252 = $15;
     $253 = (($251) + ($252<<2)|0);
     $254 = HEAP32[$253>>2]|0;
     $26 = $254;
     $27 = 0;
     while(1) {
      $255 = $27;
      $256 = ($255|0)<(20);
      if (!($256)) {
       break L12;
      }
      $257 = $27;
      $258 = ($257|0)!=(0);
      if ($258) {
       while(1) {
        $259 = $13;
        $260 = HEAP8[$259>>0]|0;
        $261 = $260 << 24 >> 24;
        $262 = ($261|0)!=(32);
        if ($262) {
         $263 = $13;
         $264 = HEAP8[$263>>0]|0;
         $265 = $264 << 24 >> 24;
         $266 = ($265|0)!=(9);
         if ($266) {
          $267 = $13;
          $268 = HEAP8[$267>>0]|0;
          $269 = $268 << 24 >> 24;
          $270 = ($269|0)!=(10);
          if ($270) {
           $271 = $13;
           $272 = HEAP8[$271>>0]|0;
           $273 = $272 << 24 >> 24;
           $274 = ($273|0)!=(13);
           $329 = $274;
          } else {
           $329 = 0;
          }
         } else {
          $329 = 0;
         }
        } else {
         $329 = 0;
        }
        $275 = $13;
        $276 = HEAP8[$275>>0]|0;
        $277 = $276 << 24 >> 24;
        if (!($329)) {
         break;
        }
        $278 = ($277|0)==(0);
        if ($278) {
         label = 89;
         break L1;
        }
        $279 = $13;
        $280 = ((($279)) + 1|0);
        $13 = $280;
       }
       $281 = ($277|0)==(10);
       if ($281) {
        break L12;
       }
       $282 = $13;
       $283 = HEAP8[$282>>0]|0;
       $284 = $283 << 24 >> 24;
       $285 = ($284|0)==(13);
       if ($285) {
        break L12;
       }
      }
      while(1) {
       $286 = $13;
       $287 = HEAP8[$286>>0]|0;
       $288 = $287 << 24 >> 24;
       $289 = ($288|0)==(32);
       if ($289) {
        $330 = 1;
       } else {
        $290 = $13;
        $291 = HEAP8[$290>>0]|0;
        $292 = $291 << 24 >> 24;
        $293 = ($292|0)==(9);
        $330 = $293;
       }
       $294 = $13;
       if (!($330)) {
        break;
       }
       $295 = ((($294)) + 1|0);
       $13 = $295;
      }
      $296 = HEAP8[$294>>0]|0;
      $297 = $296 << 24 >> 24;
      $298 = ($297|0)==(0);
      if ($298) {
       label = 99;
       break L1;
      }
      $299 = $13;
      $300 = HEAP8[$299>>0]|0;
      $301 = $300 << 24 >> 24;
      $302 = ($301|0)==(10);
      if ($302) {
       break L12;
      }
      $303 = $13;
      $304 = HEAP8[$303>>0]|0;
      $305 = $304 << 24 >> 24;
      $306 = ($305|0)==(13);
      if ($306) {
       break L12;
      }
      $307 = $13;
      $308 = (_fc_solve_card_parse_str($307)|0);
      $28 = $308;
      $309 = $28;
      $310 = $309&255;
      $311 = (2)?($310 >> 2):($310);
      $312 = ($311|0)!=(0);
      if (!($312)) {
       label = 103;
       break L1;
      }
      $313 = $28;
      $314 = $26;
      $315 = $26;
      $316 = HEAP8[$315>>0]|0;
      $317 = (($316) + 1)<<24>>24;
      HEAP8[$315>>0] = $317;
      $318 = $316&255;
      $319 = (($318) + 1)|0;
      $320 = (($314) + ($319)|0);
      HEAP8[$320>>0] = $313;
      $321 = $27;
      $322 = (($321) + 1)|0;
      $27 = $322;
     }
    }
    $158 = $21;
    $13 = $158;
    $22 = 0;
    while(1) {
     $159 = $22;
     $160 = $11;
     $161 = $160 << 2;
     $162 = ($159>>>0)<($161>>>0);
     if (!($162)) {
      break;
     }
     $163 = $8;
     $164 = ((($163)) + 48|0);
     $165 = $22;
     $166 = (($164) + ($165)|0);
     HEAP8[$166>>0] = 0;
     $167 = $22;
     $168 = (($167) + 1)|0;
     $22 = $168;
    }
    ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;HEAP32[$23+12>>2]=0|0;
    while(1) {
     while(1) {
      $169 = $13;
      $170 = HEAP8[$169>>0]|0;
      $171 = $170 << 24 >> 24;
      $172 = ($171|0)==(32);
      if ($172) {
       $328 = 1;
      } else {
       $173 = $13;
       $174 = HEAP8[$173>>0]|0;
       $175 = $174 << 24 >> 24;
       $176 = ($175|0)==(9);
       $328 = $176;
      }
      $177 = $13;
      if (!($328)) {
       break;
      }
      $178 = ((($177)) + 1|0);
      $13 = $178;
     }
     $179 = HEAP8[$177>>0]|0;
     $180 = $179 << 24 >> 24;
     $181 = ($180|0)==(10);
     if ($181) {
      break;
     }
     $182 = $13;
     $183 = HEAP8[$182>>0]|0;
     $184 = $183 << 24 >> 24;
     $185 = ($184|0)==(13);
     if ($185) {
      break;
     }
     $186 = $13;
     $187 = (_fcs_str2suit($186)|0);
     $24 = $187;
     $188 = $13;
     $189 = ((($188)) + 1|0);
     $13 = $189;
     while(1) {
      $190 = $13;
      $191 = HEAP8[$190>>0]|0;
      $192 = $191 << 24 >> 24;
      $193 = ($192|0)==(45);
      $194 = $13;
      if (!($193)) {
       break;
      }
      $195 = ((($194)) + 1|0);
      $13 = $195;
     }
     $196 = HEAP8[$194>>0]|0;
     $197 = $196 << 24 >> 24;
     $198 = ($197|0)==(48);
     if ($198) {
      $201 = 0;
     } else {
      $199 = $13;
      $200 = (_fcs_str2rank($199)|0);
      $201 = $200;
     }
     $25 = $201;
     while(1) {
      $202 = $13;
      $203 = HEAP8[$202>>0]|0;
      $204 = $203 << 24 >> 24;
      $205 = ($204|0)!=(32);
      if (!($205)) {
       break;
      }
      $206 = $13;
      $207 = HEAP8[$206>>0]|0;
      $208 = $207 << 24 >> 24;
      $209 = ($208|0)!=(9);
      if (!($209)) {
       break;
      }
      $210 = $13;
      $211 = HEAP8[$210>>0]|0;
      $212 = $211 << 24 >> 24;
      $213 = ($212|0)!=(10);
      if (!($213)) {
       break;
      }
      $214 = $13;
      $215 = HEAP8[$214>>0]|0;
      $216 = $215 << 24 >> 24;
      $217 = ($216|0)!=(13);
      if (!($217)) {
       break;
      }
      $218 = $13;
      $219 = HEAP8[$218>>0]|0;
      $220 = $219 << 24 >> 24;
      $221 = ($220|0)==(0);
      if ($221) {
       label = 71;
       break L1;
      }
      $222 = $13;
      $223 = ((($222)) + 1|0);
      $13 = $223;
     }
     $224 = $25;
     $225 = $224&255;
     $226 = $8;
     $227 = ((($226)) + 48|0);
     $228 = $24;
     $229 = (($23) + ($228<<2)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $230 << 2;
     $232 = $24;
     $233 = (($231) + ($232))|0;
     $234 = (($227) + ($233)|0);
     HEAP8[$234>>0] = $225;
     $235 = $24;
     $236 = (($23) + ($235<<2)|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = (($237) + 1)|0;
     HEAP32[$236>>2] = $238;
     $239 = $11;
     $240 = ($238>>>0)>=($239>>>0);
     if ($240) {
      $241 = $24;
      $242 = (($23) + ($241<<2)|0);
      HEAP32[$242>>2] = 0;
     }
    }
    $243 = $15;
    $244 = (($243) + -1)|0;
    $15 = $244;
   }
  } while(0);
  $323 = $15;
  $324 = (($323) + 1)|0;
  $15 = $324;
 }
 if ((label|0) == 7) {
  $$expand_i1_val = 0;
  HEAP8[$6>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $325 = $$pre_trunc&1;
  STACKTOP = sp;return ($325|0);
 }
 else if ((label|0) == 24) {
  $$expand_i1_val4 = 0;
  HEAP8[$6>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $325 = $$pre_trunc&1;
  STACKTOP = sp;return ($325|0);
 }
 else if ((label|0) == 39) {
  $$expand_i1_val6 = 0;
  HEAP8[$6>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $325 = $$pre_trunc&1;
  STACKTOP = sp;return ($325|0);
 }
 else if ((label|0) == 45) {
  $$expand_i1_val8 = 0;
  HEAP8[$6>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $325 = $$pre_trunc&1;
  STACKTOP = sp;return ($325|0);
 }
 else if ((label|0) == 71) {
  $$expand_i1_val10 = 0;
  HEAP8[$6>>0] = $$expand_i1_val10;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $325 = $$pre_trunc&1;
  STACKTOP = sp;return ($325|0);
 }
 else if ((label|0) == 89) {
  $$expand_i1_val12 = 0;
  HEAP8[$6>>0] = $$expand_i1_val12;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $325 = $$pre_trunc&1;
  STACKTOP = sp;return ($325|0);
 }
 else if ((label|0) == 99) {
  $$expand_i1_val14 = 0;
  HEAP8[$6>>0] = $$expand_i1_val14;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $325 = $$pre_trunc&1;
  STACKTOP = sp;return ($325|0);
 }
 else if ((label|0) == 103) {
  $$expand_i1_val16 = 0;
  HEAP8[$6>>0] = $$expand_i1_val16;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $325 = $$pre_trunc&1;
  STACKTOP = sp;return ($325|0);
 }
 else if ((label|0) == 106) {
  $$expand_i1_val18 = 1;
  HEAP8[$6>>0] = $$expand_i1_val18;
  $$pre_trunc = HEAP8[$6>>0]|0;
  $325 = $$pre_trunc&1;
  STACKTOP = sp;return ($325|0);
 }
 return (0)|0;
}
function _fc_solve_check_state_validity($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $11 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $26 = $6;
 $12 = $26;
 $13 = 0;
 while(1) {
  $27 = $13;
  $28 = ($27|0)<(4);
  if (!($28)) {
   break;
  }
  $14 = 1;
  while(1) {
   $29 = $14;
   $30 = ($29|0)<=(13);
   $31 = $13;
   if (!($30)) {
    break;
   }
   $32 = (($11) + (($31*56)|0)|0);
   $33 = $14;
   $34 = (($32) + ($33<<2)|0);
   HEAP32[$34>>2] = 0;
   $35 = $14;
   $36 = (($35) + 1)|0;
   $14 = $36;
  }
  $37 = (($31) + 1)|0;
  $13 = $37;
 }
 $15 = 0;
 while(1) {
  $38 = $15;
  $39 = $9;
  $40 = $39 << 2;
  $41 = ($38>>>0)<($40>>>0);
  if (!($41)) {
   break;
  }
  $16 = 1;
  while(1) {
   $42 = $16;
   $43 = $12;
   $44 = ((($43)) + 48|0);
   $45 = $15;
   $46 = (($44) + ($45)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = ($42|0)<=($48|0);
   $50 = $15;
   if (!($49)) {
    break;
   }
   $51 = (($50>>>0) % 4)&-1;
   $52 = (($11) + (($51*56)|0)|0);
   $53 = $16;
   $54 = (($52) + ($53<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) + 1)|0;
   HEAP32[$54>>2] = $56;
   $57 = $16;
   $58 = (($57) + 1)|0;
   $16 = $58;
  }
  $59 = (($50) + 1)|0;
  $15 = $59;
 }
 $17 = 0;
 while(1) {
  $60 = $17;
  $61 = $7;
  $62 = ($60>>>0)<($61>>>0);
  if (!($62)) {
   break;
  }
  $63 = $12;
  $64 = ((($63)) + 40|0);
  $65 = $17;
  $66 = (($64) + ($65)|0);
  $67 = HEAP8[$66>>0]|0;
  $18 = $67;
  $68 = $18;
  $69 = $68&255;
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = $18;
   $72 = $71&255;
   $73 = $72 & 3;
   $74 = (($11) + (($73*56)|0)|0);
   $75 = $18;
   $76 = $75&255;
   $77 = (2)?($76 >> 2):($76);
   $78 = (($74) + ($77<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + 1)|0;
   HEAP32[$78>>2] = $80;
  }
  $81 = $17;
  $82 = (($81) + 1)|0;
  $17 = $82;
 }
 $19 = 0;
 L24: while(1) {
  $83 = $19;
  $84 = $8;
  $85 = ($83>>>0)<($84>>>0);
  if (!($85)) {
   break;
  }
  $86 = $12;
  $87 = $19;
  $88 = (($86) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $20 = $89;
  $90 = $20;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $21 = $92;
  $22 = 0;
  while(1) {
   $93 = $22;
   $94 = $21;
   $95 = ($93|0)<($94|0);
   if (!($95)) {
    break;
   }
   $96 = $20;
   $97 = $22;
   $98 = (($97) + 1)|0;
   $99 = (($96) + ($98)|0);
   $100 = HEAP8[$99>>0]|0;
   $23 = $100;
   $101 = $23;
   $102 = $101&255;
   $103 = ($102|0)==(0);
   if ($103) {
    label = 23;
    break L24;
   }
   $105 = $23;
   $106 = $105&255;
   $107 = $106 & 3;
   $108 = (($11) + (($107*56)|0)|0);
   $109 = $23;
   $110 = $109&255;
   $111 = (2)?($110 >> 2):($110);
   $112 = (($108) + ($111<<2)|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + 1)|0;
   HEAP32[$112>>2] = $114;
   $115 = $22;
   $116 = (($115) + 1)|0;
   $22 = $116;
  }
  $117 = $19;
  $118 = (($117) + 1)|0;
  $19 = $118;
 }
 if ((label|0) == 23) {
  $104 = $10;
  HEAP8[$104>>0] = 0;
  $5 = 3;
  $144 = $5;
  STACKTOP = sp;return ($144|0);
 }
 $24 = 0;
 L36: while(1) {
  $119 = $24;
  $120 = ($119>>>0)<(4);
  if (!($120)) {
   label = 34;
   break;
  }
  $25 = 1;
  while(1) {
   $121 = $25;
   $122 = ($121>>>0)<=(13);
   $123 = $24;
   if (!($122)) {
    break;
   }
   $124 = (($11) + (($123*56)|0)|0);
   $125 = $25;
   $126 = (($124) + ($125<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = $9;
   $129 = ($127|0)!=($128|0);
   $130 = $25;
   if ($129) {
    label = 31;
    break L36;
   }
   $142 = (($130) + 1)|0;
   $25 = $142;
  }
  $143 = (($123) + 1)|0;
  $24 = $143;
 }
 if ((label|0) == 31) {
  $131 = $24;
  $132 = (_fcs_make_card($130,$131)|0);
  $133 = $10;
  HEAP8[$133>>0] = $132;
  $134 = $24;
  $135 = (($11) + (($134*56)|0)|0);
  $136 = $25;
  $137 = (($135) + ($136<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $9;
  $140 = ($138>>>0)<($139>>>0);
  $141 = $140 ? 1 : 2;
  $5 = $141;
  $144 = $5;
  STACKTOP = sp;return ($144|0);
 }
 else if ((label|0) == 34) {
  $5 = 0;
  $144 = $5;
  STACKTOP = sp;return ($144|0);
 }
 return (0)|0;
}
function _init_instance($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $4 = sp + 244|0;
 $8 = sp + 224|0;
 $9 = sp;
 $1 = $0;
 $10 = $1;
 $11 = ((($10)) + 152|0);
 $12 = HEAP32[$11>>2]|0;
 $2 = $12;
 $13 = $2;
 $14 = $1;
 $15 = ((($14)) + 148|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($13) + (($16*1356)|0)|0);
 $3 = $17;
 while(1) {
  $18 = $2;
  $19 = $3;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = $1;
  $22 = $2;
  HEAP32[$22>>2] = $21;
  $23 = $2;
  $24 = ((($23)) + 1352|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0|0);
  if ($26) {
   $27 = $2;
   $28 = ((($27)) + 1336|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0|0);
   if (!($30)) {
    $31 = $2;
    _compile_prelude($31);
   }
  }
  $32 = $2;
  $33 = $2;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 528|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $2;
  $39 = ((($38)) + 16|0);
  _set_next_soft_thread($32,0,$37,$39);
  $40 = $2;
  $41 = ((($40)) + 1356|0);
  $2 = $41;
 }
 HEAP32[$4>>2] = 0;
 $42 = $1;
 _fc_solve_foreach_soft_thread($42,2,$4);
 $43 = $1;
 _fc_solve_foreach_soft_thread($43,3,$4);
 $44 = $1;
 $45 = ((($44)) + 138|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&1;
 if ($47) {
  STACKTOP = sp;return;
 }
 $5 = 0;
 $48 = (_malloc(128)|0);
 $6 = $48;
 $7 = 0;
 while(1) {
  $49 = HEAP32[$4>>2]|0;
  $50 = ($49|0)!=(0);
  if (!($50)) {
   break;
  }
  $51 = HEAP32[$4>>2]|0;
  $52 = $51 & 1;
  $53 = ($52|0)!=(0);
  if ($53) {
   $54 = $7;
   $55 = $6;
   $56 = $5;
   $57 = (($56) + 1)|0;
   $5 = $57;
   $58 = (($55) + ($56<<2)|0);
   HEAP32[$58>>2] = $54;
  }
  $59 = $7;
  $60 = (($59) + 1)|0;
  $7 = $60;
  $61 = HEAP32[$4>>2]|0;
  $62 = (1)?($61 >>> 1):($61);
  HEAP32[$4>>2] = $62;
 }
 $63 = $6;
 $64 = $5;
 $65 = $64 & -16;
 $66 = (($65) + 16)|0;
 $67 = $66<<2;
 $68 = (_realloc($63,$67)|0);
 $6 = $68;
 $69 = $1;
 $70 = ((($69)) + 176|0);
 HEAP32[$8>>2] = 1;
 $71 = ((($8)) + 4|0);
 $72 = (_malloc(3584)|0);
 HEAP32[$71>>2] = $72;
 ;HEAP32[$70>>2]=HEAP32[$8>>2]|0;HEAP32[$70+4>>2]=HEAP32[$8+4>>2]|0;
 $73 = $1;
 $74 = ((($73)) + 176|0);
 $75 = ((($74)) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 _memset(($9|0),0,224)|0;
 $77 = $6;
 HEAP32[$9>>2] = $77;
 $78 = ((($9)) + 4|0);
 $79 = $5;
 HEAP32[$78>>2] = $79;
 $80 = ((($9)) + 8|0);
 HEAP32[$80>>2] = 0;
 _memcpy(($76|0),($9|0),224)|0;
 $81 = $1;
 $82 = ((($81)) + 138|0);
 HEAP8[$82>>0] = 1;
 STACKTOP = sp;return;
}
function _start_process_with_board($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $5;
 $12 = $3;
 $13 = ((($12)) + 300|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = ((($14)) + 292|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = ((($17)) + 32|0);
 _fc_solve_hash_init($16,$18,1);
 $19 = $3;
 $20 = ((($19)) + 292|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $3;
 $23 = ((($22)) + 80|0);
 _fc_solve_hash_init($21,$23,0);
 $24 = $3;
 $25 = ((($24)) + 196|0);
 $26 = $4;
 dest=$6; src=$26; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $27 = ((($6)) + 56|0);
 ;HEAP32[$27>>2]=0|0;HEAP32[$27+4>>2]=0|0;HEAP32[$27+8>>2]=0|0;HEAP32[$27+12>>2]=0|0;HEAP32[$27+16>>2]=0|0;HEAP32[$27+20>>2]=0|0;HEAP32[$27+24>>2]=0|0;
 $28 = ((($27)) + 18|0);
 HEAP8[$28>>0] = 0;
 $29 = ((($27)) + 19|0);
 HEAP8[$29>>0] = 0;
 $30 = ((($27)) + 24|0);
 HEAP32[$30>>2] = -1;
 dest=$25; src=$6; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $31 = $3;
 _update_initial_cards_val($31);
 $32 = $3;
 $33 = ((($32)) + 196|0);
 _FCS_STATE_keyval_pair_to_kv_255($8,$33);
 $34 = $3;
 $35 = ((($34)) + 152|0);
 $36 = HEAP32[$35>>2]|0;
 (_fc_solve_check_and_add_state($36,$8,$7)|0);
 $37 = $3;
 $38 = ((($37)) + 152|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $3;
 $41 = ((($40)) + 156|0);
 HEAP32[$41>>2] = $39;
 $42 = $3;
 $43 = ((($42)) + 152|0);
 $44 = HEAP32[$43>>2]|0;
 $9 = $44;
 $45 = $9;
 $46 = $3;
 $47 = ((($46)) + 148|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($45) + (($48*1356)|0)|0);
 $10 = $49;
 while(1) {
  $50 = $9;
  $51 = $10;
  $52 = ($50>>>0)<($51>>>0);
  if (!($52)) {
   break;
  }
  $53 = $9;
  $54 = ((($53)) + 1332|0);
  HEAP32[$54>>2] = 0;
  $55 = $9;
  $56 = ((($55)) + 1336|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0|0);
  if ($58) {
   $59 = $9;
   $60 = $9;
   $61 = ((($60)) + 1336|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $9;
   $64 = ((($63)) + 16|0);
   _set_next_prelude_item($59,$62,$64);
  }
  $65 = $9;
  $66 = ((($65)) + 1356|0);
  $9 = $66;
 }
 $67 = $3;
 $68 = ((($67)) + 135|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 $71 = $3;
 $72 = ((($71)) + 133|0);
 $73 = $70&1;
 HEAP8[$72>>0] = $73;
 STACKTOP = sp;return;
}
function _resume_instance($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 5;
 $5 = $1;
 $6 = ((($5)) + 137|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 $9 = $1;
 if ($8) {
  $10 = ((($9)) + 160|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_fc_solve_befs_or_bfs_do_solve($13)|0);
  $2 = $14;
 } else {
  $15 = ((($9)) + 152|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = ((($17)) + 148|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($16) + (($19*1356)|0)|0);
  $3 = $20;
  $21 = $1;
  $22 = ((($21)) + 156|0);
  $23 = HEAP32[$22>>2]|0;
  $4 = $23;
  L4: while(1) {
   $24 = $1;
   $25 = ((($24)) + 172|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = ((($27)) + 148|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($26>>>0)<($29>>>0);
   if (!($30)) {
    break;
   }
   while(1) {
    $31 = $4;
    $32 = $3;
    $33 = ($31>>>0)<($32>>>0);
    if (!($33)) {
     break;
    }
    $34 = $4;
    $35 = (_run_hard_thread($34)|0);
    $2 = $35;
    $36 = $2;
    $37 = ($36|0)==(1);
    $38 = $2;
    $39 = ($38|0)==(0);
    $or$cond = $37 | $39;
    if ($or$cond) {
     break L4;
    }
    $40 = $2;
    $41 = ($40|0)==(5);
    if ($41) {
     $42 = $1;
     $43 = ((($42)) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = $1;
     $46 = ((($45)) + 12|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($44|0)>=($47|0);
     if ($48) {
      break L4;
     }
     $49 = $1;
     $50 = ((($49)) + 144|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = $1;
     $53 = ((($52)) + 16|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($51|0)>=($54|0);
     if ($55) {
      break L4;
     }
    }
    $56 = $4;
    $57 = ((($56)) + 1356|0);
    $4 = $57;
   }
   $58 = $1;
   $59 = ((($58)) + 152|0);
   $60 = HEAP32[$59>>2]|0;
   $4 = $60;
  }
  $61 = $4;
  $62 = $1;
  $63 = ((($62)) + 156|0);
  HEAP32[$63>>2] = $61;
  $64 = $1;
  $65 = ((($64)) + 172|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $1;
  $68 = ((($67)) + 148|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($66|0)==($69|0);
  if ($70) {
   $2 = 1;
  }
 }
 $71 = $2;
 $72 = ($71|0)==(0);
 if (!($72)) {
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 $73 = $1;
 $74 = ((($73)) + 136|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&1;
 if (!($76)) {
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 $77 = $1;
 $78 = ((($77)) + 137|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&1;
 if ($80) {
  $83 = $2;
  STACKTOP = sp;return ($83|0);
 }
 $81 = $1;
 $82 = (_optimize_solution($81)|0);
 $2 = $82;
 $83 = $2;
 STACKTOP = sp;return ($83|0);
}
function _get_flare_move_count($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 _trace_flare_solution($5,$6);
 $7 = $3;
 $8 = ((($7)) + 352|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 $11 = $4;
 if ($10) {
  $12 = ((($11)) + 352|0);
  $13 = HEAP32[$12>>2]|0;
  $2 = $13;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $14 = ((($11)) + 360|0);
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  $18 = $4;
  $19 = ((($18)) + 360|0);
  $20 = $3;
  $21 = ((($20)) + 204|0);
  $22 = $3;
  $23 = ((($22)) + 3704|0);
  $24 = ((($23)) + 12|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $4;
  $28 = ((($27)) + 352|0);
  _fc_solve_moves_processed_gen($19,$21,$26,$28);
 }
 $29 = $4;
 $30 = ((($29)) + 360|0);
 $31 = (_fc_solve_moves_processed_get_moves_left($30)|0);
 $2 = $31;
 $32 = $2;
 STACKTOP = sp;return ($32|0);
}
function _fc_solve_moves_processed_get_moves_left($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 STACKTOP = sp;return ($7|0);
}
function _run_hard_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = $0;
 $17 = $2;
 $18 = ((($17)) + 1328|0);
 $19 = HEAP32[$18>>2]|0;
 $3 = $19;
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $4 = $21;
 $22 = $2;
 $23 = ((($22)) + 16|0);
 $5 = $23;
 $6 = 5;
 $24 = $2;
 $25 = ((($24)) + 1344|0);
 $26 = HEAP32[$25>>2]|0;
 $7 = $26;
 $27 = $2;
 $28 = ((($27)) + 1336|0);
 $29 = HEAP32[$28>>2]|0;
 $8 = $29;
 $30 = $2;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $9 = $32;
 while(1) {
  $33 = $2;
  $34 = ((($33)) + 1348|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $7;
  $37 = ($35>>>0)<($36>>>0);
  if (!($37)) {
   label = 27;
   break;
  }
  $38 = $9;
  $39 = $5;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + (($40*552)|0)|0);
  $10 = $41;
  $42 = $10;
  $43 = ((($42)) + 520|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&1;
  if ($45) {
   $46 = $2;
   $47 = $7;
   $48 = $9;
   $49 = $8;
   $50 = $3;
   $51 = $5;
   _switch_to_next_soft_thread($46,$47,$48,$49,$50,$51);
   continue;
  }
  $52 = $10;
  $53 = ((($52)) + 521|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&1;
  if (!($55)) {
   $56 = $10;
   _init_dfs($56);
   $57 = $10;
   _fc_solve_soft_thread_init_befs_or_bfs($57);
   $58 = $10;
   $59 = ((($58)) + 544|0);
   $60 = HEAP32[$59>>2]|0;
   $11 = $60;
   $61 = $11;
   $62 = ($61|0)!=(0|0);
   if ($62) {
    $63 = $11;
    _fc_solve_pats__init_buckets($63);
    $64 = $11;
    _fc_solve_pats__init_clusters($64);
    $65 = $11;
    $66 = ((($65)) + 820|0);
    $67 = $4;
    $68 = ((($67)) + 300|0);
    $69 = HEAP32[$68>>2]|0;
    dest=$66; src=$69; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $70 = $11;
    $71 = ((($70)) + 820|0);
    $72 = ((($71)) + 56|0);
    _memset(($72|0),0,1280)|0;
    $73 = $4;
    $74 = ((($73)) + 1|0);
    $75 = HEAP8[$74>>0]|0;
    $76 = $75&255;
    $12 = $76;
    $13 = 0;
    while(1) {
     $77 = $13;
     $78 = $12;
     $79 = ($77>>>0)<($78>>>0);
     $80 = $11;
     if (!($79)) {
      break;
     }
     $81 = ((($80)) + 820|0);
     $82 = $13;
     $83 = (($81) + ($82<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $14 = $84;
     $85 = $11;
     $86 = ((($85)) + 820|0);
     $87 = ((($86)) + 56|0);
     $88 = $13;
     $89 = $88 << 7;
     $90 = (($87) + ($89)|0);
     $15 = $90;
     $91 = $15;
     $92 = $14;
     $93 = $14;
     $94 = HEAP8[$93>>0]|0;
     $95 = $94&255;
     $96 = (($95) + 1)|0;
     _memmove(($91|0),($92|0),($96|0))|0;
     $97 = $15;
     $98 = $11;
     $99 = ((($98)) + 820|0);
     $100 = $13;
     $101 = (($99) + ($100<<2)|0);
     HEAP32[$101>>2] = $97;
     $102 = $13;
     $103 = (($102) + 1)|0;
     $13 = $103;
    }
    _fc_solve_pats__initialize_solving_process($80);
   }
   $104 = $10;
   $105 = ((($104)) + 521|0);
   HEAP8[$105>>0] = 1;
  }
  $106 = $10;
  $107 = (_solve($106)|0);
  $6 = $107;
  $108 = $2;
  $109 = ((($108)) + 8|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $2;
  $112 = ((($111)) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = ($110|0)>=($113|0);
  if ($114) {
   $115 = $2;
   $116 = $7;
   $117 = $9;
   $118 = $8;
   $119 = $3;
   $120 = $5;
   _switch_to_next_soft_thread($115,$116,$117,$118,$119,$120);
  }
  $121 = $6;
  $122 = ($121|0)==(1);
  if ($122) {
   $123 = $10;
   $124 = ((($123)) + 520|0);
   HEAP8[$124>>0] = 1;
   $125 = $2;
   $126 = ((($125)) + 1348|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + 1)|0;
   HEAP32[$126>>2] = $128;
   $129 = $7;
   $130 = ($128|0)==($129|0);
   if ($130) {
    $131 = $4;
    $132 = ((($131)) + 172|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (($133) + 1)|0;
    HEAP32[$132>>2] = $134;
   }
   $135 = $10;
   $136 = ((($135)) + 522|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&1;
   if ($138) {
    $139 = $4;
    $140 = ((($139)) + 134|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&1;
    if (!($142)) {
     label = 19;
     break;
    }
   }
   $6 = 5;
  }
  $143 = $6;
  $144 = ($143|0)==(0);
  $145 = $144&1;
  $16 = $145;
  $146 = $10;
  $147 = $4;
  $148 = ((($147)) + 296|0);
  HEAP32[$148>>2] = $146;
  $149 = $16;
  $150 = $149&1;
  if ($150) {
   label = 25;
   break;
  }
  $151 = $6;
  $152 = ($151|0)==(5);
  if ($152) {
   $153 = $4;
   $154 = ((($153)) + 8|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $4;
   $157 = ((($156)) + 12|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = ($155|0)>=($158|0);
   if ($159) {
    label = 25;
    break;
   }
   $160 = $4;
   $161 = ((($160)) + 144|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = $4;
   $164 = ((($163)) + 16|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = ($162|0)>=($165|0);
   if ($166) {
    label = 25;
    break;
   }
  }
 }
 if ((label|0) == 19) {
  $1 = 1;
  $169 = $1;
  STACKTOP = sp;return ($169|0);
 }
 else if ((label|0) == 25) {
  $167 = $6;
  $1 = $167;
  $169 = $1;
  STACKTOP = sp;return ($169|0);
 }
 else if ((label|0) == 27) {
  $168 = $6;
  $1 = $168;
  $169 = $1;
  STACKTOP = sp;return ($169|0);
 }
 return (0)|0;
}
function _optimize_solution($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 284|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $9 = $1;
  _fc_solve_trace_solution($9);
 }
 $10 = $1;
 $11 = ((($10)) + 133|0);
 HEAP8[$11>>0] = 1;
 $12 = $1;
 $13 = ((($12)) + 160|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $40 = $1;
  $41 = ((($40)) + 160|0);
  $42 = HEAP32[$41>>2]|0;
  $3 = $42;
  $43 = $3;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $2 = $45;
  $46 = $1;
  $47 = $2;
  _setup_opt_thread__helper($46,$47);
  $48 = $3;
  $49 = ((($48)) + 12|0);
  HEAP32[$49>>2] = 2147483647;
  $50 = $2;
  $51 = (_fc_solve_befs_or_bfs_do_solve($50)|0);
  STACKTOP = sp;return ($51|0);
 } else {
  $16 = (_malloc(1356)|0);
  $3 = $16;
  $17 = $1;
  $18 = ((($17)) + 160|0);
  HEAP32[$18>>2] = $16;
  $19 = $1;
  $20 = $3;
  _fc_solve_instance__init_hard_thread($19,$20);
  $21 = $1;
  $22 = ((($21)) + 156|0);
  $23 = HEAP32[$22>>2]|0;
  $4 = $23;
  $24 = $3;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $2 = $26;
  $27 = $4;
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $4;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + (($32*552)|0)|0);
  $34 = ((($33)) + 542|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&1;
  $37 = $2;
  $38 = ((($37)) + 542|0);
  $39 = $36&1;
  HEAP8[$38>>0] = $39;
  $46 = $1;
  $47 = $2;
  _setup_opt_thread__helper($46,$47);
  $48 = $3;
  $49 = ((($48)) + 12|0);
  HEAP32[$49>>2] = 2147483647;
  $50 = $2;
  $51 = (_fc_solve_befs_or_bfs_do_solve($50)|0);
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _setup_opt_thread__helper($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 138|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 if ($9) {
  $10 = $3;
  $11 = ((($10)) + 8|0);
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $3;
   _fc_solve_free_soft_thread_by_depth_move_array($15);
  }
  $16 = $3;
  $17 = ((($16)) + 8|0);
  HEAP32[$4>>2] = 1;
  $18 = ((($4)) + 4|0);
  $19 = (_malloc(12)|0);
  HEAP32[$18>>2] = $19;
  ;HEAP32[$17>>2]=HEAP32[$4>>2]|0;HEAP32[$17+4>>2]=HEAP32[$4+4>>2]|0;
  $20 = $3;
  $21 = ((($20)) + 8|0);
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$5>>2] = 2147483647;
  $24 = ((($5)) + 4|0);
  $25 = $2;
  $26 = ((($25)) + 176|0);
  _moves_order_dup_253($24,$26);
  ;HEAP32[$23>>2]=HEAP32[$5>>2]|0;HEAP32[$23+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$5+8>>2]|0;
 }
 $27 = $3;
 $28 = ((($27)) + 16|0);
 HEAP32[$28>>2] = 1;
 $29 = $3;
 $30 = ((($29)) + 550|0);
 HEAP8[$30>>0] = 1;
 $31 = $3;
 $32 = ((($31)) + 549|0);
 HEAP8[$32>>0] = 0;
 $33 = $3;
 $34 = ((($33)) + 522|0);
 HEAP8[$34>>0] = 1;
 $35 = $3;
 _fc_solve_soft_thread_init_befs_or_bfs($35);
 $36 = $3;
 $37 = ((($36)) + 521|0);
 HEAP8[$37>>0] = 1;
 $38 = $2;
 $39 = ((($38)) + 137|0);
 HEAP8[$39>>0] = 1;
 STACKTOP = sp;return;
}
function _moves_order_dup_253($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $2 = $1;
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 $8 = $3;
 HEAP32[$4>>2] = $8;
 $9 = ((($4)) + 4|0);
 $10 = $2;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $14 = $13 & -16;
 $15 = (($14) + 16)|0;
 $16 = ($15*224)|0;
 $17 = (_memdup_202($12,$16)|0);
 HEAP32[$9>>2] = $17;
 $5 = 0;
 while(1) {
  $18 = $5;
  $19 = $3;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $21 = ((($4)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $5;
  $24 = (($22) + (($23*224)|0)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($4)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = (($27) + (($28*224)|0)|0);
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 & -16;
  $33 = (($32) + 16)|0;
  $34 = $33<<2;
  $35 = (_memdup_202($25,$34)|0);
  $36 = ((($4)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $5;
  $39 = (($37) + (($38*224)|0)|0);
  HEAP32[$39>>2] = $35;
  $40 = $5;
  $41 = (($40) + 1)|0;
  $5 = $41;
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function _switch_to_next_soft_thread($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $13 = $6;
 $14 = ((($13)) + 1332|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $10;
 $17 = ($15>>>0)<($16>>>0);
 if ($17) {
  $18 = $6;
  $19 = $9;
  $20 = $11;
  _set_next_prelude_item($18,$19,$20);
  STACKTOP = sp;return;
 } else {
  $21 = $11;
  $22 = HEAP32[$21>>2]|0;
  $23 = (1 + ($22))|0;
  $24 = $7;
  $25 = (($23>>>0) % ($24>>>0))&-1;
  $12 = $25;
  $26 = $6;
  $27 = $12;
  $28 = $8;
  $29 = $12;
  $30 = (($28) + (($29*552)|0)|0);
  $31 = ((($30)) + 528|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $11;
  _set_next_soft_thread($26,$27,$32,$33);
  STACKTOP = sp;return;
 }
}
function _init_dfs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $12 = sp + 248|0;
 $14 = sp + 236|0;
 $15 = sp + 232|0;
 $18 = sp;
 $1 = $0;
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $2 = $21;
 $22 = $1;
 $23 = ((($22)) + 24|0);
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = 0;
 $25 = $1;
 _increase_dfs_max_depth($25);
 $26 = $2;
 $27 = ((($26)) + 196|0);
 $28 = $1;
 $29 = ((($28)) + 24|0);
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$31>>2] = $27;
 $32 = $1;
 $33 = ((($32)) + 24|0);
 $34 = ((($33)) + 12|0);
 $35 = $1;
 $36 = ((($35)) + 24|0);
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 _fc_solve_rand_init($34,$38);
 $39 = $1;
 $40 = ((($39)) + 24|0);
 $41 = ((($40)) + 20|0);
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  STACKTOP = sp;return;
 }
 $45 = $1;
 $46 = ((($45)) + 548|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&1;
 $49 = $48&1;
 $3 = $49;
 $50 = $1;
 $51 = ((($50)) + 24|0);
 $52 = ((($51)) + 20|0);
 $4 = $52;
 $53 = $1;
 $54 = ((($53)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $4;
 HEAP32[$56>>2] = $55;
 $57 = ($55*12)|0;
 $58 = (_malloc($57)|0);
 $59 = $4;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = $1;
 $62 = ((($61)) + 8|0);
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $5 = $64;
 $65 = $4;
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $6 = $67;
 $68 = $1;
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $7 = $70;
 $8 = 0;
 while(1) {
  $71 = $8;
  $72 = $7;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $5;
  $75 = $8;
  $76 = (($74) + (($75*12)|0)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $6;
  HEAP32[$78>>2] = $77;
  $79 = $5;
  $80 = $8;
  $81 = (($79) + (($80*12)|0)|0);
  $82 = ((($81)) + 4|0);
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $9 = $84;
  $85 = $5;
  $86 = $8;
  $87 = (($85) + (($86*12)|0)|0);
  $88 = ((($87)) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $10 = $89;
  $90 = $6;
  $91 = ((($90)) + 4|0);
  $11 = $91;
  $92 = $11;
  HEAP32[$12>>2] = 0;
  $93 = ((($12)) + 4|0);
  $94 = $10;
  $95 = ($94*224)|0;
  $96 = (_malloc($95)|0);
  HEAP32[$93>>2] = $96;
  ;HEAP32[$92>>2]=HEAP32[$12>>2]|0;HEAP32[$92+4>>2]=HEAP32[$12+4>>2]|0;
  $13 = 0;
  while(1) {
   $97 = $13;
   $98 = $10;
   $99 = ($97>>>0)<($98>>>0);
   if (!($99)) {
    break;
   }
   HEAP32[$14>>2] = 0;
   HEAP32[$15>>2] = 0;
   $100 = $9;
   $101 = $13;
   $102 = (($100) + (($101*224)|0)|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $9;
   $105 = $13;
   $106 = (($104) + (($105*224)|0)|0);
   $107 = ((($106)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   _add_to_move_funcs_list($15,$14,$103,$108);
   $109 = $11;
   $110 = ((($109)) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $11;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + 1)|0;
   HEAP32[$112>>2] = $114;
   $115 = (($111) + (($113*224)|0)|0);
   $16 = $115;
   $116 = $3;
   $117 = $116&1;
   if ($117) {
    $118 = $9;
    $119 = $13;
    $120 = (($118) + (($119*224)|0)|0);
    $121 = ((($120)) + 8|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $122;
   } else {
    $123 = 0;
   }
   $17 = $123;
   $124 = $16;
   _memset(($18|0),0,224)|0;
   $125 = HEAP32[$15>>2]|0;
   HEAP32[$18>>2] = $125;
   $126 = ((($18)) + 4|0);
   $127 = HEAP32[$14>>2]|0;
   HEAP32[$126>>2] = $127;
   $128 = ((($18)) + 8|0);
   $129 = $17;
   HEAP32[$128>>2] = $129;
   _memcpy(($124|0),($18|0),224)|0;
   $130 = $17;
   $131 = ($130|0)==(2);
   if ($131) {
    $132 = $16;
    $133 = ((($132)) + 16|0);
    $134 = $9;
    $135 = $13;
    $136 = (($134) + (($135*224)|0)|0);
    $137 = ((($136)) + 16|0);
    _memcpy(($133|0),($137|0),208)|0;
    $138 = $1;
    $139 = $16;
    $140 = ((($139)) + 16|0);
    _fc_solve_initialize_befs_rater($138,$140);
   }
   $141 = $13;
   $142 = (($141) + 1)|0;
   $13 = $142;
  }
  $143 = $11;
  $144 = ((($143)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $11;
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147*224)|0;
  $149 = (_realloc($145,$148)|0);
  $150 = $11;
  $151 = ((($150)) + 4|0);
  HEAP32[$151>>2] = $149;
  $152 = $8;
  $153 = (($152) + 1)|0;
  $8 = $153;
  $154 = $6;
  $155 = ((($154)) + 12|0);
  $6 = $155;
 }
 STACKTOP = sp;return;
}
function _fc_solve_pats__init_buckets($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $2;
 $8 = ((($7)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $3 = $10;
 $11 = $2;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $4 = $13;
 $14 = $3;
 $15 = ($14*3)|0;
 $16 = (1)?($15 >> 1):($15);
 $17 = $3;
 $18 = $17 & 1;
 $19 = (($16) + ($18))|0;
 $20 = $1;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $1;
 $23 = ((($22)) + 2876|0);
 _memset(($23|0),0,16372)|0;
 $24 = $1;
 $25 = ((($24)) + 19248|0);
 HEAP32[$25>>2] = 0;
 $26 = $1;
 $27 = ((($26)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (12 + ($28))|0;
 $30 = (_fc_solve_pats__align($29)|0);
 $31 = $1;
 $32 = ((($31)) + 35636|0);
 HEAP32[$32>>2] = $30;
 $33 = $4;
 $34 = (28 + ($33))|0;
 $35 = (_fc_solve_pats__align($34)|0);
 $36 = $1;
 $37 = ((($36)) + 2872|0);
 HEAP32[$37>>2] = $35;
 STACKTOP = sp;return;
}
function _fc_solve_pats__init_clusters($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 35660|0);
 _memset(($3|0),0,1996)|0;
 $4 = $1;
 $5 = (_fc_solve_pats__new_block($4)|0);
 $6 = $1;
 $7 = ((($6)) + 37656|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _fc_solve_pats__initialize_solving_process($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $1 = $0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(100);
  $7 = $1;
  if (!($6)) {
   break;
  }
  $8 = ((($7)) + 12|0);
  $9 = $2;
  $10 = (($8) + ($9<<2)|0);
  HEAP32[$10>>2] = 0;
  $11 = $2;
  $12 = (($11) + 1)|0;
  $2 = $12;
 }
 $13 = ((($7)) + 812|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 _fc_solve_pats__hash_layout($14);
 $15 = $1;
 _fc_solve_pats__sort_piles($15);
 HEAP8[$3>>0] = 0;
 $16 = $1;
 $17 = (_fc_solve_pats__new_position($16,0,$3)|0);
 $4 = $17;
 $18 = $4;
 $19 = ($18|0)==(0|0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $1;
 $21 = $4;
 _fc_solve_pats__queue_position($20,$21,0);
 STACKTOP = sp;return;
}
function _solve($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 0:  {
  $6 = $2;
  $7 = (_dfs_solve($6)|0);
  $1 = $7;
  break;
 }
 case 1:  {
  $8 = $2;
  $9 = (_fc_solve_befs_or_bfs_do_solve($8)|0);
  $1 = $9;
  break;
 }
 case 2:  {
  $10 = $2;
  $11 = (_do_patsolve($10)|0);
  $1 = $11;
  break;
 }
 default: {
 }
 }
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function _dfs_solve($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $$byval_copy1 = sp + 240|0;
 $$byval_copy = sp + 232|0;
 $12 = sp + 192|0;
 $15 = sp + 252|0;
 $21 = sp + 160|0;
 $22 = sp + 152|0;
 $23 = sp + 144|0;
 $32 = sp + 104|0;
 $44 = sp + 64|0;
 $50 = sp + 32|0;
 $56 = sp;
 $2 = $0;
 $57 = $2;
 $58 = HEAP32[$57>>2]|0;
 $3 = $58;
 $59 = $3;
 $60 = HEAP32[$59>>2]|0;
 $4 = $60;
 $61 = $4;
 $62 = ((($61)) + 304|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&1;
 $65 = $64&1;
 $7 = $65;
 $66 = $4;
 $67 = (_fcs_get_calc_real_depth($66)|0);
 $68 = $67&1;
 $8 = $68;
 $69 = $4;
 $70 = ((($69)) + 134|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&1;
 $73 = $72&1;
 $9 = $73;
 $74 = $2;
 $75 = ((($74)) + 522|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&1;
 $78 = $77&1;
 $10 = $78;
 $79 = $2;
 $80 = ((($79)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $11 = $81;
 $13 = 0;
 $82 = $4;
 $83 = ((($82)) + 16|0);
 $84 = HEAP32[$83>>2]|0;
 $14 = $84;
 $85 = $4;
 ;HEAP8[$15>>0]=HEAP8[$85>>0]|0;HEAP8[$15+1>>0]=HEAP8[$85+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[$85+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[$85+3>>0]|0;
 $86 = $2;
 $87 = ((($86)) + 24|0);
 $88 = ((($87)) + 8|0);
 $16 = $88;
 $89 = $2;
 $90 = ((($89)) + 24|0);
 $91 = ((($90)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $16;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) + (($94*244)|0)|0);
 $17 = $95;
 $96 = $2;
 $97 = ((($96)) + 24|0);
 $98 = HEAP32[$97>>2]|0;
 $18 = $98;
 $99 = $2;
 $100 = ((($99)) + 542|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&1;
 $103 = $102&1;
 $19 = $103;
 $104 = $17;
 $105 = HEAP32[$104>>2]|0;
 $20 = $105;
 $106 = $20;
 HEAP32[$22>>2] = $106;
 $107 = ((($22)) + 4|0);
 $108 = $20;
 $109 = ((($108)) + 56|0);
 HEAP32[$107>>2] = $109;
 ;HEAP32[$21>>2]=HEAP32[$22>>2]|0;HEAP32[$21+4>>2]=HEAP32[$22+4>>2]|0;
 $110 = $17;
 $111 = ((($110)) + 4|0);
 ;HEAP32[$23>>2]=HEAP32[$111>>2]|0;HEAP32[$23+4>>2]=HEAP32[$111+4>>2]|0;
 $112 = $2;
 $113 = ((($112)) + 24|0);
 $114 = ((($113)) + 12|0);
 $24 = $114;
 $115 = $8;
 $116 = $115&1;
 $117 = $20;
 _calculate_real_depth($116,$117);
 $118 = $2;
 $119 = ((($118)) + 24|0);
 $120 = ((($119)) + 20|0);
 $121 = ((($120)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $25 = $122;
 $123 = $4;
 $124 = ((($123)) + 8|0);
 $26 = $124;
 $125 = $3;
 $126 = ((($125)) + 8|0);
 $27 = $126;
 $127 = $4;
 $128 = $3;
 $129 = (_calc_ht_max_num_states($127,$128)|0);
 $28 = $129;
 $130 = $4;
 $131 = ((($130)) + 184|0);
 $132 = HEAP32[$131>>2]|0;
 $29 = $132;
 $133 = $4;
 $134 = ((($133)) + 188|0);
 $135 = HEAP32[$134>>2]|0;
 $30 = $135;
 $136 = $25;
 $31 = $136;
 while(1) {
  $137 = $16;
  $138 = HEAP32[$137>>2]|0;
  $139 = $31;
  $140 = HEAP32[$139>>2]|0;
  $141 = ($138|0)>=($140|0);
  $142 = $31;
  if (!($141)) {
   break;
  }
  $143 = ((($142)) + 12|0);
  $31 = $143;
 }
 $144 = HEAP32[$142>>2]|0;
 $5 = $144;
 $145 = $31;
 $146 = $25;
 $147 = ($145|0)==($146|0);
 if ($147) {
  $151 = 0;
 } else {
  $148 = $31;
  $149 = ((($148)) + -12|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $150;
 }
 $6 = $151;
 $152 = $31;
 $153 = ((($152)) + 4|0);
 ;HEAP32[$12>>2]=HEAP32[$153>>2]|0;HEAP32[$12+4>>2]=HEAP32[$153+4>>2]|0;
 L8: while(1) {
  L10: while(1) {
   $154 = $16;
   $155 = HEAP32[$154>>2]|0;
   $156 = (($155) + 1)|0;
   $157 = $18;
   $158 = ($156|0)>=($157|0);
   $159 = $158 ^ 1;
   $160 = $159 ^ 1;
   if ($160) {
    $161 = $2;
    _increase_dfs_max_depth($161);
    $162 = $2;
    $163 = ((($162)) + 24|0);
    $164 = ((($163)) + 4|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = $16;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + (($167*244)|0)|0);
    $17 = $168;
    $169 = $2;
    $170 = ((($169)) + 24|0);
    $171 = HEAP32[$170>>2]|0;
    $18 = $171;
    $172 = $17;
    $173 = ((($172)) + 4|0);
    ;HEAP32[$23>>2]=HEAP32[$173>>2]|0;HEAP32[$23+4>>2]=HEAP32[$173+4>>2]|0;
   }
   $174 = $17;
   $175 = ((($174)) + 16|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = HEAP32[$23>>2]|0;
   $178 = ($176|0)==($177|0);
   if ($178) {
    $179 = $17;
    $180 = ((($179)) + 12|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = HEAP32[$12>>2]|0;
    $183 = ($181|0)==($182|0);
    if ($183) {
     break;
    }
    HEAP32[$23>>2] = 0;
    $243 = $17;
    $244 = ((($243)) + 20|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = ($245|0)==(0);
    if ($246) {
     $247 = $17;
     $248 = ((($247)) + 12|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0);
     if ($250) {
      $251 = $29;
      $252 = ($251|0)!=(0|0);
      if ($252) {
       $253 = $29;
       $254 = $30;
       $255 = $26;
       $256 = HEAP32[$255>>2]|0;
       $257 = $16;
       $258 = HEAP32[$257>>2]|0;
       $259 = $4;
       $260 = $16;
       $261 = HEAP32[$260>>2]|0;
       $262 = ($261|0)==(0);
       if ($262) {
        $275 = 0;
       } else {
        $263 = $2;
        $264 = ((($263)) + 24|0);
        $265 = ((($264)) + 4|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $16;
        $268 = HEAP32[$267>>2]|0;
        $269 = (($268) - 1)|0;
        $270 = (($266) + (($269*244)|0)|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = ((($271)) + 56|0);
        $273 = ((($272)) + 12|0);
        $274 = HEAP32[$273>>2]|0;
        $275 = $274;
       }
       FUNCTION_TABLE_viiiiii[$253 & 31]($254,$256,$258,$259,$21,$275);
      }
      $33 = 0;
      $276 = $19;
      $277 = $276&1;
      $278 = $20;
      $279 = (_fcs__should_state_be_pruned($277,$278)|0);
      if ($279) {
       $280 = $2;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$21+4>>2]|0;
       $281 = (_fc_solve_sfs_raymond_prune($280,$$byval_copy)|0);
       $34 = $281;
       $282 = $34;
       $283 = ($282|0)!=(0|0);
       if ($283) {
        $33 = 1;
        $284 = HEAP32[$12>>2]|0;
        $285 = $17;
        $286 = ((($285)) + 12|0);
        HEAP32[$286>>2] = $284;
        $287 = $34;
        _fc_solve_derived_states_list_add_state($23,$287,0);
        $288 = $17;
        $289 = ((($288)) + 24|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = ($290>>>0)<(1);
        if ($291) {
         $292 = $17;
         $293 = ((($292)) + 24|0);
         HEAP32[$293>>2] = 1;
         $294 = $17;
         $295 = ((($294)) + 28|0);
         $296 = HEAP32[$295>>2]|0;
         $297 = $17;
         $298 = ((($297)) + 24|0);
         $299 = HEAP32[$298>>2]|0;
         $300 = $299<<3;
         $301 = (_realloc($296,$300)|0);
         $302 = $17;
         $303 = ((($302)) + 28|0);
         HEAP32[$303>>2] = $301;
        }
        $304 = $17;
        $305 = ((($304)) + 28|0);
        $306 = HEAP32[$305>>2]|0;
        HEAP32[$306>>2] = 0;
       }
      }
      $307 = $33;
      $308 = $307&1;
      if (!($308)) {
       $309 = HEAP8[$15>>0]|0;
       $310 = $20;
       $311 = (_count_num_vacant_freecells($309,$310)|0);
       $35 = $311;
       $312 = ((($15)) + 1|0);
       $313 = HEAP8[$312>>0]|0;
       $314 = $20;
       $315 = (_count_num_vacant_stacks($313,$314)|0);
       $36 = $315;
       $316 = $36;
       $317 = $316&255;
       $318 = ((($15)) + 1|0);
       $319 = HEAP8[$318>>0]|0;
       $320 = $319&255;
       $321 = ($317|0)==($320|0);
       if ($321) {
        $322 = $35;
        $323 = $322&255;
        $324 = HEAP8[$15>>0]|0;
        $325 = $324&255;
        $326 = ($323|0)==($325|0);
        $328 = $326;
       } else {
        $328 = 0;
       }
       $327 = $328 ^ 1;
       $329 = $327 ^ 1;
       if ($329) {
        label = 36;
        break L8;
       }
       $339 = $35;
       $340 = $17;
       $341 = ((($340)) + 241|0);
       HEAP8[$341>>0] = $339;
       $342 = $2;
       $343 = ((($342)) + 524|0);
       HEAP8[$343>>0] = $339;
       $344 = $36;
       $345 = $17;
       $346 = ((($345)) + 240|0);
       HEAP8[$346>>0] = $344;
       $347 = $2;
       $348 = ((($347)) + 523|0);
       HEAP8[$348>>0] = $344;
       $349 = $2;
       $350 = $20;
       $351 = $17;
       $352 = ((($351)) + 32|0);
       $353 = $7;
       $354 = $353&1;
       _fc_solve__calc_positions_by_rank_data($349,$350,$352,$354);
      }
     }
    }
    $355 = $17;
    $356 = ((($355)) + 12|0);
    $357 = HEAP32[$356>>2]|0;
    $37 = $357;
    $358 = ((($12)) + 4|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = $37;
    $361 = (($359) + (($360*224)|0)|0);
    $362 = ((($361)) + 16|0);
    $38 = $362;
    $363 = $17;
    $364 = ((($363)) + 12|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = HEAP32[$12>>2]|0;
    $367 = ($365>>>0)<($366>>>0);
    L40: do {
     if ($367) {
      $368 = ((($12)) + 4|0);
      $369 = HEAP32[$368>>2]|0;
      $370 = $17;
      $371 = ((($370)) + 12|0);
      $372 = HEAP32[$371>>2]|0;
      $373 = (($369) + (($372*224)|0)|0);
      $374 = ((($373)) + 8|0);
      $375 = HEAP32[$374>>2]|0;
      $13 = $375;
      while(1) {
       $376 = ((($12)) + 4|0);
       $377 = HEAP32[$376>>2]|0;
       $378 = $17;
       $379 = ((($378)) + 12|0);
       $380 = HEAP32[$379>>2]|0;
       $381 = (($377) + (($380*224)|0)|0);
       $382 = HEAP32[$381>>2]|0;
       $383 = $17;
       $384 = ((($383)) + 20|0);
       $385 = HEAP32[$384>>2]|0;
       $386 = (($382) + ($385<<2)|0);
       $387 = HEAP32[$386>>2]|0;
       $388 = $2;
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$21>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$21+4>>2]|0;
       FUNCTION_TABLE_viii[$387 & 31]($388,$$byval_copy1,$23);
       $389 = $17;
       $390 = ((($389)) + 20|0);
       $391 = HEAP32[$390>>2]|0;
       $392 = (($391) + 1)|0;
       HEAP32[$390>>2] = $392;
       $393 = ((($12)) + 4|0);
       $394 = HEAP32[$393>>2]|0;
       $395 = $17;
       $396 = ((($395)) + 12|0);
       $397 = HEAP32[$396>>2]|0;
       $398 = (($394) + (($397*224)|0)|0);
       $399 = ((($398)) + 4|0);
       $400 = HEAP32[$399>>2]|0;
       $401 = ($392|0)==($400|0);
       if ($401) {
        break;
       }
       $408 = $13;
       $409 = ($408|0)!=(0);
       $410 = HEAP32[$23>>2]|0;
       $411 = ($410|0)==(0);
       $412 = $409 ? 1 : $411;
       if (!($412)) {
        break L40;
       }
      }
      $402 = $17;
      $403 = ((($402)) + 12|0);
      $404 = HEAP32[$403>>2]|0;
      $405 = (($404) + 1)|0;
      HEAP32[$403>>2] = $405;
      $406 = $17;
      $407 = ((($406)) + 20|0);
      HEAP32[$407>>2] = 0;
     }
    } while(0);
    $413 = HEAP32[$23>>2]|0;
    $39 = $413;
    $414 = $39;
    $415 = $17;
    $416 = ((($415)) + 24|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = ($414>>>0)>($417>>>0);
    if ($418) {
     $419 = $39;
     $420 = $17;
     $421 = ((($420)) + 24|0);
     HEAP32[$421>>2] = $419;
     $422 = $17;
     $423 = ((($422)) + 28|0);
     $424 = HEAP32[$423>>2]|0;
     $425 = $17;
     $426 = ((($425)) + 24|0);
     $427 = HEAP32[$426>>2]|0;
     $428 = $427<<3;
     $429 = (_realloc($424,$428)|0);
     $430 = $17;
     $431 = ((($430)) + 28|0);
     HEAP32[$431>>2] = $429;
    }
    $432 = $17;
    $433 = ((($432)) + 28|0);
    $434 = HEAP32[$433>>2]|0;
    $40 = $434;
    $41 = 0;
    while(1) {
     $435 = $41;
     $436 = $39;
     $437 = ($435>>>0)<($436>>>0);
     if (!($437)) {
      break;
     }
     $438 = $41;
     $439 = $40;
     $440 = $41;
     $441 = (($439) + ($440<<3)|0);
     HEAP32[$441>>2] = $438;
     $442 = $41;
     $443 = (($442) + 1)|0;
     $41 = $443;
    }
    $444 = $39;
    $445 = ($444>>>0)>(1);
    L54: do {
     if ($445) {
      $446 = $13;
      switch ($446|0) {
      case 1:  {
       $447 = $39;
       $448 = (($447) - 1)|0;
       $42 = $448;
       while(1) {
        $449 = $42;
        $450 = ($449>>>0)>(0);
        if (!($450)) {
         break L54;
        }
        $451 = $24;
        $452 = (_fc_solve_rand_get_random_number($451)|0);
        $453 = $42;
        $454 = (($453) + 1)|0;
        $455 = (($452>>>0) % ($454>>>0))&-1;
        $43 = $455;
        $456 = $40;
        $457 = $42;
        $458 = (($456) + ($457<<3)|0);
        ;HEAP32[$44>>2]=HEAP32[$458>>2]|0;HEAP32[$44+4>>2]=HEAP32[$458+4>>2]|0;
        $459 = $40;
        $460 = $42;
        $461 = (($459) + ($460<<3)|0);
        $462 = $40;
        $463 = $43;
        $464 = (($462) + ($463<<3)|0);
        ;HEAP32[$461>>2]=HEAP32[$464>>2]|0;HEAP32[$461+4>>2]=HEAP32[$464+4>>2]|0;
        $465 = $40;
        $466 = $43;
        $467 = (($465) + ($466<<3)|0);
        ;HEAP32[$467>>2]=HEAP32[$44>>2]|0;HEAP32[$467+4>>2]=HEAP32[$44+4>>2]|0;
        $468 = $42;
        $469 = (($468) + -1)|0;
        $42 = $469;
       }
       break;
      }
      case 2:  {
       break;
      }
      default: {
       break L54;
      }
      }
      $470 = $37;
      $471 = HEAP32[$12>>2]|0;
      $472 = ($470>>>0)<($471>>>0);
      if ($472) {
       $473 = ((($23)) + 4|0);
       $474 = HEAP32[$473>>2]|0;
       $45 = $474;
       $46 = 0;
       while(1) {
        $475 = $46;
        $476 = $39;
        $477 = ($475>>>0)<($476>>>0);
        if (!($477)) {
         break;
        }
        $478 = $2;
        $479 = $38;
        $480 = $45;
        $481 = $46;
        $482 = (($480) + ($481<<3)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = $45;
        $485 = $46;
        $486 = (($484) + ($485<<3)|0);
        $487 = HEAP32[$486>>2]|0;
        $488 = (_calc_depth($487)|0);
        $489 = (20000 - ($488))|0;
        $490 = (_befs_rate_state($478,$479,$483,$489)|0);
        $491 = $40;
        $492 = $46;
        $493 = (($491) + ($492<<3)|0);
        $494 = ((($493)) + 4|0);
        HEAP32[$494>>2] = $490;
        $495 = $46;
        $496 = (($495) + 1)|0;
        $46 = $496;
       }
       $497 = $40;
       $498 = $39;
       $499 = (($497) + ($498<<3)|0);
       $47 = $499;
       $500 = $40;
       $501 = ((($500)) + 8|0);
       $48 = $501;
       while(1) {
        $502 = $48;
        $503 = $47;
        $504 = ($502>>>0)<($503>>>0);
        if (!($504)) {
         break L54;
        }
        $505 = $48;
        $49 = $505;
        while(1) {
         $506 = $49;
         $507 = $40;
         $508 = ($506>>>0)>($507>>>0);
         if (!($508)) {
          break;
         }
         $509 = $49;
         $510 = ((($509)) + 4|0);
         $511 = HEAP32[$510>>2]|0;
         $512 = $49;
         $513 = ((($512)) + -8|0);
         $514 = ((($513)) + 4|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($511|0)<($515|0);
         if (!($516)) {
          break;
         }
         $517 = $49;
         ;HEAP32[$50>>2]=HEAP32[$517>>2]|0;HEAP32[$50+4>>2]=HEAP32[$517+4>>2]|0;
         $518 = $49;
         $519 = $49;
         $520 = ((($519)) + -8|0);
         ;HEAP32[$518>>2]=HEAP32[$520>>2]|0;HEAP32[$518+4>>2]=HEAP32[$520+4>>2]|0;
         $521 = $49;
         $522 = ((($521)) + -8|0);
         $49 = $522;
         ;HEAP32[$522>>2]=HEAP32[$50>>2]|0;HEAP32[$522+4>>2]=HEAP32[$50+4>>2]|0;
        }
        $523 = $48;
        $524 = ((($523)) + 8|0);
        $48 = $524;
       }
      }
     }
    } while(0);
    $525 = $17;
    $526 = ((($525)) + 16|0);
    HEAP32[$526>>2] = 0;
   }
   $527 = HEAP32[$23>>2]|0;
   $51 = $527;
   $528 = ((($23)) + 4|0);
   $529 = HEAP32[$528>>2]|0;
   $52 = $529;
   $530 = $17;
   $531 = ((($530)) + 16|0);
   $532 = HEAP32[$531>>2]|0;
   $533 = (($532) - 1)|0;
   $53 = $533;
   $534 = $17;
   $535 = ((($534)) + 28|0);
   $536 = HEAP32[$535>>2]|0;
   $537 = $53;
   $538 = (($536) + ($537<<3)|0);
   $54 = $538;
   while(1) {
    $539 = $53;
    $540 = (($539) + 1)|0;
    $53 = $540;
    $541 = $51;
    $542 = ($540>>>0)<($541>>>0);
    if (!($542)) {
     label = 80;
     break L10;
    }
    $543 = $52;
    $544 = $54;
    $545 = ((($544)) + 8|0);
    $54 = $545;
    $546 = HEAP32[$545>>2]|0;
    $547 = (($543) + ($546<<3)|0);
    $548 = HEAP32[$547>>2]|0;
    $55 = $548;
    $549 = $55;
    $550 = (_fcs__is_state_a_dead_end($549)|0);
    if (!($550)) {
     $551 = $55;
     $552 = ((($551)) + 56|0);
     $553 = ((($552)) + 19|0);
     $554 = $11;
     $555 = (3)?($554 >>> 3):($554);
     $556 = (($553) + ($555)|0);
     $557 = HEAP8[$556>>0]|0;
     $558 = $557&255;
     $559 = $11;
     $560 = $559 & 7;
     $561 = 1 << $560;
     $562 = $558 & $561;
     $563 = ($562|0)!=(0);
     if (!($563)) {
      break;
     }
    }
   }
   $564 = $26;
   $565 = HEAP32[$564>>2]|0;
   $566 = (($565) + 1)|0;
   HEAP32[$564>>2] = $566;
   $567 = $27;
   $568 = HEAP32[$567>>2]|0;
   $569 = (($568) + 1)|0;
   HEAP32[$567>>2] = $569;
   $570 = $55;
   $571 = $11;
   _set_scan_visited($570,$571);
   $572 = $4;
   $573 = ((($572)) + 8|0);
   $574 = HEAP32[$573>>2]|0;
   $575 = $55;
   $576 = ((($575)) + 56|0);
   $577 = ((($576)) + 12|0);
   HEAP32[$577>>2] = $574;
   $578 = $16;
   $579 = HEAP32[$578>>2]|0;
   $580 = (($579) + 1)|0;
   HEAP32[$578>>2] = $580;
   $581 = $5;
   $582 = ($580|0)>=($581|0);
   $583 = $582 ^ 1;
   $584 = $583 ^ 1;
   if ($584) {
    $585 = $31;
    $586 = ((($585)) + 12|0);
    $31 = $586;
    $587 = $31;
    $588 = HEAP32[$587>>2]|0;
    $5 = $588;
    $589 = $31;
    $590 = $25;
    $591 = ($589|0)==($590|0);
    if ($591) {
     $595 = 0;
    } else {
     $592 = $31;
     $593 = ((($592)) + -12|0);
     $594 = HEAP32[$593>>2]|0;
     $595 = $594;
    }
    $6 = $595;
    $596 = $31;
    $597 = ((($596)) + 4|0);
    ;HEAP32[$12>>2]=HEAP32[$597>>2]|0;HEAP32[$12+4>>2]=HEAP32[$597+4>>2]|0;
   }
   $598 = $53;
   $599 = $17;
   $600 = ((($599)) + 16|0);
   HEAP32[$600>>2] = $598;
   $601 = $17;
   $602 = ((($601)) + 4|0);
   ;HEAP32[$602>>2]=HEAP32[$23>>2]|0;HEAP32[$602+4>>2]=HEAP32[$23+4>>2]|0;
   $603 = $17;
   $604 = ((($603)) + 244|0);
   $17 = $604;
   $605 = $55;
   $20 = $605;
   $606 = $17;
   HEAP32[$606>>2] = $605;
   $607 = $20;
   HEAP32[$56>>2] = $607;
   $608 = ((($56)) + 4|0);
   $609 = $20;
   $610 = ((($609)) + 56|0);
   HEAP32[$608>>2] = $610;
   ;HEAP32[$21>>2]=HEAP32[$56>>2]|0;HEAP32[$21+4>>2]=HEAP32[$56+4>>2]|0;
   $611 = $17;
   $612 = ((($611)) + 12|0);
   HEAP32[$612>>2] = 0;
   $613 = $17;
   $614 = ((($613)) + 20|0);
   HEAP32[$614>>2] = 0;
   $615 = $17;
   $616 = ((($615)) + 16|0);
   HEAP32[$616>>2] = 0;
   $617 = $17;
   $618 = ((($617)) + 4|0);
   ;HEAP32[$23>>2]=HEAP32[$618>>2]|0;HEAP32[$23+4>>2]=HEAP32[$618+4>>2]|0;
   HEAP32[$23>>2] = 0;
   $619 = $8;
   $620 = $619&1;
   $621 = $20;
   _calculate_real_depth($620,$621);
   $622 = $4;
   $623 = ((($622)) + 140|0);
   $624 = HEAP32[$623>>2]|0;
   $625 = $4;
   $626 = ((($625)) + 20|0);
   $627 = HEAP32[$626>>2]|0;
   $628 = ($624|0)>=($627|0);
   if ($628) {
    $629 = $4;
    _free_states($629);
   }
   $630 = $27;
   $631 = HEAP32[$630>>2]|0;
   $632 = $28;
   $633 = ($631|0)==($632|0);
   if ($633) {
    label = 77;
    break L8;
   }
   $634 = $4;
   $635 = ((($634)) + 144|0);
   $636 = HEAP32[$635>>2]|0;
   $637 = $14;
   $638 = ($636|0)>=($637|0);
   if ($638) {
    label = 77;
    break L8;
   }
  }
  if ((label|0) == 80) {
   label = 0;
   $644 = $51;
   $645 = $17;
   $646 = ((($645)) + 16|0);
   HEAP32[$646>>2] = $644;
   continue;
  }
  $184 = $10;
  $185 = $184&1;
  if ($185) {
   $186 = $20;
   $187 = ((($186)) + 56|0);
   $188 = ((($187)) + 18|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = $189&255;
   $191 = $190 | 8;
   $192 = $191&255;
   HEAP8[$188>>0] = $192;
   $193 = $9;
   $194 = $193&1;
   if ($194) {
    $195 = $20;
    _mark_as_dead_end__proto($195);
   }
  }
  $196 = $17;
  $197 = ((($196)) + 4|0);
  ;HEAP32[$197>>2]=HEAP32[$23>>2]|0;HEAP32[$197+4>>2]=HEAP32[$23+4>>2]|0;
  $198 = $16;
  $199 = HEAP32[$198>>2]|0;
  $200 = (($199) + -1)|0;
  HEAP32[$198>>2] = $200;
  $201 = ($200|0)<(0);
  $202 = $201 ^ 1;
  $203 = $202 ^ 1;
  if ($203) {
   label = 81;
   break;
  }
  $204 = $17;
  $205 = ((($204)) + -244|0);
  $17 = $205;
  $206 = $17;
  $207 = ((($206)) + 4|0);
  ;HEAP32[$23>>2]=HEAP32[$207>>2]|0;HEAP32[$23+4>>2]=HEAP32[$207+4>>2]|0;
  $208 = $17;
  $209 = HEAP32[$208>>2]|0;
  $20 = $209;
  $210 = $20;
  HEAP32[$32>>2] = $210;
  $211 = ((($32)) + 4|0);
  $212 = $20;
  $213 = ((($212)) + 56|0);
  HEAP32[$211>>2] = $213;
  ;HEAP32[$21>>2]=HEAP32[$32>>2]|0;HEAP32[$21+4>>2]=HEAP32[$32+4>>2]|0;
  $214 = $17;
  $215 = ((($214)) + 241|0);
  $216 = HEAP8[$215>>0]|0;
  $217 = $2;
  $218 = ((($217)) + 524|0);
  HEAP8[$218>>0] = $216;
  $219 = $17;
  $220 = ((($219)) + 240|0);
  $221 = HEAP8[$220>>0]|0;
  $222 = $2;
  $223 = ((($222)) + 523|0);
  HEAP8[$223>>0] = $221;
  $224 = $16;
  $225 = HEAP32[$224>>2]|0;
  $226 = $6;
  $227 = ($225|0)<($226|0);
  $228 = $227 ^ 1;
  $229 = $228 ^ 1;
  if ($229) {
   $230 = $31;
   $231 = ((($230)) + -12|0);
   $31 = $231;
   $232 = $31;
   $233 = HEAP32[$232>>2]|0;
   $5 = $233;
   $234 = $31;
   $235 = $25;
   $236 = ($234|0)==($235|0);
   if ($236) {
    $240 = 0;
   } else {
    $237 = $31;
    $238 = ((($237)) + -12|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239;
   }
   $6 = $240;
   $241 = $31;
   $242 = ((($241)) + 4|0);
   ;HEAP32[$12>>2]=HEAP32[$242>>2]|0;HEAP32[$12+4>>2]=HEAP32[$242+4>>2]|0;
  }
 }
 if ((label|0) == 36) {
  $330 = $20;
  $331 = $4;
  $332 = ((($331)) + 280|0);
  HEAP32[$332>>2] = $330;
  $333 = $26;
  $334 = HEAP32[$333>>2]|0;
  $335 = (($334) + 1)|0;
  HEAP32[$333>>2] = $335;
  $336 = $27;
  $337 = HEAP32[$336>>2]|0;
  $338 = (($337) + 1)|0;
  HEAP32[$336>>2] = $338;
  $1 = 0;
  $654 = $1;
  STACKTOP = sp;return ($654|0);
 }
 else if ((label|0) == 77) {
  $639 = $17;
  $640 = ((($639)) + 4|0);
  ;HEAP32[$640>>2]=HEAP32[$23>>2]|0;HEAP32[$640+4>>2]=HEAP32[$23+4>>2]|0;
  $641 = $20;
  $642 = $4;
  $643 = ((($642)) + 280|0);
  HEAP32[$643>>2] = $641;
  $1 = 5;
  $654 = $1;
  STACKTOP = sp;return ($654|0);
 }
 else if ((label|0) == 81) {
  $647 = $26;
  $648 = HEAP32[$647>>2]|0;
  $649 = (($648) + 1)|0;
  HEAP32[$647>>2] = $649;
  $650 = $27;
  $651 = HEAP32[$650>>2]|0;
  $652 = (($651) + 1)|0;
  HEAP32[$650>>2] = $652;
  $653 = $16;
  HEAP32[$653>>2] = -1;
  $1 = 1;
  $654 = $1;
  STACKTOP = sp;return ($654|0);
 }
 return (0)|0;
}
function _do_patsolve($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 $9 = $2;
 $10 = ((($9)) + 544|0);
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = ((($12)) + 2788|0);
 $14 = HEAP32[$13>>2]|0;
 $5 = $14;
 $15 = $5;
 $16 = $3;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) - ($21))|0;
 $23 = (($15) + ($22))|0;
 $24 = $4;
 $25 = ((($24)) + 2792|0);
 HEAP32[$25>>2] = $23;
 $26 = $4;
 $27 = ((($26)) + 35656|0);
 HEAP32[$27>>2] = 1;
 $28 = $4;
 _fc_solve_pats__do_it($28);
 $29 = $4;
 $30 = ((($29)) + 2788|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $5;
 $33 = (($31) - ($32))|0;
 $6 = $33;
 $34 = $6;
 $35 = $3;
 $36 = ((($35)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + ($34))|0;
 HEAP32[$36>>2] = $38;
 $39 = $6;
 $40 = $3;
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + ($39))|0;
 HEAP32[$42>>2] = $44;
 $45 = $4;
 $46 = ((($45)) + 35656|0);
 $47 = HEAP32[$46>>2]|0;
 switch ($47|0) {
 case 0:  {
  $1 = 0;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
  break;
 }
 case 1:  {
  $1 = 1;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
  break;
 }
 case -1:  {
  $1 = 5;
  $48 = $1;
  STACKTOP = sp;return ($48|0);
  break;
 }
 default: {
  $48 = $1;
  STACKTOP = sp;return ($48|0);
 }
 }
 return (0)|0;
}
function _fcs_get_calc_real_depth($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 132|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _calculate_real_depth($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = $0&1;
 $2 = $6;
 $3 = $1;
 $7 = $2;
 $8 = $7&1;
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $4 = -1;
 $9 = $3;
 $5 = $9;
 while(1) {
  $10 = $5;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = ((($12)) + 56|0);
  $14 = HEAP32[$13>>2]|0;
  $5 = $14;
  $15 = $4;
  $16 = (($15) + 1)|0;
  $4 = $16;
 }
 $17 = $3;
 $5 = $17;
 while(1) {
  $18 = $5;
  $19 = ((($18)) + 56|0);
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $4;
  $23 = ($21|0)!=($22|0);
  if (!($23)) {
   break;
  }
  $24 = $4;
  $25 = $5;
  $26 = ((($25)) + 56|0);
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $24;
  $28 = $4;
  $29 = (($28) + -1)|0;
  $4 = $29;
  $30 = $5;
  $31 = ((($30)) + 56|0);
  $32 = HEAP32[$31>>2]|0;
  $5 = $32;
 }
 STACKTOP = sp;return;
}
function _calc_ht_max_num_states($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $3;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) - ($17))|0;
 $19 = (($11) + ($18))|0;
 $5 = $19;
 $20 = $4;
 $21 = $5;
 $22 = ($20|0)<($21|0);
 $23 = $4;
 $24 = $5;
 $25 = $22 ? $23 : $24;
 STACKTOP = sp;return ($25|0);
}
function _increase_dfs_max_depth($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 64)|0;
 $2 = $6;
 $7 = $1;
 $8 = ((($7)) + 24|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = ($11*244)|0;
 $13 = (_realloc($10,$12)|0);
 $14 = $1;
 $15 = ((($14)) + 24|0);
 $16 = ((($15)) + 4|0);
 HEAP32[$16>>2] = $13;
 $17 = $1;
 $18 = ((($17)) + 24|0);
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $1;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($20) + (($23*244)|0)|0);
 _memset(($24|0),0,15616)|0;
 $25 = $2;
 $26 = $1;
 $27 = ((($26)) + 24|0);
 HEAP32[$27>>2] = $25;
 STACKTOP = sp;return;
}
function _mark_as_dead_end__proto($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 56|0);
 $6 = ((($5)) + 18|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 | 4;
 $10 = $9&255;
 HEAP8[$6>>0] = $10;
 $11 = $2;
 $12 = ((($11)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $2 = $13;
 $14 = $2;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $2;
 $17 = ((($16)) + 56|0);
 $18 = ((($17)) + 16|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = (($19) + -1)<<16>>16;
 HEAP16[$18>>1] = $20;
 while(1) {
  $21 = $2;
  $22 = ((($21)) + 56|0);
  $23 = ((($22)) + 16|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = ($25|0)==(0);
  if (!($26)) {
   label = 7;
   break;
  }
  $27 = $2;
  $28 = ((($27)) + 56|0);
  $29 = ((($28)) + 18|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 & 8;
  $33 = ($32|0)!=(0);
  if (!($33)) {
   label = 7;
   break;
  }
  $34 = $2;
  $35 = ((($34)) + 56|0);
  $36 = ((($35)) + 18|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $38 | 4;
  $40 = $39&255;
  HEAP8[$36>>0] = $40;
  $41 = $2;
  $42 = ((($41)) + 56|0);
  $43 = HEAP32[$42>>2]|0;
  $2 = $43;
  $44 = $2;
  $45 = ($44|0)==(0|0);
  if ($45) {
   label = 7;
   break;
  }
  $46 = $2;
  $47 = ((($46)) + 56|0);
  $48 = ((($47)) + 16|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = (($49) + -1)<<16>>16;
  HEAP16[$48>>1] = $50;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _fcs__should_state_be_pruned($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0&1;
 $2 = $4;
 $3 = $1;
 $5 = $2;
 $6 = $5&1;
 if ($6) {
  $7 = $3;
  $8 = (_fcs__should_state_be_pruned__state($7)|0);
  $9 = $8;
 } else {
  $9 = 0;
 }
 STACKTOP = sp;return ($9|0);
}
function _count_num_vacant_freecells($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $2;
  $8 = $7&255;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = ((($10)) + 40|0);
  $12 = $5;
  $13 = (($11) + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $4;
   $18 = (($17) + 1)<<24>>24;
   $4 = $18;
  }
  $19 = $5;
  $20 = (($19) + 1)|0;
  $5 = $20;
 }
 $21 = $4;
 STACKTOP = sp;return ($21|0);
}
function _count_num_vacant_stacks($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $2;
  $8 = $7&255;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = $5;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $4;
   $18 = (($17) + 1)<<24>>24;
   $4 = $18;
  }
  $19 = $5;
  $20 = (($19) + 1)|0;
  $5 = $20;
 }
 $21 = $4;
 STACKTOP = sp;return ($21|0);
}
function _fc_solve__calc_positions_by_rank_data($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = sp + 72|0;
 $18 = sp + 66|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $26 = $3&1;
 $7 = $26;
 $27 = $4;
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $8 = $29;
 $30 = $8;
 ;HEAP8[$9>>0]=HEAP8[$30>>0]|0;HEAP8[$9+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$30+3>>0]|0;
 $31 = $6;
 _memset(($31|0),-1,208)|0;
 $32 = $7;
 $33 = $32&1;
 if ($33) {
  $34 = $6;
  $10 = $34;
  $11 = 0;
  while(1) {
   $35 = $11;
   $36 = ((($9)) + 1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($35|0)<($38|0);
   if (!($39)) {
    break;
   }
   $40 = $5;
   $41 = $11;
   $42 = (($40) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $12 = $43;
   $44 = $12;
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $13 = $46;
   $14 = 0;
   while(1) {
    $47 = $14;
    $48 = $13;
    $49 = ($47|0)<($48|0);
    if (!($49)) {
     break;
    }
    $50 = $12;
    $51 = $14;
    $52 = (($51) + 1)|0;
    $53 = (($50) + ($52)|0);
    $54 = HEAP8[$53>>0]|0;
    $15 = $54;
    $55 = $15;
    $56 = $55&255;
    $57 = $56 & 3;
    $16 = $57;
    $58 = $15;
    $59 = $58&255;
    $60 = (2)?($59 >> 2):($59);
    $17 = $60;
    $61 = $10;
    $62 = $16;
    $63 = ($62*14)|0;
    $64 = $17;
    $65 = (($63) + ($64))|0;
    $66 = (($61) + ($65<<1)|0);
    $67 = $11;
    $68 = $67&255;
    HEAP8[$18>>0] = $68;
    $69 = ((($18)) + 1|0);
    $70 = $14;
    $71 = $70&255;
    HEAP8[$69>>0] = $71;
    ;HEAP8[$66>>0]=HEAP8[$18>>0]|0;HEAP8[$66+1>>0]=HEAP8[$18+1>>0]|0;
    $72 = $14;
    $73 = (($72) + 1)|0;
    $14 = $73;
   }
   $74 = $11;
   $75 = (($74) + 1)|0;
   $11 = $75;
  }
  STACKTOP = sp;return;
 }
 $76 = $8;
 $77 = ((($76)) + 3|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 & 3;
 $19 = $80;
 $20 = 0;
 while(1) {
  $81 = $20;
  $82 = ((($9)) + 1|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ($81|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = $5;
  $87 = $20;
  $88 = (($86) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $21 = $89;
  $90 = $21;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $22 = $92;
  $93 = $22;
  $94 = (($93) + -1)|0;
  $22 = $94;
  $95 = ($93|0)==(0);
  $96 = $95 ^ 1;
  $97 = $96 ^ 1;
  if (!($97)) {
   $98 = $21;
   $99 = ((($98)) + 1|0);
   $100 = HEAP8[$99>>0]|0;
   $23 = $100;
   $25 = 0;
   while(1) {
    $101 = $25;
    $102 = $22;
    $103 = ($101|0)<($102|0);
    if (!($103)) {
     break;
    }
    $104 = $21;
    $105 = $25;
    $106 = (($105) + 1)|0;
    $107 = (($106) + 1)|0;
    $108 = (($104) + ($107)|0);
    $109 = HEAP8[$108>>0]|0;
    $24 = $109;
    $110 = $24;
    $111 = $23;
    $112 = $19;
    $113 = (_fcs_is_parent_card__helper_254($110,$111,$112)|0);
    if (!($113)) {
     $114 = $6;
     $115 = $20;
     $116 = $115&255;
     $117 = $25;
     $118 = $117&255;
     $119 = $23;
     _fc_solve__assign_dest_stack_and_col_ptr($114,$116,$118,$119);
    }
    $120 = $25;
    $121 = (($120) + 1)|0;
    $25 = $121;
    $122 = $24;
    $23 = $122;
   }
   $123 = $6;
   $124 = $20;
   $125 = $124&255;
   $126 = $22;
   $127 = $126&255;
   $128 = $23;
   _fc_solve__assign_dest_stack_and_col_ptr($123,$125,$127,$128);
  }
  $129 = $20;
  $130 = (($129) + 1)|0;
  $20 = $130;
 }
 STACKTOP = sp;return;
}
function _fc_solve_rand_get_random_number($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (_fc_solve_rand_rand15($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = $1;
 $7 = (_fc_solve_rand_rand15($6)|0);
 $8 = $7 << 15;
 $9 = $5 | $8;
 STACKTOP = sp;return ($9|0);
}
function _calc_depth($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _befs_rate_state($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 108|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $30 = $4;
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $8 = $32;
 $33 = $8;
 $34 = ((($33)) + 3|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 3;
 $9 = $37;
 $38 = $8;
 ;HEAP8[$10>>0]=HEAP8[$38>>0]|0;HEAP8[$10+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$38+3>>0]|0;
 $39 = $8;
 $40 = ((($39)) + 3|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 & 16;
 $44 = ($43|0)!=(0);
 $45 = $44&1;
 $11 = $45;
 $12 = 0.0;
 $13 = 0.0;
 $46 = $7;
 $47 = (0)>($46|0);
 $48 = $7;
 $49 = $47 ? 0 : $48;
 $50 = (+($49|0));
 $51 = $5;
 $52 = ((($51)) + 32|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $50 * $53;
 $14 = $54;
 $55 = $5;
 $56 = ((($55)) + 48|0);
 $15 = $56;
 $57 = $15;
 $58 = ((($57)) + 8|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $59 != 0.0;
 L1: do {
  if ($60) {
   $61 = ((($10)) + 2|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $63 << 2;
   $16 = $64;
   $17 = 0;
   while(1) {
    $65 = $17;
    $66 = $16;
    $67 = ($65|0)<($66|0);
    if (!($67)) {
     break L1;
    }
    $68 = $15;
    $69 = $6;
    $70 = ((($69)) + 48|0);
    $71 = $17;
    $72 = (($70) + ($71)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = (($68) + ($74<<3)|0);
    $76 = +HEAPF64[$75>>3];
    $77 = $14;
    $78 = $77 + $76;
    $14 = $78;
    $79 = $17;
    $80 = (($79) + 1)|0;
    $17 = $80;
   }
  }
 } while(0);
 $18 = 0;
 $81 = $5;
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&1;
 if ($83) {
  $19 = 0;
  while(1) {
   $84 = $19;
   $85 = ((($10)) + 1|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = ($84|0)<($87|0);
   if (!($88)) {
    break;
   }
   $89 = $6;
   $90 = $19;
   $91 = (($89) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $20 = $92;
   $93 = $20;
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $21 = $95;
   $96 = $21;
   $97 = ($96|0)<=(1);
   if ($97) {
    $98 = $21;
    $99 = ($98|0)==(0);
    if ($99) {
     $100 = $18;
     $101 = (($100) + 1)<<24>>24;
     $18 = $101;
    }
   } else {
    $102 = $9;
    $103 = $20;
    $104 = $21;
    $105 = (($104) - 1)|0;
    $106 = (_update_col_cards_under_sequences($102,$103,$105)|0);
    $22 = $106;
    $107 = $22;
    $108 = (5136 + ($107<<3)|0);
    $109 = +HEAPF64[$108>>3];
    $110 = $12;
    $111 = $110 + $109;
    $12 = $111;
    $112 = $22;
    $113 = ($112|0)>(0);
    if ($113) {
     $114 = $11;
     $115 = $114&1;
     if ($115) {
      $123 = 1.0;
     } else {
      $116 = $21;
      $117 = $22;
      $118 = (($116) - ($117))|0;
      $119 = (5136 + ($118<<3)|0);
      $120 = +HEAPF64[$119>>3];
      $123 = $120;
     }
     $121 = $13;
     $122 = $121 + $123;
     $13 = $122;
    }
   }
   $124 = $19;
   $125 = (($124) + 1)|0;
   $19 = $125;
  }
  $126 = HEAP8[$10>>0]|0;
  $127 = $6;
  $128 = (_count_num_vacant_freecells($126,$127)|0);
  $23 = $128;
  $129 = $8;
  $130 = ((($129)) + 3|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = (2)?($132 >> 2):($132);
  $134 = $133 & 3;
  $135 = ($134|0)==(0);
  $136 = $11;
  $137 = $136&1;
  $138 = $23;
  $139 = $138&255;
  do {
   if ($135) {
    if ($137) {
     $140 = $18;
     $141 = $140&255;
     $142 = (($139) + ($141))|0;
     $149 = $142;
     break;
    } else {
     $143 = (($139) + 1)|0;
     $144 = $18;
     $145 = $144&255;
     $146 = $143 << $145;
     $149 = $146;
     break;
    }
   } else {
    $147 = $137 ? $139 : 0;
    $149 = $147;
   }
  } while(0);
  $148 = (+($149|0));
  $150 = $5;
  $151 = ((($150)) + 8|0);
  $152 = +HEAPF64[$151>>3];
  $153 = $148 * $152;
  $154 = $8;
  $155 = ((($154)) + 24|0);
  $156 = +HEAPF64[$155>>3];
  $157 = $12;
  $158 = $156 - $157;
  $159 = $5;
  $160 = ((($159)) + 16|0);
  $161 = +HEAPF64[$160>>3];
  $162 = $158 * $161;
  $163 = $153 + $162;
  $164 = $13;
  $165 = $5;
  $166 = ((($165)) + 24|0);
  $167 = +HEAPF64[$166>>3];
  $168 = $164 * $167;
  $169 = $163 + $168;
  $170 = $14;
  $171 = $170 + $169;
  $14 = $171;
 }
 $172 = $5;
 $173 = ((($172)) + 40|0);
 $174 = +HEAPF64[$173>>3];
 $24 = $174;
 $175 = $24;
 $176 = $175 != 0.0;
 if (!($176)) {
  $221 = $14;
  $222 = (~~(($221)));
  STACKTOP = sp;return ($222|0);
 }
 $177 = ((($10)) + 2|0);
 $178 = HEAP8[$177>>0]|0;
 $179 = $178&255;
 $180 = ($179*52)|0;
 $25 = $180;
 $26 = 0;
 while(1) {
  $181 = $26;
  $182 = ((($10)) + 1|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183&255;
  $185 = ($181|0)<($184|0);
  if (!($185)) {
   break;
  }
  $186 = $6;
  $187 = $26;
  $188 = (($186) + ($187<<2)|0);
  $189 = HEAP32[$188>>2]|0;
  $27 = $189;
  $190 = $27;
  $191 = HEAP8[$190>>0]|0;
  $192 = $191&255;
  $28 = $192;
  $29 = 1;
  while(1) {
   $193 = $29;
   $194 = $28;
   $195 = ($193>>>0)<($194>>>0);
   if (!($195)) {
    break;
   }
   $196 = $27;
   $197 = $29;
   $198 = (($197) - 1)|0;
   $199 = (($198) + 1)|0;
   $200 = (($196) + ($199)|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $27;
   $203 = $29;
   $204 = (($203) + 1)|0;
   $205 = (($202) + ($204)|0);
   $206 = HEAP8[$205>>0]|0;
   $207 = $9;
   $208 = (_fcs_is_parent_card__helper_254($201,$206,$207)|0);
   if (!($208)) {
    $209 = $25;
    $210 = (($209) + -1)|0;
    $25 = $210;
   }
   $211 = $29;
   $212 = (($211) + 1)|0;
   $29 = $212;
  }
  $213 = $26;
  $214 = (($213) + 1)|0;
  $26 = $214;
 }
 $215 = $25;
 $216 = (+($215|0));
 $217 = $24;
 $218 = $216 * $217;
 $219 = $14;
 $220 = $219 + $218;
 $14 = $220;
 $221 = $14;
 $222 = (~~(($221)));
 STACKTOP = sp;return ($222|0);
}
function _fcs__is_state_a_dead_end($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = ((($3)) + 18|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 & 4;
 $8 = ($7|0)!=(0);
 STACKTOP = sp;return ($8|0);
}
function _set_scan_visited($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4 & 7;
 $6 = 1 << $5;
 $7 = $2;
 $8 = ((($7)) + 56|0);
 $9 = ((($8)) + 19|0);
 $10 = $3;
 $11 = (3)?($10 >> 3):($10);
 $12 = (($9) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 | $6;
 $16 = $15&255;
 HEAP8[$12>>0] = $16;
 STACKTOP = sp;return;
}
function _free_states($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 12|0;
 $1 = $0;
 $11 = $1;
 $12 = ((($11)) + 152|0);
 $13 = HEAP32[$12>>2]|0;
 $2 = $13;
 $14 = $2;
 $15 = $1;
 $16 = ((($15)) + 148|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) + (($17*1356)|0)|0);
 $3 = $18;
 while(1) {
  $19 = $2;
  $20 = $3;
  $21 = ($19>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = $2;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $4 = $24;
  $25 = $4;
  $5 = $25;
  $26 = $4;
  $27 = $2;
  $28 = ((($27)) + 1344|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($26) + (($29*552)|0)|0);
  $6 = $30;
  while(1) {
   $31 = $5;
   $32 = $6;
   $33 = ($31>>>0)<($32>>>0);
   if (!($33)) {
    break;
   }
   $34 = $5;
   $35 = ((($34)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0);
   $38 = $5;
   if ($37) {
    _free_states_handle_soft_dfs_soft_thread($38);
   } else {
    $39 = ((($38)) + 549|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&1;
    if ($41) {
     _fc_solve_pq_init($7);
     $42 = $5;
     $43 = ((($42)) + 24|0);
     $44 = ((($43)) + 32|0);
     $45 = ((($44)) + 216|0);
     $46 = ((($45)) + 16|0);
     $47 = ((($46)) + 8|0);
     $48 = HEAP32[$47>>2]|0;
     $8 = $48;
     $49 = $8;
     $50 = $5;
     $51 = ((($50)) + 24|0);
     $52 = ((($51)) + 32|0);
     $53 = ((($52)) + 216|0);
     $54 = ((($53)) + 16|0);
     $55 = ((($54)) + 4|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = (($49) + ($56<<3)|0);
     $9 = $57;
     $58 = $8;
     $59 = ((($58)) + 8|0);
     $10 = $59;
     while(1) {
      $60 = $10;
      $61 = $9;
      $62 = ($60>>>0)<=($61>>>0);
      if (!($62)) {
       break;
      }
      $63 = $10;
      $64 = HEAP32[$63>>2]|0;
      $65 = (_fcs__is_state_a_dead_end($64)|0);
      if (!($65)) {
       $66 = $10;
       $67 = HEAP32[$66>>2]|0;
       $68 = $10;
       $69 = ((($68)) + 4|0);
       $70 = HEAP32[$69>>2]|0;
       _fc_solve_pq_push($7,$67,$70);
      }
      $71 = $10;
      $72 = ((($71)) + 8|0);
      $10 = $72;
     }
     $73 = $5;
     _st_free_pq_211($73);
     $74 = $5;
     $75 = ((($74)) + 24|0);
     $76 = ((($75)) + 32|0);
     $77 = ((($76)) + 216|0);
     $78 = ((($77)) + 16|0);
     ;HEAP32[$78>>2]=HEAP32[$7>>2]|0;HEAP32[$78+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$78+8>>2]=HEAP32[$7+8>>2]|0;
    }
   }
   $79 = $5;
   $80 = ((($79)) + 552|0);
   $5 = $80;
  }
  $81 = $2;
  $82 = ((($81)) + 1356|0);
  $2 = $82;
 }
 $83 = $1;
 $84 = ((($83)) + 32|0);
 $85 = $1;
 _fc_solve_hash_foreach($84,31,$85);
 STACKTOP = sp;return;
}
function _free_states_handle_soft_dfs_soft_thread($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $9 = $1;
 $10 = ((($9)) + 24|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $2 = $12;
 $13 = $2;
 $14 = $1;
 $15 = ((($14)) + 24|0);
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($13) + (($17*244)|0)|0);
 $3 = $18;
 while(1) {
  $19 = $2;
  $20 = $3;
  $21 = ($19>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = $2;
  $23 = ((($22)) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $4 = $24;
  $25 = $4;
  $26 = $2;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($25) + ($28<<3)|0);
  $5 = $29;
  $30 = $5;
  $6 = $30;
  $31 = $4;
  $32 = $2;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($31) + ($34<<3)|0);
  $7 = $35;
  $36 = $2;
  $37 = ((($36)) + 4|0);
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $8 = $39;
  while(1) {
   $40 = $6;
   $41 = $7;
   $42 = ($40>>>0)<($41>>>0);
   if (!($42)) {
    break;
   }
   $43 = $8;
   $44 = $6;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + ($45<<3)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_fcs__is_state_a_dead_end($47)|0);
   if (!($48)) {
    $49 = $5;
    $50 = ((($49)) + 8|0);
    $5 = $50;
    $51 = $6;
    ;HEAP32[$49>>2]=HEAP32[$51>>2]|0;HEAP32[$49+4>>2]=HEAP32[$51+4>>2]|0;
   }
   $52 = $6;
   $53 = ((($52)) + 8|0);
   $6 = $53;
  }
  $54 = $5;
  $55 = $4;
  $56 = $54;
  $57 = $55;
  $58 = (($56) - ($57))|0;
  $59 = (($58|0) / 8)&-1;
  $60 = $2;
  $61 = ((($60)) + 4|0);
  HEAP32[$61>>2] = $59;
  $62 = $2;
  $63 = ((($62)) + 244|0);
  $2 = $63;
 }
 STACKTOP = sp;return;
}
function _fc_solve_pq_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 HEAP32[$4>>2] = 1024;
 $5 = (_malloc(8200)|0);
 $6 = $1;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _fc_solve_pq_push($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$9>>2] = $11;
 $6 = $11;
 $12 = $6;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12>>>0)>($14>>>0);
 if ($15) {
  $16 = $3;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 256)|0;
  HEAP32[$19>>2] = $21;
  $22 = (($21) + 1)|0;
  $23 = $22<<3;
  $24 = (_realloc($18,$23)|0);
  $25 = $3;
  $26 = ((($25)) + 8|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $7 = $29;
 while(1) {
  $30 = $6;
  $31 = ($30|0)==(1);
  if ($31) {
   $38 = 2147483647;
  } else {
   $32 = $7;
   $33 = $6;
   $34 = (1)?($33 >>> 1):($33);
   $35 = (($32) + ($34<<3)|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$35+4>>2]|0;
   $36 = (_fcs_pq_rating($$byval_copy)|0);
   $38 = $36;
  }
  $37 = $5;
  $39 = ($38|0)<($37|0);
  if (!($39)) {
   break;
  }
  $40 = $7;
  $41 = $6;
  $42 = (($40) + ($41<<3)|0);
  $43 = $7;
  $44 = $6;
  $45 = (1)?($44 >>> 1):($44);
  $46 = (($43) + ($45<<3)|0);
  ;HEAP32[$42>>2]=HEAP32[$46>>2]|0;HEAP32[$42+4>>2]=HEAP32[$46+4>>2]|0;
  $47 = $6;
  $48 = (1)?($47 >>> 1):($47);
  $6 = $48;
 }
 $49 = $4;
 $50 = $7;
 $51 = $6;
 $52 = (($50) + ($51<<3)|0);
 HEAP32[$52>>2] = $49;
 $53 = $5;
 $54 = $7;
 $55 = $6;
 $56 = (($54) + ($55<<3)|0);
 $57 = ((($56)) + 4|0);
 HEAP32[$57>>2] = $53;
 STACKTOP = sp;return;
}
function _free_states_should_delete($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $5 = $7;
 $8 = $3;
 $6 = $8;
 $9 = $6;
 $10 = (_fcs__is_state_a_dead_end($9)|0);
 if ($10) {
  $11 = $5;
  $12 = ((($11)) + 128|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $6;
  $15 = ((($14)) + 56|0);
  HEAP32[$15>>2] = $13;
  $16 = $6;
  $17 = $5;
  $18 = ((($17)) + 128|0);
  HEAP32[$18>>2] = $16;
  $19 = $5;
  $20 = ((($19)) + 140|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + -1)|0;
  HEAP32[$20>>2] = $22;
  $$expand_i1_val = 1;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $23 = $$pre_trunc&1;
  STACKTOP = sp;return ($23|0);
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$2>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $23 = $$pre_trunc&1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _fc_solve_hash_foreach($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $3;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $6 = $13;
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $7 = $15;
 $8 = 0;
 while(1) {
  $16 = $8;
  $17 = $6;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $7;
  $20 = $8;
  $21 = (($19) + ($20<<2)|0);
  $9 = $21;
  while(1) {
   $22 = $9;
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)!=(0|0);
   if (!($24)) {
    break;
   }
   $25 = $4;
   $26 = $9;
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   $29 = $5;
   $30 = (FUNCTION_TABLE_iii[$25 & 31]($28,$29)|0);
   $31 = $9;
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 8|0);
   if ($30) {
    $34 = HEAP32[$33>>2]|0;
    $10 = $34;
    $35 = $3;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $9;
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($39)) + 8|0);
    HEAP32[$40>>2] = $37;
    $41 = $9;
    $42 = HEAP32[$41>>2]|0;
    $43 = $3;
    $44 = ((($43)) + 4|0);
    HEAP32[$44>>2] = $42;
    $45 = $10;
    $46 = $9;
    HEAP32[$46>>2] = $45;
    $47 = $3;
    $48 = ((($47)) + 20|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = (($49) + -1)|0;
    HEAP32[$48>>2] = $50;
   } else {
    $9 = $33;
   }
  }
  $51 = $8;
  $52 = (($51) + 1)|0;
  $8 = $52;
 }
 STACKTOP = sp;return;
}
function _fcs_pq_rating($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _update_col_cards_under_sequences($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = $5;
 $11 = (($10) + 1)|0;
 $12 = (($9) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $6 = $13;
 while(1) {
  $14 = $5;
  $15 = ($14|0)>(0);
  if (!($15)) {
   label = 5;
   break;
  }
  $16 = $4;
  $17 = $5;
  $18 = (($17) - 1)|0;
  $19 = (($18) + 1)|0;
  $20 = (($16) + ($19)|0);
  $21 = HEAP8[$20>>0]|0;
  $7 = $21;
  $22 = $6;
  $23 = $7;
  $24 = $3;
  $25 = (_fcs_is_parent_card__helper_254($22,$23,$24)|0);
  $26 = $25&1;
  $8 = $26;
  $27 = $8;
  $28 = $27&1;
  if (!($28)) {
   label = 5;
   break;
  }
  $29 = $5;
  $30 = (($29) + -1)|0;
  $5 = $30;
  $31 = $7;
  $6 = $31;
 }
 if ((label|0) == 5) {
  $32 = $5;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _fcs_is_parent_card__helper_254($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $6&255;
 $8 = (2)?($7 >> 2):($7);
 $9 = (($8) + 1)|0;
 $10 = $4;
 $11 = $10&255;
 $12 = (2)?($11 >> 2):($11);
 $13 = ($9|0)==($12|0);
 if (!($13)) {
  $35 = 0;
  STACKTOP = sp;return ($35|0);
 }
 $14 = $5;
 $15 = ($14|0)==(2);
 do {
  if ($15) {
   $33 = 1;
  } else {
   $16 = $5;
   $17 = ($16|0)==(1);
   $18 = $3;
   $19 = $18&255;
   $20 = $19 & 3;
   if ($17) {
    $21 = $4;
    $22 = $21&255;
    $23 = $22 & 3;
    $24 = ($20|0)==($23|0);
    $25 = $24&1;
    $33 = $25;
    break;
   } else {
    $26 = $20 & 1;
    $27 = $4;
    $28 = $27&255;
    $29 = $28 & 3;
    $30 = $29 & 1;
    $31 = ($26|0)!=($30|0);
    $32 = $31&1;
    $33 = $32;
    break;
   }
  }
 } while(0);
 $34 = ($33|0)!=(0);
 $35 = $34;
 STACKTOP = sp;return ($35|0);
}
function _fc_solve_rand_rand15($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3*214013)|0;
 $5 = (($4) + 2531011)|0;
 $6 = $1;
 HEAP32[$6>>2] = $5;
 $7 = (16)?($5 >> 16):($5);
 $8 = $7 & 32767;
 STACKTOP = sp;return ($8|0);
}
function _fc_solve__assign_dest_stack_and_col_ptr($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = $7;
 $11 = $10&255;
 $12 = (2)?($11 >> 2):($11);
 $13 = (($12) - 1)|0;
 $14 = $13<<4;
 $15 = $7;
 $16 = $15&255;
 $17 = $16 & 3;
 $18 = $17 << 1;
 $19 = (($14) + ($18))|0;
 $20 = (($9) + ($19)|0);
 $8 = $20;
 while(1) {
  $21 = $8;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(-1);
  if (!($24)) {
   break;
  }
  $25 = $8;
  $26 = ((($25)) + 8|0);
  $8 = $26;
 }
 $27 = $5;
 $28 = $8;
 $29 = ((($28)) + 1|0);
 $8 = $29;
 HEAP8[$28>>0] = $27;
 $30 = $6;
 $31 = $8;
 HEAP8[$31>>0] = $30;
 STACKTOP = sp;return;
}
function _fcs__should_state_be_pruned__state($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = ((($3)) + 18|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 & 16;
 $8 = ($7|0)!=(0);
 $9 = $8 ^ 1;
 STACKTOP = sp;return ($9|0);
}
function _fc_solve_pats__hash_layout($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 ;HEAP8[$2>>0]=HEAP8[$5>>0]|0;HEAP8[$2+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$5+3>>0]|0;
 $3 = 0;
 while(1) {
  $6 = $3;
  $7 = ((($2)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $1;
  $12 = $3;
  _fc_solve_pats__hashpile($11,$12);
  $13 = $3;
  $14 = (($13) + 1)|0;
  $3 = $14;
 }
 STACKTOP = sp;return;
}
function _fc_solve_pats__hashpile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 820|0);
 $7 = $3;
 $8 = (($6) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $4;
 $11 = $4;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (($13) + 1)|0;
 $15 = (($10) + ($14)|0);
 HEAP8[$15>>0] = 0;
 $16 = $4;
 $17 = ((($16)) + 1|0);
 $18 = (_fnv_hash_str($17)|0);
 $19 = $2;
 $20 = ((($19)) + 820|0);
 $21 = ((($20)) + 1376|0);
 $22 = $3;
 $23 = (($21) + ($22<<2)|0);
 HEAP32[$23>>2] = $18;
 $24 = $2;
 $25 = ((($24)) + 820|0);
 $26 = ((($25)) + 1416|0);
 $27 = $3;
 $28 = (($26) + ($27<<2)|0);
 HEAP32[$28>>2] = -1;
 STACKTOP = sp;return;
}
function _fnv_hash_str($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = -2128831035;
 while(1) {
  $4 = $1;
  $5 = ((($4)) + 1|0);
  $1 = $5;
  $6 = HEAP8[$4>>0]|0;
  $3 = $6;
  $7 = ($6<<24>>24)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $3;
  $9 = $2;
  $10 = (_fnv_hash($8,$9)|0);
  $2 = $10;
 }
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function _fnv_hash($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = Math_imul($4, 16777619)|0;
 $6 = $2;
 $7 = $6&255;
 $8 = $5 ^ $7;
 STACKTOP = sp;return ($8|0);
}
function _fc_solve_pats__align($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 7;
 $3 = $1;
 $4 = $3 & 7;
 $5 = ($4|0)!=(0);
 $6 = $1;
 $7 = $6 | 7;
 $8 = (($7) + 1)|0;
 $9 = $5 ? $8 : $6;
 STACKTOP = sp;return ($9|0);
}
function _fc_solve_rand_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _add_to_move_funcs_list($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $8 = $12;
 $13 = $4;
 $14 = HEAP32[$13>>2]|0;
 $15 = $8;
 $16 = $7;
 $17 = (($15) + ($16))|0;
 $18 = $17<<2;
 $19 = (_realloc($14,$18)|0);
 $9 = $19;
 $10 = 0;
 while(1) {
  $20 = $10;
  $21 = $7;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $6;
  $24 = $10;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (4192 + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $9;
  $30 = $8;
  $31 = (($30) + 1)|0;
  $8 = $31;
  $32 = (($29) + ($30<<2)|0);
  HEAP32[$32>>2] = $28;
  $33 = $10;
  $34 = (($33) + 1)|0;
  $10 = $34;
 }
 $35 = $9;
 $36 = $4;
 HEAP32[$36>>2] = $35;
 $37 = $8;
 $38 = $5;
 HEAP32[$38>>2] = $37;
 STACKTOP = sp;return;
}
function _fc_solve_initialize_befs_rater($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = sp + 68|0;
 $2 = $0;
 $3 = $1;
 $16 = $3;
 $17 = ((($16)) + 160|0);
 $4 = $17;
 $5 = 0.0;
 $6 = 0;
 while(1) {
  $18 = $6;
  $19 = ($18|0)<(6);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = $6;
  $22 = (($20) + ($21<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $5;
  $25 = $24 + $23;
  $5 = $25;
  $26 = $6;
  $27 = (($26) + 1)|0;
  $6 = $27;
 }
 $28 = $5;
 $29 = $28 < 9.9999999999999995E-7;
 if ($29) {
  $5 = 1.0;
 }
 $30 = $5;
 $31 = 2147483647.0 / $30;
 $7 = $31;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $8 = $33;
 $34 = $8;
 $35 = HEAP32[$34>>2]|0;
 $9 = $35;
 $36 = $9;
 ;HEAP8[$10>>0]=HEAP8[$36>>0]|0;HEAP8[$10+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$36+3>>0]|0;
 $37 = $9;
 $38 = ((($37)) + 3|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $40 & 16;
 $42 = ($41|0)!=(0);
 $43 = $42&1;
 $11 = $43;
 $44 = $4;
 $45 = +HEAPF64[$44>>3];
 $46 = $7;
 $47 = $45 * $46;
 $48 = ((($10)) + 2|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = ($50*52)|0;
 $52 = (+($51|0));
 $53 = $47 / $52;
 $12 = $53;
 $13 = 0.0;
 $54 = $3;
 $55 = ((($54)) + 48|0);
 $14 = $55;
 $15 = 0;
 while(1) {
  $56 = $15;
  $57 = ($56|0)<=(13);
  if (!($57)) {
   break;
  }
  $58 = $13;
  $59 = $14;
  $60 = $15;
  $61 = (($59) + ($60<<3)|0);
  HEAPF64[$61>>3] = $58;
  $62 = $15;
  $63 = (($62) + 1)|0;
  $15 = $63;
  $64 = $12;
  $65 = $13;
  $66 = $65 + $64;
  $13 = $66;
 }
 $67 = $4;
 $68 = ((($67)) + 8|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $7;
 $71 = $69 * $70;
 $72 = $9;
 $73 = ((($72)) + 3|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = (2)?($75 >> 2):($75);
 $77 = $76 & 3;
 $78 = ($77|0)==(0);
 $79 = $11;
 $80 = $79&1;
 $81 = HEAP8[$10>>0]|0;
 $82 = $81&255;
 do {
  if ($78) {
   if ($80) {
    $83 = $9;
    $84 = ((($83)) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = (($82) + ($86))|0;
    $96 = $87;
    break;
   } else {
    $88 = (($82) + 1)|0;
    $89 = $9;
    $90 = ((($89)) + 1|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = $88 << $92;
    $96 = $93;
    break;
   }
  } else {
   $94 = $80 ? $82 : 1;
   $96 = $94;
  }
 } while(0);
 $95 = (+($96|0));
 $97 = $71 / $95;
 $98 = $3;
 $99 = ((($98)) + 8|0);
 HEAPF64[$99>>3] = $97;
 $100 = $4;
 $101 = ((($100)) + 16|0);
 $102 = +HEAPF64[$101>>3];
 $103 = $7;
 $104 = $102 * $103;
 $105 = $9;
 $106 = ((($105)) + 24|0);
 $107 = +HEAPF64[$106>>3];
 $108 = $104 / $107;
 $109 = $3;
 $110 = ((($109)) + 16|0);
 HEAPF64[$110>>3] = $108;
 $111 = $4;
 $112 = ((($111)) + 24|0);
 $113 = +HEAPF64[$112>>3];
 $114 = $7;
 $115 = $113 * $114;
 $116 = ((($10)) + 2|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117&255;
 $119 = ($118*52)|0;
 $120 = (5136 + ($119<<3)|0);
 $121 = +HEAPF64[$120>>3];
 $122 = $115 / $121;
 $123 = $3;
 $124 = ((($123)) + 24|0);
 HEAPF64[$124>>3] = $122;
 $125 = $4;
 $126 = ((($125)) + 32|0);
 $127 = +HEAPF64[$126>>3];
 $128 = $7;
 $129 = $127 * $128;
 $130 = $129 / 2.0E+4;
 $131 = $3;
 $132 = ((($131)) + 32|0);
 HEAPF64[$132>>3] = $130;
 $133 = $4;
 $134 = ((($133)) + 40|0);
 $135 = +HEAPF64[$134>>3];
 $136 = $7;
 $137 = $135 * $136;
 $138 = ((($10)) + 2|0);
 $139 = HEAP8[$138>>0]|0;
 $140 = $139&255;
 $141 = ($140*52)|0;
 $142 = (+($141|0));
 $143 = $137 / $142;
 $144 = $3;
 $145 = ((($144)) + 40|0);
 HEAPF64[$145>>3] = $143;
 $146 = $3;
 $147 = ((($146)) + 8|0);
 $148 = +HEAPF64[$147>>3];
 $149 = $148 != 0.0;
 if ($149) {
  $160 = 1;
  $158 = $3;
  $159 = $160&1;
  HEAP8[$158>>0] = $159;
  STACKTOP = sp;return;
 }
 $150 = $3;
 $151 = ((($150)) + 16|0);
 $152 = +HEAPF64[$151>>3];
 $153 = $152 != 0.0;
 if ($153) {
  $160 = 1;
  $158 = $3;
  $159 = $160&1;
  HEAP8[$158>>0] = $159;
  STACKTOP = sp;return;
 }
 $154 = $3;
 $155 = ((($154)) + 24|0);
 $156 = +HEAPF64[$155>>3];
 $157 = $156 != 0.0;
 $160 = $157;
 $158 = $3;
 $159 = $160&1;
 HEAP8[$158>>0] = $159;
 STACKTOP = sp;return;
}
function _set_next_prelude_item($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = $3;
 $9 = ((($8)) + 1332|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$9>>2] = $11;
 $12 = (($7) + ($10<<3)|0);
 ;HEAP32[$6>>2]=HEAP32[$12>>2]|0;HEAP32[$6+4>>2]=HEAP32[$12+4>>2]|0;
 $13 = $3;
 $14 = HEAP32[$6>>2]|0;
 $15 = ((($6)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $5;
 _set_next_soft_thread($13,$14,$16,$17);
 STACKTOP = sp;return;
}
function _set_next_soft_thread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $7;
 HEAP32[$9>>2] = $8;
 $10 = $4;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $6;
 $14 = (($12) + ($13))|0;
 $15 = $4;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = $14;
 STACKTOP = sp;return;
}
function _fc_solve_hash_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 2048;
 $7 = $4;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 2048;
 $9 = $4;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 2047;
 $11 = $4;
 _fcs_hash_set_max_num_elems_256($11,2048);
 $12 = $4;
 $13 = ((($12)) + 20|0);
 HEAP32[$13>>2] = 0;
 $14 = (_calloc(2048,4)|0);
 $15 = $4;
 HEAP32[$15>>2] = $14;
 $16 = $4;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = $5;
 $19 = $4;
 $20 = ((($19)) + 8|0);
 HEAP32[$20>>2] = $18;
 $21 = $4;
 $22 = ((($21)) + 28|0);
 $23 = $3;
 _fc_solve_compact_allocator_init($22,$23);
 STACKTOP = sp;return;
}
function _update_initial_cards_val($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $8 = $1;
 $9 = ((($8)) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & 3;
 $2 = $12;
 $13 = $1;
 $14 = ((($13)) + 196|0);
 $3 = $14;
 $4 = 0.0;
 $5 = 0;
 while(1) {
  $15 = $5;
  $16 = $1;
  $17 = ((($16)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = ($15|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $3;
  $22 = $5;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $6 = $24;
  $25 = $6;
  $26 = HEAP8[$25>>0]|0;
  $7 = $26;
  $27 = $7;
  $28 = $27&255;
  $29 = ($28|0)<=(1);
  if (!($29)) {
   $30 = $2;
   $31 = $6;
   $32 = $7;
   $33 = $32&255;
   $34 = (($33) - 1)|0;
   $35 = (_update_col_cards_under_sequences($30,$31,$34)|0);
   $36 = (5136 + ($35<<3)|0);
   $37 = +HEAPF64[$36>>3];
   $38 = $4;
   $39 = $38 + $37;
   $4 = $39;
  }
  $40 = $5;
  $41 = (($40) + 1)|0;
  $5 = $41;
 }
 $42 = $4;
 $43 = $1;
 $44 = ((($43)) + 24|0);
 HEAPF64[$44>>3] = $42;
 STACKTOP = sp;return;
}
function _FCS_STATE_keyval_pair_to_kv_255($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 4|0);
 $5 = $2;
 $6 = ((($5)) + 56|0);
 HEAP32[$4>>2] = $6;
 STACKTOP = sp;return;
}
function _fcs_hash_set_max_num_elems_256($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4 << 1;
 $6 = $2;
 $7 = ((($6)) + 24|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _compile_prelude($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 44|0;
 $12 = sp;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $13 = $1;
 $14 = ((($13)) + 1352|0);
 $15 = HEAP32[$14>>2]|0;
 $5 = $15;
 while(1) {
  $16 = $2;
  $17 = $16&1;
  $18 = $17 ^ 1;
  if (!($18)) {
   label = 26;
   break;
  }
  $19 = $5;
  $20 = (_atol($19)|0);
  $6 = $20;
  while(1) {
   $21 = $5;
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $5;
    $26 = HEAP8[$25>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = (_isdigit($27)|0);
    $29 = ($28|0)!=(0);
    $113 = $29;
   } else {
    $113 = 0;
   }
   $30 = $5;
   if (!($113)) {
    break;
   }
   $31 = ((($30)) + 1|0);
   $5 = $31;
  }
  $32 = HEAP8[$30>>0]|0;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)!=(64);
  if ($34) {
   label = 9;
   break;
  }
  $36 = $5;
  $37 = ((($36)) + 1|0);
  $5 = $37;
  $38 = $5;
  $7 = $38;
  while(1) {
   $39 = $5;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40 << 24 >> 24;
   $42 = ($41|0)!=(0);
   if ($42) {
    $43 = $5;
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 << 24 >> 24;
    $46 = ($45|0)!=(44);
    $114 = $46;
   } else {
    $114 = 0;
   }
   $47 = $5;
   if (!($114)) {
    break;
   }
   $48 = ((($47)) + 1|0);
   $5 = $48;
  }
  $49 = HEAP8[$47>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = ($50|0)==(0);
  if ($51) {
   $2 = 1;
  }
  $52 = $7;
  (_strncpy($8,$52,10)|0);
  $53 = ((($8)) + 9|0);
  HEAP8[$53>>0] = 0;
  $54 = $5;
  $55 = $7;
  $56 = $54;
  $57 = $55;
  $58 = (($56) - ($57))|0;
  $59 = (($8) + ($58)|0);
  HEAP8[$59>>0] = 0;
  $60 = $5;
  $61 = ((($60)) + 1|0);
  $5 = $61;
  $62 = $1;
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $9 = $64;
  $65 = $9;
  $10 = $65;
  $66 = $9;
  $67 = $1;
  $68 = ((($67)) + 1344|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($66) + (($69*552)|0)|0);
  $11 = $70;
  while(1) {
   $71 = $10;
   $72 = $11;
   $73 = ($71>>>0)<($72>>>0);
   if (!($73)) {
    break;
   }
   $74 = $10;
   $75 = ((($74)) + 532|0);
   $76 = (_strcmp($75,$8)|0);
   $77 = ($76|0)!=(0);
   if (!($77)) {
    break;
   }
   $78 = $10;
   $79 = ((($78)) + 552|0);
   $10 = $79;
  }
  $80 = $10;
  $81 = $11;
  $82 = ($80|0)==($81|0);
  if ($82) {
   label = 22;
   break;
  }
  $84 = $3;
  $85 = $84 & 15;
  $86 = ($85|0)!=(0);
  if (!($86)) {
   $87 = $4;
   $88 = $3;
   $89 = (($88) + 16)|0;
   $90 = $89<<3;
   $91 = (_realloc($87,$90)|0);
   $4 = $91;
  }
  $92 = $4;
  $93 = $3;
  $94 = (($93) + 1)|0;
  $3 = $94;
  $95 = (($92) + ($93<<3)|0);
  $96 = $10;
  $97 = $9;
  $98 = $96;
  $99 = $97;
  $100 = (($98) - ($99))|0;
  $101 = (($100|0) / 552)&-1;
  HEAP32[$12>>2] = $101;
  $102 = ((($12)) + 4|0);
  $103 = $6;
  HEAP32[$102>>2] = $103;
  ;HEAP32[$95>>2]=HEAP32[$12>>2]|0;HEAP32[$95+4>>2]=HEAP32[$12+4>>2]|0;
 }
 if ((label|0) == 9) {
  $35 = $4;
  _free($35);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 22) {
  $83 = $4;
  _free($83);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 26) {
  $104 = $4;
  $105 = $3;
  $106 = $105<<3;
  $107 = (_realloc($104,$106)|0);
  $108 = $1;
  $109 = ((($108)) + 1336|0);
  HEAP32[$109>>2] = $107;
  $110 = $3;
  $111 = $1;
  $112 = ((($111)) + 1328|0);
  HEAP32[$112>>2] = $110;
  STACKTOP = sp;return;
 }
}
function _fcs_make_card($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4&255;
 $6 = $5&255;
 $7 = $6 << 2;
 $8 = $3;
 $9 = $8&255;
 $10 = $9&255;
 $11 = $7 | $10;
 $12 = $11&255;
 STACKTOP = sp;return ($12|0);
}
function _fc_solve_state_init_proto($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 dest=$7; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $4;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $5;
  $12 = $6;
  $13 = $12 << 7;
  $14 = (($11) + ($13)|0);
  $15 = $3;
  $16 = $6;
  $17 = (($15) + ($16<<2)|0);
  HEAP32[$17>>2] = $14;
  dest=$14; stop=dest+105|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $18 = $6;
  $19 = (($18) + 1)|0;
  $6 = $19;
 }
 while(1) {
  $20 = $6;
  $21 = ($20>>>0)<(10);
  $22 = $3;
  if (!($21)) {
   break;
  }
  $23 = $6;
  $24 = (($22) + ($23<<2)|0);
  HEAP32[$24>>2] = 0;
  $25 = $6;
  $26 = (($25) + 1)|0;
  $6 = $26;
 }
 $27 = ((($22)) + 56|0);
 HEAP32[$27>>2] = 0;
 $28 = $3;
 $29 = ((($28)) + 56|0);
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = 0;
 $31 = $3;
 $32 = ((($31)) + 56|0);
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = 0;
 $34 = $3;
 $35 = ((($34)) + 56|0);
 $36 = ((($35)) + 18|0);
 HEAP8[$36>>0] = 0;
 $37 = $3;
 $38 = ((($37)) + 56|0);
 $39 = ((($38)) + 12|0);
 HEAP32[$39>>2] = 0;
 $40 = $3;
 $41 = ((($40)) + 56|0);
 $42 = ((($41)) + 16|0);
 HEAP16[$42>>1] = 0;
 $43 = $3;
 $44 = ((($43)) + 56|0);
 $45 = ((($44)) + 19|0);
 ;HEAP8[$45>>0]=0|0;HEAP8[$45+1>>0]=0|0;HEAP8[$45+2>>0]=0|0;HEAP8[$45+3>>0]=0|0;
 $46 = $3;
 $47 = ((($46)) + 56|0);
 $48 = ((($47)) + 24|0);
 HEAP32[$48>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve__try_prefixes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $5 = $6;
 while(1) {
  $7 = $5;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 6;
   break;
  }
  $10 = $3;
  $11 = $5;
  $12 = HEAP32[$11>>2]|0;
  $13 = $5;
  $14 = HEAP32[$13>>2]|0;
  $15 = (_strlen($14)|0);
  $16 = (_strncasecmp($10,$12,$15)|0);
  $17 = ($16|0)!=(0);
  if (!($17)) {
   label = 4;
   break;
  }
  $23 = $5;
  $24 = ((($23)) + 4|0);
  $5 = $24;
 }
 if ((label|0) == 4) {
  $18 = $3;
  $19 = $5;
  $20 = HEAP32[$19>>2]|0;
  $21 = (_strlen($20)|0);
  $22 = (($18) + ($21)|0);
  $2 = $22;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _fcs_str2rank($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 L1: while(1) {
  $3 = $2;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = (_toupper($5)|0);
  switch ($6|0) {
  case 13: case 10: case 9: case 32: case 0:  {
   label = 3;
   break L1;
   break;
  }
  case 65:  {
   label = 4;
   break L1;
   break;
  }
  case 74:  {
   label = 5;
   break L1;
   break;
  }
  case 81:  {
   label = 6;
   break L1;
   break;
  }
  case 75:  {
   label = 7;
   break L1;
   break;
  }
  case 49:  {
   label = 8;
   break L1;
   break;
  }
  case 48: case 84:  {
   label = 9;
   break L1;
   break;
  }
  case 50:  {
   label = 10;
   break L1;
   break;
  }
  case 51:  {
   label = 11;
   break L1;
   break;
  }
  case 52:  {
   label = 12;
   break L1;
   break;
  }
  case 53:  {
   label = 13;
   break L1;
   break;
  }
  case 54:  {
   label = 14;
   break L1;
   break;
  }
  case 55:  {
   label = 15;
   break L1;
   break;
  }
  case 56:  {
   label = 16;
   break L1;
   break;
  }
  case 57:  {
   label = 17;
   break L1;
   break;
  }
  default: {
  }
  }
  $13 = $2;
  $14 = ((($13)) + 1|0);
  $2 = $14;
 }
 switch (label|0) {
  case 3: {
   $1 = 0;
   break;
  }
  case 4: {
   $1 = 1;
   break;
  }
  case 5: {
   $1 = 11;
   break;
  }
  case 6: {
   $1 = 12;
   break;
  }
  case 7: {
   $1 = 13;
   break;
  }
  case 8: {
   $7 = $2;
   $8 = ((($7)) + 1|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)==(48);
   $12 = $11 ? 10 : 1;
   $1 = $12;
   break;
  }
  case 9: {
   $1 = 10;
   break;
  }
  case 10: {
   $1 = 2;
   break;
  }
  case 11: {
   $1 = 3;
   break;
  }
  case 12: {
   $1 = 4;
   break;
  }
  case 13: {
   $1 = 5;
   break;
  }
  case 14: {
   $1 = 6;
   break;
  }
  case 15: {
   $1 = 7;
   break;
  }
  case 16: {
   $1 = 8;
   break;
  }
  case 17: {
   $1 = 9;
   break;
  }
 }
 $15 = $1;
 STACKTOP = sp;return ($15|0);
}
function _fcs_str2suit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 L1: while(1) {
  $3 = $2;
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 << 24 >> 24;
  $6 = (_toupper($5)|0);
  switch ($6|0) {
  case 0: case 32: case 72:  {
   label = 3;
   break L1;
   break;
  }
  case 67:  {
   label = 4;
   break L1;
   break;
  }
  case 68:  {
   label = 5;
   break L1;
   break;
  }
  case 83:  {
   label = 6;
   break L1;
   break;
  }
  default: {
  }
  }
  $7 = $2;
  $8 = ((($7)) + 1|0);
  $2 = $8;
 }
 if ((label|0) == 3) {
  $1 = 0;
 }
 else if ((label|0) == 4) {
  $1 = 1;
 }
 else if ((label|0) == 5) {
  $1 = 2;
 }
 else if ((label|0) == 6) {
  $1 = 3;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _fc_solve_card_parse_str($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_fcs_str2rank($2)|0);
 $4 = $1;
 $5 = (_fcs_str2suit($4)|0);
 $6 = (_fcs_make_card($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _fc_solve_compact_allocator_init($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 16|0);
 HEAP32[$6>>2] = $4;
 $7 = $2;
 _fc_solve_compact_allocator_init_helper_269($7);
 STACKTOP = sp;return;
}
function _fc_solve_compact_allocator_init_helper_269($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 _fc_solve_compact_allocator_extend($3);
 STACKTOP = sp;return;
}
function _fc_solve_compact_allocator_extend($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_meta_request_new_buffer($5)|0);
 $2 = $6;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = $1;
 HEAP32[$11>>2] = $10;
 $12 = $2;
 $13 = ((($12)) + 4|0);
 $14 = $1;
 $15 = ((($14)) + 12|0);
 HEAP32[$15>>2] = $13;
 $16 = $1;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $13;
 $18 = $2;
 $19 = ((($18)) + 65152|0);
 $20 = $1;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $19;
 STACKTOP = sp;return;
}
function _meta_request_new_buffer($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  HEAP32[$10>>2] = $9;
  $11 = $3;
  $1 = $11;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $12 = (_malloc(65152)|0);
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _fc_solve_meta_compact_allocator_finish($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9;
 } else {
  $10 = 0;
 }
 $3 = $10;
 while(1) {
  $11 = $3;
  $12 = ($11|0)!=(0|0);
  $13 = $2;
  _free($13);
  if (!($12)) {
   break;
  }
  $14 = $3;
  $2 = $14;
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  $3 = $16;
 }
 $17 = $1;
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_compact_allocator_finish($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $6 = $1;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $2 = $12;
 $13 = $2;
 $14 = HEAP32[$13>>2]|0;
 $3 = $14;
 while(1) {
  $15 = $3;
  $16 = ($15|0)!=(0|0);
  $17 = $5;
  $18 = $2;
  HEAP32[$18>>2] = $17;
  $19 = $2;
  if (!($16)) {
   break;
  }
  $5 = $19;
  $20 = $3;
  $2 = $20;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $3 = $22;
 }
 $23 = $4;
 HEAP32[$23>>2] = $19;
 STACKTOP = sp;return;
}
function _fc_solve_apply_move($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $3;
 $8 = $4;
 $15 = ((($2)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $10 = $17;
 $18 = ((($2)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $11 = $20;
 $21 = HEAP8[$2>>0]|0;
 $22 = $21&255;
 switch ($22|0) {
 case 0:  {
  $23 = $5;
  $24 = $11;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $5;
  $28 = $10;
  $29 = (($27) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($2)) + 3|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  _fcs_col_transfer_cards_280($26,$30,$33);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $34 = $5;
  $35 = $11;
  $36 = $5;
  $37 = ((($36)) + 40|0);
  $38 = $10;
  $39 = (($37) + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  _fcs_state_push_281($34,$35,$40);
  $41 = $5;
  $42 = ((($41)) + 40|0);
  $43 = $10;
  $44 = (($42) + ($43)|0);
  HEAP8[$44>>0] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $45 = $5;
  $46 = ((($45)) + 40|0);
  $47 = $10;
  $48 = (($46) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $12 = $49;
  $50 = $12;
  $51 = $5;
  $52 = ((($51)) + 40|0);
  $53 = $11;
  $54 = (($52) + ($53)|0);
  HEAP8[$54>>0] = $50;
  $55 = $5;
  $56 = ((($55)) + 40|0);
  $57 = $10;
  $58 = (($56) + ($57)|0);
  HEAP8[$58>>0] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $59 = $5;
  $60 = $10;
  $61 = (($59) + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $9 = $62;
  $63 = $9;
  $64 = $9;
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = (($66) - 1)|0;
  $68 = (($67) + 1)|0;
  $69 = (($63) + ($68)|0);
  $70 = HEAP8[$69>>0]|0;
  $13 = $70;
  $71 = $9;
  $72 = $9;
  $73 = HEAP8[$72>>0]|0;
  $74 = (($73) + -1)<<24>>24;
  HEAP8[$72>>0] = $74;
  $75 = $74&255;
  $76 = (($75) + 1)|0;
  $77 = (($71) + ($76)|0);
  HEAP8[$77>>0] = 0;
  $78 = $13;
  $79 = $5;
  $80 = ((($79)) + 40|0);
  $81 = $11;
  $82 = (($80) + ($81)|0);
  HEAP8[$82>>0] = $78;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $83 = $5;
  $84 = $10;
  $85 = (($83) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $9 = $86;
  $87 = $9;
  $88 = $9;
  $89 = HEAP8[$88>>0]|0;
  $90 = (($89) + -1)<<24>>24;
  HEAP8[$88>>0] = $90;
  $91 = $90&255;
  $92 = (($91) + 1)|0;
  $93 = (($87) + ($92)|0);
  HEAP8[$93>>0] = 0;
  $94 = $5;
  $95 = ((($94)) + 48|0);
  $96 = $11;
  $97 = (($95) + ($96)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = (($98) + 1)<<24>>24;
  HEAP8[$97>>0] = $99;
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $100 = $5;
  $101 = ((($100)) + 40|0);
  $102 = $10;
  $103 = (($101) + ($102)|0);
  HEAP8[$103>>0] = 0;
  $104 = $5;
  $105 = ((($104)) + 48|0);
  $106 = $11;
  $107 = (($105) + ($106)|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = (($108) + 1)<<24>>24;
  HEAP8[$107>>0] = $109;
  STACKTOP = sp;return;
  break;
 }
 case 11:  {
  $110 = $5;
  $111 = $10;
  $112 = (($110) + ($111<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $9 = $113;
  $14 = 0;
  while(1) {
   $114 = $14;
   $115 = ($114|0)<(13);
   if (!($115)) {
    break;
   }
   $116 = $9;
   $117 = $9;
   $118 = HEAP8[$117>>0]|0;
   $119 = (($118) + -1)<<24>>24;
   HEAP8[$117>>0] = $119;
   $120 = $119&255;
   $121 = (($120) + 1)|0;
   $122 = (($116) + ($121)|0);
   HEAP8[$122>>0] = 0;
   $123 = $5;
   $124 = ((($123)) + 48|0);
   $125 = $11;
   $126 = (($124) + ($125)|0);
   $127 = HEAP8[$126>>0]|0;
   $128 = (($127) + 1)<<24>>24;
   HEAP8[$126>>0] = $128;
   $129 = $14;
   $130 = (($129) + 1)|0;
   $14 = $130;
  }
  STACKTOP = sp;return;
  break;
 }
 case 12:  {
  $131 = $6;
  $132 = ($131|0)!=(0|0);
  $133 = $5;
  if ($132) {
   $134 = $6;
   $135 = $7;
   $136 = $8;
   _fc_solve_canonize_state_with_locs($133,$134,$135,$136);
   STACKTOP = sp;return;
  } else {
   $137 = $7;
   $138 = $8;
   _fc_solve_canonize_state($133,$137,$138);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _fcs_col_transfer_cards_280($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = $5;
 $10 = $4;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($12) - ($9))|0;
 $14 = $13&255;
 HEAP8[$10>>0] = $14;
 $15 = $14&255;
 $16 = (($15) + 1)|0;
 $17 = (($8) + ($16)|0);
 $6 = $17;
 $18 = $5;
 $19 = $18;
 $7 = $19;
 $20 = $3;
 $21 = $3;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = (($23) + 1)|0;
 $25 = (($20) + ($24)|0);
 $26 = $6;
 $27 = $7;
 _memcpy(($25|0),($26|0),($27|0))|0;
 $28 = $5;
 $29 = $3;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (($31) + ($28))|0;
 $33 = $32&255;
 HEAP8[$29>>0] = $33;
 $34 = $6;
 $35 = $7;
 _memset(($34|0),0,($35|0))|0;
 STACKTOP = sp;return;
}
function _fcs_state_push_281($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $5;
 $12 = $6;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = (($14) + 1)<<24>>24;
 HEAP8[$13>>0] = $15;
 $16 = $14&255;
 $17 = (($16) + 1)|0;
 $18 = (($12) + ($17)|0);
 HEAP8[$18>>0] = $11;
 STACKTOP = sp;return;
}
function _fc_solve_derived_states_list_add_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 $13 = $12&1;
 $14 = (($8) + ($13))|0;
 $15 = $14 & 15;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = $3;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0|0);
  $26 = $25&1;
  $27 = (($21) + ($26))|0;
  $28 = (($27) + 16)|0;
  $29 = $28<<3;
  $30 = (_realloc($19,$29)|0);
  $31 = $3;
  $32 = ((($31)) + 4|0);
  HEAP32[$32>>2] = $30;
 }
 $33 = $3;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $3;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[$36>>2] = $38;
 $39 = (($35) + ($37<<3)|0);
 $40 = $4;
 HEAP32[$6>>2] = $40;
 $41 = ((($6)) + 4|0);
 $42 = $5;
 HEAP32[$41>>2] = $42;
 ;HEAP32[$39>>2]=HEAP32[$6>>2]|0;HEAP32[$39+4>>2]=HEAP32[$6+4>>2]|0;
 STACKTOP = sp;return;
}
function _fc_solve_apply_moves_order($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $14 = $4;
 _moves_order__free_286($14);
 $15 = (_malloc(3584)|0);
 $16 = $4;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $4;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + (($22*224)|0)|0);
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = 0;
 $25 = (_malloc(64)|0);
 $26 = $4;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $4;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + (($30*224)|0)|0);
 HEAP32[$31>>2] = $25;
 $32 = $4;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $4;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + (($36*224)|0)|0);
 $38 = ((($37)) + 8|0);
 HEAP32[$38>>2] = 0;
 $39 = $4;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($40) + 1)|0;
 HEAP32[$39>>2] = $41;
 $42 = $5;
 $43 = (_strlen($42)|0);
 $8 = $43;
 $9 = 0;
 $10 = 0;
 $7 = 0;
 L1: while(1) {
  $44 = $7;
  $45 = $8;
  $46 = ($44>>>0)<($45>>>0);
  if (!($46)) {
   label = 42;
   break;
  }
  $47 = $5;
  $48 = $7;
  $49 = (($47) + ($48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = ($51|0)==(40);
  do {
   if ($52) {
    label = 5;
   } else {
    $53 = $5;
    $54 = $7;
    $55 = (($53) + ($54)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56 << 24 >> 24;
    $58 = ($57|0)==(91);
    if ($58) {
     label = 5;
    } else {
     $111 = $5;
     $112 = $7;
     $113 = (($111) + ($112)|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = $114 << 24 >> 24;
     $116 = ($115|0)==(41);
     if (!($116)) {
      $117 = $5;
      $118 = $7;
      $119 = (($117) + ($118)|0);
      $120 = HEAP8[$119>>0]|0;
      $121 = $120 << 24 >> 24;
      $122 = ($121|0)==(93);
      if (!($122)) {
       $258 = $4;
       $259 = ((($258)) + 4|0);
       $260 = HEAP32[$259>>2]|0;
       $261 = $4;
       $262 = HEAP32[$261>>2]|0;
       $263 = (($262) - 1)|0;
       $264 = (($260) + (($263*224)|0)|0);
       $265 = ((($264)) + 4|0);
       $266 = HEAP32[$265>>2]|0;
       $267 = $266 & 15;
       $268 = ($267|0)!=(0);
       if (!($268)) {
        $269 = $4;
        $270 = ((($269)) + 4|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = $4;
        $273 = HEAP32[$272>>2]|0;
        $274 = (($273) - 1)|0;
        $275 = (($271) + (($274*224)|0)|0);
        $276 = HEAP32[$275>>2]|0;
        $277 = $4;
        $278 = ((($277)) + 4|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = $4;
        $281 = HEAP32[$280>>2]|0;
        $282 = (($281) - 1)|0;
        $283 = (($279) + (($282*224)|0)|0);
        $284 = ((($283)) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = (($285) + 16)|0;
        $287 = $286<<2;
        $288 = (_realloc($276,$287)|0);
        $289 = $4;
        $290 = ((($289)) + 4|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $4;
        $293 = HEAP32[$292>>2]|0;
        $294 = (($293) - 1)|0;
        $295 = (($291) + (($294*224)|0)|0);
        HEAP32[$295>>2] = $288;
       }
       $296 = $5;
       $297 = $7;
       $298 = (($296) + ($297)|0);
       $299 = HEAP8[$298>>0]|0;
       $300 = (_fc_solve_string_to_move_num($299)|0);
       $301 = $4;
       $302 = ((($301)) + 4|0);
       $303 = HEAP32[$302>>2]|0;
       $304 = $4;
       $305 = HEAP32[$304>>2]|0;
       $306 = (($305) - 1)|0;
       $307 = (($303) + (($306*224)|0)|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $4;
       $310 = ((($309)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = $4;
       $313 = HEAP32[$312>>2]|0;
       $314 = (($313) - 1)|0;
       $315 = (($311) + (($314*224)|0)|0);
       $316 = ((($315)) + 4|0);
       $317 = HEAP32[$316>>2]|0;
       $318 = (($317) + 1)|0;
       HEAP32[$316>>2] = $318;
       $319 = (($308) + ($317<<2)|0);
       HEAP32[$319>>2] = $300;
       $10 = 0;
       break;
      }
     }
     $123 = $10;
     $124 = $123&1;
     if ($124) {
      label = 15;
      break L1;
     }
     $126 = $9;
     $127 = $126&1;
     if (!($127)) {
      label = 17;
      break L1;
     }
     $129 = $5;
     $130 = $7;
     $131 = (($130) + 1)|0;
     $132 = (($129) + ($131)|0);
     $133 = HEAP8[$132>>0]|0;
     $134 = $133 << 24 >> 24;
     $135 = ($134|0)==(61);
     if ($135) {
      $136 = $7;
      $137 = (($136) + 2)|0;
      $7 = $137;
      $138 = $5;
      $139 = $7;
      $140 = (($138) + ($139)|0);
      $141 = (_strchr($140,40)|0);
      $11 = $141;
      $142 = $11;
      $143 = ($142|0)!=(0|0);
      if (!($143)) {
       label = 20;
       break L1;
      }
      $145 = $5;
      $146 = $7;
      $147 = (($145) + ($146)|0);
      $148 = $11;
      $149 = (_string_starts_with_292($147,13256,$148)|0);
      if ($149) {
       $150 = $4;
       $151 = ((($150)) + 4|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = $4;
       $154 = HEAP32[$153>>2]|0;
       $155 = (($154) - 1)|0;
       $156 = (($152) + (($155*224)|0)|0);
       $157 = ((($156)) + 8|0);
       HEAP32[$157>>2] = 1;
      } else {
       $158 = $5;
       $159 = $7;
       $160 = (($158) + ($159)|0);
       $161 = $11;
       $162 = (_string_starts_with_292($160,13261,$161)|0);
       if (!($162)) {
        label = 25;
        break L1;
       }
       $163 = $4;
       $164 = ((($163)) + 4|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = $4;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($167) - 1)|0;
       $169 = (($165) + (($168*224)|0)|0);
       $170 = ((($169)) + 8|0);
       HEAP32[$170>>2] = 2;
      }
      $172 = $11;
      $173 = ((($172)) + 1|0);
      $12 = $173;
      $174 = $12;
      $175 = (_strchr($174,41)|0);
      $13 = $175;
      $176 = $13;
      $177 = ($176|0)!=(0|0);
      if (!($177)) {
       label = 27;
       break L1;
      }
      $179 = $4;
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = $4;
      $183 = HEAP32[$182>>2]|0;
      $184 = (($183) - 1)|0;
      $185 = (($181) + (($184*224)|0)|0);
      $186 = ((($185)) + 8|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = ($187|0)==(2);
      if ($188) {
       $189 = $12;
       $190 = $13;
       $191 = $4;
       $192 = ((($191)) + 4|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = $4;
       $195 = HEAP32[$194>>2]|0;
       $196 = (($195) - 1)|0;
       $197 = (($193) + (($196*224)|0)|0);
       $198 = ((($197)) + 16|0);
       $199 = ((($198)) + 160|0);
       _fc_solve_set_weights_296($189,$190,$199);
      } else {
       $200 = $13;
       $201 = $12;
       $202 = ($200|0)!=($201|0);
       if ($202) {
        label = 31;
        break L1;
       }
      }
      $204 = $13;
      $205 = $5;
      $206 = $204;
      $207 = $205;
      $208 = (($206) - ($207))|0;
      $7 = $208;
     }
     $9 = 0;
     $10 = 0;
     $209 = $4;
     $210 = ((($209)) + 4|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $4;
     $213 = HEAP32[$212>>2]|0;
     $214 = (($213) - 1)|0;
     $215 = (($211) + (($214*224)|0)|0);
     $216 = ((($215)) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)!=(0);
     if ($218) {
      $219 = $4;
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 & 15;
      $222 = ($221|0)!=(0);
      if (!($222)) {
       $223 = $4;
       $224 = ((($223)) + 4|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = $4;
       $227 = HEAP32[$226>>2]|0;
       $228 = (($227) + 16)|0;
       $229 = ($228*224)|0;
       $230 = (_realloc($225,$229)|0);
       $231 = $4;
       $232 = ((($231)) + 4|0);
       HEAP32[$232>>2] = $230;
      }
      $233 = $4;
      $234 = ((($233)) + 4|0);
      $235 = HEAP32[$234>>2]|0;
      $236 = $4;
      $237 = HEAP32[$236>>2]|0;
      $238 = (($235) + (($237*224)|0)|0);
      $239 = ((($238)) + 4|0);
      HEAP32[$239>>2] = 0;
      $240 = (_malloc(64)|0);
      $241 = $4;
      $242 = ((($241)) + 4|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = $4;
      $245 = HEAP32[$244>>2]|0;
      $246 = (($243) + (($245*224)|0)|0);
      HEAP32[$246>>2] = $240;
      $247 = $4;
      $248 = HEAP32[$247>>2]|0;
      $249 = (($248) + 1)|0;
      HEAP32[$247>>2] = $249;
     }
     $250 = $4;
     $251 = ((($250)) + 4|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = $4;
     $254 = HEAP32[$253>>2]|0;
     $255 = (($254) - 1)|0;
     $256 = (($252) + (($255*224)|0)|0);
     $257 = ((($256)) + 8|0);
     HEAP32[$257>>2] = 0;
    }
   }
  } while(0);
  if ((label|0) == 5) {
   label = 0;
   $59 = $9;
   $60 = $59&1;
   if ($60) {
    label = 6;
    break;
   }
   $9 = 1;
   $10 = 1;
   $62 = $4;
   $63 = ((($62)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $4;
   $66 = HEAP32[$65>>2]|0;
   $67 = (($66) - 1)|0;
   $68 = (($64) + (($67*224)|0)|0);
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)!=(0);
   if ($71) {
    $72 = $4;
    $73 = HEAP32[$72>>2]|0;
    $74 = $73 & 15;
    $75 = ($74|0)!=(0);
    if (!($75)) {
     $76 = $4;
     $77 = ((($76)) + 4|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $4;
     $80 = HEAP32[$79>>2]|0;
     $81 = (($80) + 16)|0;
     $82 = ($81*224)|0;
     $83 = (_realloc($78,$82)|0);
     $84 = $4;
     $85 = ((($84)) + 4|0);
     HEAP32[$85>>2] = $83;
    }
    $86 = $4;
    $87 = ((($86)) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $4;
    $90 = HEAP32[$89>>2]|0;
    $91 = (($88) + (($90*224)|0)|0);
    $92 = ((($91)) + 4|0);
    HEAP32[$92>>2] = 0;
    $93 = (_malloc(64)|0);
    $94 = $4;
    $95 = ((($94)) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $4;
    $98 = HEAP32[$97>>2]|0;
    $99 = (($96) + (($98*224)|0)|0);
    HEAP32[$99>>2] = $93;
    $100 = $4;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + 1)|0;
    HEAP32[$100>>2] = $102;
   }
   $103 = $4;
   $104 = ((($103)) + 4|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $4;
   $107 = HEAP32[$106>>2]|0;
   $108 = (($107) - 1)|0;
   $109 = (($105) + (($108*224)|0)|0);
   $110 = ((($109)) + 8|0);
   HEAP32[$110>>2] = 1;
  }
  $320 = $7;
  $321 = (($320) + 1)|0;
  $7 = $321;
 }
 if ((label|0) == 6) {
  $61 = $6;
  (_strcpy($61,13094)|0);
  $3 = 1;
  $353 = $3;
  STACKTOP = sp;return ($353|0);
 }
 else if ((label|0) == 15) {
  $125 = $6;
  (_strcpy($125,13125)|0);
  $3 = 2;
  $353 = $3;
  STACKTOP = sp;return ($353|0);
 }
 else if ((label|0) == 17) {
  $128 = $6;
  (_strcpy($128,13149)|0);
  $3 = 3;
  $353 = $3;
  STACKTOP = sp;return ($353|0);
 }
 else if ((label|0) == 20) {
  $144 = $6;
  (_strcpy($144,13198)|0);
  $3 = 5;
  $353 = $3;
  STACKTOP = sp;return ($353|0);
 }
 else if ((label|0) == 25) {
  $171 = $6;
  (_strcpy($171,13265)|0);
  $3 = 6;
  $353 = $3;
  STACKTOP = sp;return ($353|0);
 }
 else if ((label|0) == 27) {
  $178 = $6;
  (_strcpy($178,13293)|0);
  $3 = 7;
  $353 = $3;
  STACKTOP = sp;return ($353|0);
 }
 else if ((label|0) == 31) {
  $203 = $6;
  (_strcpy($203,13339)|0);
  $3 = 8;
  $353 = $3;
  STACKTOP = sp;return ($353|0);
 }
 else if ((label|0) == 42) {
  $322 = $7;
  $323 = $8;
  $324 = ($322|0)!=($323|0);
  if ($324) {
   $325 = $6;
   (_strcpy($325,13372)|0);
   $3 = 4;
   $353 = $3;
   STACKTOP = sp;return ($353|0);
  }
  $326 = $4;
  $327 = ((($326)) + 4|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = $4;
  $330 = HEAP32[$329>>2]|0;
  $331 = (($330) - 1)|0;
  $332 = (($328) + (($331*224)|0)|0);
  $333 = ((($332)) + 4|0);
  $334 = HEAP32[$333>>2]|0;
  $335 = ($334|0)!=(0);
  if (!($335)) {
   $336 = $4;
   $337 = HEAP32[$336>>2]|0;
   $338 = (($337) + -1)|0;
   HEAP32[$336>>2] = $338;
   $339 = $4;
   $340 = ((($339)) + 4|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = $4;
   $343 = HEAP32[$342>>2]|0;
   $344 = (($341) + (($343*224)|0)|0);
   $345 = HEAP32[$344>>2]|0;
   _free($345);
   $346 = $4;
   $347 = ((($346)) + 4|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = $4;
   $350 = HEAP32[$349>>2]|0;
   $351 = (($348) + (($350*224)|0)|0);
   HEAP32[$351>>2] = 0;
  }
  $352 = $6;
  HEAP8[$352>>0] = 0;
  $3 = 0;
  $353 = $3;
  STACKTOP = sp;return ($353|0);
 }
 return (0)|0;
}
function _moves_order__free_286($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $4 = 0;
 while(1) {
  $10 = $4;
  $11 = $3;
  $12 = ($10>>>0)<($11>>>0);
  $13 = $2;
  if (!($12)) {
   break;
  }
  $14 = $4;
  $15 = (($13) + (($14*224)|0)|0);
  $16 = HEAP32[$15>>2]|0;
  _free($16);
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 _free($13);
 $19 = $1;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = $1;
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return;
}
function _string_starts_with_292($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = $3;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $6 = $11;
 $12 = $6;
 $13 = $4;
 $14 = (_strlen($13)|0);
 $15 = ($12|0)==($14|0);
 if (!($15)) {
  $22 = 0;
  STACKTOP = sp;return ($22|0);
 }
 $16 = $3;
 $17 = $4;
 $18 = $6;
 $19 = (_strncmp($16,$17,$18)|0);
 $20 = ($19|0)!=(0);
 $21 = $20 ^ 1;
 $22 = $21;
 STACKTOP = sp;return ($22|0);
}
function _fc_solve_set_weights_296($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = ($9|0)<(6);
  if (!($10)) {
   label = 10;
   break;
  }
  while(1) {
   $11 = $3;
   $12 = HEAP8[$11>>0]|0;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)==(44);
   $15 = $3;
   if (!($14)) {
    break;
   }
   $16 = ((($15)) + 1|0);
   $3 = $16;
  }
  $17 = $4;
  $18 = ($15>>>0)>=($17>>>0);
  if ($18) {
   break;
  }
  $25 = $3;
  $26 = (+_strtod($25,$7));
  $8 = $26;
  $27 = $8;
  $28 = $27 > 0.0;
  $29 = $8;
  $30 = $28 ? $29 : 0.0;
  $31 = $5;
  $32 = $6;
  $33 = (($31) + ($32<<3)|0);
  HEAPF64[$33>>3] = $30;
  $34 = HEAP32[$7>>2]|0;
  $3 = $34;
  $35 = $6;
  $36 = (($35) + 1)|0;
  $6 = $36;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 while(1) {
  $19 = $5;
  $20 = $6;
  $21 = (($20) + 1)|0;
  $6 = $21;
  $22 = (($19) + ($20<<3)|0);
  HEAPF64[$22>>3] = 0.0;
  $23 = $6;
  $24 = ($23|0)<(6);
  if (!($24)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _fc_solve_string_to_move_num($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (4304 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 STACKTOP = sp;return ($6|0);
}
function _fc_solve_apply_preset_by_ptr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $13 = $4;
 $14 = ((($13)) + 12|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = ($16|0)>(8);
 if ($17) {
  $2 = 2;
  $95 = $2;
  STACKTOP = sp;return ($95|0);
 }
 $18 = $4;
 $19 = ((($18)) + 12|0);
 $20 = ((($19)) + 1|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = ($22|0)>(10);
 if ($23) {
  $2 = 3;
  $95 = $2;
  STACKTOP = sp;return ($95|0);
 }
 $24 = $4;
 $25 = ((($24)) + 12|0);
 $26 = ((($25)) + 2|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ($28|0)>(2);
 if ($29) {
  $2 = 4;
  $95 = $2;
  STACKTOP = sp;return ($95|0);
 }
 $30 = $3;
 $31 = $4;
 $32 = ((($31)) + 12|0);
 ;HEAP32[$30>>2]=HEAP32[$32>>2]|0;
 $33 = $4;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(14);
 $37 = $3;
 $38 = ((($37)) + 304|0);
 $39 = $36&1;
 HEAP8[$38>>0] = $39;
 $40 = $3;
 $41 = ((($40)) + 152|0);
 $42 = HEAP32[$41>>2]|0;
 $6 = $42;
 $43 = $6;
 $44 = $3;
 $45 = ((($44)) + 148|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($43) + (($46*1356)|0)|0);
 $7 = $47;
 while(1) {
  $48 = $6;
  $49 = $7;
  $50 = ($48>>>0)<($49>>>0);
  if (!($50)) {
   break;
  }
  $51 = $6;
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $8 = $53;
  $54 = $8;
  $9 = $54;
  $55 = $8;
  $56 = $6;
  $57 = ((($56)) + 1344|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($55) + (($58*552)|0)|0);
  $10 = $59;
  while(1) {
   $60 = $9;
   $61 = $10;
   $62 = ($60>>>0)<($61>>>0);
   if (!($62)) {
    break;
   }
   $63 = $9;
   $64 = ((($63)) + 8|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $11 = $66;
   $12 = 0;
   while(1) {
    $67 = $12;
    $68 = $9;
    $69 = ((($68)) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($67>>>0)<($70>>>0);
    if (!($71)) {
     break;
    }
    $72 = $11;
    $73 = $12;
    $74 = (($72) + (($73*12)|0)|0);
    $75 = ((($74)) + 4|0);
    $76 = $4;
    $77 = $76;
    $78 = $77;
    $79 = HEAP32[$78>>2]|0;
    $80 = (($77) + 4)|0;
    $81 = $80;
    $82 = HEAP32[$81>>2]|0;
    $83 = $4;
    $84 = ((($83)) + 16|0);
    _apply_moves($75,$79,$82,$84);
    $85 = $12;
    $86 = (($85) + 1)|0;
    $12 = $86;
   }
   $87 = $9;
   $88 = ((($87)) + 552|0);
   $9 = $88;
  }
  $89 = $6;
  $90 = ((($89)) + 1356|0);
  $6 = $90;
 }
 $91 = $3;
 $92 = ((($91)) + 164|0);
 $93 = $4;
 $94 = ((($93)) + 16|0);
 (_fc_solve_apply_moves_order($92,$94,$5)|0);
 $2 = 0;
 $95 = $2;
 STACKTOP = sp;return ($95|0);
}
function _apply_moves($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $5 = sp + 120|0;
 $7 = sp;
 $4 = $0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = $1;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $2;
 $6 = $3;
 $8 = 0;
 L1: while(1) {
  $16 = $8;
  $17 = $4;
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16>>>0)<($18>>>0);
  if (!($19)) {
   label = 9;
   break;
  }
  $20 = $4;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $8;
  $24 = (($22) + (($23*224)|0)|0);
  $25 = HEAP32[$24>>2]|0;
  $9 = $25;
  $26 = $4;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $8;
  $30 = (($28) + (($29*224)|0)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $10 = $32;
  $11 = 0;
  while(1) {
   $33 = $11;
   $34 = $10;
   $35 = ($33>>>0)<($34>>>0);
   if (!($35)) {
    break;
   }
   $36 = $5;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (($36) + 4)|0;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = $9;
   $43 = $11;
   $44 = (($42) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = 1 << $45;
   $47 = ($46|0)<(0);
   $48 = $47 << 31 >> 31;
   $49 = $38 & $46;
   $50 = $41 & $48;
   $51 = ($49|0)!=(0);
   $52 = ($50|0)!=(0);
   $53 = $51 | $52;
   if (!($53)) {
    break L1;
   }
   $56 = $11;
   $57 = (($56) + 1)|0;
   $11 = $57;
  }
  $58 = $8;
  $59 = (($58) + 1)|0;
  $8 = $59;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $54 = $4;
 $55 = $6;
 (_fc_solve_apply_moves_order($54,$55,$7)|0);
 STACKTOP = sp;return;
}
function _fc_solve_get_preset_by_name($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = (_fcs_get_preset_id_by_name($4)|0);
 $6 = $3;
 $7 = (_fcs_get_preset_by_id($5,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _fcs_get_preset_id_by_name($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = ($4|0)<(23);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $2;
  $7 = $3;
  $8 = (3168 + (($7*36)|0)|0);
  $9 = (_strcmp($6,$8)|0);
  $10 = ($9|0)!=(0);
  $11 = $3;
  if (!($10)) {
   label = 4;
   break;
  }
  $15 = (($11) + 1)|0;
  $3 = $15;
 }
 if ((label|0) == 4) {
  $12 = (3168 + (($11*36)|0)|0);
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $1 = $14;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $1 = -1;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _fcs_get_preset_by_id($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = ($6>>>0)<(16);
  if (!($7)) {
   label = 6;
   break;
  }
  $8 = $5;
  $9 = (1632 + (($8*96)|0)|0);
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = ($11|0)==($12|0);
  $14 = $5;
  if ($13) {
   label = 4;
   break;
  }
  $17 = (($14) + 1)|0;
  $5 = $17;
 }
 if ((label|0) == 4) {
  $15 = (1632 + (($14*96)|0)|0);
  $16 = $4;
  HEAP32[$16>>2] = $15;
  $2 = 0;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $2 = 1;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _fc_solve_soft_thread_init_befs_or_bfs($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $1 = $0;
 $5 = $1;
 $6 = ((($5)) + 549|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&1;
 $9 = $1;
 if ($8) {
  $10 = ((($9)) + 24|0);
  $11 = ((($10)) + 32|0);
  $12 = ((($11)) + 216|0);
  $13 = ((($12)) + 16|0);
  _fc_solve_pq_init_305($13);
  $14 = $1;
  $15 = $1;
  $16 = ((($15)) + 24|0);
  $17 = ((($16)) + 32|0);
  $18 = ((($17)) + 216|0);
  $19 = ((($18)) + 16|0);
  $20 = ((($19)) + 16|0);
  _fc_solve_initialize_befs_rater_306($14,$20);
 } else {
  _fc_solve_initialize_bfs_queue($9);
 }
 $21 = $1;
 $22 = ((($21)) + 24|0);
 $23 = ((($22)) + 32|0);
 $24 = ((($23)) + 208|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $70 = $1;
  $71 = HEAP32[$70>>2]|0;
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($72)) + 196|0);
  $74 = $1;
  $75 = ((($74)) + 24|0);
  $76 = ((($75)) + 32|0);
  $77 = ((($76)) + 456|0);
  HEAP32[$77>>2] = $73;
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = 0;
 HEAP32[$3>>2] = 0;
 $4 = 0;
 while(1) {
  $27 = $4;
  $28 = $1;
  $29 = ((($28)) + 8|0);
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($27>>>0)<($33>>>0);
  if (!($34)) {
   break;
  }
  $35 = $1;
  $36 = ((($35)) + 8|0);
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38)) + 4|0);
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $4;
  $43 = (($41) + (($42*224)|0)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $1;
  $46 = ((($45)) + 8|0);
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($48)) + 4|0);
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $4;
  $53 = (($51) + (($52*224)|0)|0);
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  _add_to_move_funcs_list_307($3,$2,$44,$55);
  $56 = $4;
  $57 = (($56) + 1)|0;
  $4 = $57;
 }
 $58 = HEAP32[$3>>2]|0;
 $59 = $1;
 $60 = ((($59)) + 24|0);
 $61 = ((($60)) + 32|0);
 $62 = ((($61)) + 208|0);
 HEAP32[$62>>2] = $58;
 $63 = HEAP32[$3>>2]|0;
 $64 = HEAP32[$2>>2]|0;
 $65 = (($63) + ($64<<2)|0);
 $66 = $1;
 $67 = ((($66)) + 24|0);
 $68 = ((($67)) + 32|0);
 $69 = ((($68)) + 212|0);
 HEAP32[$69>>2] = $65;
 $70 = $1;
 $71 = HEAP32[$70>>2]|0;
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($72)) + 196|0);
 $74 = $1;
 $75 = ((($74)) + 24|0);
 $76 = ((($75)) + 32|0);
 $77 = ((($76)) + 456|0);
 HEAP32[$77>>2] = $73;
 STACKTOP = sp;return;
}
function _fc_solve_pq_init_305($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = $1;
 HEAP32[$4>>2] = 1024;
 $5 = (_malloc(8200)|0);
 $6 = $1;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function _fc_solve_initialize_befs_rater_306($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = sp + 68|0;
 $2 = $0;
 $3 = $1;
 $16 = $3;
 $17 = ((($16)) + 160|0);
 $4 = $17;
 $5 = 0.0;
 $6 = 0;
 while(1) {
  $18 = $6;
  $19 = ($18|0)<(6);
  if (!($19)) {
   break;
  }
  $20 = $4;
  $21 = $6;
  $22 = (($20) + ($21<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $5;
  $25 = $24 + $23;
  $5 = $25;
  $26 = $6;
  $27 = (($26) + 1)|0;
  $6 = $27;
 }
 $28 = $5;
 $29 = $28 < 9.9999999999999995E-7;
 if ($29) {
  $5 = 1.0;
 }
 $30 = $5;
 $31 = 2147483647.0 / $30;
 $7 = $31;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $8 = $33;
 $34 = $8;
 $35 = HEAP32[$34>>2]|0;
 $9 = $35;
 $36 = $9;
 ;HEAP8[$10>>0]=HEAP8[$36>>0]|0;HEAP8[$10+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$36+3>>0]|0;
 $37 = $9;
 $38 = ((($37)) + 3|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $40 & 16;
 $42 = ($41|0)!=(0);
 $43 = $42&1;
 $11 = $43;
 $44 = $4;
 $45 = +HEAPF64[$44>>3];
 $46 = $7;
 $47 = $45 * $46;
 $48 = ((($10)) + 2|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = ($50*52)|0;
 $52 = (+($51|0));
 $53 = $47 / $52;
 $12 = $53;
 $13 = 0.0;
 $54 = $3;
 $55 = ((($54)) + 48|0);
 $14 = $55;
 $15 = 0;
 while(1) {
  $56 = $15;
  $57 = ($56|0)<=(13);
  if (!($57)) {
   break;
  }
  $58 = $13;
  $59 = $14;
  $60 = $15;
  $61 = (($59) + ($60<<3)|0);
  HEAPF64[$61>>3] = $58;
  $62 = $15;
  $63 = (($62) + 1)|0;
  $15 = $63;
  $64 = $12;
  $65 = $13;
  $66 = $65 + $64;
  $13 = $66;
 }
 $67 = $4;
 $68 = ((($67)) + 8|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $7;
 $71 = $69 * $70;
 $72 = $9;
 $73 = ((($72)) + 3|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = $74&255;
 $76 = (2)?($75 >> 2):($75);
 $77 = $76 & 3;
 $78 = ($77|0)==(0);
 $79 = $11;
 $80 = $79&1;
 $81 = HEAP8[$10>>0]|0;
 $82 = $81&255;
 do {
  if ($78) {
   if ($80) {
    $83 = $9;
    $84 = ((($83)) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = $85&255;
    $87 = (($82) + ($86))|0;
    $96 = $87;
    break;
   } else {
    $88 = (($82) + 1)|0;
    $89 = $9;
    $90 = ((($89)) + 1|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = $88 << $92;
    $96 = $93;
    break;
   }
  } else {
   $94 = $80 ? $82 : 1;
   $96 = $94;
  }
 } while(0);
 $95 = (+($96|0));
 $97 = $71 / $95;
 $98 = $3;
 $99 = ((($98)) + 8|0);
 HEAPF64[$99>>3] = $97;
 $100 = $4;
 $101 = ((($100)) + 16|0);
 $102 = +HEAPF64[$101>>3];
 $103 = $7;
 $104 = $102 * $103;
 $105 = $9;
 $106 = ((($105)) + 24|0);
 $107 = +HEAPF64[$106>>3];
 $108 = $104 / $107;
 $109 = $3;
 $110 = ((($109)) + 16|0);
 HEAPF64[$110>>3] = $108;
 $111 = $4;
 $112 = ((($111)) + 24|0);
 $113 = +HEAPF64[$112>>3];
 $114 = $7;
 $115 = $113 * $114;
 $116 = ((($10)) + 2|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117&255;
 $119 = ($118*52)|0;
 $120 = (5136 + ($119<<3)|0);
 $121 = +HEAPF64[$120>>3];
 $122 = $115 / $121;
 $123 = $3;
 $124 = ((($123)) + 24|0);
 HEAPF64[$124>>3] = $122;
 $125 = $4;
 $126 = ((($125)) + 32|0);
 $127 = +HEAPF64[$126>>3];
 $128 = $7;
 $129 = $127 * $128;
 $130 = $129 / 2.0E+4;
 $131 = $3;
 $132 = ((($131)) + 32|0);
 HEAPF64[$132>>3] = $130;
 $133 = $4;
 $134 = ((($133)) + 40|0);
 $135 = +HEAPF64[$134>>3];
 $136 = $7;
 $137 = $135 * $136;
 $138 = ((($10)) + 2|0);
 $139 = HEAP8[$138>>0]|0;
 $140 = $139&255;
 $141 = ($140*52)|0;
 $142 = (+($141|0));
 $143 = $137 / $142;
 $144 = $3;
 $145 = ((($144)) + 40|0);
 HEAPF64[$145>>3] = $143;
 $146 = $3;
 $147 = ((($146)) + 8|0);
 $148 = +HEAPF64[$147>>3];
 $149 = $148 != 0.0;
 if ($149) {
  $160 = 1;
  $158 = $3;
  $159 = $160&1;
  HEAP8[$158>>0] = $159;
  STACKTOP = sp;return;
 }
 $150 = $3;
 $151 = ((($150)) + 16|0);
 $152 = +HEAPF64[$151>>3];
 $153 = $152 != 0.0;
 if ($153) {
  $160 = 1;
  $158 = $3;
  $159 = $160&1;
  HEAP8[$158>>0] = $159;
  STACKTOP = sp;return;
 }
 $154 = $3;
 $155 = ((($154)) + 24|0);
 $156 = +HEAPF64[$155>>3];
 $157 = $156 != 0.0;
 $160 = $157;
 $158 = $3;
 $159 = $160&1;
 HEAP8[$158>>0] = $159;
 STACKTOP = sp;return;
}
function _fc_solve_initialize_bfs_queue($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $2;
 $6 = ((($5)) + 20|0);
 $7 = (_fcs_compact_alloc_ptr_308($6,8)|0);
 $8 = $1;
 $9 = ((($8)) + 24|0);
 $10 = ((($9)) + 32|0);
 $11 = ((($10)) + 216|0);
 HEAP32[$11>>2] = $7;
 $12 = $2;
 $13 = ((($12)) + 20|0);
 $14 = (_fcs_compact_alloc_ptr_308($13,8)|0);
 $15 = $1;
 $16 = ((($15)) + 24|0);
 $17 = ((($16)) + 32|0);
 $18 = ((($17)) + 216|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $14;
 $21 = $1;
 $22 = ((($21)) + 24|0);
 $23 = ((($22)) + 32|0);
 $24 = ((($23)) + 216|0);
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = $14;
 $26 = $1;
 $27 = ((($26)) + 24|0);
 $28 = ((($27)) + 32|0);
 $29 = ((($28)) + 216|0);
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 4|0);
 HEAP32[$32>>2] = 0;
 $33 = $1;
 $34 = ((($33)) + 24|0);
 $35 = ((($34)) + 32|0);
 $36 = ((($35)) + 216|0);
 $37 = ((($36)) + 8|0);
 HEAP32[$37>>2] = 0;
 STACKTOP = sp;return;
}
function _add_to_move_funcs_list_307($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $8 = $12;
 $13 = $4;
 $14 = HEAP32[$13>>2]|0;
 $15 = $8;
 $16 = $7;
 $17 = (($15) + ($16))|0;
 $18 = $17<<2;
 $19 = (_realloc($14,$18)|0);
 $9 = $19;
 $10 = 0;
 while(1) {
  $20 = $10;
  $21 = $7;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $6;
  $24 = $10;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (4192 + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $9;
  $30 = $8;
  $31 = (($30) + 1)|0;
  $8 = $31;
  $32 = (($29) + ($30<<2)|0);
  HEAP32[$32>>2] = $28;
  $33 = $10;
  $34 = (($33) + 1)|0;
  $10 = $34;
 }
 $35 = $9;
 $36 = $4;
 HEAP32[$36>>2] = $35;
 $37 = $8;
 $38 = $5;
 HEAP32[$38>>2] = $37;
 STACKTOP = sp;return;
}
function _fcs_compact_alloc_ptr_308($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $3;
 $7 = $6 & 3;
 $8 = (4 - ($7))|0;
 $9 = $8 & 3;
 $10 = (($5) + ($9))|0;
 $4 = $10;
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $13;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $4;
 $21 = ($19>>>0)<($20>>>0);
 $22 = $2;
 if ($21) {
  _fc_solve_compact_allocator_extend($22);
 } else {
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = ((($25)) + 12|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = $4;
 $28 = $2;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($27)|0);
 HEAP32[$29>>2] = $31;
 $32 = $2;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _fc_solve_befs_or_bfs_do_solve($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy1 = sp + 184|0;
 $$byval_copy = sp + 176|0;
 $14 = sp + 128|0;
 $18 = sp + 104|0;
 $19 = sp + 96|0;
 $25 = sp + 196|0;
 $31 = sp + 56|0;
 $39 = sp + 24|0;
 $41 = sp + 12|0;
 $43 = sp;
 $1 = $0;
 $44 = $1;
 $45 = HEAP32[$44>>2]|0;
 $2 = $45;
 $46 = $2;
 $47 = HEAP32[$46>>2]|0;
 $3 = $47;
 $48 = $3;
 $49 = ((($48)) + 304|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&1;
 $52 = $51&1;
 $4 = $52;
 $53 = $3;
 $54 = (_fcs_get_calc_real_depth_311($53)|0);
 $55 = $54&1;
 $5 = $55;
 $56 = $3;
 $57 = ((($56)) + 134|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&1;
 $60 = $59&1;
 $6 = $60;
 $61 = $1;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $7 = $63;
 $64 = $1;
 $65 = ((($64)) + 522|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&1;
 $68 = $67&1;
 $8 = $68;
 $69 = $3;
 $70 = ((($69)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $9 = $71;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;
 $72 = $1;
 $73 = ((($72)) + 24|0);
 $74 = ((($73)) + 32|0);
 $75 = ((($74)) + 208|0);
 $76 = HEAP32[$75>>2]|0;
 $15 = $76;
 $77 = $1;
 $78 = ((($77)) + 24|0);
 $79 = ((($78)) + 32|0);
 $80 = ((($79)) + 212|0);
 $81 = HEAP32[$80>>2]|0;
 $16 = $81;
 $82 = $1;
 $83 = ((($82)) + 24|0);
 $84 = ((($83)) + 32|0);
 $85 = ((($84)) + 456|0);
 $86 = HEAP32[$85>>2]|0;
 $17 = $86;
 $87 = $17;
 HEAP32[$19>>2] = $87;
 $88 = ((($19)) + 4|0);
 $89 = $17;
 $90 = ((($89)) + 56|0);
 HEAP32[$88>>2] = $90;
 ;HEAP32[$18>>2]=HEAP32[$19>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;
 $91 = $1;
 $92 = ((($91)) + 542|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&1;
 $95 = $94&1;
 $20 = $95;
 $96 = $3;
 $97 = ((($96)) + 8|0);
 $21 = $97;
 $98 = $2;
 $99 = ((($98)) + 8|0);
 $22 = $99;
 $100 = $1;
 $101 = ((($100)) + 549|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&1;
 $104 = $103&1;
 $23 = $104;
 $105 = $1;
 $106 = ((($105)) + 550|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&1;
 $109 = $108&1;
 $24 = $109;
 $110 = $23;
 $111 = $110&1;
 $112 = $1;
 $113 = ((($112)) + 24|0);
 $114 = ((($113)) + 32|0);
 $115 = ((($114)) + 216|0);
 if ($111) {
  $116 = ((($115)) + 16|0);
  $12 = $116;
 } else {
  $117 = HEAP32[$115>>2]|0;
  $10 = $117;
  $118 = $1;
  $119 = ((($118)) + 24|0);
  $120 = ((($119)) + 32|0);
  $121 = ((($120)) + 216|0);
  $122 = ((($121)) + 4|0);
  $123 = HEAP32[$122>>2]|0;
  $11 = $123;
 }
 $124 = $3;
 ;HEAP8[$25>>0]=HEAP8[$124>>0]|0;HEAP8[$25+1>>0]=HEAP8[$124+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$124+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$124+3>>0]|0;
 $125 = $3;
 $126 = $2;
 $127 = (_calc_ht_max_num_states_312($125,$126)|0);
 $26 = $127;
 $128 = $3;
 $129 = ((($128)) + 184|0);
 $130 = HEAP32[$129>>2]|0;
 $27 = $130;
 $131 = $3;
 $132 = ((($131)) + 188|0);
 $133 = HEAP32[$132>>2]|0;
 $28 = $133;
 $134 = $1;
 $135 = ((($134)) + 24|0);
 $136 = ((($135)) + 32|0);
 $29 = $136;
 while(1) {
  $137 = $17;
  $138 = ($137|0)!=(0|0);
  if (!($138)) {
   label = 54;
   break;
  }
  $139 = $20;
  $140 = $139&1;
  $141 = $17;
  $142 = (_fcs__should_state_be_pruned_313($140,$141)|0);
  if ($142) {
   $143 = $1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$18+4>>2]|0;
   $144 = (_fc_solve_sfs_raymond_prune($143,$$byval_copy)|0);
   $30 = $144;
   $145 = $30;
   $146 = ($145|0)!=(0|0);
   if ($146) {
    $147 = $30;
    $17 = $147;
    $148 = ($147|0)!=(0|0);
    if ($148) {
     $149 = $17;
     HEAP32[$31>>2] = $149;
     $150 = ((($31)) + 4|0);
     $151 = $17;
     $152 = ((($151)) + 56|0);
     HEAP32[$150>>2] = $152;
     ;HEAP32[$18>>2]=HEAP32[$31>>2]|0;HEAP32[$18+4>>2]=HEAP32[$31+4>>2]|0;
    }
   }
  }
  $153 = $17;
  $154 = ((($153)) + 56|0);
  $155 = ((($154)) + 18|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = $156&255;
  $32 = $157;
  $158 = $24;
  $159 = $158&1;
  $160 = $32;
  if ($159) {
   $161 = $160 & 1;
   $162 = ($161|0)!=(0);
   if ($162) {
    $163 = $32;
    $164 = $163 & 2;
    $165 = ($164|0)!=(0);
    if (!($165)) {
     label = 15;
    }
   }
  } else {
   $166 = $160 & 4;
   $167 = ($166|0)!=(0);
   if (!($167)) {
    $168 = $17;
    $169 = ((($168)) + 56|0);
    $170 = ((($169)) + 19|0);
    $171 = $7;
    $172 = (3)?($171 >>> 3):($171);
    $173 = (($170) + ($172)|0);
    $174 = HEAP8[$173>>0]|0;
    $175 = $174&255;
    $176 = $7;
    $177 = $176 & 7;
    $178 = 1 << $177;
    $179 = $175 & $178;
    $180 = ($179|0)!=(0);
    if (!($180)) {
     label = 15;
    }
   }
  }
  if ((label|0) == 15) {
   label = 0;
   $181 = $22;
   $182 = HEAP32[$181>>2]|0;
   $183 = $26;
   $184 = ($182|0)==($183|0);
   if ($184) {
    label = 17;
    break;
   }
   $185 = $3;
   $186 = ((($185)) + 144|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = $9;
   $189 = ($187|0)>=($188|0);
   if ($189) {
    label = 17;
    break;
   }
   $195 = $27;
   $196 = ($195|0)!=(0|0);
   if ($196) {
    $197 = $27;
    $198 = $28;
    $199 = $21;
    $200 = HEAP32[$199>>2]|0;
    $201 = $17;
    $202 = (_calc_depth_314($201)|0);
    $203 = $3;
    $204 = $17;
    $205 = ((($204)) + 56|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ($206|0)==(0|0);
    if ($207) {
     $214 = 0;
    } else {
     $208 = $17;
     $209 = ((($208)) + 56|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ((($210)) + 56|0);
     $212 = ((($211)) + 12|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $213;
    }
    FUNCTION_TABLE_viiiiii[$197 & 31]($198,$200,$202,$203,$18,$214);
   }
   $215 = HEAP8[$25>>0]|0;
   $216 = $17;
   $217 = (_count_num_vacant_freecells_315($215,$216)|0);
   $33 = $217;
   $218 = ((($25)) + 1|0);
   $219 = HEAP8[$218>>0]|0;
   $220 = $17;
   $221 = (_count_num_vacant_stacks_316($219,$220)|0);
   $34 = $221;
   $222 = $34;
   $223 = $222&255;
   $224 = ((($25)) + 1|0);
   $225 = HEAP8[$224>>0]|0;
   $226 = $225&255;
   $227 = ($223|0)==($226|0);
   if ($227) {
    $228 = $33;
    $229 = $228&255;
    $230 = HEAP8[$25>>0]|0;
    $231 = $230&255;
    $232 = ($229|0)==($231|0);
    if ($232) {
     label = 24;
     break;
    }
   }
   $239 = $5;
   $240 = $239&1;
   $241 = $17;
   _calculate_real_depth_317($240,$241);
   $242 = $33;
   $243 = $1;
   $244 = ((($243)) + 524|0);
   HEAP8[$244>>0] = $242;
   $245 = $34;
   $246 = $1;
   $247 = ((($246)) + 523|0);
   HEAP8[$247>>0] = $245;
   $248 = $1;
   $249 = $17;
   $250 = $29;
   $251 = $4;
   $252 = $251&1;
   _fc_solve__calc_positions_by_rank_data_318($248,$249,$250,$252);
   HEAP32[$14>>2] = 0;
   $253 = $15;
   $35 = $253;
   while(1) {
    $254 = $35;
    $255 = $16;
    $256 = ($254>>>0)<($255>>>0);
    if (!($256)) {
     break;
    }
    $257 = $35;
    $258 = HEAP32[$257>>2]|0;
    $259 = $1;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$18+4>>2]|0;
    FUNCTION_TABLE_viii[$258 & 31]($259,$$byval_copy1,$14);
    $260 = $35;
    $261 = ((($260)) + 4|0);
    $35 = $261;
   }
   $262 = $8;
   $263 = $262&1;
   if ($263) {
    $264 = $17;
    $265 = ((($264)) + 56|0);
    $266 = ((($265)) + 18|0);
    $267 = HEAP8[$266>>0]|0;
    $268 = $267&255;
    $269 = $268 | 8;
    $270 = $269&255;
    HEAP8[$266>>0] = $270;
   }
   $271 = $21;
   $272 = HEAP32[$271>>2]|0;
   $273 = (($272) + 1)|0;
   HEAP32[$271>>2] = $273;
   $274 = $22;
   $275 = HEAP32[$274>>2]|0;
   $276 = (($275) + 1)|0;
   HEAP32[$274>>2] = $276;
   $277 = ((($14)) + 4|0);
   $278 = HEAP32[$277>>2]|0;
   $36 = $278;
   $279 = HEAP32[$14>>2]|0;
   $280 = (($278) + ($279<<3)|0);
   $37 = $280;
   while(1) {
    $281 = $36;
    $282 = $37;
    $283 = ($281>>>0)<($282>>>0);
    if (!($283)) {
     break;
    }
    $284 = $36;
    $285 = HEAP32[$284>>2]|0;
    $38 = $285;
    $286 = $23;
    $287 = $286&1;
    if ($287) {
     $288 = $38;
     _FCS_STATE_keyval_pair_to_kv_319($39,$288);
     $289 = $12;
     $290 = $38;
     $291 = $1;
     $292 = $1;
     $293 = ((($292)) + 24|0);
     $294 = ((($293)) + 32|0);
     $295 = ((($294)) + 216|0);
     $296 = ((($295)) + 16|0);
     $297 = ((($296)) + 16|0);
     $298 = HEAP32[$39>>2]|0;
     $299 = (_FCS_STATE_kv_to_collectible_320($39)|0);
     $300 = (_calc_depth_314($299)|0);
     $301 = (20000 - ($300))|0;
     $302 = (_befs_rate_state_321($291,$297,$298,$301)|0);
     _fc_solve_pq_push_322($289,$290,$302);
    } else {
     $303 = $1;
     $304 = ((($303)) + 24|0);
     $305 = ((($304)) + 32|0);
     $306 = ((($305)) + 216|0);
     $307 = ((($306)) + 8|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = ($308|0)!=(0|0);
     if ($309) {
      $310 = $1;
      $311 = ((($310)) + 24|0);
      $312 = ((($311)) + 32|0);
      $313 = ((($312)) + 216|0);
      $314 = ((($313)) + 8|0);
      $315 = HEAP32[$314>>2]|0;
      $40 = $315;
      $316 = $1;
      $317 = ((($316)) + 24|0);
      $318 = ((($317)) + 32|0);
      $319 = ((($318)) + 216|0);
      $320 = ((($319)) + 8|0);
      $321 = HEAP32[$320>>2]|0;
      $322 = ((($321)) + 4|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = $1;
      $325 = ((($324)) + 24|0);
      $326 = ((($325)) + 32|0);
      $327 = ((($326)) + 216|0);
      $328 = ((($327)) + 8|0);
      HEAP32[$328>>2] = $323;
     } else {
      $329 = $2;
      $330 = ((($329)) + 20|0);
      $331 = (_fcs_compact_alloc_ptr_308($330,8)|0);
      $40 = $331;
     }
     $332 = $40;
     $333 = $11;
     $334 = ((($333)) + 4|0);
     HEAP32[$334>>2] = $332;
     $335 = $38;
     $336 = $11;
     HEAP32[$336>>2] = $335;
     $337 = $40;
     $338 = ((($337)) + 4|0);
     HEAP32[$338>>2] = 0;
     $339 = $40;
     $11 = $339;
    }
    $340 = $36;
    $341 = ((($340)) + 8|0);
    $36 = $341;
   }
   $342 = $24;
   $343 = $342&1;
   $344 = $17;
   if ($343) {
    $345 = ((($344)) + 56|0);
    $346 = ((($345)) + 18|0);
    $347 = HEAP8[$346>>0]|0;
    $348 = $347&255;
    $349 = $348 | 2;
    $350 = $349&255;
    HEAP8[$346>>0] = $350;
   } else {
    $351 = $7;
    _set_scan_visited_323($344,$351);
    $352 = HEAP32[$14>>2]|0;
    $353 = ($352|0)==(0);
    if ($353) {
     $354 = $8;
     $355 = $354&1;
     if ($355) {
      $356 = $6;
      $357 = $356&1;
      if ($357) {
       $358 = $17;
       _mark_as_dead_end__proto_324($358);
      }
     }
    }
   }
   $359 = $21;
   $360 = HEAP32[$359>>2]|0;
   $361 = (($360) - 1)|0;
   $362 = $17;
   $363 = ((($362)) + 56|0);
   $364 = ((($363)) + 12|0);
   HEAP32[$364>>2] = $361;
  }
  $365 = $23;
  $366 = $365&1;
  do {
   if ($366) {
    $367 = $12;
    _fc_solve_pq_pop($367,$41);
   } else {
    $368 = $10;
    $369 = ((($368)) + 4|0);
    $370 = HEAP32[$369>>2]|0;
    $42 = $370;
    $371 = $42;
    $372 = $11;
    $373 = ($371|0)!=($372|0);
    if ($373) {
     $374 = $42;
     $375 = HEAP32[$374>>2]|0;
     HEAP32[$41>>2] = $375;
     $376 = $42;
     $377 = ((($376)) + 4|0);
     $378 = HEAP32[$377>>2]|0;
     $379 = $10;
     $380 = ((($379)) + 4|0);
     HEAP32[$380>>2] = $378;
     $381 = $1;
     $382 = ((($381)) + 24|0);
     $383 = ((($382)) + 32|0);
     $384 = ((($383)) + 216|0);
     $385 = ((($384)) + 8|0);
     $386 = HEAP32[$385>>2]|0;
     $387 = $42;
     $388 = ((($387)) + 4|0);
     HEAP32[$388>>2] = $386;
     $389 = $42;
     $390 = $1;
     $391 = ((($390)) + 24|0);
     $392 = ((($391)) + 32|0);
     $393 = ((($392)) + 216|0);
     $394 = ((($393)) + 8|0);
     HEAP32[$394>>2] = $389;
     break;
    } else {
     HEAP32[$41>>2] = 0;
     break;
    }
   }
  } while(0);
  $395 = HEAP32[$41>>2]|0;
  $17 = $395;
  $396 = ($395|0)!=(0|0);
  if ($396) {
   $397 = $17;
   HEAP32[$43>>2] = $397;
   $398 = ((($43)) + 4|0);
   $399 = $17;
   $400 = ((($399)) + 56|0);
   HEAP32[$398>>2] = $400;
   ;HEAP32[$18>>2]=HEAP32[$43>>2]|0;HEAP32[$18+4>>2]=HEAP32[$43+4>>2]|0;
  }
 }
 if ((label|0) == 17) {
  $190 = $17;
  $191 = $1;
  $192 = ((($191)) + 24|0);
  $193 = ((($192)) + 32|0);
  $194 = ((($193)) + 456|0);
  HEAP32[$194>>2] = $190;
  $13 = 5;
 }
 else if ((label|0) == 24) {
  $233 = $21;
  $234 = HEAP32[$233>>2]|0;
  $235 = (($234) + 1)|0;
  HEAP32[$233>>2] = $235;
  $236 = $22;
  $237 = HEAP32[$236>>2]|0;
  $238 = (($237) + 1)|0;
  HEAP32[$236>>2] = $238;
  $13 = 0;
 }
 else if ((label|0) == 54) {
  $13 = 1;
 }
 $401 = $17;
 $402 = $3;
 $403 = ((($402)) + 280|0);
 HEAP32[$403>>2] = $401;
 $404 = ((($14)) + 4|0);
 $405 = HEAP32[$404>>2]|0;
 $406 = ($405|0)!=(0|0);
 if ($406) {
  $407 = ((($14)) + 4|0);
  $408 = HEAP32[$407>>2]|0;
  _free($408);
 }
 $409 = $23;
 $410 = $409&1;
 if ($410) {
  $417 = $13;
  STACKTOP = sp;return ($417|0);
 }
 $411 = $11;
 $412 = $1;
 $413 = ((($412)) + 24|0);
 $414 = ((($413)) + 32|0);
 $415 = ((($414)) + 216|0);
 $416 = ((($415)) + 4|0);
 HEAP32[$416>>2] = $411;
 $417 = $13;
 STACKTOP = sp;return ($417|0);
}
function _fcs_get_calc_real_depth_311($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 132|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _calc_ht_max_num_states_312($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $3;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($14) - ($17))|0;
 $19 = (($11) + ($18))|0;
 $5 = $19;
 $20 = $4;
 $21 = $5;
 $22 = ($20|0)<($21|0);
 $23 = $4;
 $24 = $5;
 $25 = $22 ? $23 : $24;
 STACKTOP = sp;return ($25|0);
}
function _fcs__should_state_be_pruned_313($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0&1;
 $2 = $4;
 $3 = $1;
 $5 = $2;
 $6 = $5&1;
 if ($6) {
  $7 = $3;
  $8 = (_fcs__should_state_be_pruned__state_329($7)|0);
  $9 = $8;
 } else {
  $9 = 0;
 }
 STACKTOP = sp;return ($9|0);
}
function _calc_depth_314($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _count_num_vacant_freecells_315($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $2;
  $8 = $7&255;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = ((($10)) + 40|0);
  $12 = $5;
  $13 = (($11) + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $4;
   $18 = (($17) + 1)<<24>>24;
   $4 = $18;
  }
  $19 = $5;
  $20 = (($19) + 1)|0;
  $5 = $20;
 }
 $21 = $4;
 STACKTOP = sp;return ($21|0);
}
function _count_num_vacant_stacks_316($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $2;
  $8 = $7&255;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = $5;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $4;
   $18 = (($17) + 1)<<24>>24;
   $4 = $18;
  }
  $19 = $5;
  $20 = (($19) + 1)|0;
  $5 = $20;
 }
 $21 = $4;
 STACKTOP = sp;return ($21|0);
}
function _calculate_real_depth_317($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = $0&1;
 $2 = $6;
 $3 = $1;
 $7 = $2;
 $8 = $7&1;
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $4 = -1;
 $9 = $3;
 $5 = $9;
 while(1) {
  $10 = $5;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $5;
  $13 = ((($12)) + 56|0);
  $14 = HEAP32[$13>>2]|0;
  $5 = $14;
  $15 = $4;
  $16 = (($15) + 1)|0;
  $4 = $16;
 }
 $17 = $3;
 $5 = $17;
 while(1) {
  $18 = $5;
  $19 = ((($18)) + 56|0);
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $4;
  $23 = ($21|0)!=($22|0);
  if (!($23)) {
   break;
  }
  $24 = $4;
  $25 = $5;
  $26 = ((($25)) + 56|0);
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $24;
  $28 = $4;
  $29 = (($28) + -1)|0;
  $4 = $29;
  $30 = $5;
  $31 = ((($30)) + 56|0);
  $32 = HEAP32[$31>>2]|0;
  $5 = $32;
 }
 STACKTOP = sp;return;
}
function _fc_solve__calc_positions_by_rank_data_318($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = sp + 72|0;
 $18 = sp + 66|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $26 = $3&1;
 $7 = $26;
 $27 = $4;
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$28>>2]|0;
 $8 = $29;
 $30 = $8;
 ;HEAP8[$9>>0]=HEAP8[$30>>0]|0;HEAP8[$9+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$9+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$9+3>>0]=HEAP8[$30+3>>0]|0;
 $31 = $6;
 _memset(($31|0),-1,208)|0;
 $32 = $7;
 $33 = $32&1;
 if ($33) {
  $34 = $6;
  $10 = $34;
  $11 = 0;
  while(1) {
   $35 = $11;
   $36 = ((($9)) + 1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($35|0)<($38|0);
   if (!($39)) {
    break;
   }
   $40 = $5;
   $41 = $11;
   $42 = (($40) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $12 = $43;
   $44 = $12;
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $13 = $46;
   $14 = 0;
   while(1) {
    $47 = $14;
    $48 = $13;
    $49 = ($47|0)<($48|0);
    if (!($49)) {
     break;
    }
    $50 = $12;
    $51 = $14;
    $52 = (($51) + 1)|0;
    $53 = (($50) + ($52)|0);
    $54 = HEAP8[$53>>0]|0;
    $15 = $54;
    $55 = $15;
    $56 = $55&255;
    $57 = $56 & 3;
    $16 = $57;
    $58 = $15;
    $59 = $58&255;
    $60 = (2)?($59 >> 2):($59);
    $17 = $60;
    $61 = $10;
    $62 = $16;
    $63 = ($62*14)|0;
    $64 = $17;
    $65 = (($63) + ($64))|0;
    $66 = (($61) + ($65<<1)|0);
    $67 = $11;
    $68 = $67&255;
    HEAP8[$18>>0] = $68;
    $69 = ((($18)) + 1|0);
    $70 = $14;
    $71 = $70&255;
    HEAP8[$69>>0] = $71;
    ;HEAP8[$66>>0]=HEAP8[$18>>0]|0;HEAP8[$66+1>>0]=HEAP8[$18+1>>0]|0;
    $72 = $14;
    $73 = (($72) + 1)|0;
    $14 = $73;
   }
   $74 = $11;
   $75 = (($74) + 1)|0;
   $11 = $75;
  }
  STACKTOP = sp;return;
 }
 $76 = $8;
 $77 = ((($76)) + 3|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 & 3;
 $19 = $80;
 $20 = 0;
 while(1) {
  $81 = $20;
  $82 = ((($9)) + 1|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ($81|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = $5;
  $87 = $20;
  $88 = (($86) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $21 = $89;
  $90 = $21;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $22 = $92;
  $93 = $22;
  $94 = (($93) + -1)|0;
  $22 = $94;
  $95 = ($93|0)==(0);
  $96 = $95 ^ 1;
  $97 = $96 ^ 1;
  if (!($97)) {
   $98 = $21;
   $99 = ((($98)) + 1|0);
   $100 = HEAP8[$99>>0]|0;
   $23 = $100;
   $25 = 0;
   while(1) {
    $101 = $25;
    $102 = $22;
    $103 = ($101|0)<($102|0);
    if (!($103)) {
     break;
    }
    $104 = $21;
    $105 = $25;
    $106 = (($105) + 1)|0;
    $107 = (($106) + 1)|0;
    $108 = (($104) + ($107)|0);
    $109 = HEAP8[$108>>0]|0;
    $24 = $109;
    $110 = $24;
    $111 = $23;
    $112 = $19;
    $113 = (_fcs_is_parent_card__helper_327($110,$111,$112)|0);
    if (!($113)) {
     $114 = $6;
     $115 = $20;
     $116 = $115&255;
     $117 = $25;
     $118 = $117&255;
     $119 = $23;
     _fc_solve__assign_dest_stack_and_col_ptr_328($114,$116,$118,$119);
    }
    $120 = $25;
    $121 = (($120) + 1)|0;
    $25 = $121;
    $122 = $24;
    $23 = $122;
   }
   $123 = $6;
   $124 = $20;
   $125 = $124&255;
   $126 = $22;
   $127 = $126&255;
   $128 = $23;
   _fc_solve__assign_dest_stack_and_col_ptr_328($123,$125,$127,$128);
  }
  $129 = $20;
  $130 = (($129) + 1)|0;
  $20 = $130;
 }
 STACKTOP = sp;return;
}
function _FCS_STATE_keyval_pair_to_kv_319($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 HEAP32[$0>>2] = $3;
 $4 = ((($0)) + 4|0);
 $5 = $2;
 $6 = ((($5)) + 56|0);
 HEAP32[$4>>2] = $6;
 STACKTOP = sp;return;
}
function _FCS_STATE_kv_to_collectible_320($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _befs_rate_state_321($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $10 = sp + 108|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $30 = $4;
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $8 = $32;
 $33 = $8;
 $34 = ((($33)) + 3|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 & 3;
 $9 = $37;
 $38 = $8;
 ;HEAP8[$10>>0]=HEAP8[$38>>0]|0;HEAP8[$10+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$38+3>>0]|0;
 $39 = $8;
 $40 = ((($39)) + 3|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 & 16;
 $44 = ($43|0)!=(0);
 $45 = $44&1;
 $11 = $45;
 $12 = 0.0;
 $13 = 0.0;
 $46 = $7;
 $47 = (0)>($46|0);
 $48 = $7;
 $49 = $47 ? 0 : $48;
 $50 = (+($49|0));
 $51 = $5;
 $52 = ((($51)) + 32|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $50 * $53;
 $14 = $54;
 $55 = $5;
 $56 = ((($55)) + 48|0);
 $15 = $56;
 $57 = $15;
 $58 = ((($57)) + 8|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $59 != 0.0;
 L1: do {
  if ($60) {
   $61 = ((($10)) + 2|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $63 << 2;
   $16 = $64;
   $17 = 0;
   while(1) {
    $65 = $17;
    $66 = $16;
    $67 = ($65|0)<($66|0);
    if (!($67)) {
     break L1;
    }
    $68 = $15;
    $69 = $6;
    $70 = ((($69)) + 48|0);
    $71 = $17;
    $72 = (($70) + ($71)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = (($68) + ($74<<3)|0);
    $76 = +HEAPF64[$75>>3];
    $77 = $14;
    $78 = $77 + $76;
    $14 = $78;
    $79 = $17;
    $80 = (($79) + 1)|0;
    $17 = $80;
   }
  }
 } while(0);
 $18 = 0;
 $81 = $5;
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&1;
 if ($83) {
  $19 = 0;
  while(1) {
   $84 = $19;
   $85 = ((($10)) + 1|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = ($84|0)<($87|0);
   if (!($88)) {
    break;
   }
   $89 = $6;
   $90 = $19;
   $91 = (($89) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $20 = $92;
   $93 = $20;
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $21 = $95;
   $96 = $21;
   $97 = ($96|0)<=(1);
   if ($97) {
    $98 = $21;
    $99 = ($98|0)==(0);
    if ($99) {
     $100 = $18;
     $101 = (($100) + 1)<<24>>24;
     $18 = $101;
    }
   } else {
    $102 = $9;
    $103 = $20;
    $104 = $21;
    $105 = (($104) - 1)|0;
    $106 = (_update_col_cards_under_sequences_326($102,$103,$105)|0);
    $22 = $106;
    $107 = $22;
    $108 = (5136 + ($107<<3)|0);
    $109 = +HEAPF64[$108>>3];
    $110 = $12;
    $111 = $110 + $109;
    $12 = $111;
    $112 = $22;
    $113 = ($112|0)>(0);
    if ($113) {
     $114 = $11;
     $115 = $114&1;
     if ($115) {
      $123 = 1.0;
     } else {
      $116 = $21;
      $117 = $22;
      $118 = (($116) - ($117))|0;
      $119 = (5136 + ($118<<3)|0);
      $120 = +HEAPF64[$119>>3];
      $123 = $120;
     }
     $121 = $13;
     $122 = $121 + $123;
     $13 = $122;
    }
   }
   $124 = $19;
   $125 = (($124) + 1)|0;
   $19 = $125;
  }
  $126 = HEAP8[$10>>0]|0;
  $127 = $6;
  $128 = (_count_num_vacant_freecells_315($126,$127)|0);
  $23 = $128;
  $129 = $8;
  $130 = ((($129)) + 3|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = (2)?($132 >> 2):($132);
  $134 = $133 & 3;
  $135 = ($134|0)==(0);
  $136 = $11;
  $137 = $136&1;
  $138 = $23;
  $139 = $138&255;
  do {
   if ($135) {
    if ($137) {
     $140 = $18;
     $141 = $140&255;
     $142 = (($139) + ($141))|0;
     $149 = $142;
     break;
    } else {
     $143 = (($139) + 1)|0;
     $144 = $18;
     $145 = $144&255;
     $146 = $143 << $145;
     $149 = $146;
     break;
    }
   } else {
    $147 = $137 ? $139 : 0;
    $149 = $147;
   }
  } while(0);
  $148 = (+($149|0));
  $150 = $5;
  $151 = ((($150)) + 8|0);
  $152 = +HEAPF64[$151>>3];
  $153 = $148 * $152;
  $154 = $8;
  $155 = ((($154)) + 24|0);
  $156 = +HEAPF64[$155>>3];
  $157 = $12;
  $158 = $156 - $157;
  $159 = $5;
  $160 = ((($159)) + 16|0);
  $161 = +HEAPF64[$160>>3];
  $162 = $158 * $161;
  $163 = $153 + $162;
  $164 = $13;
  $165 = $5;
  $166 = ((($165)) + 24|0);
  $167 = +HEAPF64[$166>>3];
  $168 = $164 * $167;
  $169 = $163 + $168;
  $170 = $14;
  $171 = $170 + $169;
  $14 = $171;
 }
 $172 = $5;
 $173 = ((($172)) + 40|0);
 $174 = +HEAPF64[$173>>3];
 $24 = $174;
 $175 = $24;
 $176 = $175 != 0.0;
 if (!($176)) {
  $221 = $14;
  $222 = (~~(($221)));
  STACKTOP = sp;return ($222|0);
 }
 $177 = ((($10)) + 2|0);
 $178 = HEAP8[$177>>0]|0;
 $179 = $178&255;
 $180 = ($179*52)|0;
 $25 = $180;
 $26 = 0;
 while(1) {
  $181 = $26;
  $182 = ((($10)) + 1|0);
  $183 = HEAP8[$182>>0]|0;
  $184 = $183&255;
  $185 = ($181|0)<($184|0);
  if (!($185)) {
   break;
  }
  $186 = $6;
  $187 = $26;
  $188 = (($186) + ($187<<2)|0);
  $189 = HEAP32[$188>>2]|0;
  $27 = $189;
  $190 = $27;
  $191 = HEAP8[$190>>0]|0;
  $192 = $191&255;
  $28 = $192;
  $29 = 1;
  while(1) {
   $193 = $29;
   $194 = $28;
   $195 = ($193>>>0)<($194>>>0);
   if (!($195)) {
    break;
   }
   $196 = $27;
   $197 = $29;
   $198 = (($197) - 1)|0;
   $199 = (($198) + 1)|0;
   $200 = (($196) + ($199)|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = $27;
   $203 = $29;
   $204 = (($203) + 1)|0;
   $205 = (($202) + ($204)|0);
   $206 = HEAP8[$205>>0]|0;
   $207 = $9;
   $208 = (_fcs_is_parent_card__helper_327($201,$206,$207)|0);
   if (!($208)) {
    $209 = $25;
    $210 = (($209) + -1)|0;
    $25 = $210;
   }
   $211 = $29;
   $212 = (($211) + 1)|0;
   $29 = $212;
  }
  $213 = $26;
  $214 = (($213) + 1)|0;
  $26 = $214;
 }
 $215 = $25;
 $216 = (+($215|0));
 $217 = $24;
 $218 = $216 * $217;
 $219 = $14;
 $220 = $219 + $218;
 $14 = $220;
 $221 = $14;
 $222 = (~~(($221)));
 STACKTOP = sp;return ($222|0);
}
function _fc_solve_pq_push_322($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$9>>2] = $11;
 $6 = $11;
 $12 = $6;
 $13 = $3;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12>>>0)>($14>>>0);
 if ($15) {
  $16 = $3;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 256)|0;
  HEAP32[$19>>2] = $21;
  $22 = (($21) + 1)|0;
  $23 = $22<<3;
  $24 = (_realloc($18,$23)|0);
  $25 = $3;
  $26 = ((($25)) + 8|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $7 = $29;
 while(1) {
  $30 = $6;
  $31 = ($30|0)==(1);
  if ($31) {
   $38 = 2147483647;
  } else {
   $32 = $7;
   $33 = $6;
   $34 = (1)?($33 >>> 1):($33);
   $35 = (($32) + ($34<<3)|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$35>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$35+4>>2]|0;
   $36 = (_fcs_pq_rating_325($$byval_copy)|0);
   $38 = $36;
  }
  $37 = $5;
  $39 = ($38|0)<($37|0);
  if (!($39)) {
   break;
  }
  $40 = $7;
  $41 = $6;
  $42 = (($40) + ($41<<3)|0);
  $43 = $7;
  $44 = $6;
  $45 = (1)?($44 >>> 1):($44);
  $46 = (($43) + ($45<<3)|0);
  ;HEAP32[$42>>2]=HEAP32[$46>>2]|0;HEAP32[$42+4>>2]=HEAP32[$46+4>>2]|0;
  $47 = $6;
  $48 = (1)?($47 >>> 1):($47);
  $6 = $48;
 }
 $49 = $4;
 $50 = $7;
 $51 = $6;
 $52 = (($50) + ($51<<3)|0);
 HEAP32[$52>>2] = $49;
 $53 = $5;
 $54 = $7;
 $55 = $6;
 $56 = (($54) + ($55<<3)|0);
 $57 = ((($56)) + 4|0);
 HEAP32[$57>>2] = $53;
 STACKTOP = sp;return;
}
function _set_scan_visited_323($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $4 & 7;
 $6 = 1 << $5;
 $7 = $2;
 $8 = ((($7)) + 56|0);
 $9 = ((($8)) + 19|0);
 $10 = $3;
 $11 = (3)?($10 >> 3):($10);
 $12 = (($9) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 | $6;
 $16 = $15&255;
 HEAP8[$12>>0] = $16;
 STACKTOP = sp;return;
}
function _mark_as_dead_end__proto_324($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 56|0);
 $6 = ((($5)) + 18|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 | 4;
 $10 = $9&255;
 HEAP8[$6>>0] = $10;
 $11 = $2;
 $12 = ((($11)) + 56|0);
 $13 = HEAP32[$12>>2]|0;
 $2 = $13;
 $14 = $2;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $2;
 $17 = ((($16)) + 56|0);
 $18 = ((($17)) + 16|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = (($19) + -1)<<16>>16;
 HEAP16[$18>>1] = $20;
 while(1) {
  $21 = $2;
  $22 = ((($21)) + 56|0);
  $23 = ((($22)) + 16|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = ($25|0)==(0);
  if (!($26)) {
   label = 7;
   break;
  }
  $27 = $2;
  $28 = ((($27)) + 56|0);
  $29 = ((($28)) + 18|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31 & 8;
  $33 = ($32|0)!=(0);
  if (!($33)) {
   label = 7;
   break;
  }
  $34 = $2;
  $35 = ((($34)) + 56|0);
  $36 = ((($35)) + 18|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $38 | 4;
  $40 = $39&255;
  HEAP8[$36>>0] = $40;
  $41 = $2;
  $42 = ((($41)) + 56|0);
  $43 = HEAP32[$42>>2]|0;
  $2 = $43;
  $44 = $2;
  $45 = ($44|0)==(0|0);
  if ($45) {
   label = 7;
   break;
  }
  $46 = $2;
  $47 = ((($46)) + 56|0);
  $48 = ((($47)) + 16|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = (($49) + -1)<<16>>16;
  HEAP16[$48>>1] = $50;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _fc_solve_pq_pop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy3 = sp + 64|0;
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 48|0;
 $$byval_copy = sp + 40|0;
 $6 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $10 = $2;
 $11 = (_fc_solve_is_pqueue_empty($10)|0);
 if ($11) {
  $12 = $3;
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
 $13 = $2;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $4 = $15;
 $16 = $2;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $5 = $18;
 $19 = $4;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $3;
 HEAP32[$22>>2] = $21;
 $23 = $4;
 $24 = $5;
 $25 = (($23) + ($24<<3)|0);
 ;HEAP32[$6>>2]=HEAP32[$25>>2]|0;HEAP32[$6+4>>2]=HEAP32[$25+4>>2]|0;
 $26 = $5;
 $27 = (($26) - 1)|0;
 $7 = $27;
 $8 = 1;
 while(1) {
  $28 = $8;
  $29 = $28 << 1;
  $9 = $29;
  $30 = $7;
  $31 = ($29>>>0)<=($30>>>0);
  if (!($31)) {
   break;
  }
  $32 = $9;
  $33 = $7;
  $34 = ($32|0)!=($33|0);
  if ($34) {
   $35 = $4;
   $36 = $9;
   $37 = (($36) + 1)|0;
   $38 = (($35) + ($37<<3)|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$38>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$38+4>>2]|0;
   $39 = (_fcs_pq_rating_325($$byval_copy)|0);
   $40 = $4;
   $41 = $9;
   $42 = (($40) + ($41<<3)|0);
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$42>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$42+4>>2]|0;
   $43 = (_fcs_pq_rating_325($$byval_copy1)|0);
   $44 = ($39|0)>($43|0);
   if ($44) {
    $45 = $9;
    $46 = (($45) + 1)|0;
    $9 = $46;
   }
  }
  ;HEAP32[$$byval_copy2>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$6+4>>2]|0;
  $47 = (_fcs_pq_rating_325($$byval_copy2)|0);
  $48 = $4;
  $49 = $9;
  $50 = (($48) + ($49<<3)|0);
  ;HEAP32[$$byval_copy3>>2]=HEAP32[$50>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$50+4>>2]|0;
  $51 = (_fcs_pq_rating_325($$byval_copy3)|0);
  $52 = ($47|0)<($51|0);
  if (!($52)) {
   break;
  }
  $53 = $4;
  $54 = $8;
  $55 = (($53) + ($54<<3)|0);
  $56 = $4;
  $57 = $9;
  $58 = (($56) + ($57<<3)|0);
  ;HEAP32[$55>>2]=HEAP32[$58>>2]|0;HEAP32[$55+4>>2]=HEAP32[$58+4>>2]|0;
  $59 = $9;
  $8 = $59;
 }
 $60 = $4;
 $61 = $8;
 $62 = (($60) + ($61<<3)|0);
 ;HEAP32[$62>>2]=HEAP32[$6>>2]|0;HEAP32[$62+4>>2]=HEAP32[$6+4>>2]|0;
 $63 = $7;
 $64 = $2;
 $65 = ((($64)) + 4|0);
 HEAP32[$65>>2] = $63;
 STACKTOP = sp;return;
}
function _fc_solve_is_pqueue_empty($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 STACKTOP = sp;return ($5|0);
}
function _fcs_pq_rating_325($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _update_col_cards_under_sequences_326($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = $5;
 $11 = (($10) + 1)|0;
 $12 = (($9) + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $6 = $13;
 while(1) {
  $14 = $5;
  $15 = ($14|0)>(0);
  if (!($15)) {
   label = 5;
   break;
  }
  $16 = $4;
  $17 = $5;
  $18 = (($17) - 1)|0;
  $19 = (($18) + 1)|0;
  $20 = (($16) + ($19)|0);
  $21 = HEAP8[$20>>0]|0;
  $7 = $21;
  $22 = $6;
  $23 = $7;
  $24 = $3;
  $25 = (_fcs_is_parent_card__helper_327($22,$23,$24)|0);
  $26 = $25&1;
  $8 = $26;
  $27 = $8;
  $28 = $27&1;
  if (!($28)) {
   label = 5;
   break;
  }
  $29 = $5;
  $30 = (($29) + -1)|0;
  $5 = $30;
  $31 = $7;
  $6 = $31;
 }
 if ((label|0) == 5) {
  $32 = $5;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _fcs_is_parent_card__helper_327($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $6&255;
 $8 = (2)?($7 >> 2):($7);
 $9 = (($8) + 1)|0;
 $10 = $4;
 $11 = $10&255;
 $12 = (2)?($11 >> 2):($11);
 $13 = ($9|0)==($12|0);
 if (!($13)) {
  $35 = 0;
  STACKTOP = sp;return ($35|0);
 }
 $14 = $5;
 $15 = ($14|0)==(2);
 do {
  if ($15) {
   $33 = 1;
  } else {
   $16 = $5;
   $17 = ($16|0)==(1);
   $18 = $3;
   $19 = $18&255;
   $20 = $19 & 3;
   if ($17) {
    $21 = $4;
    $22 = $21&255;
    $23 = $22 & 3;
    $24 = ($20|0)==($23|0);
    $25 = $24&1;
    $33 = $25;
    break;
   } else {
    $26 = $20 & 1;
    $27 = $4;
    $28 = $27&255;
    $29 = $28 & 3;
    $30 = $29 & 1;
    $31 = ($26|0)!=($30|0);
    $32 = $31&1;
    $33 = $32;
    break;
   }
  }
 } while(0);
 $34 = ($33|0)!=(0);
 $35 = $34;
 STACKTOP = sp;return ($35|0);
}
function _fc_solve__assign_dest_stack_and_col_ptr_328($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = $7;
 $11 = $10&255;
 $12 = (2)?($11 >> 2):($11);
 $13 = (($12) - 1)|0;
 $14 = $13<<4;
 $15 = $7;
 $16 = $15&255;
 $17 = $16 & 3;
 $18 = $17 << 1;
 $19 = (($14) + ($18))|0;
 $20 = (($9) + ($19)|0);
 $8 = $20;
 while(1) {
  $21 = $8;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(-1);
  if (!($24)) {
   break;
  }
  $25 = $8;
  $26 = ((($25)) + 8|0);
  $8 = $26;
 }
 $27 = $5;
 $28 = $8;
 $29 = ((($28)) + 1|0);
 $8 = $29;
 HEAP8[$28>>0] = $27;
 $30 = $6;
 $31 = $8;
 HEAP8[$31>>0] = $30;
 STACKTOP = sp;return;
}
function _fcs__should_state_be_pruned__state_329($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 56|0);
 $4 = ((($3)) + 18|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 & 16;
 $8 = ($7|0)!=(0);
 $9 = $8 ^ 1;
 STACKTOP = sp;return ($9|0);
}
function _fc_solve_sfs_check_state_begin($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $3;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $8 = $10;
 $11 = $8;
 $12 = ((($11)) + 128|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 $15 = $4;
 $16 = ((($15)) + 1340|0);
 $17 = $14&1;
 HEAP8[$16>>0] = $17;
 if ($14) {
  $18 = $8;
  $19 = ((($18)) + 128|0);
  $20 = HEAP32[$19>>2]|0;
  $7 = $20;
  $21 = $8;
  $22 = ((($21)) + 128|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 56|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $8;
  $27 = ((($26)) + 128|0);
  HEAP32[$27>>2] = $25;
 } else {
  $28 = $4;
  $29 = ((($28)) + 20|0);
  $30 = (_fcs_state_ia_alloc_into_var($29)|0);
  $7 = $30;
 }
 $31 = $5;
 $32 = $7;
 _FCS_STATE_collectible_to_kv_332($31,$32);
 $33 = $5;
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$2>>2]|0;
 dest=$34; src=$35; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $36 = $5;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($2)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 ;HEAP32[$38>>2]=HEAP32[$40>>2]|0;HEAP32[$38+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[$40+12>>2]|0;HEAP32[$38+16>>2]=HEAP32[$40+16>>2]|0;HEAP32[$38+20>>2]=HEAP32[$40+20>>2]|0;HEAP32[$38+24>>2]=HEAP32[$40+24>>2]|0;
 $41 = $5;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($43)) + 24|0);
 HEAP32[$44>>2] = 0;
 $45 = HEAP32[$2>>2]|0;
 $46 = $7;
 $47 = ((($46)) + 56|0);
 HEAP32[$47>>2] = $45;
 $48 = $6;
 $49 = $7;
 $50 = ((($49)) + 56|0);
 $51 = ((($50)) + 4|0);
 HEAP32[$51>>2] = $48;
 $52 = $7;
 $53 = ((($52)) + 56|0);
 $54 = ((($53)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + 1)|0;
 HEAP32[$54>>2] = $56;
 $57 = $7;
 $58 = ((($57)) + 56|0);
 $59 = ((($58)) + 18|0);
 HEAP8[$59>>0] = 0;
 $60 = $7;
 $61 = ((($60)) + 56|0);
 $62 = ((($61)) + 16|0);
 HEAP16[$62>>1] = 0;
 $63 = $7;
 $64 = ((($63)) + 56|0);
 $65 = ((($64)) + 19|0);
 ;HEAP8[$65>>0]=0|0;HEAP8[$65+1>>0]=0|0;HEAP8[$65+2>>0]=0|0;HEAP8[$65+3>>0]=0|0;
 $66 = $6;
 $67 = ((($66)) + 4|0);
 HEAP32[$67>>2] = 0;
 STACKTOP = sp;return 0;
}
function _fcs_state_ia_alloc_into_var($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_fcs_compact_alloc_ptr_308($2,84)|0);
 STACKTOP = sp;return ($3|0);
}
function _FCS_STATE_collectible_to_kv_332($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 _FCS_STATE_keyval_pair_to_kv_319($4,$6);
 ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function _fc_solve_sfs_check_state_end($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $5 = $0;
 $6 = $2;
 $7 = $3;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $8 = $14;
 $15 = $8;
 $16 = HEAP32[$15>>2]|0;
 $9 = $16;
 $17 = $9;
 $18 = (_fcs_get_calc_real_depth_311($17)|0);
 $19 = $18&1;
 $10 = $19;
 $20 = $9;
 $21 = ((($20)) + 134|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&1;
 $24 = $23&1;
 $11 = $24;
 $25 = $8;
 $26 = $6;
 $27 = (_fc_solve_check_and_add_state($25,$26,$12)|0);
 if ($27) {
  $101 = $6;
  $102 = HEAP32[$101>>2]|0;
  $4 = $102;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 $28 = $8;
 $29 = ((($28)) + 1340|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&1;
 if ($31) {
  $32 = $9;
  $33 = ((($32)) + 128|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $6;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$37>>2] = $34;
  $38 = $6;
  $39 = HEAP32[$38>>2]|0;
  $40 = $9;
  $41 = ((($40)) + 128|0);
  HEAP32[$41>>2] = $39;
 } else {
  $42 = $8;
  $43 = ((($42)) + 20|0);
  _fcs_compact_alloc_release_335($43);
 }
 $44 = $10;
 $45 = $44&1;
 $46 = (_FCS_STATE_kv_to_collectible_320($12)|0);
 _calculate_real_depth_317($45,$46);
 $47 = $9;
 $48 = ((($47)) + 133|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&1;
 if ($50) {
  $51 = (_FCS_STATE_kv_to_collectible_320($12)|0);
  $52 = (_calc_depth_314($51)|0);
  $53 = (_FCS_STATE_kv_to_collectible_320($1)|0);
  $54 = (_calc_depth_314($53)|0);
  $55 = (($54) + 1)|0;
  $56 = ($52|0)>($55|0);
  if ($56) {
   $57 = $8;
   $58 = $7;
   $59 = (_fc_solve_move_stack_compact_allocate_336($57,$58)|0);
   $60 = ((($12)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 4|0);
   HEAP32[$62>>2] = $59;
   $63 = ((($12)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 18|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = $67 & 4;
   $69 = ($68|0)!=(0);
   if (!($69)) {
    $70 = ((($12)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($72)) + 56|0);
    $74 = ((($73)) + 16|0);
    $75 = HEAP16[$74>>1]|0;
    $76 = (($75) + -1)<<16>>16;
    HEAP16[$74>>1] = $76;
    $77 = $76&65535;
    $78 = ($77|0)==(0);
    if ($78) {
     $79 = $11;
     $80 = $79&1;
     if ($80) {
      $81 = ((($12)) + 4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP32[$82>>2]|0;
      _mark_as_dead_end__proto_324($83);
     }
    }
    $84 = ((($1)) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ((($85)) + 16|0);
    $87 = HEAP16[$86>>1]|0;
    $88 = (($87) + 1)<<16>>16;
    HEAP16[$86>>1] = $88;
   }
   $89 = HEAP32[$1>>2]|0;
   $90 = ((($12)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   HEAP32[$91>>2] = $89;
   $92 = ((($1)) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($93)) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + 1)|0;
   $97 = ((($12)) + 4|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ((($98)) + 8|0);
   HEAP32[$99>>2] = $96;
  }
 }
 $100 = (_FCS_STATE_kv_to_collectible_320($12)|0);
 $4 = $100;
 $103 = $4;
 STACKTOP = sp;return ($103|0);
}
function _fcs_compact_alloc_release_335($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _fc_solve_move_stack_compact_allocate_336($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 20|0);
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11<<2;
 $13 = (8 + ($12))|0;
 $14 = (_fcs_compact_alloc_ptr_308($8,$13)|0);
 $4 = $14;
 $15 = $4;
 $5 = $15;
 $16 = $4;
 $17 = ((($16)) + 8|0);
 $6 = $17;
 $18 = $6;
 $19 = $5;
 HEAP32[$19>>2] = $18;
 $20 = $3;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $5;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $22;
 $25 = $6;
 $26 = $3;
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30<<2;
 _memcpy(($25|0),($27|0),($31|0))|0;
 $32 = $5;
 STACKTOP = sp;return ($32|0);
}
function _fc_solve_sfs_simple_simon_move_sequence_to_founds($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy1 = sp + 80|0;
 $$byval_copy = sp + 72|0;
 $8 = sp + 40|0;
 $11 = sp + 92|0;
 $3 = $0;
 $4 = $2;
 $21 = $3;
 $22 = HEAP32[$21>>2]|0;
 $5 = $22;
 $23 = $5;
 $24 = ((($23)) + 40|0);
 $6 = $24;
 $7 = 0;
 $25 = $5;
 $26 = HEAP32[$25>>2]|0;
 $9 = $26;
 $27 = $5;
 $28 = ((($27)) + 48|0);
 $10 = $28;
 $29 = $9;
 ;HEAP8[$11>>0]=HEAP8[$29>>0]|0;HEAP8[$11+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$29+3>>0]|0;
 $12 = 0;
 while(1) {
  $30 = $12;
  $31 = ((($11)) + 1|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = ($30|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = HEAP32[$1>>2]|0;
  $36 = $12;
  $37 = (($35) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $13 = $38;
  $39 = $13;
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $14 = $41;
  $42 = $14;
  $43 = ($42|0)<(13);
  if (!($43)) {
   $44 = $13;
   $45 = $14;
   $46 = (($45) - 1)|0;
   $47 = (($46) + 1)|0;
   $48 = (($44) + ($47)|0);
   $49 = HEAP8[$48>>0]|0;
   $15 = $49;
   $16 = 2;
   while(1) {
    $50 = $16;
    $51 = ($50|0)<=(13);
    if (!($51)) {
     break;
    }
    $52 = $13;
    $53 = $14;
    $54 = $16;
    $55 = (($53) - ($54))|0;
    $56 = (($55) + 1)|0;
    $57 = (($52) + ($56)|0);
    $58 = HEAP8[$57>>0]|0;
    $17 = $58;
    $59 = $17;
    $60 = $15;
    $61 = (_fcs_is_ss_true_parent($59,$60)|0);
    if (!($61)) {
     break;
    }
    $62 = $17;
    $15 = $62;
    $63 = $16;
    $64 = (($63) + 1)|0;
    $16 = $64;
   }
   $65 = $16;
   $66 = ($65|0)>(13);
   if ($66) {
    $67 = $5;
    $68 = $6;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
    (_fc_solve_sfs_check_state_begin($67,$8,$$byval_copy,$68)|0);
    $69 = ((($8)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ((($70)) + 24|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $12;
    $74 = 1 << $73;
    $75 = $72 & $74;
    $76 = ($75|0)!=(0);
    if (!($76)) {
     $77 = $12;
     $78 = 1 << $77;
     $79 = ((($8)) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ((($80)) + 24|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $82 | $78;
     HEAP32[$81>>2] = $83;
     $84 = HEAP32[$8>>2]|0;
     $85 = $12;
     $86 = (($84) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $18 = $87;
     $88 = $10;
     $89 = $12;
     $90 = $89 << 7;
     $91 = (($88) + ($90)|0);
     $92 = $18;
     $93 = $18;
     $94 = HEAP8[$93>>0]|0;
     $95 = $94&255;
     $96 = (($95) + 1)|0;
     _memcpy(($91|0),($92|0),($96|0))|0;
     $97 = $10;
     $98 = $12;
     $99 = $98 << 7;
     $100 = (($97) + ($99)|0);
     $101 = HEAP32[$8>>2]|0;
     $102 = $12;
     $103 = (($101) + ($102<<2)|0);
     HEAP32[$103>>2] = $100;
    }
    $104 = HEAP32[$8>>2]|0;
    $105 = $12;
    $106 = (($104) + ($105<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $19 = $107;
    $16 = 0;
    while(1) {
     $108 = $16;
     $109 = ($108|0)<(13);
     if (!($109)) {
      break;
     }
     $110 = $19;
     $111 = $19;
     $112 = HEAP8[$111>>0]|0;
     $113 = (($112) + -1)<<24>>24;
     HEAP8[$111>>0] = $113;
     $114 = $113&255;
     $115 = (($114) + 1)|0;
     $116 = (($110) + ($115)|0);
     HEAP8[$116>>0] = 0;
     $117 = $16;
     $118 = (($117) + 1)|0;
     $16 = $118;
    }
    $119 = $15;
    $120 = $119&255;
    $121 = $120 & 3;
    $20 = $121;
    $122 = HEAP32[$8>>2]|0;
    $123 = ((($122)) + 48|0);
    $124 = $20;
    $125 = (($123) + ($124)|0);
    HEAP8[$125>>0] = 13;
    $126 = $6;
    $127 = $12;
    $128 = $20;
    _fcs_move_stack_non_seq_push_337($126,11,$127,$128);
    $129 = $4;
    $130 = $3;
    $131 = $6;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
    $132 = (_fc_solve_sfs_check_state_end($130,$$byval_copy1,$8,$131)|0);
    $133 = $7;
    _fc_solve_derived_states_list_add_state($129,$132,$133);
   }
  }
  $134 = $12;
  $135 = (($134) + 1)|0;
  $12 = $135;
 }
 STACKTOP = sp;return;
}
function _fcs_is_ss_true_parent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_fcs_is_ss_false_parent($4,$5)|0);
 if (!($6)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 $7 = $2;
 $8 = $3;
 $9 = (_fcs_is_ss_suit_true($7,$8)|0);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function _fcs_move_stack_non_seq_push_337($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 _fcs_move_stack_params_push_338($8,$9,$10,$11,1);
 STACKTOP = sp;return;
}
function _fcs_move_stack_params_push_338($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 24|0;
 $10 = sp + 20|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $6;
 $12 = $11&255;
 HEAP8[$10>>0] = $12;
 $13 = $7;
 $14 = $13&255;
 $15 = ((($10)) + 1|0);
 HEAP8[$15>>0] = $14;
 $16 = $8;
 $17 = $16&255;
 $18 = ((($10)) + 2|0);
 HEAP8[$18>>0] = $17;
 $19 = $9;
 $20 = $19&255;
 $21 = ((($10)) + 3|0);
 HEAP8[$21>>0] = $20;
 $22 = $5;
 ;HEAP8[$$byval_copy>>0]=HEAP8[$10>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$10+3>>0]|0;
 _fcs_move_stack_push_339($22,$$byval_copy);
 STACKTOP = sp;return;
}
function _fcs_move_stack_push_339($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$5>>2] = $7;
 $3 = $7;
 $8 = $3;
 $9 = $8 & 15;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  $13 = $3;
  $14 = (($13) + 16)|0;
  $15 = $14<<2;
  $16 = (_realloc($12,$15)|0);
  $17 = $2;
  HEAP32[$17>>2] = $16;
 }
 $18 = $2;
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 $21 = (($20) - 1)|0;
 $22 = (($19) + ($21<<2)|0);
 ;HEAP8[$22>>0]=HEAP8[$1>>0]|0;HEAP8[$22+1>>0]=HEAP8[$1+1>>0]|0;HEAP8[$22+2>>0]=HEAP8[$1+2>>0]|0;HEAP8[$22+3>>0]=HEAP8[$1+3>>0]|0;
 STACKTOP = sp;return;
}
function _fcs_is_ss_false_parent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4&255;
 $6 = (2)?($5 >> 2):($5);
 $7 = $3;
 $8 = $7&255;
 $9 = (2)?($8 >> 2):($8);
 $10 = (($9) + 1)|0;
 $11 = ($6|0)==($10|0);
 STACKTOP = sp;return ($11|0);
}
function _fcs_is_ss_suit_true($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 & 3;
 $7 = $3;
 $8 = $7&255;
 $9 = $8 & 3;
 $10 = ($6|0)==($9|0);
 STACKTOP = sp;return ($10|0);
}
function _fc_solve_sfs_simple_simon_move_sequence_to_true_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy1 = sp + 96|0;
 $$byval_copy = sp + 88|0;
 $8 = sp + 56|0;
 $11 = sp + 112|0;
 $20 = sp + 106|0;
 $3 = $0;
 $4 = $2;
 $28 = $3;
 $29 = HEAP32[$28>>2]|0;
 $5 = $29;
 $30 = $5;
 $31 = ((($30)) + 40|0);
 $6 = $31;
 $7 = 0;
 $32 = $5;
 $33 = HEAP32[$32>>2]|0;
 $9 = $33;
 $34 = $5;
 $35 = ((($34)) + 48|0);
 $10 = $35;
 $36 = $9;
 ;HEAP8[$11>>0]=HEAP8[$36>>0]|0;HEAP8[$11+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$36+3>>0]|0;
 $37 = $3;
 $38 = ((($37)) + 523|0);
 $39 = HEAP8[$38>>0]|0;
 $12 = $39;
 $40 = $3;
 $41 = (_fc_solve_calc_positions_by_rank_location_340($40)|0);
 $13 = $41;
 $14 = 0;
 while(1) {
  $42 = $14;
  $43 = ((($11)) + 1|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = ($42|0)<($45|0);
  if (!($46)) {
   break;
  }
  $47 = HEAP32[$1>>2]|0;
  $48 = $14;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $15 = $50;
  $51 = $15;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $16 = $53;
  $54 = $16;
  $55 = ($54|0)<(1);
  L4: do {
   if (!($55)) {
    $56 = $15;
    $57 = $16;
    $58 = (($57) - 1)|0;
    $59 = (($58) + 1)|0;
    $60 = (($56) + ($59)|0);
    $61 = HEAP8[$60>>0]|0;
    $17 = $61;
    $18 = 1;
    $62 = $16;
    $63 = (($62) - 2)|0;
    $19 = $63;
    while(1) {
     $64 = $19;
     $65 = ($64|0)>=(-1);
     if (!($65)) {
      break L4;
     }
     $66 = $17;
     $67 = (_fcs_card_is_king_341($66)|0);
     if (!($67)) {
      $68 = $13;
      $69 = $17;
      $70 = $69&255;
      $71 = $70 & 3;
      $72 = ($71*14)|0;
      $73 = $17;
      $74 = $73&255;
      $75 = (2)?($74 >> 2):($74);
      $76 = (($75) + 1)|0;
      $77 = (($72) + ($76))|0;
      $78 = (($68) + ($77<<1)|0);
      ;HEAP8[$20>>0]=HEAP8[$78>>0]|0;HEAP8[$20+1>>0]=HEAP8[$78+1>>0]|0;
      $79 = HEAP8[$20>>0]|0;
      $80 = $79 << 24 >> 24;
      $21 = $80;
      $81 = $21;
      $82 = $14;
      $83 = ($81|0)!=($82|0);
      if ($83) {
       $84 = ((($20)) + 1|0);
       $85 = HEAP8[$84>>0]|0;
       $86 = $85 << 24 >> 24;
       $22 = $86;
       $87 = HEAP32[$1>>2]|0;
       $88 = $21;
       $89 = (($87) + ($88<<2)|0);
       $90 = HEAP32[$89>>2]|0;
       $23 = $90;
       $91 = $23;
       $92 = HEAP8[$91>>0]|0;
       $93 = $92&255;
       $24 = $93;
       $94 = $22;
       $95 = $24;
       $96 = (($95) - 1)|0;
       $97 = ($94|0)==($96|0);
       if ($97) {
        $98 = $5;
        $99 = $6;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
        (_fc_solve_sfs_check_state_begin($98,$8,$$byval_copy,$99)|0);
        $100 = ((($8)) + 4|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ((($101)) + 24|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = $14;
        $105 = 1 << $104;
        $106 = $103 & $105;
        $107 = ($106|0)!=(0);
        if (!($107)) {
         $108 = $14;
         $109 = 1 << $108;
         $110 = ((($8)) + 4|0);
         $111 = HEAP32[$110>>2]|0;
         $112 = ((($111)) + 24|0);
         $113 = HEAP32[$112>>2]|0;
         $114 = $113 | $109;
         HEAP32[$112>>2] = $114;
         $115 = HEAP32[$8>>2]|0;
         $116 = $14;
         $117 = (($115) + ($116<<2)|0);
         $118 = HEAP32[$117>>2]|0;
         $25 = $118;
         $119 = $10;
         $120 = $14;
         $121 = $120 << 7;
         $122 = (($119) + ($121)|0);
         $123 = $25;
         $124 = $25;
         $125 = HEAP8[$124>>0]|0;
         $126 = $125&255;
         $127 = (($126) + 1)|0;
         _memcpy(($122|0),($123|0),($127|0))|0;
         $128 = $10;
         $129 = $14;
         $130 = $129 << 7;
         $131 = (($128) + ($130)|0);
         $132 = HEAP32[$8>>2]|0;
         $133 = $14;
         $134 = (($132) + ($133<<2)|0);
         HEAP32[$134>>2] = $131;
        }
        $135 = ((($8)) + 4|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ((($136)) + 24|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = $21;
        $140 = 1 << $139;
        $141 = $138 & $140;
        $142 = ($141|0)!=(0);
        if (!($142)) {
         $143 = $21;
         $144 = 1 << $143;
         $145 = ((($8)) + 4|0);
         $146 = HEAP32[$145>>2]|0;
         $147 = ((($146)) + 24|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = $148 | $144;
         HEAP32[$147>>2] = $149;
         $150 = HEAP32[$8>>2]|0;
         $151 = $21;
         $152 = (($150) + ($151<<2)|0);
         $153 = HEAP32[$152>>2]|0;
         $26 = $153;
         $154 = $10;
         $155 = $21;
         $156 = $155 << 7;
         $157 = (($154) + ($156)|0);
         $158 = $26;
         $159 = $26;
         $160 = HEAP8[$159>>0]|0;
         $161 = $160&255;
         $162 = (($161) + 1)|0;
         _memcpy(($157|0),($158|0),($162|0))|0;
         $163 = $10;
         $164 = $21;
         $165 = $164 << 7;
         $166 = (($163) + ($165)|0);
         $167 = HEAP32[$8>>2]|0;
         $168 = $21;
         $169 = (($167) + ($168<<2)|0);
         HEAP32[$169>>2] = $166;
        }
        $170 = HEAP32[$8>>2]|0;
        $171 = $6;
        $172 = $21;
        $173 = $14;
        $174 = $16;
        $175 = $19;
        $176 = (($174) - ($175))|0;
        $177 = (($176) - 1)|0;
        _fc_solve_move_sequence_function_342($170,$171,$172,$173,$177);
        $178 = $4;
        $179 = $3;
        $180 = $6;
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
        $181 = (_fc_solve_sfs_check_state_end($179,$$byval_copy1,$8,$180)|0);
        $182 = $7;
        _fc_solve_derived_states_list_add_state($178,$181,$182);
       }
      }
     }
     $183 = $19;
     $184 = ($183|0)==(-1);
     if ($184) {
      break L4;
     }
     $185 = $17;
     $27 = $185;
     $186 = $15;
     $187 = $19;
     $188 = (($187) + 1)|0;
     $189 = (($186) + ($188)|0);
     $190 = HEAP8[$189>>0]|0;
     $17 = $190;
     $191 = $17;
     $192 = $27;
     $193 = (_fcs_is_ss_false_parent($191,$192)|0);
     if (!($193)) {
      break L4;
     }
     $194 = $17;
     $195 = $27;
     $196 = (_fcs_is_ss_suit_true($194,$195)|0);
     if (!($196)) {
      $197 = $18;
      $198 = (($197) + 1)|0;
      $18 = $198;
      $199 = $12;
      $200 = $199&255;
      $201 = (_calc_max_simple_simon_seq_move($200)|0);
      $202 = $18;
      $203 = ($201>>>0)<($202>>>0);
      if ($203) {
       break L4;
      }
     }
     $204 = $19;
     $205 = (($204) + -1)|0;
     $19 = $205;
    }
   }
  } while(0);
  $206 = $14;
  $207 = (($206) + 1)|0;
  $14 = $207;
 }
 STACKTOP = sp;return;
}
function _fc_solve_calc_positions_by_rank_location_340($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 $7 = $2;
 $8 = ((($7)) + 24|0);
 if ($6) {
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 24|0);
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($10) + (($14*244)|0)|0);
  $16 = ((($15)) + 32|0);
  $1 = $16;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $17 = ((($8)) + 32|0);
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _fcs_card_is_king_341($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (4128 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 STACKTOP = sp;return ($6|0);
}
function _fc_solve_move_sequence_function_342($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $7;
 $12 = (($10) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = $8;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $9;
 _fcs_col_transfer_cards_343($13,$17,$18);
 $19 = $6;
 $20 = $8;
 $21 = $7;
 $22 = $9;
 _fcs_move_stack_params_push_338($19,0,$20,$21,$22);
 STACKTOP = sp;return;
}
function _calc_max_simple_simon_seq_move($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)<(0);
 $4 = $1;
 $5 = 1 << $4;
 $6 = $3 ? 0 : $5;
 STACKTOP = sp;return ($6|0);
}
function _fcs_col_transfer_cards_343($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = $5;
 $10 = $4;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = (($12) - ($9))|0;
 $14 = $13&255;
 HEAP8[$10>>0] = $14;
 $15 = $14&255;
 $16 = (($15) + 1)|0;
 $17 = (($8) + ($16)|0);
 $6 = $17;
 $18 = $5;
 $19 = $18;
 $7 = $19;
 $20 = $3;
 $21 = $3;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = (($23) + 1)|0;
 $25 = (($20) + ($24)|0);
 $26 = $6;
 $27 = $7;
 _memcpy(($25|0),($26|0),($27|0))|0;
 $28 = $5;
 $29 = $3;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (($31) + ($28))|0;
 $33 = $32&255;
 HEAP8[$29>>0] = $33;
 $34 = $6;
 $35 = $7;
 _memset(($34|0),0,($35|0))|0;
 STACKTOP = sp;return;
}
function _fc_solve_sfs_simple_simon_move_whole_stack_sequence_to_false_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy1 = sp + 88|0;
 $$byval_copy = sp + 80|0;
 $8 = sp + 48|0;
 $11 = sp + 100|0;
 $17 = sp + 20|0;
 $3 = $0;
 $4 = $2;
 $25 = $3;
 $26 = HEAP32[$25>>2]|0;
 $5 = $26;
 $27 = $5;
 $28 = ((($27)) + 40|0);
 $6 = $28;
 $7 = 0;
 $29 = $5;
 $30 = HEAP32[$29>>2]|0;
 $9 = $30;
 $31 = $5;
 $32 = ((($31)) + 48|0);
 $10 = $32;
 $33 = $9;
 ;HEAP8[$11>>0]=HEAP8[$33>>0]|0;HEAP8[$11+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$33+3>>0]|0;
 $34 = $3;
 $35 = ((($34)) + 523|0);
 $36 = HEAP8[$35>>0]|0;
 $12 = $36;
 $37 = $12;
 $38 = $37&255;
 $39 = (_calc_max_simple_simon_seq_move($38)|0);
 $13 = $39;
 $14 = 0;
 while(1) {
  $40 = $14;
  $41 = ((($11)) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($40|0)<($43|0);
  if (!($44)) {
   break;
  }
  $45 = HEAP32[$1>>2]|0;
  $46 = $14;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $15 = $48;
  $49 = $15;
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $16 = $51;
  $52 = $16;
  $53 = ($52|0)<(1);
  L4: do {
   if (!($53)) {
    $54 = $15;
    $55 = (_get_seq_h($54,$17)|0);
    $56 = ($55|0)>(0);
    if (!($56)) {
     $57 = $13;
     $58 = HEAP32[$17>>2]|0;
     $59 = ($57>>>0)<($58>>>0);
     if (!($59)) {
      $60 = $15;
      $61 = ((($60)) + 1|0);
      $62 = HEAP8[$61>>0]|0;
      $18 = $62;
      $19 = 0;
      while(1) {
       $63 = $19;
       $64 = ((($11)) + 1|0);
       $65 = HEAP8[$64>>0]|0;
       $66 = $65&255;
       $67 = ($63|0)<($66|0);
       if (!($67)) {
        break L4;
       }
       $68 = $19;
       $69 = $14;
       $70 = ($68|0)==($69|0);
       if (!($70)) {
        $71 = HEAP32[$1>>2]|0;
        $72 = $19;
        $73 = (($71) + ($72<<2)|0);
        $74 = HEAP32[$73>>2]|0;
        $20 = $74;
        $75 = $20;
        $76 = HEAP8[$75>>0]|0;
        $77 = $76&255;
        $21 = $77;
        $78 = $21;
        $79 = ($78|0)<(1);
        if (!($79)) {
         $80 = $20;
         $81 = $21;
         $82 = (($81) - 1)|0;
         $83 = (($82) + 1)|0;
         $84 = (($80) + ($83)|0);
         $85 = HEAP8[$84>>0]|0;
         $22 = $85;
         $86 = $22;
         $87 = $18;
         $88 = (_fcs_is_ss_false_parent($86,$87)|0);
         if ($88) {
          $89 = $5;
          $90 = $6;
          ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
          (_fc_solve_sfs_check_state_begin($89,$8,$$byval_copy,$90)|0);
          $91 = ((($8)) + 4|0);
          $92 = HEAP32[$91>>2]|0;
          $93 = ((($92)) + 24|0);
          $94 = HEAP32[$93>>2]|0;
          $95 = $14;
          $96 = 1 << $95;
          $97 = $94 & $96;
          $98 = ($97|0)!=(0);
          if (!($98)) {
           $99 = $14;
           $100 = 1 << $99;
           $101 = ((($8)) + 4|0);
           $102 = HEAP32[$101>>2]|0;
           $103 = ((($102)) + 24|0);
           $104 = HEAP32[$103>>2]|0;
           $105 = $104 | $100;
           HEAP32[$103>>2] = $105;
           $106 = HEAP32[$8>>2]|0;
           $107 = $14;
           $108 = (($106) + ($107<<2)|0);
           $109 = HEAP32[$108>>2]|0;
           $23 = $109;
           $110 = $10;
           $111 = $14;
           $112 = $111 << 7;
           $113 = (($110) + ($112)|0);
           $114 = $23;
           $115 = $23;
           $116 = HEAP8[$115>>0]|0;
           $117 = $116&255;
           $118 = (($117) + 1)|0;
           _memcpy(($113|0),($114|0),($118|0))|0;
           $119 = $10;
           $120 = $14;
           $121 = $120 << 7;
           $122 = (($119) + ($121)|0);
           $123 = HEAP32[$8>>2]|0;
           $124 = $14;
           $125 = (($123) + ($124<<2)|0);
           HEAP32[$125>>2] = $122;
          }
          $126 = ((($8)) + 4|0);
          $127 = HEAP32[$126>>2]|0;
          $128 = ((($127)) + 24|0);
          $129 = HEAP32[$128>>2]|0;
          $130 = $19;
          $131 = 1 << $130;
          $132 = $129 & $131;
          $133 = ($132|0)!=(0);
          if (!($133)) {
           $134 = $19;
           $135 = 1 << $134;
           $136 = ((($8)) + 4|0);
           $137 = HEAP32[$136>>2]|0;
           $138 = ((($137)) + 24|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = $139 | $135;
           HEAP32[$138>>2] = $140;
           $141 = HEAP32[$8>>2]|0;
           $142 = $19;
           $143 = (($141) + ($142<<2)|0);
           $144 = HEAP32[$143>>2]|0;
           $24 = $144;
           $145 = $10;
           $146 = $19;
           $147 = $146 << 7;
           $148 = (($145) + ($147)|0);
           $149 = $24;
           $150 = $24;
           $151 = HEAP8[$150>>0]|0;
           $152 = $151&255;
           $153 = (($152) + 1)|0;
           _memcpy(($148|0),($149|0),($153|0))|0;
           $154 = $10;
           $155 = $19;
           $156 = $155 << 7;
           $157 = (($154) + ($156)|0);
           $158 = HEAP32[$8>>2]|0;
           $159 = $19;
           $160 = (($158) + ($159<<2)|0);
           HEAP32[$160>>2] = $157;
          }
          $161 = HEAP32[$8>>2]|0;
          $162 = $6;
          $163 = $19;
          $164 = $14;
          $165 = $16;
          $166 = (($165) - 0)|0;
          _fc_solve_move_sequence_function_342($161,$162,$163,$164,$166);
          $167 = $4;
          $168 = $3;
          $169 = $6;
          ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
          $170 = (_fc_solve_sfs_check_state_end($168,$$byval_copy1,$8,$169)|0);
          $171 = $7;
          _fc_solve_derived_states_list_add_state($167,$170,$171);
         }
        }
       }
       $172 = $19;
       $173 = (($172) + 1)|0;
       $19 = $173;
      }
     }
    }
   }
  } while(0);
  $174 = $14;
  $175 = (($174) + 1)|0;
  $14 = $175;
 }
 STACKTOP = sp;return;
}
function _get_seq_h($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $4 = $11;
 $12 = $2;
 $13 = $4;
 $14 = (($13) - 1)|0;
 $15 = (($14) + 1)|0;
 $16 = (($12) + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $5 = $17;
 $6 = 1;
 $18 = $4;
 $19 = (($18) - 2)|0;
 $7 = $19;
 while(1) {
  $20 = $7;
  $21 = ($20|0)>(-1);
  if (!($21)) {
   label = 7;
   break;
  }
  $22 = $2;
  $23 = $7;
  $24 = (($23) + 1)|0;
  $25 = (($22) + ($24)|0);
  $26 = HEAP8[$25>>0]|0;
  $8 = $26;
  $27 = $8;
  $28 = $5;
  $29 = (_fcs_is_ss_false_parent($27,$28)|0);
  if (!($29)) {
   label = 7;
   break;
  }
  $30 = $8;
  $31 = $5;
  $32 = (_fcs_is_ss_suit_true($30,$31)|0);
  if (!($32)) {
   $33 = $6;
   $34 = (($33) + 1)|0;
   $6 = $34;
  }
  $35 = $8;
  $5 = $35;
  $36 = $7;
  $37 = (($36) + -1)|0;
  $7 = $37;
 }
 if ((label|0) == 7) {
  $38 = $6;
  $39 = $3;
  HEAP32[$39>>2] = $38;
  $40 = $7;
  $41 = (($40) + 1)|0;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _fc_solve_sfs_simple_simon_move_sequence_to_true_parent_with_some_cards_above($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy2 = sp + 312|0;
 $$byval_copy1 = sp + 304|0;
 $$byval_copy = sp + 296|0;
 $8 = sp + 264|0;
 $11 = sp + 332|0;
 $24 = sp + 322|0;
 $29 = sp + 8|0;
 $3 = $0;
 $4 = $2;
 $33 = $3;
 $34 = HEAP32[$33>>2]|0;
 $5 = $34;
 $35 = $5;
 $36 = ((($35)) + 40|0);
 $6 = $36;
 $7 = 0;
 $37 = $5;
 $38 = HEAP32[$37>>2]|0;
 $9 = $38;
 $39 = $5;
 $40 = ((($39)) + 48|0);
 $10 = $40;
 $41 = $9;
 ;HEAP8[$11>>0]=HEAP8[$41>>0]|0;HEAP8[$11+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$41+3>>0]|0;
 $42 = $3;
 $43 = ((($42)) + 523|0);
 $44 = HEAP8[$43>>0]|0;
 $12 = $44;
 $45 = $3;
 $46 = (_fc_solve_calc_positions_by_rank_location_340($45)|0);
 $13 = $46;
 $14 = 0;
 while(1) {
  $47 = $14;
  $48 = ((($11)) + 1|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = ($47|0)<($50|0);
  if (!($51)) {
   break;
  }
  $52 = HEAP32[$1>>2]|0;
  $53 = $14;
  $54 = (($52) + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $15 = $55;
  $56 = $15;
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $16 = $58;
  $59 = $16;
  $60 = ($59|0)<(1);
  L4: do {
   if (!($60)) {
    $17 = 1;
    $61 = $16;
    $62 = (($61) - 2)|0;
    $18 = $62;
    while(1) {
     $63 = $18;
     $64 = ($63|0)>=(-1);
     if (!($64)) {
      break L4;
     }
     $65 = $15;
     $66 = $18;
     $67 = (($66) + 1)|0;
     $68 = (($67) + 1)|0;
     $69 = (($65) + ($68)|0);
     $70 = HEAP8[$69>>0]|0;
     $19 = $70;
     $20 = 1;
     $21 = 0;
     $71 = $18;
     $72 = ($71|0)==(-1);
     $73 = $72&1;
     $22 = $73;
     do {
      if (!($72)) {
       $74 = $15;
       $75 = $18;
       $76 = (($75) + 1)|0;
       $77 = (($74) + ($76)|0);
       $78 = HEAP8[$77>>0]|0;
       $23 = $78;
       $79 = $23;
       $80 = $19;
       $81 = (_fcs_is_ss_false_parent($79,$80)|0);
       if (!($81)) {
        $22 = 1;
        break;
       }
       $82 = $23;
       $83 = $19;
       $84 = (_fcs_is_ss_suit_true($82,$83)|0);
       $85 = $84 ^ 1;
       $86 = $85&1;
       $20 = $86;
       if ($85) {
        $21 = 1;
       }
      }
     } while(0);
     $87 = $20;
     $88 = $87&1;
     if ($88) {
      $89 = $19;
      $90 = (_fcs_card_is_king_341($89)|0);
      if (!($90)) {
       $91 = $13;
       $92 = $19;
       $93 = $92&255;
       $94 = $93 & 3;
       $95 = ($94*14)|0;
       $96 = $19;
       $97 = $96&255;
       $98 = (2)?($97 >> 2):($97);
       $99 = (($98) + 1)|0;
       $100 = (($95) + ($99))|0;
       $101 = (($91) + ($100<<1)|0);
       ;HEAP8[$24>>0]=HEAP8[$101>>0]|0;HEAP8[$24+1>>0]=HEAP8[$101+1>>0]|0;
       $102 = HEAP8[$24>>0]|0;
       $103 = $102 << 24 >> 24;
       $25 = $103;
       $104 = $25;
       $105 = $14;
       $106 = ($104|0)!=($105|0);
       if ($106) {
        $107 = ((($24)) + 1|0);
        $108 = HEAP8[$107>>0]|0;
        $109 = $108 << 24 >> 24;
        $26 = $109;
        $110 = HEAP32[$1>>2]|0;
        $111 = $25;
        $112 = (($110) + ($111<<2)|0);
        $113 = HEAP32[$112>>2]|0;
        $27 = $113;
        $114 = $27;
        $115 = HEAP8[$114>>0]|0;
        $116 = $115&255;
        $28 = $116;
        $117 = $27;
        $118 = $26;
        _populate_seq_points($117,$118,$29);
        $119 = ((($11)) + 1|0);
        $120 = HEAP8[$119>>0]|0;
        $121 = $120&255;
        $122 = $12;
        $123 = $122&255;
        $124 = $27;
        $125 = $14;
        $126 = $25;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
        $127 = (_false_seq_index_loop($121,$$byval_copy,$123,$124,$29,$125,$126,0)|0);
        $128 = $127&1;
        $30 = $128;
        $129 = $30;
        $130 = $129&1;
        if ($130) {
         $131 = ((($29)) + 124|0);
         $132 = HEAP32[$131>>2]|0;
         $133 = (_calc_max_simple_simon_seq_move($132)|0);
         $134 = $17;
         $135 = ($133>>>0)>=($134>>>0);
         if ($135) {
          $136 = $5;
          $137 = $6;
          ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
          (_fc_solve_sfs_check_state_begin($136,$8,$$byval_copy1,$137)|0);
          $138 = ((($8)) + 4|0);
          $139 = HEAP32[$138>>2]|0;
          $140 = ((($139)) + 24|0);
          $141 = HEAP32[$140>>2]|0;
          $142 = $14;
          $143 = 1 << $142;
          $144 = $141 & $143;
          $145 = ($144|0)!=(0);
          if (!($145)) {
           $146 = $14;
           $147 = 1 << $146;
           $148 = ((($8)) + 4|0);
           $149 = HEAP32[$148>>2]|0;
           $150 = ((($149)) + 24|0);
           $151 = HEAP32[$150>>2]|0;
           $152 = $151 | $147;
           HEAP32[$150>>2] = $152;
           $153 = HEAP32[$8>>2]|0;
           $154 = $14;
           $155 = (($153) + ($154<<2)|0);
           $156 = HEAP32[$155>>2]|0;
           $31 = $156;
           $157 = $10;
           $158 = $14;
           $159 = $158 << 7;
           $160 = (($157) + ($159)|0);
           $161 = $31;
           $162 = $31;
           $163 = HEAP8[$162>>0]|0;
           $164 = $163&255;
           $165 = (($164) + 1)|0;
           _memcpy(($160|0),($161|0),($165|0))|0;
           $166 = $10;
           $167 = $14;
           $168 = $167 << 7;
           $169 = (($166) + ($168)|0);
           $170 = HEAP32[$8>>2]|0;
           $171 = $14;
           $172 = (($170) + ($171<<2)|0);
           HEAP32[$172>>2] = $169;
          }
          $173 = ((($8)) + 4|0);
          $174 = HEAP32[$173>>2]|0;
          $175 = ((($174)) + 24|0);
          $176 = HEAP32[$175>>2]|0;
          $177 = $25;
          $178 = 1 << $177;
          $179 = $176 & $178;
          $180 = ($179|0)!=(0);
          if (!($180)) {
           $181 = $25;
           $182 = 1 << $181;
           $183 = ((($8)) + 4|0);
           $184 = HEAP32[$183>>2]|0;
           $185 = ((($184)) + 24|0);
           $186 = HEAP32[$185>>2]|0;
           $187 = $186 | $182;
           HEAP32[$185>>2] = $187;
           $188 = HEAP32[$8>>2]|0;
           $189 = $25;
           $190 = (($188) + ($189<<2)|0);
           $191 = HEAP32[$190>>2]|0;
           $32 = $191;
           $192 = $10;
           $193 = $25;
           $194 = $193 << 7;
           $195 = (($192) + ($194)|0);
           $196 = $32;
           $197 = $32;
           $198 = HEAP8[$197>>0]|0;
           $199 = $198&255;
           $200 = (($199) + 1)|0;
           _memcpy(($195|0),($196|0),($200|0))|0;
           $201 = $10;
           $202 = $25;
           $203 = $202 << 7;
           $204 = (($201) + ($203)|0);
           $205 = HEAP32[$8>>2]|0;
           $206 = $25;
           $207 = (($205) + ($206<<2)|0);
           HEAP32[$207>>2] = $204;
          }
          $208 = $6;
          $209 = $25;
          $210 = $28;
          $211 = $10;
          _move_sequences_analysis_seqs_loop($8,$208,$29,$209,$210,$211);
          $212 = HEAP32[$8>>2]|0;
          $213 = $6;
          $214 = $25;
          $215 = $14;
          $216 = $16;
          $217 = $18;
          $218 = (($216) - ($217))|0;
          $219 = (($218) - 1)|0;
          _fc_solve_move_sequence_function_342($212,$213,$214,$215,$219);
          $220 = $4;
          $221 = $3;
          $222 = $6;
          ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
          $223 = (_fc_solve_sfs_check_state_end($221,$$byval_copy2,$8,$222)|0);
          $224 = $7;
          _fc_solve_derived_states_list_add_state($220,$223,$224);
         }
        }
       }
      }
     }
     $225 = $22;
     $226 = $225&1;
     if ($226) {
      break L4;
     }
     $227 = $21;
     $228 = $227&1;
     if ($228) {
      $229 = $17;
      $230 = (($229) + 1)|0;
      $17 = $230;
     }
     $231 = $18;
     $232 = (($231) + -1)|0;
     $18 = $232;
    }
   }
  } while(0);
  $233 = $14;
  $234 = (($233) + 1)|0;
  $14 = $234;
 }
 STACKTOP = sp;return;
}
function _populate_seq_points($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $3;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 _generic_populate_seq_points($7,$8,$9,$12);
 STACKTOP = sp;return;
}
function _false_seq_index_loop($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 24|0;
 $8 = $0;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = $7&1;
 $14 = $15;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = $22&1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
 $24 = (_generic_false_seq_index_loop($16,$$byval_copy,$17,$18,$19,$20,$21,$23,0,0,0)|0);
 STACKTOP = sp;return ($24|0);
}
function _move_sequences_analysis_seqs_loop($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $15 = $12;
  $16 = $8;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $8;
  $20 = ((($19)) + 84|0);
  $21 = $12;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $13 = $23;
  $24 = $6;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $13;
  $30 = 1 << $29;
  $31 = $28 & $30;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   $33 = $13;
   $34 = 1 << $33;
   $35 = $6;
   $36 = ((($35)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 24|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39 | $34;
   HEAP32[$38>>2] = $40;
   $41 = $6;
   $42 = HEAP32[$41>>2]|0;
   $43 = $13;
   $44 = (($42) + ($43<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $14 = $45;
   $46 = $11;
   $47 = $13;
   $48 = $47 << 7;
   $49 = (($46) + ($48)|0);
   $50 = $14;
   $51 = $14;
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = (($53) + 1)|0;
   _memcpy(($49|0),($50|0),($54|0))|0;
   $55 = $11;
   $56 = $13;
   $57 = $56 << 7;
   $58 = (($55) + ($57)|0);
   $59 = $6;
   $60 = HEAP32[$59>>2]|0;
   $61 = $13;
   $62 = (($60) + ($61<<2)|0);
   HEAP32[$62>>2] = $58;
  }
  $63 = $6;
  $64 = HEAP32[$63>>2]|0;
  $65 = $7;
  $66 = $13;
  $67 = $9;
  $68 = $12;
  $69 = ($68|0)==(0);
  if ($69) {
   $70 = $10;
   $83 = $70;
  } else {
   $71 = $8;
   $72 = ((($71)) + 4|0);
   $73 = $12;
   $74 = (($73) - 1)|0;
   $75 = (($72) + ($74<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $83 = $76;
  }
  $77 = $8;
  $78 = ((($77)) + 4|0);
  $79 = $12;
  $80 = (($78) + ($79<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($83) - ($81))|0;
  _fc_solve_move_sequence_function_342($64,$65,$66,$67,$82);
  $84 = $12;
  $85 = (($84) + 1)|0;
  $12 = $85;
 }
 STACKTOP = sp;return;
}
function _generic_false_seq_index_loop($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$not = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $22 = sp + 62|0;
 $11 = $0;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $32 = $7&1;
 $17 = $32;
 $33 = $8&1;
 $18 = $33;
 $19 = $9;
 $20 = $10;
 $34 = $14;
 $35 = HEAP32[$34>>2]|0;
 $21 = $35;
 $36 = $15;
 $37 = $16;
 _init_stacks_map($22,$36,$37);
 $38 = $12;
 $23 = $38;
 $39 = $21;
 $40 = $18;
 $41 = $40&1;
 $42 = $41 ? 1 : 0;
 $43 = (($39) + ($42))|0;
 $24 = $43;
 $25 = 0;
 L1: while(1) {
  $44 = $25;
  $45 = $24;
  $46 = ($44>>>0)<($45>>>0);
  if (!($46)) {
   label = 23;
   break;
  }
  $47 = $25;
  $48 = $21;
  $49 = ($47|0)==($48|0);
  $50 = $49&1;
  $26 = $50;
  $51 = $26;
  $52 = $51&1;
  if ($52) {
   $53 = $19;
   $54 = $53&255;
   $66 = $54;
  } else {
   $55 = $13;
   $56 = $14;
   $57 = ((($56)) + 4|0);
   $58 = $25;
   $59 = (($57) + ($58<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1)|0;
   $62 = (($55) + ($61)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $66 = $64;
  }
  $65 = $66&255;
  $27 = $65;
  $67 = $26;
  $68 = $67&1;
  if ($68) {
   $69 = $20;
   $75 = $69;
  } else {
   $70 = $14;
   $71 = ((($70)) + 128|0);
   $72 = $25;
   $73 = (($71) + ($72<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74;
  }
  $28 = $75;
  $29 = 0;
  while(1) {
   $76 = $29;
   $77 = $11;
   $78 = ($76|0)<($77|0);
   if (!($78)) {
    label = 16;
    break;
   }
   $79 = HEAP32[$1>>2]|0;
   $80 = $29;
   $81 = (($79) + ($80<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   $30 = $82;
   $83 = $30;
   $84 = HEAP8[$83>>0]|0;
   $85 = $84&255;
   $31 = $85;
   $86 = $31;
   $87 = ($86|0)>(0);
   if ($87) {
    $88 = $29;
    $89 = (($22) + ($88)|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90&1;
    if (!($91)) {
     $92 = $30;
     $93 = $31;
     $94 = (($93) - 1)|0;
     $95 = (($94) + 1)|0;
     $96 = (($92) + ($95)|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = $27;
     $99 = (_fcs_is_ss_false_parent($97,$98)|0);
     if ($99) {
      $100 = $23;
      $101 = (_calc_max_simple_simon_seq_move($100)|0);
      $102 = $28;
      $103 = ($101>>>0)>=($102>>>0);
      if ($103) {
       break;
      }
     }
    }
   }
   $104 = $29;
   $105 = (($104) + 1)|0;
   $29 = $105;
  }
  L20: do {
   if ((label|0) == 16) {
    label = 0;
    $106 = $17;
    $107 = $106&1;
    $$not = $107 ^ 1;
    $108 = $12;
    $109 = ($108|0)>(0);
    $or$cond = $$not & $109;
    if (!($or$cond)) {
     label = 23;
     break L1;
    }
    $110 = $23;
    $111 = (($110) - 1)|0;
    $112 = (_calc_max_simple_simon_seq_move($111)|0);
    $113 = $28;
    $114 = ($112>>>0)>=($113>>>0);
    if (!($114)) {
     label = 23;
     break L1;
    }
    $115 = $23;
    $116 = (($115) + -1)|0;
    $23 = $116;
    $29 = 0;
    while(1) {
     $117 = HEAP32[$1>>2]|0;
     $118 = $29;
     $119 = (($117) + ($118<<2)|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = HEAP8[$120>>0]|0;
     $122 = $121&255;
     $123 = ($122|0)==(0);
     if ($123) {
      $124 = $29;
      $125 = (($22) + ($124)|0);
      $126 = HEAP8[$125>>0]|0;
      $127 = $126&1;
      if (!($127)) {
       break L20;
      }
     }
     $128 = $29;
     $129 = (($128) + 1)|0;
     $29 = $129;
    }
   }
  } while(0);
  $130 = $29;
  $131 = (($22) + ($130)|0);
  HEAP8[$131>>0] = 1;
  $132 = $29;
  $133 = $14;
  $134 = ((($133)) + 84|0);
  $135 = $25;
  $136 = (($134) + ($135<<2)|0);
  HEAP32[$136>>2] = $132;
  $137 = $25;
  $138 = (($137) + 1)|0;
  $25 = $138;
 }
 if ((label|0) == 23) {
  $139 = $23;
  $140 = $14;
  $141 = ((($140)) + 124|0);
  HEAP32[$141>>2] = $139;
  $142 = $25;
  $143 = $24;
  $144 = ($142|0)==($143|0);
  STACKTOP = sp;return ($144|0);
 }
 return (0)|0;
}
function _init_stacks_map($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = ($7|0)<(10);
  $9 = $3;
  if (!($8)) {
   break;
  }
  $10 = $6;
  $11 = (($9) + ($10)|0);
  HEAP8[$11>>0] = 0;
  $12 = $6;
  $13 = (($12) + 1)|0;
  $6 = $13;
 }
 $14 = $5;
 $15 = (($9) + ($14)|0);
 HEAP8[$15>>0] = 1;
 $16 = $3;
 $17 = $4;
 $18 = (($16) + ($17)|0);
 HEAP8[$18>>0] = 1;
 STACKTOP = sp;return;
}
function _generic_populate_seq_points($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $12 = $6;
 $13 = HEAP32[$12>>2]|0;
 $8 = $13;
 $14 = $6;
 $15 = ((($14)) + 128|0);
 $16 = $8;
 $17 = (($15) + ($16<<2)|0);
 HEAP32[$17>>2] = 1;
 $18 = $4;
 $19 = $7;
 $20 = (($19) - 1)|0;
 $21 = (($20) + 1)|0;
 $22 = (($18) + ($21)|0);
 $23 = HEAP8[$22>>0]|0;
 $9 = $23;
 $24 = $7;
 $25 = (($24) - 2)|0;
 $10 = $25;
 while(1) {
  $26 = $10;
  $27 = $5;
  $28 = ($26|0)>($27|0);
  if (!($28)) {
   break;
  }
  $29 = $4;
  $30 = $10;
  $31 = (($30) + 1)|0;
  $32 = (($29) + ($31)|0);
  $33 = HEAP8[$32>>0]|0;
  $11 = $33;
  $34 = $11;
  $35 = $9;
  $36 = (_fcs_is_ss_false_parent($34,$35)|0);
  if (!($36)) {
   $37 = $10;
   $38 = (($37) + 1)|0;
   $39 = $6;
   $40 = ((($39)) + 4|0);
   $41 = $8;
   $42 = (($41) + 1)|0;
   $8 = $42;
   $43 = (($40) + ($41<<2)|0);
   HEAP32[$43>>2] = $38;
   $44 = $6;
   $45 = ((($44)) + 128|0);
   $46 = $8;
   $47 = (($45) + ($46<<2)|0);
   HEAP32[$47>>2] = 1;
  }
  $48 = $11;
  $49 = $9;
  $50 = (_fcs_is_ss_suit_true($48,$49)|0);
  $51 = $50 ^ 1;
  $52 = $51&1;
  $53 = $6;
  $54 = ((($53)) + 128|0);
  $55 = $8;
  $56 = (($54) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($52))|0;
  HEAP32[$56>>2] = $58;
  $59 = $11;
  $9 = $59;
  $60 = $10;
  $61 = (($60) + -1)|0;
  $10 = $61;
 }
 $62 = $5;
 $63 = $7;
 $64 = (($63) - 2)|0;
 $65 = ($62|0)<=($64|0);
 if (!($65)) {
  $73 = $8;
  $74 = $6;
  HEAP32[$74>>2] = $73;
  STACKTOP = sp;return;
 }
 $66 = $5;
 $67 = (($66) + 1)|0;
 $68 = $6;
 $69 = ((($68)) + 4|0);
 $70 = $8;
 $71 = (($70) + 1)|0;
 $8 = $71;
 $72 = (($69) + ($70<<2)|0);
 HEAP32[$72>>2] = $67;
 $73 = $8;
 $74 = $6;
 HEAP32[$74>>2] = $73;
 STACKTOP = sp;return;
}
function _fc_solve_sfs_simple_simon_move_sequence_with_some_cards_above_to_true_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy2 = sp + 320|0;
 $$byval_copy1 = sp + 312|0;
 $$byval_copy = sp + 304|0;
 $8 = sp + 272|0;
 $11 = sp + 336|0;
 $23 = sp + 330|0;
 $28 = sp + 8|0;
 $3 = $0;
 $4 = $2;
 $32 = $3;
 $33 = HEAP32[$32>>2]|0;
 $5 = $33;
 $34 = $5;
 $35 = ((($34)) + 40|0);
 $6 = $35;
 $7 = 0;
 $36 = $5;
 $37 = HEAP32[$36>>2]|0;
 $9 = $37;
 $38 = $5;
 $39 = ((($38)) + 48|0);
 $10 = $39;
 $40 = $9;
 ;HEAP8[$11>>0]=HEAP8[$40>>0]|0;HEAP8[$11+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$40+3>>0]|0;
 $41 = $3;
 $42 = ((($41)) + 523|0);
 $43 = HEAP8[$42>>0]|0;
 $12 = $43;
 $44 = $3;
 $45 = (_fc_solve_calc_positions_by_rank_location_340($44)|0);
 $13 = $45;
 $14 = 0;
 while(1) {
  $46 = $14;
  $47 = ((($11)) + 1|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = ($46|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = HEAP32[$1>>2]|0;
  $52 = $14;
  $53 = (($51) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $15 = $54;
  $55 = $15;
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $16 = $57;
  $58 = $16;
  $59 = ($58|0)<(1);
  L4: do {
   if (!($59)) {
    $60 = $16;
    $61 = (($60) - 1)|0;
    $17 = $61;
    while(1) {
     $62 = $17;
     $63 = ($62|0)>=(0);
     if (!($63)) {
      break L4;
     }
     $64 = $15;
     $65 = $17;
     $66 = (($65) + 1)|0;
     $67 = (($64) + ($66)|0);
     $68 = HEAP8[$67>>0]|0;
     $18 = $68;
     $69 = $18;
     $19 = $69;
     $20 = 1;
     $70 = $17;
     $71 = (($70) + 1)|0;
     $21 = $71;
     while(1) {
      $72 = $21;
      $73 = $16;
      $74 = ($72>>>0)<($73>>>0);
      if (!($74)) {
       break;
      }
      $75 = $15;
      $76 = $21;
      $77 = (($76) + 1)|0;
      $78 = (($75) + ($77)|0);
      $79 = HEAP8[$78>>0]|0;
      $22 = $79;
      $80 = $19;
      $81 = $22;
      $82 = (_fcs_is_ss_false_parent($80,$81)|0);
      if (!($82)) {
       label = 9;
       break;
      }
      $223 = $19;
      $224 = $22;
      $225 = (_fcs_is_ss_suit_true($223,$224)|0);
      if (!($225)) {
       $226 = $20;
       $227 = (($226) + 1)|0;
       $20 = $227;
      }
      $228 = $22;
      $19 = $228;
      $229 = $21;
      $230 = (($229) + 1)|0;
      $21 = $230;
     }
     if ((label|0) == 9) {
      label = 0;
      $83 = $18;
      $84 = (_fcs_card_is_king_341($83)|0);
      if (!($84)) {
       $85 = $13;
       $86 = $18;
       $87 = $86&255;
       $88 = $87 & 3;
       $89 = ($88*14)|0;
       $90 = $18;
       $91 = $90&255;
       $92 = (2)?($91 >> 2):($91);
       $93 = (($92) + 1)|0;
       $94 = (($89) + ($93))|0;
       $95 = (($85) + ($94<<1)|0);
       ;HEAP8[$23>>0]=HEAP8[$95>>0]|0;HEAP8[$23+1>>0]=HEAP8[$95+1>>0]|0;
       $96 = HEAP8[$23>>0]|0;
       $97 = $96 << 24 >> 24;
       $24 = $97;
       $98 = $24;
       $99 = $14;
       $100 = ($98|0)!=($99|0);
       if ($100) {
        $101 = ((($23)) + 1|0);
        $102 = HEAP8[$101>>0]|0;
        $103 = $102 << 24 >> 24;
        $25 = $103;
        $104 = HEAP32[$1>>2]|0;
        $105 = $24;
        $106 = (($104) + ($105<<2)|0);
        $107 = HEAP32[$106>>2]|0;
        $26 = $107;
        $108 = $26;
        $109 = HEAP8[$108>>0]|0;
        $110 = $109&255;
        $27 = $110;
        $111 = $25;
        $112 = $27;
        $113 = (($112) - 1)|0;
        $114 = ($111|0)==($113|0);
        if ($114) {
         $115 = $15;
         $116 = $21;
         $117 = (($116) - 1)|0;
         _populate_seq_points($115,$117,$28);
         $118 = ((($11)) + 1|0);
         $119 = HEAP8[$118>>0]|0;
         $120 = $119&255;
         $121 = $12;
         $122 = $121&255;
         $123 = $15;
         $124 = $14;
         $125 = $24;
         ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
         $126 = (_false_seq_index_loop($120,$$byval_copy,$122,$123,$28,$124,$125,0)|0);
         $127 = $126&1;
         $29 = $127;
         $128 = $29;
         $129 = $128&1;
         if ($129) {
          $130 = ((($28)) + 124|0);
          $131 = HEAP32[$130>>2]|0;
          $132 = (_calc_max_simple_simon_seq_move($131)|0);
          $133 = $20;
          $134 = ($132>>>0)>($133>>>0);
          if ($134) {
           $135 = $5;
           $136 = $6;
           ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
           (_fc_solve_sfs_check_state_begin($135,$8,$$byval_copy1,$136)|0);
           $137 = ((($8)) + 4|0);
           $138 = HEAP32[$137>>2]|0;
           $139 = ((($138)) + 24|0);
           $140 = HEAP32[$139>>2]|0;
           $141 = $14;
           $142 = 1 << $141;
           $143 = $140 & $142;
           $144 = ($143|0)!=(0);
           if (!($144)) {
            $145 = $14;
            $146 = 1 << $145;
            $147 = ((($8)) + 4|0);
            $148 = HEAP32[$147>>2]|0;
            $149 = ((($148)) + 24|0);
            $150 = HEAP32[$149>>2]|0;
            $151 = $150 | $146;
            HEAP32[$149>>2] = $151;
            $152 = HEAP32[$8>>2]|0;
            $153 = $14;
            $154 = (($152) + ($153<<2)|0);
            $155 = HEAP32[$154>>2]|0;
            $30 = $155;
            $156 = $10;
            $157 = $14;
            $158 = $157 << 7;
            $159 = (($156) + ($158)|0);
            $160 = $30;
            $161 = $30;
            $162 = HEAP8[$161>>0]|0;
            $163 = $162&255;
            $164 = (($163) + 1)|0;
            _memcpy(($159|0),($160|0),($164|0))|0;
            $165 = $10;
            $166 = $14;
            $167 = $166 << 7;
            $168 = (($165) + ($167)|0);
            $169 = HEAP32[$8>>2]|0;
            $170 = $14;
            $171 = (($169) + ($170<<2)|0);
            HEAP32[$171>>2] = $168;
           }
           $172 = ((($8)) + 4|0);
           $173 = HEAP32[$172>>2]|0;
           $174 = ((($173)) + 24|0);
           $175 = HEAP32[$174>>2]|0;
           $176 = $24;
           $177 = 1 << $176;
           $178 = $175 & $177;
           $179 = ($178|0)!=(0);
           if (!($179)) {
            $180 = $24;
            $181 = 1 << $180;
            $182 = ((($8)) + 4|0);
            $183 = HEAP32[$182>>2]|0;
            $184 = ((($183)) + 24|0);
            $185 = HEAP32[$184>>2]|0;
            $186 = $185 | $181;
            HEAP32[$184>>2] = $186;
            $187 = HEAP32[$8>>2]|0;
            $188 = $24;
            $189 = (($187) + ($188<<2)|0);
            $190 = HEAP32[$189>>2]|0;
            $31 = $190;
            $191 = $10;
            $192 = $24;
            $193 = $192 << 7;
            $194 = (($191) + ($193)|0);
            $195 = $31;
            $196 = $31;
            $197 = HEAP8[$196>>0]|0;
            $198 = $197&255;
            $199 = (($198) + 1)|0;
            _memcpy(($194|0),($195|0),($199|0))|0;
            $200 = $10;
            $201 = $24;
            $202 = $201 << 7;
            $203 = (($200) + ($202)|0);
            $204 = HEAP32[$8>>2]|0;
            $205 = $24;
            $206 = (($204) + ($205<<2)|0);
            HEAP32[$206>>2] = $203;
           }
           $207 = $6;
           $208 = $14;
           $209 = $16;
           $210 = $10;
           _move_sequences_analysis_seqs_loop($8,$207,$28,$208,$209,$210);
           $211 = HEAP32[$8>>2]|0;
           $212 = $6;
           $213 = $24;
           $214 = $14;
           $215 = $21;
           $216 = $17;
           $217 = (($215) - ($216))|0;
           _fc_solve_move_sequence_function_342($211,$212,$213,$214,$217);
           $218 = $4;
           $219 = $3;
           $220 = $6;
           ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
           $221 = (_fc_solve_sfs_check_state_end($219,$$byval_copy2,$8,$220)|0);
           $222 = $7;
           _fc_solve_derived_states_list_add_state($218,$221,$222);
          }
         }
        }
       }
      }
     }
     $231 = $17;
     $232 = (($231) + -1)|0;
     $17 = $232;
    }
   }
  } while(0);
  $233 = $14;
  $234 = (($233) + 1)|0;
  $14 = $234;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_simple_simon_move_sequence_with_junk_seq_above_to_true_parent_with_some_cards_above($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $$byval_copy2 = sp + 360|0;
 $$byval_copy1 = sp + 352|0;
 $$byval_copy = sp + 344|0;
 $8 = sp + 312|0;
 $11 = sp + 376|0;
 $17 = sp + 280|0;
 $24 = sp + 368|0;
 $29 = sp + 40|0;
 $33 = sp + 16|0;
 $3 = $0;
 $4 = $2;
 $37 = $3;
 $38 = HEAP32[$37>>2]|0;
 $5 = $38;
 $39 = $5;
 $40 = ((($39)) + 40|0);
 $6 = $40;
 $7 = 0;
 $41 = $5;
 $42 = HEAP32[$41>>2]|0;
 $9 = $42;
 $43 = $5;
 $44 = ((($43)) + 48|0);
 $10 = $44;
 $45 = $9;
 ;HEAP8[$11>>0]=HEAP8[$45>>0]|0;HEAP8[$11+1>>0]=HEAP8[$45+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$45+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$45+3>>0]|0;
 $46 = $3;
 $47 = ((($46)) + 523|0);
 $48 = HEAP8[$47>>0]|0;
 $12 = $48;
 $49 = $3;
 $50 = (_fc_solve_calc_positions_by_rank_location_340($49)|0);
 $13 = $50;
 $14 = 0;
 while(1) {
  $51 = $14;
  $52 = ((($11)) + 1|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = ($51|0)<($54|0);
  if (!($55)) {
   break;
  }
  $56 = HEAP32[$1>>2]|0;
  $57 = $14;
  $58 = (($56) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $15 = $59;
  $60 = $15;
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $16 = $62;
  $63 = $16;
  $64 = ($63|0)<(1);
  if (!($64)) {
   $65 = $15;
   $66 = (_get_seq_h($65,$17)|0);
   $18 = $66;
   $67 = $18;
   $68 = ($67|0)!=(0);
   if ($68) {
    $69 = $15;
    $70 = $18;
    $71 = (($70) + 1)|0;
    $72 = (($69) + ($71)|0);
    $73 = HEAP8[$72>>0]|0;
    $19 = $73;
    $74 = $18;
    $20 = $74;
    $75 = $18;
    $76 = (($75) + -1)|0;
    $18 = $76;
    $21 = $76;
    $22 = 1;
    while(1) {
     $77 = $18;
     $78 = ($77|0)>(-1);
     if (!($78)) {
      break;
     }
     $79 = $15;
     $80 = $18;
     $81 = (($80) + 1)|0;
     $82 = (($79) + ($81)|0);
     $83 = HEAP8[$82>>0]|0;
     $23 = $83;
     $84 = $23;
     $85 = $19;
     $86 = (_fcs_is_ss_false_parent($84,$85)|0);
     $87 = $23;
     if (!($86)) {
      label = 8;
      break;
     }
     $88 = $19;
     $89 = (_fcs_is_ss_suit_true($87,$88)|0);
     if (!($89)) {
      $90 = $22;
      $91 = (($90) + 1)|0;
      $22 = $91;
     }
     $92 = $23;
     $19 = $92;
     $93 = $18;
     $94 = (($93) + -1)|0;
     $18 = $94;
    }
    if ((label|0) == 8) {
     label = 0;
     $19 = $87;
    }
    $95 = $19;
    $96 = (_fcs_card_is_king_341($95)|0);
    if (!($96)) {
     $97 = $13;
     $98 = $19;
     $99 = $98&255;
     $100 = $99 & 3;
     $101 = ($100*14)|0;
     $102 = $19;
     $103 = $102&255;
     $104 = (2)?($103 >> 2):($103);
     $105 = (($104) + 1)|0;
     $106 = (($101) + ($105))|0;
     $107 = (($97) + ($106<<1)|0);
     ;HEAP8[$24>>0]=HEAP8[$107>>0]|0;HEAP8[$24+1>>0]=HEAP8[$107+1>>0]|0;
     $108 = HEAP8[$24>>0]|0;
     $109 = $108 << 24 >> 24;
     $25 = $109;
     $110 = $25;
     $111 = $14;
     $112 = ($110|0)!=($111|0);
     if ($112) {
      $113 = ((($24)) + 1|0);
      $114 = HEAP8[$113>>0]|0;
      $115 = $114 << 24 >> 24;
      $26 = $115;
      $116 = HEAP32[$1>>2]|0;
      $117 = $25;
      $118 = (($116) + ($117<<2)|0);
      $119 = HEAP32[$118>>2]|0;
      $27 = $119;
      $120 = $27;
      $121 = HEAP8[$120>>0]|0;
      $122 = $121&255;
      $28 = $122;
      $123 = $26;
      $124 = $28;
      $125 = (($124) - 2)|0;
      $126 = ($123|0)<=($125|0);
      if ($126) {
       $127 = $27;
       $128 = $26;
       _populate_seq_points($127,$128,$29);
       $129 = ((($11)) + 1|0);
       $130 = HEAP8[$129>>0]|0;
       $131 = $130&255;
       $132 = $12;
       $133 = $132&255;
       $134 = $27;
       $135 = $14;
       $136 = $25;
       $137 = $15;
       $138 = $20;
       $139 = (($138) + 1)|0;
       $140 = (($137) + ($139)|0);
       $141 = HEAP8[$140>>0]|0;
       $142 = HEAP32[$17>>2]|0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
       $143 = (_generic_false_seq_index_loop($131,$$byval_copy,$133,$134,$29,$135,$136,0,1,$141,$142)|0);
       if ($143) {
        $144 = ((($29)) + 124|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = (_calc_max_simple_simon_seq_move($145)|0);
        $147 = $22;
        $148 = ($146>>>0)>=($147>>>0);
        if ($148) {
         $149 = $5;
         $150 = $6;
         ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
         (_fc_solve_sfs_check_state_begin($149,$8,$$byval_copy1,$150)|0);
         $151 = ((($8)) + 4|0);
         $152 = HEAP32[$151>>2]|0;
         $153 = ((($152)) + 24|0);
         $154 = HEAP32[$153>>2]|0;
         $155 = $14;
         $156 = 1 << $155;
         $157 = $154 & $156;
         $158 = ($157|0)!=(0);
         if (!($158)) {
          $159 = $14;
          $160 = 1 << $159;
          $161 = ((($8)) + 4|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ((($162)) + 24|0);
          $164 = HEAP32[$163>>2]|0;
          $165 = $164 | $160;
          HEAP32[$163>>2] = $165;
          $166 = HEAP32[$8>>2]|0;
          $167 = $14;
          $168 = (($166) + ($167<<2)|0);
          $169 = HEAP32[$168>>2]|0;
          $30 = $169;
          $170 = $10;
          $171 = $14;
          $172 = $171 << 7;
          $173 = (($170) + ($172)|0);
          $174 = $30;
          $175 = $30;
          $176 = HEAP8[$175>>0]|0;
          $177 = $176&255;
          $178 = (($177) + 1)|0;
          _memcpy(($173|0),($174|0),($178|0))|0;
          $179 = $10;
          $180 = $14;
          $181 = $180 << 7;
          $182 = (($179) + ($181)|0);
          $183 = HEAP32[$8>>2]|0;
          $184 = $14;
          $185 = (($183) + ($184<<2)|0);
          HEAP32[$185>>2] = $182;
         }
         $186 = ((($8)) + 4|0);
         $187 = HEAP32[$186>>2]|0;
         $188 = ((($187)) + 24|0);
         $189 = HEAP32[$188>>2]|0;
         $190 = $25;
         $191 = 1 << $190;
         $192 = $189 & $191;
         $193 = ($192|0)!=(0);
         if (!($193)) {
          $194 = $25;
          $195 = 1 << $194;
          $196 = ((($8)) + 4|0);
          $197 = HEAP32[$196>>2]|0;
          $198 = ((($197)) + 24|0);
          $199 = HEAP32[$198>>2]|0;
          $200 = $199 | $195;
          HEAP32[$198>>2] = $200;
          $201 = HEAP32[$8>>2]|0;
          $202 = $25;
          $203 = (($201) + ($202<<2)|0);
          $204 = HEAP32[$203>>2]|0;
          $31 = $204;
          $205 = $10;
          $206 = $25;
          $207 = $206 << 7;
          $208 = (($205) + ($207)|0);
          $209 = $31;
          $210 = $31;
          $211 = HEAP8[$210>>0]|0;
          $212 = $211&255;
          $213 = (($212) + 1)|0;
          _memcpy(($208|0),($209|0),($213|0))|0;
          $214 = $10;
          $215 = $25;
          $216 = $215 << 7;
          $217 = (($214) + ($216)|0);
          $218 = HEAP32[$8>>2]|0;
          $219 = $25;
          $220 = (($218) + ($219<<2)|0);
          HEAP32[$220>>2] = $217;
         }
         $32 = 0;
         while(1) {
          $221 = $32;
          $222 = HEAP32[$29>>2]|0;
          $223 = (($222) + 1)|0;
          $224 = ($221>>>0)<($223>>>0);
          if (!($224)) {
           break;
          }
          $225 = $32;
          $226 = $20;
          $227 = $16;
          $228 = $14;
          $229 = $25;
          $230 = $28;
          _calc_start_end_src_stack($33,$225,$29,$226,$227,$228,$229,$230);
          $231 = ((($29)) + 84|0);
          $232 = $32;
          $233 = (($231) + ($232<<2)|0);
          $234 = HEAP32[$233>>2]|0;
          $34 = $234;
          $235 = ((($8)) + 4|0);
          $236 = HEAP32[$235>>2]|0;
          $237 = ((($236)) + 24|0);
          $238 = HEAP32[$237>>2]|0;
          $239 = ((($33)) + 4|0);
          $240 = HEAP32[$239>>2]|0;
          $241 = 1 << $240;
          $242 = $238 & $241;
          $243 = ($242|0)!=(0);
          if (!($243)) {
           $244 = ((($33)) + 4|0);
           $245 = HEAP32[$244>>2]|0;
           $246 = 1 << $245;
           $247 = ((($8)) + 4|0);
           $248 = HEAP32[$247>>2]|0;
           $249 = ((($248)) + 24|0);
           $250 = HEAP32[$249>>2]|0;
           $251 = $250 | $246;
           HEAP32[$249>>2] = $251;
           $252 = HEAP32[$8>>2]|0;
           $253 = ((($33)) + 4|0);
           $254 = HEAP32[$253>>2]|0;
           $255 = (($252) + ($254<<2)|0);
           $256 = HEAP32[$255>>2]|0;
           $35 = $256;
           $257 = $10;
           $258 = ((($33)) + 4|0);
           $259 = HEAP32[$258>>2]|0;
           $260 = $259 << 7;
           $261 = (($257) + ($260)|0);
           $262 = $35;
           $263 = $35;
           $264 = HEAP8[$263>>0]|0;
           $265 = $264&255;
           $266 = (($265) + 1)|0;
           _memcpy(($261|0),($262|0),($266|0))|0;
           $267 = $10;
           $268 = ((($33)) + 4|0);
           $269 = HEAP32[$268>>2]|0;
           $270 = $269 << 7;
           $271 = (($267) + ($270)|0);
           $272 = HEAP32[$8>>2]|0;
           $273 = ((($33)) + 4|0);
           $274 = HEAP32[$273>>2]|0;
           $275 = (($272) + ($274<<2)|0);
           HEAP32[$275>>2] = $271;
          }
          $276 = ((($8)) + 4|0);
          $277 = HEAP32[$276>>2]|0;
          $278 = ((($277)) + 24|0);
          $279 = HEAP32[$278>>2]|0;
          $280 = $34;
          $281 = 1 << $280;
          $282 = $279 & $281;
          $283 = ($282|0)!=(0);
          if (!($283)) {
           $284 = $34;
           $285 = 1 << $284;
           $286 = ((($8)) + 4|0);
           $287 = HEAP32[$286>>2]|0;
           $288 = ((($287)) + 24|0);
           $289 = HEAP32[$288>>2]|0;
           $290 = $289 | $285;
           HEAP32[$288>>2] = $290;
           $291 = HEAP32[$8>>2]|0;
           $292 = $34;
           $293 = (($291) + ($292<<2)|0);
           $294 = HEAP32[$293>>2]|0;
           $36 = $294;
           $295 = $10;
           $296 = $34;
           $297 = $296 << 7;
           $298 = (($295) + ($297)|0);
           $299 = $36;
           $300 = $36;
           $301 = HEAP8[$300>>0]|0;
           $302 = $301&255;
           $303 = (($302) + 1)|0;
           _memcpy(($298|0),($299|0),($303|0))|0;
           $304 = $10;
           $305 = $34;
           $306 = $305 << 7;
           $307 = (($304) + ($306)|0);
           $308 = HEAP32[$8>>2]|0;
           $309 = $34;
           $310 = (($308) + ($309<<2)|0);
           HEAP32[$310>>2] = $307;
          }
          $311 = HEAP32[$8>>2]|0;
          $312 = $6;
          $313 = $34;
          $314 = ((($33)) + 4|0);
          $315 = HEAP32[$314>>2]|0;
          $316 = HEAP32[$33>>2]|0;
          _fc_solve_move_sequence_function_342($311,$312,$313,$315,$316);
          $317 = $32;
          $318 = (($317) + 1)|0;
          $32 = $318;
         }
         $319 = HEAP32[$8>>2]|0;
         $320 = $6;
         $321 = $25;
         $322 = $14;
         $323 = $21;
         $324 = $18;
         $325 = (($323) - ($324))|0;
         $326 = (($325) + 1)|0;
         _fc_solve_move_sequence_function_342($319,$320,$321,$322,$326);
         $327 = $4;
         $328 = $3;
         $329 = $6;
         ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
         $330 = (_fc_solve_sfs_check_state_end($328,$$byval_copy2,$8,$329)|0);
         $331 = $7;
         _fc_solve_derived_states_list_add_state($327,$330,$331);
        }
       }
      }
     }
    }
   }
  }
  $332 = $14;
  $333 = (($332) + 1)|0;
  $14 = $333;
 }
 STACKTOP = sp;return;
}
function _calc_start_end_src_stack($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15|0)==($17|0);
 if ($18) {
  $19 = $11;
  $20 = $10;
  $21 = (($19) - ($20))|0;
  HEAP32[$0>>2] = $21;
  $22 = ((($0)) + 4|0);
  $23 = $12;
  HEAP32[$22>>2] = $23;
  STACKTOP = sp;return;
 }
 $24 = $8;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $14;
  $39 = $26;
 } else {
  $27 = $9;
  $28 = ((($27)) + 4|0);
  $29 = $8;
  $30 = (($29) - 1)|0;
  $31 = (($28) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
 }
 $33 = $9;
 $34 = ((($33)) + 4|0);
 $35 = $8;
 $36 = (($34) + ($35<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($39) - ($37))|0;
 HEAP32[$0>>2] = $38;
 $40 = ((($0)) + 4|0);
 $41 = $13;
 HEAP32[$40>>2] = $41;
 STACKTOP = sp;return;
}
function _fc_solve_sfs_simple_simon_move_whole_stack_sequence_to_false_parent_with_some_cards_above($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $$byval_copy2 = sp + 328|0;
 $$byval_copy1 = sp + 320|0;
 $$byval_copy = sp + 312|0;
 $8 = sp + 280|0;
 $11 = sp + 356|0;
 $18 = sp + 244|0;
 $20 = sp + 344|0;
 $23 = sp + 338|0;
 $29 = sp + 8|0;
 $3 = $0;
 $4 = $2;
 $33 = $3;
 $34 = HEAP32[$33>>2]|0;
 $5 = $34;
 $35 = $5;
 $36 = ((($35)) + 40|0);
 $6 = $36;
 $7 = 0;
 $37 = $5;
 $38 = HEAP32[$37>>2]|0;
 $9 = $38;
 $39 = $5;
 $40 = ((($39)) + 48|0);
 $10 = $40;
 $41 = $9;
 ;HEAP8[$11>>0]=HEAP8[$41>>0]|0;HEAP8[$11+1>>0]=HEAP8[$41+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$41+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$41+3>>0]|0;
 $42 = $3;
 $43 = ((($42)) + 523|0);
 $44 = HEAP8[$43>>0]|0;
 $12 = $44;
 $45 = $3;
 $46 = (_fc_solve_calc_positions_by_rank_location_340($45)|0);
 $13 = $46;
 $47 = $12;
 $48 = $47&255;
 $49 = (_calc_max_simple_simon_seq_move($48)|0);
 $14 = $49;
 $15 = 0;
 while(1) {
  $50 = $15;
  $51 = ((($11)) + 1|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = ($50|0)<($53|0);
  if (!($54)) {
   break;
  }
  $55 = HEAP32[$1>>2]|0;
  $56 = $15;
  $57 = (($55) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $16 = $58;
  $59 = $16;
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $17 = $61;
  $62 = $17;
  $63 = ($62|0)<(1);
  L4: do {
   if (!($63)) {
    $64 = $16;
    $65 = (_get_seq_h($64,$18)|0);
    $66 = ($65|0)!=(0);
    if (!($66)) {
     $67 = $14;
     $68 = HEAP32[$18>>2]|0;
     $69 = ($67>>>0)<($68>>>0);
     if (!($69)) {
      $70 = $16;
      $71 = ((($70)) + 1|0);
      $72 = HEAP8[$71>>0]|0;
      $19 = $72;
      $73 = $19;
      $74 = (_fcs_card_is_king_341($73)|0);
      if (!($74)) {
       $21 = 0;
       $22 = 0;
       while(1) {
        $75 = $22;
        $76 = ($75>>>0)<(4);
        if (!($76)) {
         break;
        }
        $77 = $13;
        $78 = $22;
        $79 = ($78*14)|0;
        $80 = $19;
        $81 = $80&255;
        $82 = (2)?($81 >> 2):($81);
        $83 = (($82) + 1)|0;
        $84 = (($79) + ($83))|0;
        $85 = (($77) + ($84<<1)|0);
        ;HEAP8[$23>>0]=HEAP8[$85>>0]|0;HEAP8[$23+1>>0]=HEAP8[$85+1>>0]|0;
        $86 = HEAP8[$23>>0]|0;
        $87 = $86 << 24 >> 24;
        $88 = ($87|0)<(0);
        if (!($88)) {
         $89 = HEAP8[$23>>0]|0;
         $90 = $89 << 24 >> 24;
         $91 = $15;
         $92 = ($90|0)==($91|0);
         if (!($92)) {
          $93 = $21;
          $94 = (($93) + 1)|0;
          $21 = $94;
          $95 = (($20) + ($93<<1)|0);
          ;HEAP8[$95>>0]=HEAP8[$23>>0]|0;HEAP8[$95+1>>0]=HEAP8[$23+1>>0]|0;
         }
        }
        $96 = $22;
        $97 = (($96) + 1)|0;
        $22 = $97;
       }
       $98 = $21;
       _sort_ds_dcs($20,$98);
       $24 = 0;
       while(1) {
        $99 = $24;
        $100 = $21;
        $101 = ($99>>>0)<($100>>>0);
        if (!($101)) {
         break L4;
        }
        $102 = $24;
        $103 = (($20) + ($102<<1)|0);
        $104 = HEAP8[$103>>0]|0;
        $105 = $104 << 24 >> 24;
        $25 = $105;
        $106 = $24;
        $107 = (($20) + ($106<<1)|0);
        $108 = ((($107)) + 1|0);
        $109 = HEAP8[$108>>0]|0;
        $110 = $109 << 24 >> 24;
        $26 = $110;
        $111 = HEAP32[$1>>2]|0;
        $112 = $25;
        $113 = (($111) + ($112<<2)|0);
        $114 = HEAP32[$113>>2]|0;
        $27 = $114;
        $115 = $27;
        $116 = HEAP8[$115>>0]|0;
        $117 = $116&255;
        $28 = $117;
        $118 = $27;
        $119 = $26;
        _populate_seq_points($118,$119,$29);
        $120 = ((($11)) + 1|0);
        $121 = HEAP8[$120>>0]|0;
        $122 = $121&255;
        $123 = $12;
        $124 = $123&255;
        $125 = $27;
        $126 = $15;
        $127 = $25;
        ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
        $128 = (_false_seq_index_loop($122,$$byval_copy,$124,$125,$29,$126,$127,1)|0);
        $129 = $128&1;
        $30 = $129;
        $130 = $30;
        $131 = $130&1;
        if ($131) {
         $132 = $5;
         $133 = $6;
         ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
         (_fc_solve_sfs_check_state_begin($132,$8,$$byval_copy1,$133)|0);
         $134 = ((($8)) + 4|0);
         $135 = HEAP32[$134>>2]|0;
         $136 = ((($135)) + 24|0);
         $137 = HEAP32[$136>>2]|0;
         $138 = $15;
         $139 = 1 << $138;
         $140 = $137 & $139;
         $141 = ($140|0)!=(0);
         if (!($141)) {
          $142 = $15;
          $143 = 1 << $142;
          $144 = ((($8)) + 4|0);
          $145 = HEAP32[$144>>2]|0;
          $146 = ((($145)) + 24|0);
          $147 = HEAP32[$146>>2]|0;
          $148 = $147 | $143;
          HEAP32[$146>>2] = $148;
          $149 = HEAP32[$8>>2]|0;
          $150 = $15;
          $151 = (($149) + ($150<<2)|0);
          $152 = HEAP32[$151>>2]|0;
          $31 = $152;
          $153 = $10;
          $154 = $15;
          $155 = $154 << 7;
          $156 = (($153) + ($155)|0);
          $157 = $31;
          $158 = $31;
          $159 = HEAP8[$158>>0]|0;
          $160 = $159&255;
          $161 = (($160) + 1)|0;
          _memcpy(($156|0),($157|0),($161|0))|0;
          $162 = $10;
          $163 = $15;
          $164 = $163 << 7;
          $165 = (($162) + ($164)|0);
          $166 = HEAP32[$8>>2]|0;
          $167 = $15;
          $168 = (($166) + ($167<<2)|0);
          HEAP32[$168>>2] = $165;
         }
         $169 = ((($8)) + 4|0);
         $170 = HEAP32[$169>>2]|0;
         $171 = ((($170)) + 24|0);
         $172 = HEAP32[$171>>2]|0;
         $173 = $25;
         $174 = 1 << $173;
         $175 = $172 & $174;
         $176 = ($175|0)!=(0);
         if (!($176)) {
          $177 = $25;
          $178 = 1 << $177;
          $179 = ((($8)) + 4|0);
          $180 = HEAP32[$179>>2]|0;
          $181 = ((($180)) + 24|0);
          $182 = HEAP32[$181>>2]|0;
          $183 = $182 | $178;
          HEAP32[$181>>2] = $183;
          $184 = HEAP32[$8>>2]|0;
          $185 = $25;
          $186 = (($184) + ($185<<2)|0);
          $187 = HEAP32[$186>>2]|0;
          $32 = $187;
          $188 = $10;
          $189 = $25;
          $190 = $189 << 7;
          $191 = (($188) + ($190)|0);
          $192 = $32;
          $193 = $32;
          $194 = HEAP8[$193>>0]|0;
          $195 = $194&255;
          $196 = (($195) + 1)|0;
          _memcpy(($191|0),($192|0),($196|0))|0;
          $197 = $10;
          $198 = $25;
          $199 = $198 << 7;
          $200 = (($197) + ($199)|0);
          $201 = HEAP32[$8>>2]|0;
          $202 = $25;
          $203 = (($201) + ($202<<2)|0);
          HEAP32[$203>>2] = $200;
         }
         $204 = $6;
         $205 = $25;
         $206 = $28;
         $207 = $10;
         _move_sequences_analysis_seqs_loop($8,$204,$29,$205,$206,$207);
         $208 = HEAP32[$8>>2]|0;
         $209 = $6;
         $210 = $25;
         $211 = $15;
         $212 = $17;
         $213 = (($212) - 0)|0;
         _fc_solve_move_sequence_function_342($208,$209,$210,$211,$213);
         $214 = $4;
         $215 = $3;
         $216 = $6;
         ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
         $217 = (_fc_solve_sfs_check_state_end($215,$$byval_copy2,$8,$216)|0);
         $218 = $7;
         _fc_solve_derived_states_list_add_state($214,$217,$218);
        }
        $219 = $24;
        $220 = (($219) + 1)|0;
        $24 = $220;
       }
      }
     }
    }
   }
  } while(0);
  $221 = $15;
  $222 = (($221) + 1)|0;
  $15 = $222;
 }
 STACKTOP = sp;return;
}
function _sort_ds_dcs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 20|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = $3;
 $10 = (($8) + ($9<<1)|0);
 $4 = $10;
 $11 = $2;
 $12 = ((($11)) + 2|0);
 $5 = $12;
 while(1) {
  $13 = $5;
  $14 = $4;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = $5;
  $6 = $16;
  while(1) {
   $17 = $6;
   $18 = $2;
   $19 = ($17>>>0)>($18>>>0);
   if (!($19)) {
    break;
   }
   $20 = $6;
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = $6;
   $24 = ((($23)) + -2|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($22|0)<($26|0);
   if (!($27)) {
    $28 = $6;
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = $6;
    $32 = ((($31)) + -2|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33 << 24 >> 24;
    $35 = ($30|0)==($34|0);
    if (!($35)) {
     break;
    }
    $36 = $6;
    $37 = ((($36)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38 << 24 >> 24;
    $40 = $6;
    $41 = ((($40)) + -2|0);
    $42 = ((($41)) + 1|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = ($39|0)>($44|0);
    if (!($45)) {
     break;
    }
   }
   $46 = $6;
   $47 = ((($46)) + -2|0);
   ;HEAP8[$7>>0]=HEAP8[$47>>0]|0;HEAP8[$7+1>>0]=HEAP8[$47+1>>0]|0;
   $48 = $6;
   $49 = ((($48)) + -2|0);
   $50 = $6;
   ;HEAP8[$49>>0]=HEAP8[$50>>0]|0;HEAP8[$49+1>>0]=HEAP8[$50+1>>0]|0;
   $51 = $6;
   ;HEAP8[$51>>0]=HEAP8[$7>>0]|0;HEAP8[$51+1>>0]=HEAP8[$7+1>>0]|0;
   $52 = $6;
   $53 = ((($52)) + -2|0);
   $6 = $53;
  }
  $54 = $5;
  $55 = ((($54)) + 2|0);
  $5 = $55;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_simple_simon_move_sequence_to_parent_on_the_same_stack($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy2 = sp + 312|0;
 $$byval_copy1 = sp + 304|0;
 $$byval_copy = sp + 296|0;
 $8 = sp + 264|0;
 $11 = sp + 324|0;
 $21 = sp + 16|0;
 $3 = $0;
 $4 = $2;
 $26 = $3;
 $27 = HEAP32[$26>>2]|0;
 $5 = $27;
 $28 = $5;
 $29 = ((($28)) + 40|0);
 $6 = $29;
 $7 = 0;
 $30 = $5;
 $31 = HEAP32[$30>>2]|0;
 $9 = $31;
 $32 = $5;
 $33 = ((($32)) + 48|0);
 $10 = $33;
 $34 = $9;
 ;HEAP8[$11>>0]=HEAP8[$34>>0]|0;HEAP8[$11+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$34+3>>0]|0;
 $35 = $3;
 $36 = ((($35)) + 523|0);
 $37 = HEAP8[$36>>0]|0;
 $12 = $37;
 $13 = 0;
 while(1) {
  $38 = $13;
  $39 = ((($11)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = ($38|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = HEAP32[$1>>2]|0;
  $44 = $13;
  $45 = (($43) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $14 = $46;
  $47 = $14;
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $15 = $49;
  $50 = $15;
  $51 = ($50|0)<(3);
  L4: do {
   if (!($51)) {
    $16 = 0;
    while(1) {
     $52 = $16;
     $53 = $15;
     $54 = (($53) - 2)|0;
     $55 = ($52|0)<($54|0);
     if (!($55)) {
      break L4;
     }
     $56 = $14;
     $57 = $16;
     $58 = (($57) + 1)|0;
     $59 = (($56) + ($58)|0);
     $60 = HEAP8[$59>>0]|0;
     $17 = $60;
     $61 = $17;
     $62 = $14;
     $63 = $16;
     $64 = (($63) + 1)|0;
     $65 = (($64) + 1)|0;
     $66 = (($62) + ($65)|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = (_fcs_is_ss_true_parent($61,$67)|0);
     L9: do {
      if (!($68)) {
       $69 = $16;
       $70 = (($69) + 2)|0;
       $18 = $70;
       while(1) {
        $71 = $18;
        $72 = $15;
        $73 = ($71|0)<($72|0);
        if (!($73)) {
         break L9;
        }
        $74 = $17;
        $75 = $14;
        $76 = $18;
        $77 = (($76) + 1)|0;
        $78 = (($75) + ($77)|0);
        $79 = HEAP8[$78>>0]|0;
        $80 = (_fcs_is_ss_true_parent($74,$79)|0);
        if ($80) {
         $81 = $18;
         $19 = $81;
         $20 = 1;
         while(1) {
          $82 = $19;
          $83 = (($82) + 1)|0;
          $84 = $15;
          $85 = ($83|0)<($84|0);
          if ($85) {
           $86 = $14;
           $87 = $19;
           $88 = (($87) + 1)|0;
           $89 = (($86) + ($88)|0);
           $90 = HEAP8[$89>>0]|0;
           $91 = $14;
           $92 = $19;
           $93 = (($92) + 1)|0;
           $94 = (($93) + 1)|0;
           $95 = (($91) + ($94)|0);
           $96 = HEAP8[$95>>0]|0;
           $97 = (_fcs_is_ss_false_parent($90,$96)|0);
           $242 = $97;
          } else {
           $242 = 0;
          }
          $98 = $14;
          $99 = $19;
          if (!($242)) {
           break;
          }
          $100 = (($99) + 1)|0;
          $101 = (($98) + ($100)|0);
          $102 = HEAP8[$101>>0]|0;
          $103 = $14;
          $104 = $19;
          $105 = (($104) + 1)|0;
          $106 = (($105) + 1)|0;
          $107 = (($103) + ($106)|0);
          $108 = HEAP8[$107>>0]|0;
          $109 = (_fcs_is_ss_true_parent($102,$108)|0);
          $110 = $109 ^ 1;
          $111 = $110&1;
          $112 = $20;
          $113 = (($112) + ($111))|0;
          $20 = $113;
          $114 = $19;
          $115 = (($114) + 1)|0;
          $19 = $115;
         }
         _populate_seq_points($98,$99,$21);
         $116 = HEAP32[$21>>2]|0;
         $22 = $116;
         $117 = $20;
         $118 = ((($21)) + 128|0);
         $119 = HEAP32[$21>>2]|0;
         $120 = (($118) + ($119<<2)|0);
         HEAP32[$120>>2] = $117;
         $121 = $18;
         $122 = ((($21)) + 4|0);
         $123 = HEAP32[$21>>2]|0;
         $124 = (($123) + 1)|0;
         HEAP32[$21>>2] = $124;
         $125 = (($122) + ($123<<2)|0);
         HEAP32[$125>>2] = $121;
         $126 = $14;
         $127 = $16;
         $128 = $18;
         _generic_populate_seq_points($126,$127,$21,$128);
         $129 = ((($11)) + 1|0);
         $130 = HEAP8[$129>>0]|0;
         $131 = $130&255;
         $132 = $12;
         $133 = $132&255;
         $134 = $14;
         $135 = $13;
         $136 = $13;
         ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
         $137 = (_false_seq_index_loop($131,$$byval_copy,$133,$134,$21,$135,$136,0)|0);
         if ($137) {
          $138 = ((($21)) + 124|0);
          $139 = HEAP32[$138>>2]|0;
          $140 = (_calc_max_simple_simon_seq_move($139)|0);
          $141 = $20;
          $142 = ($140>>>0)>=($141>>>0);
          if ($142) {
           $143 = $5;
           $144 = $6;
           ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
           (_fc_solve_sfs_check_state_begin($143,$8,$$byval_copy1,$144)|0);
           $145 = ((($8)) + 4|0);
           $146 = HEAP32[$145>>2]|0;
           $147 = ((($146)) + 24|0);
           $148 = HEAP32[$147>>2]|0;
           $149 = $13;
           $150 = 1 << $149;
           $151 = $148 & $150;
           $152 = ($151|0)!=(0);
           if (!($152)) {
            $153 = $13;
            $154 = 1 << $153;
            $155 = ((($8)) + 4|0);
            $156 = HEAP32[$155>>2]|0;
            $157 = ((($156)) + 24|0);
            $158 = HEAP32[$157>>2]|0;
            $159 = $158 | $154;
            HEAP32[$157>>2] = $159;
            $160 = HEAP32[$8>>2]|0;
            $161 = $13;
            $162 = (($160) + ($161<<2)|0);
            $163 = HEAP32[$162>>2]|0;
            $23 = $163;
            $164 = $10;
            $165 = $13;
            $166 = $165 << 7;
            $167 = (($164) + ($166)|0);
            $168 = $23;
            $169 = $23;
            $170 = HEAP8[$169>>0]|0;
            $171 = $170&255;
            $172 = (($171) + 1)|0;
            _memcpy(($167|0),($168|0),($172|0))|0;
            $173 = $10;
            $174 = $13;
            $175 = $174 << 7;
            $176 = (($173) + ($175)|0);
            $177 = HEAP32[$8>>2]|0;
            $178 = $13;
            $179 = (($177) + ($178<<2)|0);
            HEAP32[$179>>2] = $176;
           }
           $180 = $6;
           $181 = $13;
           $182 = $15;
           $183 = $10;
           _move_sequences_analysis_seqs_loop($8,$180,$21,$181,$182,$183);
           $184 = ((($21)) + 84|0);
           $185 = $22;
           $186 = (($184) + ($185<<2)|0);
           $187 = HEAP32[$186>>2]|0;
           $24 = $187;
           $188 = ((($8)) + 4|0);
           $189 = HEAP32[$188>>2]|0;
           $190 = ((($189)) + 24|0);
           $191 = HEAP32[$190>>2]|0;
           $192 = $24;
           $193 = 1 << $192;
           $194 = $191 & $193;
           $195 = ($194|0)!=(0);
           if (!($195)) {
            $196 = $24;
            $197 = 1 << $196;
            $198 = ((($8)) + 4|0);
            $199 = HEAP32[$198>>2]|0;
            $200 = ((($199)) + 24|0);
            $201 = HEAP32[$200>>2]|0;
            $202 = $201 | $197;
            HEAP32[$200>>2] = $202;
            $203 = HEAP32[$8>>2]|0;
            $204 = $24;
            $205 = (($203) + ($204<<2)|0);
            $206 = HEAP32[$205>>2]|0;
            $25 = $206;
            $207 = $10;
            $208 = $24;
            $209 = $208 << 7;
            $210 = (($207) + ($209)|0);
            $211 = $25;
            $212 = $25;
            $213 = HEAP8[$212>>0]|0;
            $214 = $213&255;
            $215 = (($214) + 1)|0;
            _memcpy(($210|0),($211|0),($215|0))|0;
            $216 = $10;
            $217 = $24;
            $218 = $217 << 7;
            $219 = (($216) + ($218)|0);
            $220 = HEAP32[$8>>2]|0;
            $221 = $24;
            $222 = (($220) + ($221<<2)|0);
            HEAP32[$222>>2] = $219;
           }
           $223 = HEAP32[$8>>2]|0;
           $224 = $6;
           $225 = $13;
           $226 = $24;
           $227 = $19;
           $228 = $18;
           $229 = (($227) - ($228))|0;
           $230 = (($229) + 1)|0;
           _fc_solve_move_sequence_function_342($223,$224,$225,$226,$230);
           $231 = $4;
           $232 = $3;
           $233 = $6;
           ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;
           $234 = (_fc_solve_sfs_check_state_end($232,$$byval_copy2,$8,$233)|0);
           $235 = $7;
           _fc_solve_derived_states_list_add_state($231,$234,$235);
          }
         }
        }
        $236 = $18;
        $237 = (($236) + 1)|0;
        $18 = $237;
       }
      }
     } while(0);
     $238 = $16;
     $239 = (($238) + 1)|0;
     $16 = $239;
    }
   }
  } while(0);
  $240 = $13;
  $241 = (($240) + 1)|0;
  $13 = $241;
 }
 STACKTOP = sp;return;
}
function _fc_solve_sfs_simple_simon_move_sequence_to_false_parent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $$byval_copy1 = sp + 96|0;
 $$byval_copy = sp + 88|0;
 $8 = sp + 56|0;
 $11 = sp + 108|0;
 $17 = sp + 24|0;
 $3 = $0;
 $4 = $2;
 $25 = $3;
 $26 = HEAP32[$25>>2]|0;
 $5 = $26;
 $27 = $5;
 $28 = ((($27)) + 40|0);
 $6 = $28;
 $7 = 0;
 $29 = $5;
 $30 = HEAP32[$29>>2]|0;
 $9 = $30;
 $31 = $5;
 $32 = ((($31)) + 48|0);
 $10 = $32;
 $33 = $9;
 ;HEAP8[$11>>0]=HEAP8[$33>>0]|0;HEAP8[$11+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$33+3>>0]|0;
 $34 = $3;
 $35 = ((($34)) + 523|0);
 $36 = HEAP8[$35>>0]|0;
 $12 = $36;
 $37 = $12;
 $38 = $37&255;
 $39 = (_calc_max_simple_simon_seq_move($38)|0);
 $13 = $39;
 $14 = 0;
 while(1) {
  $40 = $14;
  $41 = ((($11)) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = ($40|0)<($43|0);
  if (!($44)) {
   break;
  }
  $45 = HEAP32[$1>>2]|0;
  $46 = $14;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $15 = $48;
  $49 = $15;
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $16 = $51;
  $52 = $16;
  $53 = ($52|0)<(1);
  L4: do {
   if (!($53)) {
    $54 = $15;
    $55 = (_get_seq_h($54,$17)|0);
    $18 = $55;
    $56 = $13;
    $57 = HEAP32[$17>>2]|0;
    $58 = ($56>>>0)<($57>>>0);
    if (!($58)) {
     $59 = $15;
     $60 = $18;
     $61 = (($60) + 1)|0;
     $62 = (($59) + ($61)|0);
     $63 = HEAP8[$62>>0]|0;
     $19 = $63;
     $20 = 0;
     while(1) {
      $64 = $20;
      $65 = ((($11)) + 1|0);
      $66 = HEAP8[$65>>0]|0;
      $67 = $66&255;
      $68 = ($64|0)<($67|0);
      if (!($68)) {
       break L4;
      }
      $69 = $20;
      $70 = $14;
      $71 = ($69|0)==($70|0);
      if (!($71)) {
       $72 = HEAP32[$1>>2]|0;
       $73 = $20;
       $74 = (($72) + ($73<<2)|0);
       $75 = HEAP32[$74>>2]|0;
       $21 = $75;
       $76 = $21;
       $77 = HEAP8[$76>>0]|0;
       $78 = $77&255;
       $22 = $78;
       $79 = $22;
       $80 = ($79|0)<(1);
       if (!($80)) {
        $81 = $21;
        $82 = $22;
        $83 = (($82) - 1)|0;
        $84 = (($83) + 1)|0;
        $85 = (($81) + ($84)|0);
        $86 = HEAP8[$85>>0]|0;
        $87 = $19;
        $88 = (_fcs_is_ss_false_parent($86,$87)|0);
        if ($88) {
         $89 = $5;
         $90 = $6;
         ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$1+4>>2]|0;
         (_fc_solve_sfs_check_state_begin($89,$8,$$byval_copy,$90)|0);
         $91 = ((($8)) + 4|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ((($92)) + 24|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = $14;
         $96 = 1 << $95;
         $97 = $94 & $96;
         $98 = ($97|0)!=(0);
         if (!($98)) {
          $99 = $14;
          $100 = 1 << $99;
          $101 = ((($8)) + 4|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = ((($102)) + 24|0);
          $104 = HEAP32[$103>>2]|0;
          $105 = $104 | $100;
          HEAP32[$103>>2] = $105;
          $106 = HEAP32[$8>>2]|0;
          $107 = $14;
          $108 = (($106) + ($107<<2)|0);
          $109 = HEAP32[$108>>2]|0;
          $23 = $109;
          $110 = $10;
          $111 = $14;
          $112 = $111 << 7;
          $113 = (($110) + ($112)|0);
          $114 = $23;
          $115 = $23;
          $116 = HEAP8[$115>>0]|0;
          $117 = $116&255;
          $118 = (($117) + 1)|0;
          _memcpy(($113|0),($114|0),($118|0))|0;
          $119 = $10;
          $120 = $14;
          $121 = $120 << 7;
          $122 = (($119) + ($121)|0);
          $123 = HEAP32[$8>>2]|0;
          $124 = $14;
          $125 = (($123) + ($124<<2)|0);
          HEAP32[$125>>2] = $122;
         }
         $126 = ((($8)) + 4|0);
         $127 = HEAP32[$126>>2]|0;
         $128 = ((($127)) + 24|0);
         $129 = HEAP32[$128>>2]|0;
         $130 = $20;
         $131 = 1 << $130;
         $132 = $129 & $131;
         $133 = ($132|0)!=(0);
         if (!($133)) {
          $134 = $20;
          $135 = 1 << $134;
          $136 = ((($8)) + 4|0);
          $137 = HEAP32[$136>>2]|0;
          $138 = ((($137)) + 24|0);
          $139 = HEAP32[$138>>2]|0;
          $140 = $139 | $135;
          HEAP32[$138>>2] = $140;
          $141 = HEAP32[$8>>2]|0;
          $142 = $20;
          $143 = (($141) + ($142<<2)|0);
          $144 = HEAP32[$143>>2]|0;
          $24 = $144;
          $145 = $10;
          $146 = $20;
          $147 = $146 << 7;
          $148 = (($145) + ($147)|0);
          $149 = $24;
          $150 = $24;
          $151 = HEAP8[$150>>0]|0;
          $152 = $151&255;
          $153 = (($152) + 1)|0;
          _memcpy(($148|0),($149|0),($153|0))|0;
          $154 = $10;
          $155 = $20;
          $156 = $155 << 7;
          $157 = (($154) + ($156)|0);
          $158 = HEAP32[$8>>2]|0;
          $159 = $20;
          $160 = (($158) + ($159<<2)|0);
          HEAP32[$160>>2] = $157;
         }
         $161 = HEAP32[$8>>2]|0;
         $162 = $6;
         $163 = $20;
         $164 = $14;
         $165 = $16;
         $166 = $18;
         $167 = (($165) - ($166))|0;
         _fc_solve_move_sequence_function_342($161,$162,$163,$164,$167);
         $168 = $4;
         $169 = $3;
         $170 = $6;
         ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;
         $171 = (_fc_solve_sfs_check_state_end($169,$$byval_copy1,$8,$170)|0);
         $172 = $7;
         _fc_solve_derived_states_list_add_state($168,$171,$172);
        }
       }
      }
      $173 = $20;
      $174 = (($173) + 1)|0;
      $20 = $174;
     }
    }
   }
  } while(0);
  $175 = $14;
  $176 = (($175) + 1)|0;
  $14 = $176;
 }
 STACKTOP = sp;return;
}
function _fc_solve_args_man_free($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $2 = $6;
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $4 = 0;
 while(1) {
  $10 = $4;
  $11 = $2;
  $12 = ($10|0)<($11|0);
  $13 = $3;
  if (!($12)) {
   break;
  }
  $14 = $4;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  _free($16);
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
 }
 _free($13);
 $19 = $1;
 HEAP32[$19>>2] = 0;
 $20 = $1;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = 0;
 STACKTOP = sp;return;
}
function _fc_solve_args_man_chop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp;
 $2 = $1;
 $11 = $2;
 $3 = $11;
 _fc_solve_args_man_alloc($4);
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($4)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = (_malloc(1024)|0);
 $16 = ((($4)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($4)) + 12|0);
 HEAP32[$17>>2] = $15;
 $18 = ((($4)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($19)) + 1023|0);
 $21 = ((($4)) + 16|0);
 HEAP32[$21>>2] = $20;
 L1: while(1) {
  $22 = $3;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   break;
  }
  $5 = 0;
  while(1) {
   $26 = $3;
   $27 = HEAP8[$26>>0]|0;
   $28 = (_is_whitespace($27)|0);
   $29 = $3;
   if (!($28)) {
    break;
   }
   $30 = ((($29)) + 1|0);
   $3 = $30;
  }
  $31 = HEAP8[$29>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(0);
  if ($33) {
   break;
  }
  $34 = $3;
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)==(35);
  if ($37) {
   while(1) {
    $38 = $3;
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)!=(0);
    if (!($41)) {
     break;
    }
    $42 = $3;
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = ($44|0)!=(10);
    if (!($45)) {
     break;
    }
    $46 = $3;
    $47 = ((($46)) + 1|0);
    $3 = $47;
   }
   continue;
  }
  $6 = 1;
  $7 = 0;
  while(1) {
   $48 = $6;
   $49 = $48&1;
   if (!($49)) {
    break;
   }
   $50 = $3;
   $51 = HEAP8[$50>>0]|0;
   $52 = $51 << 24 >> 24;
   L20: do {
    switch ($52|0) {
    case 13: case 0: case 10: case 9: case 32:  {
     $5 = 1;
     $6 = 0;
     break;
    }
    case 92:  {
     $53 = $3;
     $54 = ((($53)) + 1|0);
     $3 = $54;
     $55 = HEAP8[$54>>0]|0;
     $8 = $55;
     $56 = $3;
     $57 = ((($56)) + 1|0);
     $3 = $57;
     $58 = $8;
     $59 = $58 << 24 >> 24;
     switch ($59|0) {
     case 0:  {
      $60 = $3;
      $61 = ((($60)) + -1|0);
      $3 = $61;
      $5 = 1;
      $6 = 0;
      break L20;
      break;
     }
     case 10: case 13:  {
      $62 = $7;
      $63 = $62&1;
      if ($63) {
       break L20;
      }
      $6 = 0;
      break L20;
      break;
     }
     default: {
      $64 = $8;
      _add_to_last_arg($4,$64);
      break L20;
     }
     }
     break;
    }
    case 34:  {
     $7 = 1;
     L30: while(1) {
      $65 = $3;
      $66 = ((($65)) + 1|0);
      $3 = $66;
      $67 = HEAP8[$66>>0]|0;
      $9 = $67;
      $68 = $9;
      $69 = $68 << 24 >> 24;
      L32: do {
       switch ($69|0) {
       case 0:  {
        break L20;
        break;
       }
       case 34:  {
        break L30;
        break;
       }
       case 92:  {
        $72 = $3;
        $73 = ((($72)) + 1|0);
        $3 = $73;
        $74 = HEAP8[$73>>0]|0;
        $10 = $74;
        $75 = $10;
        $76 = $75 << 24 >> 24;
        switch ($76|0) {
        case 0:  {
         label = 26;
         break L1;
         break;
        }
        case 13: case 10:  {
         break L32;
         break;
        }
        case 34: case 92:  {
         $77 = $10;
         _add_to_last_arg($4,$77);
         break L32;
         break;
        }
        default: {
         _add_to_last_arg($4,92);
         $78 = $10;
         _add_to_last_arg($4,$78);
         break L32;
        }
        }
        break;
       }
       default: {
        $79 = $9;
        _add_to_last_arg($4,$79);
       }
       }
      } while(0);
     }
     $70 = $3;
     $71 = ((($70)) + 1|0);
     $3 = $71;
     break;
    }
    case 35:  {
     $7 = 0;
     while(1) {
      $80 = $3;
      $81 = HEAP8[$80>>0]|0;
      $82 = $81 << 24 >> 24;
      $83 = ($82|0)!=(0);
      if (!($83)) {
       break;
      }
      $84 = $3;
      $85 = HEAP8[$84>>0]|0;
      $86 = $85 << 24 >> 24;
      $87 = ($86|0)!=(10);
      if (!($87)) {
       break;
      }
      $88 = $3;
      $89 = ((($88)) + 1|0);
      $3 = $89;
     }
     $5 = 1;
     $6 = 0;
     break;
    }
    default: {
     $7 = 1;
     $90 = $3;
     $91 = HEAP8[$90>>0]|0;
     _add_to_last_arg($4,$91);
     $92 = $3;
     $93 = ((($92)) + 1|0);
     $3 = $93;
    }
    }
   } while(0);
  }
  $94 = $5;
  $95 = $94&1;
  if ($95) {
   _push_args_last_arg($4);
   $96 = $3;
   $97 = HEAP8[$96>>0]|0;
   $98 = $97 << 24 >> 24;
   $99 = ($98|0)==(0);
   if ($99) {
    break;
   }
  }
 }
 if ((label|0) == 26) {
  _push_args_last_arg($4);
 }
 $100 = ((($4)) + 12|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ((($4)) + 8|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($101|0)!=($103|0);
 if (!($104)) {
  $105 = ((($4)) + 8|0);
  $106 = HEAP32[$105>>2]|0;
  _free($106);
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;
  STACKTOP = sp;return;
 }
 _push_args_last_arg($4);
 $105 = ((($4)) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 _free($106);
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;
 STACKTOP = sp;return;
}
function _fc_solve_args_man_alloc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 $3 = (_malloc(128)|0);
 HEAP32[$2>>2] = $3;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;
 STACKTOP = sp;return;
}
function _is_whitespace($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24 >> 24;
 $4 = ($3|0)==(32);
 if ($4) {
  $14 = 1;
 } else {
  $5 = $1;
  $6 = $5 << 24 >> 24;
  $7 = ($6|0)==(9);
  if ($7) {
   $14 = 1;
  } else {
   $8 = $1;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==(10);
   if ($10) {
    $14 = 1;
   } else {
    $11 = $1;
    $12 = $11 << 24 >> 24;
    $13 = ($12|0)==(13);
    $14 = $13;
   }
  }
 }
 STACKTOP = sp;return ($14|0);
}
function _add_to_last_arg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = $2;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 1|0);
 HEAP32[$7>>2] = $9;
 HEAP8[$8>>0] = $5;
 $10 = $2;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)==($15|0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $2;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $2;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $22;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28) + 1024)|0;
 $30 = $29;
 $31 = (_realloc($19,$30)|0);
 $4 = $31;
 $32 = $4;
 $33 = $2;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $32;
 $37 = $35;
 $38 = (($36) - ($37))|0;
 $39 = $2;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($38)|0);
 HEAP32[$40>>2] = $42;
 $43 = $4;
 $44 = $2;
 $45 = ((($44)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $43;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49) + 1024)|0;
 $51 = $2;
 $52 = ((($51)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + ($50)|0);
 HEAP32[$52>>2] = $54;
 $55 = $4;
 $56 = $2;
 $57 = ((($56)) + 8|0);
 HEAP32[$57>>2] = $55;
 STACKTOP = sp;return;
}
function _push_args_last_arg($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $6;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $2 = $12;
 $13 = $2;
 $14 = (($13) + 1)|0;
 $15 = $14;
 $16 = (_malloc($15)|0);
 $3 = $16;
 $17 = $3;
 $18 = $1;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 (_strncpy($17,$20,$21)|0);
 $22 = $3;
 $23 = $2;
 $24 = (($22) + ($23)|0);
 HEAP8[$24>>0] = 0;
 $25 = $3;
 $26 = $1;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $1;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$29>>2] = $31;
 $32 = (($28) + ($30<<2)|0);
 HEAP32[$32>>2] = $25;
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 31;
 $36 = ($35|0)!=(0);
 if ($36) {
  $47 = $1;
  $48 = ((($47)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $1;
  $51 = ((($50)) + 12|0);
  HEAP32[$51>>2] = $49;
  STACKTOP = sp;return;
 }
 $37 = $1;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $1;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 32)|0;
 $43 = $42<<2;
 $44 = (_realloc($39,$43)|0);
 $45 = $1;
 $46 = ((($45)) + 4|0);
 HEAP32[$46>>2] = $44;
 $47 = $1;
 $48 = ((($47)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $1;
 $51 = ((($50)) + 12|0);
 HEAP32[$51>>2] = $49;
 STACKTOP = sp;return;
}
function _fc_solve_canonize_state($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 1;
 while(1) {
  $12 = $6;
  $13 = $5;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $6;
  $7 = $15;
  while(1) {
   $16 = $7;
   $17 = ($16>>>0)>(0);
   if (!($17)) {
    break;
   }
   $18 = $3;
   $19 = $7;
   $20 = (($18) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $3;
   $23 = $7;
   $24 = (($23) - 1)|0;
   $25 = (($22) + ($24<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (_fc_solve_stack_compare_for_comparison_350($21,$26)|0);
   $28 = ($27|0)<(0);
   if (!($28)) {
    break;
   }
   $29 = $3;
   $30 = $7;
   $31 = (($29) + ($30<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $8 = $32;
   $33 = $3;
   $34 = $7;
   $35 = (($34) - 1)|0;
   $36 = (($33) + ($35<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $3;
   $39 = $7;
   $40 = (($38) + ($39<<2)|0);
   HEAP32[$40>>2] = $37;
   $41 = $8;
   $42 = $3;
   $43 = $7;
   $44 = (($43) - 1)|0;
   $45 = (($42) + ($44<<2)|0);
   HEAP32[$45>>2] = $41;
   $46 = $7;
   $47 = (($46) + -1)|0;
   $7 = $47;
  }
  $48 = $6;
  $49 = (($48) + 1)|0;
  $6 = $49;
 }
 $9 = 1;
 while(1) {
  $50 = $9;
  $51 = $4;
  $52 = ($50>>>0)<($51>>>0);
  if (!($52)) {
   break;
  }
  $53 = $9;
  $10 = $53;
  while(1) {
   $54 = $10;
   $55 = ($54>>>0)>(0);
   if (!($55)) {
    break;
   }
   $56 = $3;
   $57 = ((($56)) + 40|0);
   $58 = $10;
   $59 = (($57) + ($58)|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $3;
   $62 = ((($61)) + 40|0);
   $63 = $10;
   $64 = (($63) - 1)|0;
   $65 = (($62) + ($64)|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = (_fc_solve_card_compare_351($60,$66)|0);
   $68 = ($67|0)<(0);
   if (!($68)) {
    break;
   }
   $69 = $3;
   $70 = ((($69)) + 40|0);
   $71 = $10;
   $72 = (($70) + ($71)|0);
   $73 = HEAP8[$72>>0]|0;
   $11 = $73;
   $74 = $3;
   $75 = ((($74)) + 40|0);
   $76 = $10;
   $77 = (($76) - 1)|0;
   $78 = (($75) + ($77)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $3;
   $81 = ((($80)) + 40|0);
   $82 = $10;
   $83 = (($81) + ($82)|0);
   HEAP8[$83>>0] = $79;
   $84 = $11;
   $85 = $3;
   $86 = ((($85)) + 40|0);
   $87 = $10;
   $88 = (($87) - 1)|0;
   $89 = (($86) + ($88)|0);
   HEAP8[$89>>0] = $84;
   $90 = $10;
   $91 = (($90) + -1)|0;
   $10 = $91;
  }
  $92 = $9;
  $93 = (($92) + 1)|0;
  $9 = $93;
 }
 STACKTOP = sp;return;
}
function _fc_solve_stack_compare_for_comparison_350($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $5 = $10;
 $11 = $4;
 $6 = $11;
 $12 = $5;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $6;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($14|0)<($17|0);
 if ($18) {
  $19 = $5;
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $25 = $21;
 } else {
  $22 = $6;
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $24;
 }
 $7 = $25;
 $8 = 1;
 while(1) {
  $26 = $8;
  $27 = $7;
  $28 = ($26|0)<=($27|0);
  $29 = $5;
  if (!($28)) {
   break;
  }
  $30 = $8;
  $31 = (($29) + ($30)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $6;
  $34 = $8;
  $35 = (($33) + ($34)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = (_fc_solve_card_compare_351($32,$36)|0);
  $9 = $37;
  $38 = $9;
  $39 = ($38|0)!=(0);
  if ($39) {
   label = 7;
   break;
  }
  $41 = $8;
  $42 = (($41) + 1)|0;
  $8 = $42;
 }
 if ((label|0) == 7) {
  $40 = $9;
  $2 = $40;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 $43 = HEAP8[$29>>0]|0;
 $44 = $43&255;
 $45 = $6;
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = ($44|0)<($47|0);
 if ($48) {
  $2 = -1;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 $49 = $5;
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $6;
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = ($51|0)>($54|0);
 if ($55) {
  $2 = 1;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 } else {
  $2 = 0;
  $56 = $2;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _fc_solve_card_compare_351($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4&255;
 $6 = $3;
 $7 = $6&255;
 $8 = (($5) - ($7))|0;
 STACKTOP = sp;return ($8|0);
}
function _fc_solve_canonize_state_with_locs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 1;
 while(1) {
  $16 = $8;
  $17 = $7;
  $18 = ($16>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $8;
  $9 = $19;
  while(1) {
   $20 = $9;
   $21 = ($20>>>0)>(0);
   if (!($21)) {
    break;
   }
   $22 = $4;
   $23 = $9;
   $24 = (($22) + ($23<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $4;
   $27 = $9;
   $28 = (($27) - 1)|0;
   $29 = (($26) + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (_fc_solve_stack_compare_for_comparison_350($25,$30)|0);
   $32 = ($31|0)<(0);
   if (!($32)) {
    break;
   }
   $33 = $4;
   $34 = $9;
   $35 = (($33) + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $10 = $36;
   $37 = $4;
   $38 = $9;
   $39 = (($38) - 1)|0;
   $40 = (($37) + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $4;
   $43 = $9;
   $44 = (($42) + ($43<<2)|0);
   HEAP32[$44>>2] = $41;
   $45 = $10;
   $46 = $4;
   $47 = $9;
   $48 = (($47) - 1)|0;
   $49 = (($46) + ($48<<2)|0);
   HEAP32[$49>>2] = $45;
   $50 = $5;
   $51 = $9;
   $52 = (($50) + ($51)|0);
   $53 = HEAP8[$52>>0]|0;
   $11 = $53;
   $54 = $5;
   $55 = $9;
   $56 = (($55) - 1)|0;
   $57 = (($54) + ($56)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $5;
   $60 = $9;
   $61 = (($59) + ($60)|0);
   HEAP8[$61>>0] = $58;
   $62 = $11;
   $63 = $5;
   $64 = $9;
   $65 = (($64) - 1)|0;
   $66 = (($63) + ($65)|0);
   HEAP8[$66>>0] = $62;
   $67 = $9;
   $68 = (($67) + -1)|0;
   $9 = $68;
  }
  $69 = $8;
  $70 = (($69) + 1)|0;
  $8 = $70;
 }
 $12 = 1;
 while(1) {
  $71 = $12;
  $72 = $6;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $12;
  $13 = $74;
  while(1) {
   $75 = $13;
   $76 = ($75>>>0)>(0);
   if (!($76)) {
    break;
   }
   $77 = $4;
   $78 = ((($77)) + 40|0);
   $79 = $13;
   $80 = (($78) + ($79)|0);
   $81 = HEAP8[$80>>0]|0;
   $82 = $4;
   $83 = ((($82)) + 40|0);
   $84 = $13;
   $85 = (($84) - 1)|0;
   $86 = (($83) + ($85)|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = (_fc_solve_card_compare_351($81,$87)|0);
   $89 = ($88|0)<(0);
   if (!($89)) {
    break;
   }
   $90 = $4;
   $91 = ((($90)) + 40|0);
   $92 = $13;
   $93 = (($91) + ($92)|0);
   $94 = HEAP8[$93>>0]|0;
   $14 = $94;
   $95 = $4;
   $96 = ((($95)) + 40|0);
   $97 = $13;
   $98 = (($97) - 1)|0;
   $99 = (($96) + ($98)|0);
   $100 = HEAP8[$99>>0]|0;
   $101 = $4;
   $102 = ((($101)) + 40|0);
   $103 = $13;
   $104 = (($102) + ($103)|0);
   HEAP8[$104>>0] = $100;
   $105 = $14;
   $106 = $4;
   $107 = ((($106)) + 40|0);
   $108 = $13;
   $109 = (($108) - 1)|0;
   $110 = (($107) + ($109)|0);
   HEAP8[$110>>0] = $105;
   $111 = $5;
   $112 = ((($111)) + 10|0);
   $113 = $13;
   $114 = (($112) + ($113)|0);
   $115 = HEAP8[$114>>0]|0;
   $15 = $115;
   $116 = $5;
   $117 = ((($116)) + 10|0);
   $118 = $13;
   $119 = (($118) - 1)|0;
   $120 = (($117) + ($119)|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = $5;
   $123 = ((($122)) + 10|0);
   $124 = $13;
   $125 = (($123) + ($124)|0);
   HEAP8[$125>>0] = $121;
   $126 = $15;
   $127 = $5;
   $128 = ((($127)) + 10|0);
   $129 = $13;
   $130 = (($129) - 1)|0;
   $131 = (($128) + ($130)|0);
   HEAP8[$131>>0] = $126;
   $132 = $13;
   $133 = (($132) + -1)|0;
   $13 = $133;
  }
  $134 = $12;
  $135 = (($134) + 1)|0;
  $12 = $135;
 }
 STACKTOP = sp;return;
}
function _fc_solve_state_as_string($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer8 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0;
 var $vararg_ptr38 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $vararg_buffer45 = sp + 552|0;
 $vararg_buffer42 = sp + 544|0;
 $vararg_buffer39 = sp + 536|0;
 $vararg_buffer33 = sp + 520|0;
 $vararg_buffer30 = sp + 512|0;
 $vararg_buffer27 = sp + 504|0;
 $vararg_buffer24 = sp + 496|0;
 $vararg_buffer21 = sp + 488|0;
 $vararg_buffer14 = sp + 464|0;
 $vararg_buffer11 = sp + 456|0;
 $vararg_buffer8 = sp + 448|0;
 $vararg_buffer1 = sp + 424|0;
 $vararg_buffer = sp + 416|0;
 $18 = sp + 336|0;
 $19 = sp + 288|0;
 $20 = sp + 256|0;
 $27 = sp + 128|0;
 $28 = sp;
 $33 = sp + 692|0;
 $42 = sp + 688|0;
 $46 = sp + 684|0;
 $51 = sp + 680|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $52 = $6&1;
 $15 = $52;
 $53 = $7&1;
 $16 = $53;
 $54 = $8&1;
 $17 = $54;
 $55 = $16;
 $56 = $55&1;
 L1: do {
  if ($56) {
   $21 = 0;
   while(1) {
    $57 = $21;
    $58 = $13;
    $59 = ($57>>>0)<($58>>>0);
    if (!($59)) {
     break;
    }
    $60 = $21;
    $61 = $21;
    $62 = (($19) + ($61<<2)|0);
    HEAP32[$62>>2] = $60;
    $63 = $21;
    $64 = (($63) + 1)|0;
    $21 = $64;
   }
   $22 = 0;
   while(1) {
    $65 = $22;
    $66 = $12;
    $67 = ($65>>>0)<($66>>>0);
    if (!($67)) {
     break L1;
    }
    $68 = $22;
    $69 = $22;
    $70 = (($20) + ($69<<2)|0);
    HEAP32[$70>>2] = $68;
    $71 = $22;
    $72 = (($71) + 1)|0;
    $22 = $72;
   }
  } else {
   $23 = 0;
   while(1) {
    $73 = $23;
    $74 = $13;
    $75 = ($73>>>0)<($74>>>0);
    if (!($75)) {
     break;
    }
    $76 = $23;
    $77 = $11;
    $78 = $23;
    $79 = (($77) + ($78)|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80&255;
    $82 = (($19) + ($81<<2)|0);
    HEAP32[$82>>2] = $76;
    $83 = $23;
    $84 = (($83) + 1)|0;
    $23 = $84;
   }
   $24 = 0;
   while(1) {
    $85 = $24;
    $86 = $12;
    $87 = ($85>>>0)<($86>>>0);
    if (!($87)) {
     break L1;
    }
    $88 = $24;
    $89 = $11;
    $90 = ((($89)) + 10|0);
    $91 = $24;
    $92 = (($90) + ($91)|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = (($20) + ($94<<2)|0);
    HEAP32[$95>>2] = $88;
    $96 = $24;
    $97 = (($96) + 1)|0;
    $24 = $97;
   }
  }
 } while(0);
 $25 = 0;
 while(1) {
  $98 = $25;
  $99 = $14;
  $100 = $99 << 2;
  $101 = ($98>>>0)<($100>>>0);
  if (!($101)) {
   break;
  }
  $102 = $10;
  $103 = ((($102)) + 48|0);
  $104 = $25;
  $105 = (($103) + ($104)|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = $25;
  $109 = (($18) + (($108*10)|0)|0);
  $110 = $17;
  $111 = $110&1;
  _rank2str_356($107,$109,$111);
  $112 = $25;
  $113 = (($18) + (($112*10)|0)|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $114 << 24 >> 24;
  $116 = ($115|0)==(32);
  if ($116) {
   $117 = $25;
   $118 = (($18) + (($117*10)|0)|0);
   HEAP8[$118>>0] = 48;
  }
  $119 = $25;
  $120 = (($119) + 1)|0;
  $25 = $120;
 }
 $121 = $15;
 $122 = $121&1;
 if ($122) {
  $290 = $9;
  HEAP32[$vararg_buffer30>>2] = 13467;
  $291 = (_sprintf($290,13454,$vararg_buffer30)|0);
  $292 = $9;
  $293 = (($292) + ($291)|0);
  $9 = $293;
  $43 = 0;
  while(1) {
   $294 = $43;
   $295 = $14;
   $296 = $295 << 2;
   $297 = ($294>>>0)<($296>>>0);
   $298 = $9;
   if (!($297)) {
    break;
   }
   $299 = $43;
   $300 = (($18) + (($299*10)|0)|0);
   $301 = $43;
   $302 = (($301) + 1)|0;
   $303 = (($18) + (($302*10)|0)|0);
   $304 = $43;
   $305 = (($304) + 2)|0;
   $306 = (($18) + (($305*10)|0)|0);
   $307 = $43;
   $308 = (($307) + 3)|0;
   $309 = (($18) + (($308*10)|0)|0);
   HEAP32[$vararg_buffer33>>2] = $300;
   $vararg_ptr36 = ((($vararg_buffer33)) + 4|0);
   HEAP32[$vararg_ptr36>>2] = $303;
   $vararg_ptr37 = ((($vararg_buffer33)) + 8|0);
   HEAP32[$vararg_ptr37>>2] = $306;
   $vararg_ptr38 = ((($vararg_buffer33)) + 12|0);
   HEAP32[$vararg_ptr38>>2] = $309;
   $310 = (_sprintf($298,13480,$vararg_buffer33)|0);
   $311 = $9;
   $312 = (($311) + ($310)|0);
   $9 = $312;
   $313 = $43;
   $314 = (($313) + 4)|0;
   $43 = $314;
  }
  $315 = ((($298)) + 1|0);
  $9 = $315;
  HEAP8[$298>>0] = 32;
  $316 = $9;
  HEAP32[$vararg_buffer39>>2] = 13501;
  $317 = (_sprintf($316,13454,$vararg_buffer39)|0);
  $318 = $9;
  $319 = (($318) + ($317)|0);
  $9 = $319;
  $320 = $12;
  $321 = (($320) - 1)|0;
  $44 = $321;
  $322 = $44;
  $323 = ($322|0)>=(0);
  if ($323) {
   $324 = $9;
   $325 = ((($324)) + 1|0);
   $9 = $325;
   HEAP8[$324>>0] = 32;
  }
  $45 = 0;
  while(1) {
   $326 = $45;
   $327 = $44;
   $328 = ($326|0)<=($327|0);
   if (!($328)) {
    break;
   }
   $329 = $10;
   $330 = ((($329)) + 40|0);
   $331 = $45;
   $332 = (($20) + ($331<<2)|0);
   $333 = HEAP32[$332>>2]|0;
   $334 = (($330) + ($333)|0);
   $335 = HEAP8[$334>>0]|0;
   $336 = $17;
   $337 = $336&1;
   _render_freecell_card($335,$46,$337);
   $338 = $9;
   HEAP32[$vararg_buffer42>>2] = $46;
   $339 = (_sprintf($338,13513,$vararg_buffer42)|0);
   $340 = $9;
   $341 = (($340) + ($339)|0);
   $9 = $341;
   $342 = $45;
   $343 = $44;
   $344 = ($342|0)<($343|0);
   if ($344) {
    $345 = $9;
    $346 = ((($345)) + 1|0);
    $9 = $346;
    HEAP8[$345>>0] = 32;
   }
   $347 = $45;
   $348 = (($347) + 1)|0;
   $45 = $348;
  }
  $349 = $9;
  $350 = ((($349)) + 1|0);
  $9 = $350;
  HEAP8[$349>>0] = 10;
  $47 = 0;
  while(1) {
   $351 = $47;
   $352 = $13;
   $353 = ($351>>>0)<($352>>>0);
   if (!($353)) {
    break;
   }
   $354 = $10;
   $355 = $47;
   $356 = (($19) + ($355<<2)|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = (($354) + ($357<<2)|0);
   $359 = HEAP32[$358>>2]|0;
   $48 = $359;
   $360 = $48;
   $361 = HEAP8[$360>>0]|0;
   $362 = $361&255;
   $49 = $362;
   $363 = $9;
   $364 = ((($363)) + 1|0);
   $9 = $364;
   HEAP8[$363>>0] = 58;
   $50 = 0;
   while(1) {
    $365 = $50;
    $366 = $49;
    $367 = ($365>>>0)<($366>>>0);
    if (!($367)) {
     break;
    }
    $368 = $48;
    $369 = $50;
    $370 = (($369) + 1)|0;
    $371 = (($368) + ($370)|0);
    $372 = HEAP8[$371>>0]|0;
    $373 = $17;
    $374 = $373&1;
    _fc_solve_card_stringify($372,$51,$374);
    $375 = $9;
    HEAP32[$vararg_buffer45>>2] = $51;
    $376 = (_sprintf($375,13517,$vararg_buffer45)|0);
    $377 = $9;
    $378 = (($377) + ($376)|0);
    $9 = $378;
    $379 = $50;
    $380 = (($379) + 1)|0;
    $50 = $380;
   }
   $381 = $49;
   $382 = ($381|0)!=(0);
   if (!($382)) {
    $383 = $9;
    $384 = ((($383)) + 1|0);
    $9 = $384;
    HEAP8[$383>>0] = 32;
   }
   $385 = $9;
   $386 = ((($385)) + 1|0);
   $9 = $386;
   HEAP8[$385>>0] = 10;
   $387 = $47;
   $388 = (($387) + 1)|0;
   $47 = $388;
  }
  $389 = $9;
  HEAP8[$389>>0] = 0;
  STACKTOP = sp;return;
 }
 $26 = 0;
 while(1) {
  $123 = $26;
  $124 = $12;
  $125 = (($124>>>0) / 4)&-1;
  $126 = $12;
  $127 = (($126>>>0) % 4)&-1;
  $128 = ($127|0)==(0);
  $129 = $128 ? 0 : 1;
  $130 = (($125) + ($129))|0;
  $131 = ($123>>>0)<($130>>>0);
  if (!($131)) {
   break;
  }
  $29 = $27;
  $30 = $28;
  $132 = $12;
  $133 = $26;
  $134 = $133<<2;
  $135 = (($132) - ($134))|0;
  $136 = ($135>>>0)<(4);
  if ($136) {
   $137 = $12;
   $138 = $26;
   $139 = $138<<2;
   $140 = (($137) - ($139))|0;
   $141 = $140;
  } else {
   $141 = 4;
  }
  $31 = $141;
  $32 = 0;
  while(1) {
   $142 = $32;
   $143 = $31;
   $144 = ($142>>>0)<($143>>>0);
   if (!($144)) {
    break;
   }
   $145 = $10;
   $146 = ((($145)) + 40|0);
   $147 = $26;
   $148 = $147<<2;
   $149 = $32;
   $150 = (($148) + ($149))|0;
   $151 = (($20) + ($150<<2)|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (($146) + ($152)|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = $17;
   $156 = $155&1;
   _render_freecell_card($154,$33,$156);
   $157 = $30;
   HEAP32[$vararg_buffer>>2] = $33;
   $158 = (_sprintf($157,13402,$vararg_buffer)|0);
   $159 = $30;
   $160 = (($159) + ($158)|0);
   $30 = $160;
   $161 = $29;
   (_strcpy($161,13407)|0);
   $162 = $29;
   $163 = (_strchr($162,0)|0);
   $29 = $163;
   $164 = $32;
   $165 = (($164) + 1)|0;
   $32 = $165;
  }
  $166 = $26;
  $167 = $14;
  $168 = ($166>>>0)<($167>>>0);
  $169 = $9;
  if ($168) {
   $170 = $26;
   $171 = $170<<2;
   $172 = (($18) + (($171*10)|0)|0);
   $173 = $26;
   $174 = $173<<2;
   $175 = (($174) + 1)|0;
   $176 = (($18) + (($175*10)|0)|0);
   $177 = $26;
   $178 = $177<<2;
   $179 = (($178) + 2)|0;
   $180 = (($18) + (($179*10)|0)|0);
   $181 = $26;
   $182 = $181<<2;
   $183 = (($182) + 3)|0;
   $184 = (($18) + (($183*10)|0)|0);
   HEAP32[$vararg_buffer1>>2] = $28;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $172;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = $176;
   $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr6>>2] = $180;
   $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
   HEAP32[$vararg_ptr7>>2] = $184;
   $185 = (_sprintf($169,13412,$vararg_buffer1)|0);
   $186 = $9;
   $187 = (($186) + ($185)|0);
   $9 = $187;
  } else {
   HEAP32[$vararg_buffer8>>2] = $28;
   $188 = (_sprintf($169,13450,$vararg_buffer8)|0);
   $189 = $9;
   $190 = (($189) + ($188)|0);
   $9 = $190;
  }
  $191 = $9;
  HEAP32[$vararg_buffer11>>2] = $27;
  $192 = (_sprintf($191,13450,$vararg_buffer11)|0);
  $193 = $9;
  $194 = (($193) + ($192)|0);
  $9 = $194;
  $195 = $26;
  $196 = (($195) + 1)|0;
  $26 = $196;
 }
 while(1) {
  $197 = $26;
  $198 = $14;
  $199 = ($197>>>0)<($198>>>0);
  $200 = $9;
  if (!($199)) {
   break;
  }
  $201 = $26;
  $202 = $201<<2;
  $203 = (($18) + (($202*10)|0)|0);
  $204 = $26;
  $205 = $204<<2;
  $206 = (($205) + 1)|0;
  $207 = (($18) + (($206*10)|0)|0);
  $208 = $26;
  $209 = $208<<2;
  $210 = (($209) + 2)|0;
  $211 = (($18) + (($210*10)|0)|0);
  $212 = $26;
  $213 = $212<<2;
  $214 = (($213) + 3)|0;
  $215 = (($18) + (($214*10)|0)|0);
  HEAP32[$vararg_buffer14>>2] = 15246;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $203;
  $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
  HEAP32[$vararg_ptr18>>2] = $207;
  $vararg_ptr19 = ((($vararg_buffer14)) + 12|0);
  HEAP32[$vararg_ptr19>>2] = $211;
  $vararg_ptr20 = ((($vararg_buffer14)) + 16|0);
  HEAP32[$vararg_ptr20>>2] = $215;
  $216 = (_sprintf($200,13412,$vararg_buffer14)|0);
  $217 = $9;
  $218 = (($217) + ($216)|0);
  $9 = $218;
  $219 = $26;
  $220 = (($219) + 1)|0;
  $26 = $220;
 }
 $221 = ((($200)) + 1|0);
 $9 = $221;
 HEAP8[$200>>0] = 10;
 $222 = $9;
 $223 = ((($222)) + 1|0);
 $9 = $223;
 HEAP8[$222>>0] = 10;
 $34 = 0;
 while(1) {
  $224 = $34;
  $225 = $13;
  $226 = ($224>>>0)<($225>>>0);
  $227 = $9;
  if (!($226)) {
   break;
  }
  HEAP32[$vararg_buffer21>>2] = 13457;
  $228 = (_sprintf($227,13454,$vararg_buffer21)|0);
  $229 = $9;
  $230 = (($229) + ($228)|0);
  $9 = $230;
  $231 = $34;
  $232 = (($231) + 1)|0;
  $34 = $232;
 }
 $233 = ((($227)) + 1|0);
 $9 = $233;
 HEAP8[$227>>0] = 10;
 $35 = 0;
 $36 = 0;
 while(1) {
  $234 = $36;
  $235 = $13;
  $236 = ($234>>>0)<($235>>>0);
  if (!($236)) {
   break;
  }
  $237 = $10;
  $238 = $36;
  $239 = (($19) + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($237) + ($240<<2)|0);
  $242 = HEAP32[$241>>2]|0;
  $243 = HEAP8[$242>>0]|0;
  $244 = $243&255;
  $37 = $244;
  $245 = $37;
  $246 = $35;
  $247 = ($245>>>0)>($246>>>0);
  if ($247) {
   $248 = $37;
   $35 = $248;
  }
  $249 = $36;
  $250 = (($249) + 1)|0;
  $36 = $250;
 }
 $38 = 0;
 while(1) {
  $251 = $38;
  $252 = $35;
  $253 = ($251>>>0)<($252>>>0);
  if (!($253)) {
   break;
  }
  $39 = 0;
  while(1) {
   $254 = $39;
   $255 = $13;
   $256 = ($254>>>0)<($255>>>0);
   if (!($256)) {
    break;
   }
   $257 = $10;
   $258 = $39;
   $259 = (($19) + ($258<<2)|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = (($257) + ($260<<2)|0);
   $262 = HEAP32[$261>>2]|0;
   $40 = $262;
   $263 = $40;
   $264 = HEAP8[$263>>0]|0;
   $265 = $264&255;
   $41 = $265;
   $266 = $38;
   $267 = $41;
   $268 = ($266>>>0)>=($267>>>0);
   if ($268) {
    $269 = $9;
    HEAP32[$vararg_buffer24>>2] = 13462;
    $270 = (_sprintf($269,13454,$vararg_buffer24)|0);
    $271 = $9;
    $272 = (($271) + ($270)|0);
    $9 = $272;
   } else {
    $273 = $40;
    $274 = $38;
    $275 = (($274) + 1)|0;
    $276 = (($273) + ($275)|0);
    $277 = HEAP8[$276>>0]|0;
    $278 = $17;
    $279 = $278&1;
    _fc_solve_card_stringify($277,$42,$279);
    $280 = $9;
    HEAP32[$vararg_buffer27>>2] = $42;
    $281 = (_sprintf($280,13402,$vararg_buffer27)|0);
    $282 = $9;
    $283 = (($282) + ($281)|0);
    $9 = $283;
   }
   $284 = $39;
   $285 = (($284) + 1)|0;
   $39 = $285;
  }
  $286 = $9;
  $287 = ((($286)) + 1|0);
  $9 = $287;
  HEAP8[$286>>0] = 10;
  $288 = $38;
  $289 = (($288) + 1)|0;
  $38 = $289;
 }
 $389 = $9;
 HEAP8[$389>>0] = 0;
 STACKTOP = sp;return;
}
function _rank2str_356($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $2&1;
 $5 = $6;
 $7 = $4;
 $8 = $5;
 $9 = $8&1;
 $10 = $9 ? 4000 : 4064;
 $11 = $3;
 $12 = (($10) + ($11<<2)|0);
 (_strcpy($7,$12)|0);
 STACKTOP = sp;return;
}
function _render_freecell_card($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $2&1;
 $5 = $6;
 $7 = $3;
 $8 = $7&255;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = $4;
  HEAP8[$10>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $11 = $3;
  $12 = $4;
  $13 = $5;
  $14 = $13&1;
  _fc_solve_card_stringify($11,$12,$14);
  STACKTOP = sp;return;
 }
}
function _fc_solve_pats__get_moves($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 36|0;
 $8 = sp + 56|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$7>>2] = 0;
 $18 = $4;
 $19 = (_get_possible_moves($18,$8,$7)|0);
 $9 = $19;
 $20 = $9;
 $10 = $20;
 $21 = HEAP8[$8>>0]|0;
 $22 = $21&1;
 if (!($22)) {
  $23 = $4;
  $24 = ((($23)) + 2276|0);
  $11 = $24;
  $25 = $11;
  $26 = $9;
  $27 = (($25) + ($26<<3)|0);
  $12 = $27;
  while(1) {
   $28 = $11;
   $29 = $12;
   $30 = ($28>>>0)<($29>>>0);
   $31 = $4;
   if (!($30)) {
    break;
   }
   $32 = $11;
   $33 = (_prune_seahaven($31,$32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $11;
    HEAP8[$35>>0] = 0;
    $36 = $10;
    $37 = (($36) + -1)|0;
    $10 = $37;
   } else {
    $38 = $4;
    $39 = $11;
    $40 = $5;
    $41 = (_prune_redundant($38,$39,$40)|0);
    $42 = ($41|0)!=(0);
    if ($42) {
     $43 = $11;
     HEAP8[$43>>0] = 0;
     $44 = $10;
     $45 = (($44) + -1)|0;
     $10 = $45;
    }
   }
   $46 = $11;
   $47 = ((($46)) + 8|0);
   $11 = $47;
  }
  $48 = $10;
  _mark_irreversible($31,$48);
 }
 $49 = $10;
 $50 = ($49|0)==(0);
 if ($50) {
  $51 = $4;
  $52 = (_is_win($51)|0);
  do {
   if ($52) {
    $53 = $4;
    $54 = $5;
    _win($53,$54);
    $55 = $4;
    $56 = ((($55)) + 35640|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&1;
    $59 = $4;
    if ($58) {
     $60 = ((($59)) + 35644|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($61) + 1)|0;
     HEAP32[$60>>2] = $62;
     break;
    } else {
     $63 = ((($59)) + 35656|0);
     HEAP32[$63>>2] = 0;
     break;
    }
   }
  } while(0);
  $3 = 0;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $64 = HEAP8[$8>>0]|0;
 $65 = $64&1;
 if (!($65)) {
  $66 = $4;
  $67 = $4;
  $68 = ((($67)) + 2276|0);
  $69 = $9;
  _prioritize($66,$68,$69);
 }
 $70 = $4;
 $71 = $10;
 $72 = $71<<3;
 $73 = (_fc_solve_pats__malloc($70,$72)|0);
 $14 = $73;
 $13 = $73;
 $74 = $13;
 $75 = ($74|0)==(0|0);
 if ($75) {
  $3 = 0;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $76 = $10;
 $77 = $6;
 HEAP32[$77>>2] = $76;
 $78 = HEAP8[$8>>0]|0;
 $79 = $78&1;
 $80 = HEAP32[$7>>2]|0;
 $81 = ($80|0)==(0);
 $or$cond = $79 | $81;
 L30: do {
  if ($or$cond) {
   $15 = 0;
   while(1) {
    $82 = $15;
    $83 = $9;
    $84 = ($82|0)<($83|0);
    if (!($84)) {
     break L30;
    }
    $85 = $4;
    $86 = ((($85)) + 2276|0);
    $87 = $15;
    $88 = (($86) + ($87<<3)|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = ($90|0)!=(0);
    if ($91) {
     $92 = $13;
     $93 = ((($92)) + 8|0);
     $13 = $93;
     $94 = $4;
     $95 = ((($94)) + 2276|0);
     $96 = $15;
     $97 = (($95) + ($96<<3)|0);
     ;HEAP8[$92>>0]=HEAP8[$97>>0]|0;HEAP8[$92+1>>0]=HEAP8[$97+1>>0]|0;HEAP8[$92+2>>0]=HEAP8[$97+2>>0]|0;HEAP8[$92+3>>0]=HEAP8[$97+3>>0]|0;HEAP8[$92+4>>0]=HEAP8[$97+4>>0]|0;HEAP8[$92+5>>0]=HEAP8[$97+5>>0]|0;HEAP8[$92+6>>0]=HEAP8[$97+6>>0]|0;HEAP8[$92+7>>0]=HEAP8[$97+7>>0]|0;
    }
    $98 = $15;
    $99 = (($98) + 1)|0;
    $15 = $99;
   }
  } else {
   $100 = HEAP32[$7>>2]|0;
   $16 = $100;
   while(1) {
    $101 = $16;
    $102 = $9;
    $103 = ($101|0)<($102|0);
    if (!($103)) {
     break;
    }
    $104 = $4;
    $105 = ((($104)) + 2276|0);
    $106 = $16;
    $107 = (($105) + ($106<<3)|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = ($109|0)!=(0);
    if ($110) {
     $111 = $13;
     $112 = ((($111)) + 8|0);
     $13 = $112;
     $113 = $4;
     $114 = ((($113)) + 2276|0);
     $115 = $16;
     $116 = (($114) + ($115<<3)|0);
     ;HEAP8[$111>>0]=HEAP8[$116>>0]|0;HEAP8[$111+1>>0]=HEAP8[$116+1>>0]|0;HEAP8[$111+2>>0]=HEAP8[$116+2>>0]|0;HEAP8[$111+3>>0]=HEAP8[$116+3>>0]|0;HEAP8[$111+4>>0]=HEAP8[$116+4>>0]|0;HEAP8[$111+5>>0]=HEAP8[$116+5>>0]|0;HEAP8[$111+6>>0]=HEAP8[$116+6>>0]|0;HEAP8[$111+7>>0]=HEAP8[$116+7>>0]|0;
    }
    $117 = $16;
    $118 = (($117) + 1)|0;
    $16 = $118;
   }
   $17 = 0;
   while(1) {
    $119 = $17;
    $120 = HEAP32[$7>>2]|0;
    $121 = ($119|0)<($120|0);
    if (!($121)) {
     break L30;
    }
    $122 = $4;
    $123 = ((($122)) + 2276|0);
    $124 = $17;
    $125 = (($123) + ($124<<3)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = ($127|0)!=(0);
    if ($128) {
     $129 = $13;
     $130 = ((($129)) + 8|0);
     $13 = $130;
     $131 = $4;
     $132 = ((($131)) + 2276|0);
     $133 = $17;
     $134 = (($132) + ($133<<3)|0);
     ;HEAP8[$129>>0]=HEAP8[$134>>0]|0;HEAP8[$129+1>>0]=HEAP8[$134+1>>0]|0;HEAP8[$129+2>>0]=HEAP8[$134+2>>0]|0;HEAP8[$129+3>>0]=HEAP8[$134+3>>0]|0;HEAP8[$129+4>>0]=HEAP8[$134+4>>0]|0;HEAP8[$129+5>>0]=HEAP8[$134+5>>0]|0;HEAP8[$129+6>>0]=HEAP8[$134+6>>0]|0;HEAP8[$129+7>>0]=HEAP8[$134+7>>0]|0;
    }
    $135 = $17;
    $136 = (($135) + 1)|0;
    $17 = $136;
   }
  }
 } while(0);
 $137 = $14;
 $3 = $137;
 $138 = $3;
 STACKTOP = sp;return ($138|0);
}
function _get_possible_moves($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $8 = sp + 220|0;
 $15 = sp + 208|0;
 $19 = sp + 192|0;
 $27 = sp + 176|0;
 $37 = sp + 160|0;
 $43 = sp + 144|0;
 $46 = sp + 128|0;
 $51 = sp + 120|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $52 = $4;
 $53 = HEAP32[$52>>2]|0;
 $7 = $53;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 ;HEAP8[$8>>0]=HEAP8[$55>>0]|0;HEAP8[$8+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$8+3>>0]=HEAP8[$55+3>>0]|0;
 $56 = $4;
 $57 = ((($56)) + 2276|0);
 $9 = $57;
 $10 = 0;
 while(1) {
  $58 = $10;
  $59 = ((($8)) + 1|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = ($58|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = $4;
  $64 = ((($63)) + 820|0);
  $65 = $10;
  $66 = (($64) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $11 = $67;
  $68 = $11;
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $12 = $70;
  $71 = $12;
  $72 = ($71|0)!=(0);
  if ($72) {
   $73 = $11;
   $74 = $12;
   $75 = (($74) - 1)|0;
   $76 = (($75) + 1)|0;
   $77 = (($73) + ($76)|0);
   $78 = HEAP8[$77>>0]|0;
   $13 = $78;
   $79 = $13;
   $80 = $79&255;
   $81 = $80 & 3;
   $14 = $81;
   $82 = $13;
   $83 = $82&255;
   $84 = (2)?($83 >> 2):($83);
   $85 = $4;
   $86 = ((($85)) + 820|0);
   $87 = ((($86)) + 48|0);
   $88 = $14;
   $89 = (($87) + ($88)|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = (($91) + 1)|0;
   $93 = ($84|0)==($92|0);
   if ($93) {
    $94 = $9;
    $95 = ((($94)) + 8|0);
    $9 = $95;
    $96 = $13;
    HEAP8[$15>>0] = $96;
    $97 = ((($15)) + 1|0);
    $98 = $10;
    $99 = $98&255;
    HEAP8[$97>>0] = $99;
    $100 = ((($15)) + 2|0);
    $101 = $14;
    $102 = $101&255;
    HEAP8[$100>>0] = $102;
    $103 = ((($15)) + 3|0);
    HEAP8[$103>>0] = 3;
    $104 = ((($15)) + 4|0);
    HEAP8[$104>>0] = 1;
    $105 = ((($15)) + 5|0);
    $106 = $12;
    $107 = ($106|0)>(1);
    if ($107) {
     $108 = $11;
     $109 = $12;
     $110 = (($109) - 2)|0;
     $111 = (($110) + 1)|0;
     $112 = (($108) + ($111)|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = $113&255;
     $116 = $114;
    } else {
     $116 = 0;
    }
    $115 = $116&255;
    HEAP8[$105>>0] = $115;
    $117 = ((($15)) + 6|0);
    HEAP8[$117>>0] = 0;
    $118 = ((($15)) + 7|0);
    HEAP8[$118>>0] = 0;
    ;HEAP8[$94>>0]=HEAP8[$15>>0]|0;HEAP8[$94+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$94+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$94+3>>0]=HEAP8[$15+3>>0]|0;HEAP8[$94+4>>0]=HEAP8[$15+4>>0]|0;HEAP8[$94+5>>0]=HEAP8[$15+5>>0]|0;HEAP8[$94+6>>0]=HEAP8[$15+6>>0]|0;HEAP8[$94+7>>0]=HEAP8[$15+7>>0]|0;
    $119 = $4;
    $120 = $14;
    $121 = $13;
    $122 = $121&255;
    $123 = (2)?($122 >> 2):($122);
    $124 = (_good_automove($119,$120,$123)|0);
    if ($124) {
     label = 8;
     break;
    }
   }
  }
  $138 = $10;
  $139 = (($138) + 1)|0;
  $10 = $139;
 }
 if ((label|0) == 8) {
  $125 = $5;
  HEAP8[$125>>0] = 1;
  $126 = $9;
  $127 = $4;
  $128 = ((($127)) + 2276|0);
  $129 = $126;
  $130 = $128;
  $131 = (($129) - ($130))|0;
  $132 = (($131|0) / 8)&-1;
  $133 = ($132|0)!=(1);
  if ($133) {
   $134 = $4;
   $135 = ((($134)) + 2276|0);
   $136 = $9;
   $137 = ((($136)) + -8|0);
   ;HEAP8[$135>>0]=HEAP8[$137>>0]|0;HEAP8[$135+1>>0]=HEAP8[$137+1>>0]|0;HEAP8[$135+2>>0]=HEAP8[$137+2>>0]|0;HEAP8[$135+3>>0]=HEAP8[$137+3>>0]|0;HEAP8[$135+4>>0]=HEAP8[$137+4>>0]|0;HEAP8[$135+5>>0]=HEAP8[$137+5>>0]|0;HEAP8[$135+6>>0]=HEAP8[$137+6>>0]|0;HEAP8[$135+7>>0]=HEAP8[$137+7>>0]|0;
  }
  $3 = 1;
  $568 = $3;
  STACKTOP = sp;return ($568|0);
 }
 $16 = 0;
 while(1) {
  $140 = $16;
  $141 = HEAP8[$8>>0]|0;
  $142 = $141&255;
  $143 = ($140|0)<($142|0);
  if (!($143)) {
   break;
  }
  $144 = $4;
  $145 = ((($144)) + 820|0);
  $146 = ((($145)) + 40|0);
  $147 = $16;
  $148 = (($146) + ($147)|0);
  $149 = HEAP8[$148>>0]|0;
  $17 = $149;
  $150 = $17;
  $151 = $150&255;
  $152 = ($151|0)==(0);
  if (!($152)) {
   $153 = $17;
   $154 = $153&255;
   $155 = $154 & 3;
   $18 = $155;
   $156 = $17;
   $157 = $156&255;
   $158 = (2)?($157 >> 2):($157);
   $159 = $4;
   $160 = ((($159)) + 820|0);
   $161 = ((($160)) + 48|0);
   $162 = $18;
   $163 = (($161) + ($162)|0);
   $164 = HEAP8[$163>>0]|0;
   $165 = $164&255;
   $166 = (($165) + 1)|0;
   $167 = ($158|0)==($166|0);
   if ($167) {
    $168 = $9;
    $169 = ((($168)) + 8|0);
    $9 = $169;
    $170 = $17;
    HEAP8[$19>>0] = $170;
    $171 = ((($19)) + 1|0);
    $172 = $16;
    $173 = $172&255;
    HEAP8[$171>>0] = $173;
    $174 = ((($19)) + 2|0);
    $175 = $18;
    $176 = $175&255;
    HEAP8[$174>>0] = $176;
    $177 = ((($19)) + 3|0);
    HEAP8[$177>>0] = 2;
    $178 = ((($19)) + 4|0);
    HEAP8[$178>>0] = 1;
    $179 = ((($19)) + 5|0);
    HEAP8[$179>>0] = 0;
    $180 = ((($19)) + 6|0);
    HEAP8[$180>>0] = 0;
    $181 = ((($19)) + 7|0);
    HEAP8[$181>>0] = 0;
    ;HEAP8[$168>>0]=HEAP8[$19>>0]|0;HEAP8[$168+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$168+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$168+3>>0]=HEAP8[$19+3>>0]|0;HEAP8[$168+4>>0]=HEAP8[$19+4>>0]|0;HEAP8[$168+5>>0]=HEAP8[$19+5>>0]|0;HEAP8[$168+6>>0]=HEAP8[$19+6>>0]|0;HEAP8[$168+7>>0]=HEAP8[$19+7>>0]|0;
    $182 = $4;
    $183 = $18;
    $184 = $17;
    $185 = $184&255;
    $186 = (2)?($185 >> 2):($185);
    $187 = (_good_automove($182,$183,$186)|0);
    if ($187) {
     label = 17;
     break;
    }
   }
  }
  $201 = $16;
  $202 = (($201) + 1)|0;
  $16 = $202;
 }
 if ((label|0) == 17) {
  $188 = $5;
  HEAP8[$188>>0] = 1;
  $189 = $9;
  $190 = $4;
  $191 = ((($190)) + 2276|0);
  $192 = $189;
  $193 = $191;
  $194 = (($192) - ($193))|0;
  $195 = (($194|0) / 8)&-1;
  $196 = ($195|0)!=(1);
  if ($196) {
   $197 = $4;
   $198 = ((($197)) + 2276|0);
   $199 = $9;
   $200 = ((($199)) + -8|0);
   ;HEAP8[$198>>0]=HEAP8[$200>>0]|0;HEAP8[$198+1>>0]=HEAP8[$200+1>>0]|0;HEAP8[$198+2>>0]=HEAP8[$200+2>>0]|0;HEAP8[$198+3>>0]=HEAP8[$200+3>>0]|0;HEAP8[$198+4>>0]=HEAP8[$200+4>>0]|0;HEAP8[$198+5>>0]=HEAP8[$200+5>>0]|0;HEAP8[$198+6>>0]=HEAP8[$200+6>>0]|0;HEAP8[$198+7>>0]=HEAP8[$200+7>>0]|0;
  }
  $3 = 1;
  $568 = $3;
  STACKTOP = sp;return ($568|0);
 }
 $203 = $5;
 HEAP8[$203>>0] = 0;
 $204 = $9;
 $205 = $4;
 $206 = ((($205)) + 2276|0);
 $207 = $204;
 $208 = $206;
 $209 = (($207) - ($208))|0;
 $210 = (($209|0) / 8)&-1;
 $211 = $6;
 HEAP32[$211>>2] = $210;
 $212 = $7;
 $213 = ((($212)) + 3|0);
 $214 = HEAP8[$213>>0]|0;
 $215 = $214&255;
 $216 = (2)?($215 >> 2):($215);
 $217 = $216 & 3;
 $218 = ($217|0)==(1);
 $219 = $218 ^ 1;
 $220 = $219&1;
 $20 = $220;
 $221 = $4;
 $222 = ((($8)) + 1|0);
 $223 = HEAP8[$222>>0]|0;
 $224 = $223&255;
 $225 = (_calc_empty_col_idx($221,$224)|0);
 $21 = $225;
 $226 = $21;
 $227 = ($226|0)>=(0);
 $228 = $227&1;
 $22 = $228;
 $229 = $22;
 $230 = $229&1;
 L32: do {
  if ($230) {
   $23 = 0;
   while(1) {
    $231 = $23;
    $232 = ((($8)) + 1|0);
    $233 = HEAP8[$232>>0]|0;
    $234 = $233&255;
    $235 = ($231|0)<($234|0);
    if (!($235)) {
     break L32;
    }
    $236 = $4;
    $237 = ((($236)) + 820|0);
    $238 = $23;
    $239 = (($237) + ($238<<2)|0);
    $240 = HEAP32[$239>>2]|0;
    $24 = $240;
    $241 = $24;
    $242 = HEAP8[$241>>0]|0;
    $243 = $242&255;
    $25 = $243;
    $244 = $25;
    $245 = ($244|0)>(1);
    if ($245) {
     $246 = $24;
     $247 = $25;
     $248 = (($247) - 1)|0;
     $249 = (($248) + 1)|0;
     $250 = (($246) + ($249)|0);
     $251 = HEAP8[$250>>0]|0;
     $26 = $251;
     $252 = $20;
     $253 = $252&1;
     $254 = $26;
     $255 = (_fcs_pats_is_king_only($253,$254)|0);
     if ($255) {
      $256 = $9;
      $257 = ((($256)) + 8|0);
      $9 = $257;
      $258 = $26;
      HEAP8[$27>>0] = $258;
      $259 = ((($27)) + 1|0);
      $260 = $23;
      $261 = $260&255;
      HEAP8[$259>>0] = $261;
      $262 = ((($27)) + 2|0);
      $263 = $21;
      $264 = $263&255;
      HEAP8[$262>>0] = $264;
      $265 = ((($27)) + 3|0);
      HEAP8[$265>>0] = 3;
      $266 = ((($27)) + 4|0);
      HEAP8[$266>>0] = 3;
      $267 = ((($27)) + 5|0);
      $268 = $24;
      $269 = $25;
      $270 = (($269) - 2)|0;
      $271 = (($270) + 1)|0;
      $272 = (($268) + ($271)|0);
      $273 = HEAP8[$272>>0]|0;
      HEAP8[$267>>0] = $273;
      $274 = ((($27)) + 6|0);
      HEAP8[$274>>0] = 0;
      $275 = ((($27)) + 7|0);
      $276 = $4;
      $277 = ((($276)) + 2800|0);
      $278 = ((($277)) + 12|0);
      $279 = HEAP32[$278>>2]|0;
      $280 = $279&255;
      HEAP8[$275>>0] = $280;
      ;HEAP8[$256>>0]=HEAP8[$27>>0]|0;HEAP8[$256+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$256+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$256+3>>0]=HEAP8[$27+3>>0]|0;HEAP8[$256+4>>0]=HEAP8[$27+4>>0]|0;HEAP8[$256+5>>0]=HEAP8[$27+5>>0]|0;HEAP8[$256+6>>0]=HEAP8[$27+6>>0]|0;HEAP8[$256+7>>0]=HEAP8[$27+7>>0]|0;
     }
    }
    $281 = $23;
    $282 = (($281) + 1)|0;
    $23 = $282;
   }
  }
 } while(0);
 $283 = $7;
 $284 = ((($283)) + 4|0);
 $285 = HEAP8[$284>>0]|0;
 $28 = $285;
 $286 = $7;
 $287 = ((($286)) + 5|0);
 $288 = HEAP8[$287>>0]|0;
 $29 = $288;
 $30 = 0;
 while(1) {
  $289 = $30;
  $290 = ((($8)) + 1|0);
  $291 = HEAP8[$290>>0]|0;
  $292 = $291&255;
  $293 = ($289|0)<($292|0);
  if (!($293)) {
   break;
  }
  $294 = $4;
  $295 = ((($294)) + 820|0);
  $296 = $30;
  $297 = (($295) + ($296<<2)|0);
  $298 = HEAP32[$297>>2]|0;
  $31 = $298;
  $299 = $31;
  $300 = HEAP8[$299>>0]|0;
  $301 = $300&255;
  $32 = $301;
  $302 = $32;
  $303 = ($302|0)>(0);
  L45: do {
   if ($303) {
    $304 = $31;
    $305 = $32;
    $306 = (($305) - 1)|0;
    $307 = (($306) + 1)|0;
    $308 = (($304) + ($307)|0);
    $309 = HEAP8[$308>>0]|0;
    $33 = $309;
    $34 = 0;
    while(1) {
     $310 = $34;
     $311 = ((($8)) + 1|0);
     $312 = HEAP8[$311>>0]|0;
     $313 = $312&255;
     $314 = ($310|0)<($313|0);
     if (!($314)) {
      break L45;
     }
     $315 = $30;
     $316 = $34;
     $317 = ($315|0)==($316|0);
     if (!($317)) {
      $318 = $4;
      $319 = ((($318)) + 820|0);
      $320 = $34;
      $321 = (($319) + ($320<<2)|0);
      $322 = HEAP32[$321>>2]|0;
      $35 = $322;
      $323 = $35;
      $324 = HEAP8[$323>>0]|0;
      $325 = $324&255;
      $326 = ($325|0)>(0);
      if ($326) {
       $327 = $35;
       $328 = $35;
       $329 = HEAP8[$328>>0]|0;
       $330 = $329&255;
       $331 = (($330) - 1)|0;
       $332 = (($331) + 1)|0;
       $333 = (($327) + ($332)|0);
       $334 = HEAP8[$333>>0]|0;
       $36 = $334;
       $335 = $33;
       $336 = $335&255;
       $337 = (2)?($336 >> 2):($336);
       $338 = $36;
       $339 = $338&255;
       $340 = (2)?($339 >> 2):($339);
       $341 = (($340) - 1)|0;
       $342 = ($337|0)==($341|0);
       if ($342) {
        $343 = $33;
        $344 = $36;
        $345 = $28;
        $346 = $29;
        $347 = (_fcs_pats_is_suitable($343,$344,$345,$346)|0);
        if ($347) {
         $348 = $9;
         $349 = ((($348)) + 8|0);
         $9 = $349;
         $350 = $33;
         HEAP8[$37>>0] = $350;
         $351 = ((($37)) + 1|0);
         $352 = $30;
         $353 = $352&255;
         HEAP8[$351>>0] = $353;
         $354 = ((($37)) + 2|0);
         $355 = $34;
         $356 = $355&255;
         HEAP8[$354>>0] = $356;
         $357 = ((($37)) + 3|0);
         HEAP8[$357>>0] = 3;
         $358 = ((($37)) + 4|0);
         HEAP8[$358>>0] = 3;
         $359 = ((($37)) + 5|0);
         $360 = $32;
         $361 = ($360|0)>(1);
         if ($361) {
          $362 = $31;
          $363 = $32;
          $364 = (($363) - 2)|0;
          $365 = (($364) + 1)|0;
          $366 = (($362) + ($365)|0);
          $367 = HEAP8[$366>>0]|0;
          $368 = $367&255;
          $370 = $368;
         } else {
          $370 = 0;
         }
         $369 = $370&255;
         HEAP8[$359>>0] = $369;
         $371 = ((($37)) + 6|0);
         $372 = $36;
         HEAP8[$371>>0] = $372;
         $373 = ((($37)) + 7|0);
         $374 = $4;
         $375 = ((($374)) + 2800|0);
         $376 = ((($375)) + 16|0);
         $377 = HEAP32[$376>>2]|0;
         $378 = $377&255;
         HEAP8[$373>>0] = $378;
         ;HEAP8[$348>>0]=HEAP8[$37>>0]|0;HEAP8[$348+1>>0]=HEAP8[$37+1>>0]|0;HEAP8[$348+2>>0]=HEAP8[$37+2>>0]|0;HEAP8[$348+3>>0]=HEAP8[$37+3>>0]|0;HEAP8[$348+4>>0]=HEAP8[$37+4>>0]|0;HEAP8[$348+5>>0]=HEAP8[$37+5>>0]|0;HEAP8[$348+6>>0]=HEAP8[$37+6>>0]|0;HEAP8[$348+7>>0]=HEAP8[$37+7>>0]|0;
        }
       }
      }
     }
     $379 = $34;
     $380 = (($379) + 1)|0;
     $34 = $380;
    }
   }
  } while(0);
  $381 = $30;
  $382 = (($381) + 1)|0;
  $30 = $382;
 }
 $38 = 0;
 while(1) {
  $383 = $38;
  $384 = HEAP8[$8>>0]|0;
  $385 = $384&255;
  $386 = ($383|0)<($385|0);
  if (!($386)) {
   break;
  }
  $387 = $4;
  $388 = ((($387)) + 820|0);
  $389 = ((($388)) + 40|0);
  $390 = $38;
  $391 = (($389) + ($390)|0);
  $392 = HEAP8[$391>>0]|0;
  $39 = $392;
  $393 = $39;
  $394 = $393&255;
  $395 = ($394|0)==(0);
  L64: do {
   if (!($395)) {
    $40 = 0;
    while(1) {
     $396 = $40;
     $397 = ((($8)) + 1|0);
     $398 = HEAP8[$397>>0]|0;
     $399 = $398&255;
     $400 = ($396|0)<($399|0);
     if (!($400)) {
      break L64;
     }
     $401 = $4;
     $402 = ((($401)) + 820|0);
     $403 = $40;
     $404 = (($402) + ($403<<2)|0);
     $405 = HEAP32[$404>>2]|0;
     $41 = $405;
     $406 = $41;
     $407 = HEAP8[$406>>0]|0;
     $408 = $407&255;
     $409 = ($408|0)>(0);
     if ($409) {
      $410 = $41;
      $411 = $41;
      $412 = HEAP8[$411>>0]|0;
      $413 = $412&255;
      $414 = (($413) - 1)|0;
      $415 = (($414) + 1)|0;
      $416 = (($410) + ($415)|0);
      $417 = HEAP8[$416>>0]|0;
      $42 = $417;
      $418 = $39;
      $419 = $418&255;
      $420 = (2)?($419 >> 2):($419);
      $421 = $42;
      $422 = $421&255;
      $423 = (2)?($422 >> 2):($422);
      $424 = (($423) - 1)|0;
      $425 = ($420|0)==($424|0);
      if ($425) {
       $426 = $39;
       $427 = $42;
       $428 = $28;
       $429 = $29;
       $430 = (_fcs_pats_is_suitable($426,$427,$428,$429)|0);
       if ($430) {
        $431 = $9;
        $432 = ((($431)) + 8|0);
        $9 = $432;
        $433 = $39;
        HEAP8[$43>>0] = $433;
        $434 = ((($43)) + 1|0);
        $435 = $38;
        $436 = $435&255;
        HEAP8[$434>>0] = $436;
        $437 = ((($43)) + 2|0);
        $438 = $40;
        $439 = $438&255;
        HEAP8[$437>>0] = $439;
        $440 = ((($43)) + 3|0);
        HEAP8[$440>>0] = 2;
        $441 = ((($43)) + 4|0);
        HEAP8[$441>>0] = 3;
        $442 = ((($43)) + 5|0);
        HEAP8[$442>>0] = 0;
        $443 = ((($43)) + 6|0);
        $444 = $42;
        HEAP8[$443>>0] = $444;
        $445 = ((($43)) + 7|0);
        $446 = $4;
        $447 = ((($446)) + 2800|0);
        $448 = ((($447)) + 20|0);
        $449 = HEAP32[$448>>2]|0;
        $450 = $449&255;
        HEAP8[$445>>0] = $450;
        ;HEAP8[$431>>0]=HEAP8[$43>>0]|0;HEAP8[$431+1>>0]=HEAP8[$43+1>>0]|0;HEAP8[$431+2>>0]=HEAP8[$43+2>>0]|0;HEAP8[$431+3>>0]=HEAP8[$43+3>>0]|0;HEAP8[$431+4>>0]=HEAP8[$43+4>>0]|0;HEAP8[$431+5>>0]=HEAP8[$43+5>>0]|0;HEAP8[$431+6>>0]=HEAP8[$43+6>>0]|0;HEAP8[$431+7>>0]=HEAP8[$43+7>>0]|0;
       }
      }
     }
     $451 = $40;
     $452 = (($451) + 1)|0;
     $40 = $452;
    }
   }
  } while(0);
  $453 = $38;
  $454 = (($453) + 1)|0;
  $38 = $454;
 }
 $455 = $22;
 $456 = $455&1;
 L76: do {
  if ($456) {
   $44 = 0;
   while(1) {
    $457 = $44;
    $458 = HEAP8[$8>>0]|0;
    $459 = $458&255;
    $460 = ($457|0)<($459|0);
    if (!($460)) {
     break L76;
    }
    $461 = $4;
    $462 = ((($461)) + 820|0);
    $463 = ((($462)) + 40|0);
    $464 = $44;
    $465 = (($463) + ($464)|0);
    $466 = HEAP8[$465>>0]|0;
    $45 = $466;
    $467 = $45;
    $468 = $467&255;
    $469 = ($468|0)!=(0);
    if ($469) {
     $470 = $20;
     $471 = $470&1;
     $472 = $45;
     $473 = (_fcs_pats_is_king_only($471,$472)|0);
     if ($473) {
      $474 = $9;
      $475 = ((($474)) + 8|0);
      $9 = $475;
      $476 = $45;
      HEAP8[$46>>0] = $476;
      $477 = ((($46)) + 1|0);
      $478 = $44;
      $479 = $478&255;
      HEAP8[$477>>0] = $479;
      $480 = ((($46)) + 2|0);
      $481 = $21;
      $482 = $481&255;
      HEAP8[$480>>0] = $482;
      $483 = ((($46)) + 3|0);
      HEAP8[$483>>0] = 2;
      $484 = ((($46)) + 4|0);
      HEAP8[$484>>0] = 3;
      $485 = ((($46)) + 5|0);
      HEAP8[$485>>0] = 0;
      $486 = ((($46)) + 6|0);
      HEAP8[$486>>0] = 0;
      $487 = ((($46)) + 7|0);
      $488 = $4;
      $489 = ((($488)) + 2800|0);
      $490 = ((($489)) + 24|0);
      $491 = HEAP32[$490>>2]|0;
      $492 = $491&255;
      HEAP8[$487>>0] = $492;
      ;HEAP8[$474>>0]=HEAP8[$46>>0]|0;HEAP8[$474+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$474+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$474+3>>0]=HEAP8[$46+3>>0]|0;HEAP8[$474+4>>0]=HEAP8[$46+4>>0]|0;HEAP8[$474+5>>0]=HEAP8[$46+5>>0]|0;HEAP8[$474+6>>0]=HEAP8[$46+6>>0]|0;HEAP8[$474+7>>0]=HEAP8[$46+7>>0]|0;
     }
    }
    $493 = $44;
    $494 = (($493) + 1)|0;
    $44 = $494;
   }
  }
 } while(0);
 $47 = 0;
 while(1) {
  $495 = $47;
  $496 = HEAP8[$8>>0]|0;
  $497 = $496&255;
  $498 = ($495|0)<($497|0);
  if (!($498)) {
   break;
  }
  $499 = $4;
  $500 = ((($499)) + 820|0);
  $501 = ((($500)) + 40|0);
  $502 = $47;
  $503 = (($501) + ($502)|0);
  $504 = HEAP8[$503>>0]|0;
  $505 = $504&255;
  $506 = ($505|0)==(0);
  if ($506) {
   label = 63;
   break;
  }
  $559 = $47;
  $560 = (($559) + 1)|0;
  $47 = $560;
 }
 L90: do {
  if ((label|0) == 63) {
   $48 = 0;
   while(1) {
    $507 = $48;
    $508 = ((($8)) + 1|0);
    $509 = HEAP8[$508>>0]|0;
    $510 = $509&255;
    $511 = ($507|0)<($510|0);
    if (!($511)) {
     break L90;
    }
    $512 = $4;
    $513 = ((($512)) + 820|0);
    $514 = $48;
    $515 = (($513) + ($514<<2)|0);
    $516 = HEAP32[$515>>2]|0;
    $49 = $516;
    $517 = $49;
    $518 = HEAP8[$517>>0]|0;
    $519 = $518&255;
    $50 = $519;
    $520 = $50;
    $521 = ($520>>>0)>(0);
    if ($521) {
     $522 = $9;
     $523 = ((($522)) + 8|0);
     $9 = $523;
     $524 = $49;
     $525 = $50;
     $526 = (($525) - 1)|0;
     $527 = (($526) + 1)|0;
     $528 = (($524) + ($527)|0);
     $529 = HEAP8[$528>>0]|0;
     HEAP8[$51>>0] = $529;
     $530 = ((($51)) + 1|0);
     $531 = $48;
     $532 = $531&255;
     HEAP8[$530>>0] = $532;
     $533 = ((($51)) + 2|0);
     $534 = $47;
     $535 = $534&255;
     HEAP8[$533>>0] = $535;
     $536 = ((($51)) + 3|0);
     HEAP8[$536>>0] = 3;
     $537 = ((($51)) + 4|0);
     HEAP8[$537>>0] = 2;
     $538 = ((($51)) + 5|0);
     $539 = $50;
     $540 = ($539>>>0)>(1);
     if ($540) {
      $541 = $49;
      $542 = $50;
      $543 = (($542) - 2)|0;
      $544 = (($543) + 1)|0;
      $545 = (($541) + ($544)|0);
      $546 = HEAP8[$545>>0]|0;
      $547 = $546&255;
      $549 = $547;
     } else {
      $549 = 0;
     }
     $548 = $549&255;
     HEAP8[$538>>0] = $548;
     $550 = ((($51)) + 6|0);
     HEAP8[$550>>0] = 0;
     $551 = ((($51)) + 7|0);
     $552 = $4;
     $553 = ((($552)) + 2800|0);
     $554 = ((($553)) + 28|0);
     $555 = HEAP32[$554>>2]|0;
     $556 = $555&255;
     HEAP8[$551>>0] = $556;
     ;HEAP8[$522>>0]=HEAP8[$51>>0]|0;HEAP8[$522+1>>0]=HEAP8[$51+1>>0]|0;HEAP8[$522+2>>0]=HEAP8[$51+2>>0]|0;HEAP8[$522+3>>0]=HEAP8[$51+3>>0]|0;HEAP8[$522+4>>0]=HEAP8[$51+4>>0]|0;HEAP8[$522+5>>0]=HEAP8[$51+5>>0]|0;HEAP8[$522+6>>0]=HEAP8[$51+6>>0]|0;HEAP8[$522+7>>0]=HEAP8[$51+7>>0]|0;
    }
    $557 = $48;
    $558 = (($557) + 1)|0;
    $48 = $558;
   }
  }
 } while(0);
 $561 = $9;
 $562 = $4;
 $563 = ((($562)) + 2276|0);
 $564 = $561;
 $565 = $563;
 $566 = (($564) - ($565))|0;
 $567 = (($566|0) / 8)&-1;
 $3 = $567;
 $568 = $3;
 STACKTOP = sp;return ($568|0);
}
function _prune_seahaven($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 52|0;
 $3 = $0;
 $4 = $1;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $5 = $18;
 $19 = $5;
 ;HEAP8[$6>>0]=HEAP8[$19>>0]|0;HEAP8[$6+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$6+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$6+3>>0]=HEAP8[$19+3>>0]|0;
 $20 = $5;
 $21 = ((($20)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 & 3;
 $25 = ($24|0)==(1);
 if ($25) {
  $26 = $5;
  $27 = ((($26)) + 3|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (2)?($29 >> 2):($29);
  $31 = $30 & 3;
  $32 = ($31|0)==(1);
  if ($32) {
   $33 = $4;
   $34 = ((($33)) + 4|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = ($36|0)!=(3);
   if (!($37)) {
    $38 = $4;
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = (2)?($40 >> 2):($40);
    $42 = (($41) + 1)|0;
    $7 = $42;
    $43 = $4;
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $45 & 3;
    $8 = $46;
    $47 = $3;
    $48 = ((($47)) + 820|0);
    $49 = $4;
    $50 = ((($49)) + 2|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&255;
    $53 = (($48) + ($52<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $9 = $54;
    $55 = $9;
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $10 = $57;
    $11 = 0;
    $58 = $10;
    $59 = (($58) - 1)|0;
    $12 = $59;
    while(1) {
     $60 = $12;
     $61 = ($60|0)>=(0);
     if (!($61)) {
      break;
     }
     $62 = $9;
     $63 = $12;
     $64 = (($63) + 1)|0;
     $65 = (($62) + ($64)|0);
     $66 = HEAP8[$65>>0]|0;
     $13 = $66;
     $67 = $13;
     $68 = $67&255;
     $69 = $68 & 3;
     $70 = $8;
     $71 = ($69|0)==($70|0);
     if ($71) {
      $72 = $13;
      $73 = $72&255;
      $74 = (2)?($73 >> 2):($73);
      $75 = $7;
      $76 = $11;
      $77 = (($75) + ($76))|0;
      $78 = ($74|0)==($77|0);
      if ($78) {
       $79 = $11;
       $80 = (($79) + 1)|0;
       $11 = $80;
      }
     }
     $81 = $12;
     $82 = (($81) + -1)|0;
     $12 = $82;
    }
    $83 = $11;
    $84 = HEAP8[$6>>0]|0;
    $85 = $84&255;
    $86 = (($85) + 1)|0;
    $87 = ($83|0)<($86|0);
    if ($87) {
     $2 = 0;
     $110 = $2;
     STACKTOP = sp;return ($110|0);
    }
    $88 = $7;
    $89 = (($88) - 1)|0;
    $14 = $89;
    $15 = 0;
    while(1) {
     $90 = $15;
     $91 = $10;
     $92 = ($90|0)<($91|0);
     if (!($92)) {
      label = 19;
      break;
     }
     $93 = $9;
     $94 = $15;
     $95 = (($94) + 1)|0;
     $96 = (($93) + ($95)|0);
     $97 = HEAP8[$96>>0]|0;
     $16 = $97;
     $98 = $16;
     $99 = $98&255;
     $100 = $99 & 3;
     $101 = $8;
     $102 = ($100|0)==($101|0);
     if ($102) {
      $103 = $16;
      $104 = $103&255;
      $105 = (2)?($104 >> 2):($104);
      $106 = $14;
      $107 = ($105|0)<($106|0);
      if ($107) {
       label = 17;
       break;
      }
     }
     $108 = $15;
     $109 = (($108) + 1)|0;
     $15 = $109;
    }
    if ((label|0) == 17) {
     $2 = 1;
     $110 = $2;
     STACKTOP = sp;return ($110|0);
    }
    else if ((label|0) == 19) {
     $2 = 0;
     $110 = $2;
     STACKTOP = sp;return ($110|0);
    }
   }
  }
 }
 $2 = 0;
 $110 = $2;
 STACKTOP = sp;return ($110|0);
}
function _prune_redundant($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 56|0;
 $10 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $15 = $4;
 $16 = HEAP32[$15>>2]|0;
 ;HEAP8[$7>>0]=HEAP8[$16>>0]|0;HEAP8[$7+1>>0]=HEAP8[$16+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$16+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[$16+3>>0]|0;
 $17 = $6;
 $11 = $17;
 $18 = $11;
 $19 = ((($18)) + 22|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = ($21|0)==(0);
 if ($22) {
  $3 = 0;
  $224 = $3;
  STACKTOP = sp;return ($224|0);
 }
 $23 = $11;
 $24 = ((($23)) + 12|0);
 $9 = $24;
 $25 = $9;
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $5;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = ($27|0)==($30|0);
 if ($31) {
  $3 = 1;
  $224 = $3;
  STACKTOP = sp;return ($224|0);
 }
 $32 = $11;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $11 = $34;
 $35 = $11;
 $36 = ((($35)) + 22|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37 << 16 >> 16;
 $39 = ($38|0)==(0);
 if ($39) {
  $3 = 0;
  $224 = $3;
  STACKTOP = sp;return ($224|0);
 }
 $40 = $9;
 HEAP32[$10>>2] = $40;
 $8 = -1;
 $12 = 1;
 while(1) {
  $41 = $12;
  $42 = ($41|0)<(4);
  if (!($42)) {
   break;
  }
  $43 = $11;
  $44 = ((($43)) + 12|0);
  $45 = $12;
  $46 = (($10) + ($45<<2)|0);
  HEAP32[$46>>2] = $44;
  $47 = $9;
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $5;
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = ($49|0)==($52|0);
  if ($53) {
   label = 10;
   break;
  }
  $55 = $11;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $11 = $57;
  $58 = $11;
  $59 = ((($58)) + 22|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = ($61|0)==(0);
  if ($62) {
   label = 12;
   break;
  }
  $63 = $12;
  $64 = (($63) + 1)|0;
  $12 = $64;
 }
 if ((label|0) == 10) {
  $54 = $12;
  $8 = $54;
 }
 else if ((label|0) == 12) {
  $3 = 0;
  $224 = $3;
  STACKTOP = sp;return ($224|0);
 }
 $65 = $8;
 $66 = ($65|0)<(0);
 if ($66) {
  $3 = 0;
  $224 = $3;
  STACKTOP = sp;return ($224|0);
 }
 $13 = 0;
 $67 = $6;
 $11 = $67;
 $14 = 0;
 while(1) {
  $68 = $14;
  $69 = $8;
  $70 = ($68|0)<($69|0);
  if (!($70)) {
   break;
  }
  $71 = $13;
  $72 = $71&1;
  if ($72) {
   $81 = 1;
  } else {
   $73 = $11;
   $74 = ((($73)) + 24|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = HEAP8[$7>>0]|0;
   $78 = $77&255;
   $79 = ($76|0)==($78|0);
   $81 = $79;
  }
  $80 = $81&1;
  $13 = $80;
  $82 = $11;
  $83 = ((($82)) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $11 = $84;
  $85 = $14;
  $86 = (($85) + 1)|0;
  $14 = $86;
 }
 $87 = $9;
 $88 = ((($87)) + 3|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = ($90|0)==(2);
 if ($91) {
  $92 = $9;
  $93 = ((($92)) + 4|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = ($95|0)==(3);
  if ($96) {
   $97 = $5;
   $98 = ((($97)) + 3|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $99&255;
   $101 = ($100|0)==(3);
   if ($101) {
    $102 = $5;
    $103 = ((($102)) + 4|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = ($105|0)==(2);
    if ($106) {
     $107 = $13;
     $108 = $107&1;
     if ($108) {
      $3 = 0;
      $224 = $3;
      STACKTOP = sp;return ($224|0);
     }
     $109 = $5;
     $110 = HEAP8[$109>>0]|0;
     $111 = $8;
     $112 = (_is_card_dest($110,$10,$111)|0);
     $113 = ($112|0)!=(0);
     if ($113) {
      $3 = 0;
      $224 = $3;
      STACKTOP = sp;return ($224|0);
     } else {
      $3 = 1;
      $224 = $3;
      STACKTOP = sp;return ($224|0);
     }
    }
   }
  }
 }
 $114 = $9;
 $115 = ((($114)) + 3|0);
 $116 = HEAP8[$115>>0]|0;
 $117 = $116&255;
 $118 = ($117|0)==(3);
 if ($118) {
  $119 = $9;
  $120 = ((($119)) + 4|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = $121&255;
  $123 = ($122|0)==(2);
  if ($123) {
   $124 = $5;
   $125 = ((($124)) + 3|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = ($127|0)==(2);
   if ($128) {
    $129 = $5;
    $130 = ((($129)) + 4|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131&255;
    $133 = ($132|0)==(3);
    if (!($133)) {
     label = 34;
    }
   } else {
    label = 34;
   }
  } else {
   label = 34;
  }
 } else {
  label = 34;
 }
 do {
  if ((label|0) == 34) {
   $134 = $9;
   $135 = ((($134)) + 3|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = $136&255;
   $138 = ($137|0)==(3);
   if ($138) {
    $139 = $9;
    $140 = ((($139)) + 4|0);
    $141 = HEAP8[$140>>0]|0;
    $142 = $141&255;
    $143 = ($142|0)==(3);
    if ($143) {
     $144 = $5;
     $145 = ((($144)) + 3|0);
     $146 = HEAP8[$145>>0]|0;
     $147 = $146&255;
     $148 = ($147|0)==(3);
     if ($148) {
      $149 = $5;
      $150 = ((($149)) + 4|0);
      $151 = HEAP8[$150>>0]|0;
      $152 = $151&255;
      $153 = ($152|0)==(3);
      if ($153) {
       break;
      }
     }
    }
   }
   $169 = $9;
   $170 = ((($169)) + 3|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   $173 = ($172|0)==(3);
   if ($173) {
    $174 = $9;
    $175 = ((($174)) + 4|0);
    $176 = HEAP8[$175>>0]|0;
    $177 = $176&255;
    $178 = ($177|0)==(3);
    if ($178) {
     $179 = $5;
     $180 = ((($179)) + 3|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&255;
     $183 = ($182|0)==(3);
     if ($183) {
      $184 = $5;
      $185 = ((($184)) + 4|0);
      $186 = HEAP8[$185>>0]|0;
      $187 = $186&255;
      $188 = ($187|0)==(2);
      if ($188) {
       $189 = $11;
       $190 = ((($189)) + 24|0);
       $191 = HEAP8[$190>>0]|0;
       $192 = $191&255;
       $193 = HEAP8[$7>>0]|0;
       $194 = $193&255;
       $195 = ($192|0)!=($194|0);
       if ($195) {
        $196 = $13;
        $197 = $196&1;
        if (!($197)) {
         $3 = 1;
         $224 = $3;
         STACKTOP = sp;return ($224|0);
        }
       }
       $3 = 0;
       $224 = $3;
       STACKTOP = sp;return ($224|0);
      }
     }
    }
   }
   $198 = $9;
   $199 = ((($198)) + 3|0);
   $200 = HEAP8[$199>>0]|0;
   $201 = $200&255;
   $202 = ($201|0)==(2);
   if ($202) {
    $203 = $9;
    $204 = ((($203)) + 4|0);
    $205 = HEAP8[$204>>0]|0;
    $206 = $205&255;
    $207 = ($206|0)==(3);
    if ($207) {
     $208 = $5;
     $209 = ((($208)) + 3|0);
     $210 = HEAP8[$209>>0]|0;
     $211 = $210&255;
     $212 = ($211|0)==(3);
     if ($212) {
      $213 = $5;
      $214 = ((($213)) + 4|0);
      $215 = HEAP8[$214>>0]|0;
      $216 = $215&255;
      $217 = ($216|0)==(3);
      if ($217) {
       $218 = $5;
       $219 = ((($218)) + 6|0);
       $220 = HEAP8[$219>>0]|0;
       $221 = $8;
       $222 = (_was_card_moved_or_dest($220,$10,$221)|0);
       $223 = ($222|0)!=(0);
       if ($223) {
        $3 = 0;
        $224 = $3;
        STACKTOP = sp;return ($224|0);
       } else {
        $3 = 1;
        $224 = $3;
        STACKTOP = sp;return ($224|0);
       }
      }
     }
    }
   }
   $3 = 0;
   $224 = $3;
   STACKTOP = sp;return ($224|0);
  }
 } while(0);
 $154 = $9;
 $155 = ((($154)) + 5|0);
 $156 = HEAP8[$155>>0]|0;
 $157 = $156&255;
 $158 = $5;
 $159 = ((($158)) + 6|0);
 $160 = HEAP8[$159>>0]|0;
 $161 = $160&255;
 $162 = ($157|0)!=($161|0);
 if ($162) {
  $3 = 0;
  $224 = $3;
  STACKTOP = sp;return ($224|0);
 }
 $163 = $5;
 $164 = ((($163)) + 6|0);
 $165 = HEAP8[$164>>0]|0;
 $166 = $8;
 $167 = (_was_card_moved_or_dest($165,$10,$166)|0);
 $168 = ($167|0)!=(0);
 if ($168) {
  $3 = 0;
  $224 = $3;
  STACKTOP = sp;return ($224|0);
 } else {
  $3 = 1;
  $224 = $3;
  STACKTOP = sp;return ($224|0);
 }
 return (0)|0;
}
function _mark_irreversible($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $4 = $12;
 $13 = $4;
 $14 = ((($13)) + 4|0);
 $15 = HEAP8[$14>>0]|0;
 $5 = $15;
 $16 = $4;
 $17 = ((($16)) + 5|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $4;
 $20 = ((($19)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (2)?($22 >> 2):($22);
 $24 = $23 & 3;
 $25 = ($24|0)==(1);
 $26 = $25&1;
 $7 = $26;
 $27 = $2;
 $28 = ((($27)) + 2800|0);
 $29 = ((($28)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $8 = $30;
 $31 = $2;
 $32 = ((($31)) + 2276|0);
 $9 = $32;
 $33 = $9;
 $34 = $3;
 $35 = (($33) + ($34<<3)|0);
 $10 = $35;
 while(1) {
  $36 = $9;
  $37 = $10;
  $38 = ($36>>>0)<($37>>>0);
  if (!($38)) {
   break;
  }
  $39 = $5;
  $40 = $6;
  $41 = $7;
  $42 = $41&1;
  $43 = $9;
  $44 = (_is_irreversible_move($39,$40,$42,$43)|0);
  if ($44) {
   $45 = $8;
   $46 = $9;
   $47 = ((($46)) + 7|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48 << 24 >> 24;
   $50 = (($49) + ($45))|0;
   $51 = $50&255;
   HEAP8[$47>>0] = $51;
  }
  $52 = $9;
  $53 = ((($52)) + 8|0);
  $9 = $53;
 }
 STACKTOP = sp;return;
}
function _is_win($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = ($4|0)<(4);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = $2;
  $7 = ((($6)) + 820|0);
  $8 = ((($7)) + 48|0);
  $9 = $3;
  $10 = (($8) + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12|0)!=(13);
  if ($13) {
   label = 4;
   break;
  }
  $14 = $3;
  $15 = (($14) + 1)|0;
  $3 = $15;
 }
 if ((label|0) == 4) {
  $$expand_i1_val = 0;
  HEAP8[$1>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $16 = $$pre_trunc&1;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $$expand_i1_val2 = 1;
  HEAP8[$1>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$1>>0]|0;
  $16 = $$pre_trunc&1;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _win($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $9 = $2;
 $10 = ((($9)) + 37668|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $2;
  $14 = ((($13)) + 37668|0);
  $15 = HEAP32[$14>>2]|0;
  _free($15);
  $16 = $2;
  $17 = ((($16)) + 37668|0);
  HEAP32[$17>>2] = 0;
 }
 $4 = 0;
 $18 = $3;
 $5 = $18;
 while(1) {
  $19 = $5;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  $23 = $4;
  if (!($22)) {
   break;
  }
  $24 = (($23) + 1)|0;
  $4 = $24;
  $25 = $5;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $5 = $27;
 }
 $28 = $23<<3;
 $29 = (_malloc($28)|0);
 $6 = $29;
 $30 = $6;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  STACKTOP = sp;return;
 }
 $32 = $6;
 $33 = $4;
 $34 = (($32) + ($33<<3)|0);
 $7 = $34;
 $35 = $3;
 $8 = $35;
 while(1) {
  $36 = $8;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   break;
  }
  $40 = $7;
  $41 = ((($40)) + -8|0);
  $7 = $41;
  $42 = $8;
  $43 = ((($42)) + 12|0);
  ;HEAP8[$41>>0]=HEAP8[$43>>0]|0;HEAP8[$41+1>>0]=HEAP8[$43+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$43+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$43+3>>0]|0;HEAP8[$41+4>>0]=HEAP8[$43+4>>0]|0;HEAP8[$41+5>>0]=HEAP8[$43+5>>0]|0;HEAP8[$41+6>>0]=HEAP8[$43+6>>0]|0;HEAP8[$41+7>>0]=HEAP8[$43+7>>0]|0;
  $44 = $8;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $8 = $46;
 }
 $47 = $6;
 $48 = $2;
 $49 = ((($48)) + 37668|0);
 HEAP32[$49>>2] = $47;
 $50 = $4;
 $51 = $2;
 $52 = ((($51)) + 37672|0);
 HEAP32[$52>>2] = $50;
 STACKTOP = sp;return;
}
function _prioritize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $6 = sp + 108|0;
 $7 = sp;
 $9 = sp + 104|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $26 = $3;
 $27 = HEAP32[$26>>2]|0;
 ;HEAP8[$6>>0]=HEAP8[$27>>0]|0;HEAP8[$6+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$6+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$6+3>>0]=HEAP8[$27+3>>0]|0;
 $8 = 0;
 while(1) {
  $28 = $8;
  $29 = ($28>>>0)<(8);
  if (!($29)) {
   break;
  }
  $30 = $8;
  $31 = (($7) + ($30<<2)|0);
  HEAP32[$31>>2] = -1;
  $32 = $8;
  $33 = (($32) + 1)|0;
  $8 = $33;
 }
 $10 = 0;
 while(1) {
  $34 = $10;
  $35 = ($34|0)<(4);
  if (!($35)) {
   break;
  }
  $36 = $10;
  $37 = (($9) + ($36)|0);
  HEAP8[$37>>0] = 0;
  $38 = $3;
  $39 = ((($38)) + 820|0);
  $40 = ((($39)) + 48|0);
  $41 = $10;
  $42 = (($40) + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $11 = $43;
  $44 = $11;
  $45 = $44&255;
  $46 = ($45|0)!=(13);
  if ($46) {
   $47 = $11;
   $48 = $47&255;
   $49 = (($48) + 1)|0;
   $50 = $10;
   $51 = (_fcs_make_card_372($49,$50)|0);
   $52 = $10;
   $53 = (($9) + ($52)|0);
   HEAP8[$53>>0] = $51;
  }
  $54 = $10;
  $55 = (($54) + 1)|0;
  $10 = $55;
 }
 $12 = 0;
 $13 = 0;
 L12: while(1) {
  $56 = $13;
  $57 = ((($6)) + 1|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = ($56|0)<($59|0);
  if (!($60)) {
   break;
  }
  $61 = $3;
  $62 = ((($61)) + 820|0);
  $63 = $13;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $14 = $65;
  $66 = $14;
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $15 = $68;
  $16 = 0;
  while(1) {
   $69 = $16;
   $70 = $15;
   $71 = ($69|0)<($70|0);
   if (!($71)) {
    break;
   }
   $72 = $14;
   $73 = $16;
   $74 = (($73) + 1)|0;
   $75 = (($72) + ($74)|0);
   $76 = HEAP8[$75>>0]|0;
   $17 = $76;
   $77 = $17;
   $78 = $77&255;
   $79 = $78 & 3;
   $18 = $79;
   $80 = $18;
   $81 = (($9) + ($80)|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = ($83|0)!=(0);
   do {
    if ($84) {
     $85 = $17;
     $86 = $85&255;
     $87 = $18;
     $88 = (($9) + ($87)|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = $89&255;
     $91 = ($86|0)==($90|0);
     if (!($91)) {
      $92 = $17;
      $93 = $92&255;
      $94 = $18;
      $95 = (($9) + ($94)|0);
      $96 = HEAP8[$95>>0]|0;
      $97 = (_fcs_pats_next_card($96)|0);
      $98 = $97&255;
      $99 = ($93|0)==($98|0);
      if (!($99)) {
       break;
      }
     }
     $100 = $13;
     $101 = $12;
     $102 = (($101) + 1)|0;
     $12 = $102;
     $103 = (($7) + ($101<<2)|0);
     HEAP32[$103>>2] = $100;
     $104 = $12;
     $105 = ($104|0)==(8);
     if ($105) {
      break L12;
     }
    }
   } while(0);
   $106 = $16;
   $107 = (($106) + 1)|0;
   $16 = $107;
  }
  $108 = $13;
  $109 = (($108) + 1)|0;
  $13 = $109;
 }
 $110 = $4;
 $111 = $5;
 $112 = (($110) + ($111<<3)|0);
 $19 = $112;
 $113 = $4;
 $20 = $113;
 while(1) {
  $114 = $20;
  $115 = $19;
  $116 = ($114>>>0)<($115>>>0);
  if (!($116)) {
   break;
  }
  $117 = $20;
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $120 = ($119|0)==(0);
  L29: do {
   if (!($120)) {
    $121 = $20;
    $122 = ((($121)) + 3|0);
    $123 = HEAP8[$122>>0]|0;
    $124 = $123&255;
    $125 = ($124|0)==(3);
    if ($125) {
     $126 = $20;
     $127 = ((($126)) + 1|0);
     $128 = HEAP8[$127>>0]|0;
     $129 = $128&255;
     $21 = $129;
     $22 = 0;
     while(1) {
      $130 = $22;
      $131 = $12;
      $132 = ($130|0)<($131|0);
      if (!($132)) {
       break;
      }
      $133 = $21;
      $134 = $22;
      $135 = (($7) + ($134<<2)|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($133|0)==($136|0);
      if ($137) {
       $138 = $3;
       $139 = ((($138)) + 2800|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = $20;
       $142 = ((($141)) + 7|0);
       $143 = HEAP8[$142>>0]|0;
       $144 = $143 << 24 >> 24;
       $145 = (($144) + ($140))|0;
       $146 = $145&255;
       HEAP8[$142>>0] = $146;
      }
      $147 = $22;
      $148 = (($147) + 1)|0;
      $22 = $148;
     }
     $149 = $3;
     $150 = ((($149)) + 820|0);
     $151 = $21;
     $152 = (($150) + ($151<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $23 = $153;
     $154 = $23;
     $155 = HEAP8[$154>>0]|0;
     $156 = $155&255;
     $157 = ($156|0)>(1);
     if ($157) {
      $158 = $23;
      $159 = $23;
      $160 = HEAP8[$159>>0]|0;
      $161 = $160&255;
      $162 = (($161) - 2)|0;
      $163 = (($162) + 1)|0;
      $164 = (($158) + ($163)|0);
      $165 = HEAP8[$164>>0]|0;
      $24 = $165;
      $166 = $24;
      $167 = $166&255;
      $168 = $24;
      $169 = $168&255;
      $170 = $169 & 3;
      $171 = (($9) + ($170)|0);
      $172 = HEAP8[$171>>0]|0;
      $173 = $172&255;
      $174 = ($167|0)==($173|0);
      if ($174) {
       $175 = $3;
       $176 = ((($175)) + 2800|0);
       $177 = ((($176)) + 4|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = $20;
       $180 = ((($179)) + 7|0);
       $181 = HEAP8[$180>>0]|0;
       $182 = $181 << 24 >> 24;
       $183 = (($182) + ($178))|0;
       $184 = $183&255;
       HEAP8[$180>>0] = $184;
      }
     }
    }
    $185 = $20;
    $186 = ((($185)) + 4|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = ($188|0)==(3);
    if ($189) {
     $25 = 0;
     while(1) {
      $190 = $25;
      $191 = $12;
      $192 = ($190|0)<($191|0);
      if (!($192)) {
       break L29;
      }
      $193 = $20;
      $194 = ((($193)) + 2|0);
      $195 = HEAP8[$194>>0]|0;
      $196 = $195&255;
      $197 = $25;
      $198 = (($7) + ($197<<2)|0);
      $199 = HEAP32[$198>>2]|0;
      $200 = ($196|0)==($199|0);
      if ($200) {
       $201 = $3;
       $202 = ((($201)) + 2800|0);
       $203 = ((($202)) + 8|0);
       $204 = HEAP32[$203>>2]|0;
       $205 = $20;
       $206 = ((($205)) + 7|0);
       $207 = HEAP8[$206>>0]|0;
       $208 = $207 << 24 >> 24;
       $209 = (($208) - ($204))|0;
       $210 = $209&255;
       HEAP8[$206>>0] = $210;
      }
      $211 = $25;
      $212 = (($211) + 1)|0;
      $25 = $212;
     }
    }
   }
  } while(0);
  $213 = $20;
  $214 = ((($213)) + 8|0);
  $20 = $214;
 }
 STACKTOP = sp;return;
}
function _fc_solve_pats__malloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6>>>0)>($9>>>0);
 if ($10) {
  $11 = $3;
  $12 = ((($11)) + 35656|0);
  HEAP32[$12>>2] = -1;
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 $13 = $4;
 $14 = (_malloc($13)|0);
 $5 = $14;
 $15 = $5;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = $3;
  $18 = ((($17)) + 35656|0);
  HEAP32[$18>>2] = -1;
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 } else {
  $19 = $4;
  $20 = $3;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) - ($19))|0;
  HEAP32[$21>>2] = $23;
  $24 = $5;
  $2 = $24;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _fcs_make_card_372($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4&255;
 $6 = $5&255;
 $7 = $6 << 2;
 $8 = $3;
 $9 = $8&255;
 $10 = $9&255;
 $11 = $7 | $10;
 $12 = $11&255;
 STACKTOP = sp;return ($12|0);
}
function _fcs_pats_next_card($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&255;
 $4 = (($3) + 4)|0;
 $5 = $4&255;
 STACKTOP = sp;return ($5|0);
}
function _is_irreversible_move($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 9|0;
 $5 = $0;
 $6 = $1;
 $11 = $2&1;
 $7 = $11;
 $8 = $3;
 $12 = $8;
 $13 = ((($12)) + 4|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)==(1);
 L1: do {
  if ($16) {
   $$expand_i1_val = 1;
   HEAP8[$4>>0] = $$expand_i1_val;
  } else {
   $17 = $8;
   $18 = ((($17)) + 3|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($20|0)==(3);
   do {
    if ($21) {
     $22 = $8;
     $23 = ((($22)) + 5|0);
     $24 = HEAP8[$23>>0]|0;
     $9 = $24;
     $25 = $9;
     $26 = $25&255;
     $27 = ($26|0)!=(0);
     if ($27) {
      $28 = $8;
      $29 = HEAP8[$28>>0]|0;
      $10 = $29;
      $30 = $10;
      $31 = $30&255;
      $32 = (2)?($31 >> 2):($31);
      $33 = $9;
      $34 = $33&255;
      $35 = (2)?($34 >> 2):($34);
      $36 = (($35) - 1)|0;
      $37 = ($32|0)!=($36|0);
      if (!($37)) {
       $38 = $10;
       $39 = $9;
       $40 = $5;
       $41 = $6;
       $42 = (_fcs_pats_is_suitable($38,$39,$40,$41)|0);
       if ($42) {
        break;
       }
      }
      $$expand_i1_val2 = 1;
      HEAP8[$4>>0] = $$expand_i1_val2;
      break L1;
     } else {
      $43 = $7;
      $44 = $43&1;
      if (!($44)) {
       break;
      }
      $45 = $8;
      $46 = HEAP8[$45>>0]|0;
      $47 = $46&255;
      $48 = (_fcs_make_card_372(13,0)|0);
      $49 = $48&255;
      $50 = ($47|0)!=($49|0);
      if (!($50)) {
       break;
      }
      $$expand_i1_val4 = 1;
      HEAP8[$4>>0] = $$expand_i1_val4;
      break L1;
     }
    }
   } while(0);
   $$expand_i1_val6 = 0;
   HEAP8[$4>>0] = $$expand_i1_val6;
  }
 } while(0);
 $$pre_trunc = HEAP8[$4>>0]|0;
 $51 = $$pre_trunc&1;
 STACKTOP = sp;return ($51|0);
}
function _fcs_pats_is_suitable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $8&255;
 $10 = $5;
 $11 = $10&255;
 $12 = $9 ^ $11;
 $13 = $6;
 $14 = $13&255;
 $15 = $12 & $14;
 $16 = $7;
 $17 = $16&255;
 $18 = ($15|0)==($17|0);
 STACKTOP = sp;return ($18|0);
}
function _is_card_dest($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $6;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 6|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = $4;
  $19 = $18&255;
  $20 = ($17|0)==($19|0);
  if ($20) {
   label = 4;
   break;
  }
  $21 = $7;
  $22 = (($21) + 1)|0;
  $7 = $22;
 }
 if ((label|0) == 4) {
  $3 = 1;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _was_card_moved_or_dest($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_was_card_moved($6,$7,$8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $17 = 1;
  $16 = $17&1;
  STACKTOP = sp;return ($16|0);
 }
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = (_is_card_dest($11,$12,$13)|0);
 $15 = ($14|0)!=(0);
 $17 = $15;
 $16 = $17&1;
 STACKTOP = sp;return ($16|0);
}
function _was_card_moved($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $6;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $4;
  $18 = $17&255;
  $19 = ($16|0)==($18|0);
  if ($19) {
   label = 4;
   break;
  }
  $20 = $7;
  $21 = (($20) + 1)|0;
  $7 = $21;
 }
 if ((label|0) == 4) {
  $3 = 1;
  $22 = $3;
  STACKTOP = sp;return ($22|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $22 = $3;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _good_automove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$expand_i1_val5 = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 $12 = $7;
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 & 3;
 $17 = ($16|0)==(1);
 $18 = $6;
 $19 = ($18|0)<=(2);
 $or$cond = $17 | $19;
 if ($or$cond) {
  $$expand_i1_val = 1;
  HEAP8[$3>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $63 = $$pre_trunc&1;
  STACKTOP = sp;return ($63|0);
 }
 $20 = $5;
 $21 = $20 & 1;
 $22 = (1 - ($21))|0;
 $8 = $22;
 while(1) {
  $23 = $8;
  $24 = ($23|0)<(4);
  if (!($24)) {
   label = 13;
   break;
  }
  $25 = $4;
  $26 = ((($25)) + 820|0);
  $27 = ((($26)) + 48|0);
  $28 = $8;
  $29 = (($27) + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $6;
  $33 = (($32) - 1)|0;
  $34 = ($31|0)<($33|0);
  if ($34) {
   break;
  }
  $61 = $8;
  $62 = (($61) + 2)|0;
  $8 = $62;
 }
 if ((label|0) == 13) {
  $$expand_i1_val7 = 1;
  HEAP8[$3>>0] = $$expand_i1_val7;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $63 = $$pre_trunc&1;
  STACKTOP = sp;return ($63|0);
 }
 $35 = $5;
 $36 = $35 & 1;
 $37 = (1 - ($36))|0;
 $9 = $37;
 while(1) {
  $38 = $9;
  $39 = ($38|0)<(4);
  $40 = $4;
  $41 = ((($40)) + 820|0);
  $42 = ((($41)) + 48|0);
  if (!($39)) {
   label = 11;
   break;
  }
  $43 = $9;
  $44 = (($42) + ($43)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $6;
  $48 = (($47) - 2)|0;
  $49 = ($46|0)<($48|0);
  if ($49) {
   label = 9;
   break;
  }
  $50 = $9;
  $51 = (($50) + 2)|0;
  $9 = $51;
 }
 if ((label|0) == 9) {
  $$expand_i1_val3 = 0;
  HEAP8[$3>>0] = $$expand_i1_val3;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $63 = $$pre_trunc&1;
  STACKTOP = sp;return ($63|0);
 }
 else if ((label|0) == 11) {
  $52 = $5;
  $53 = (($52) + 2)|0;
  $54 = $53 & 3;
  $55 = (($42) + ($54)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $6;
  $59 = (($58) - 3)|0;
  $60 = ($57|0)>=($59|0);
  $$expand_i1_val5 = $60&1;
  HEAP8[$3>>0] = $$expand_i1_val5;
  $$pre_trunc = HEAP8[$3>>0]|0;
  $63 = $$pre_trunc&1;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _calc_empty_col_idx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $4;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $3;
  $10 = ((($9)) + 820|0);
  $11 = $5;
  $12 = (($10) + ($11<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = ($15|0)==(0);
  $17 = $5;
  if ($16) {
   label = 4;
   break;
  }
  $18 = (($17) + 1)|0;
  $5 = $18;
 }
 if ((label|0) == 4) {
  $2 = $17;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 else if ((label|0) == 6) {
  $2 = -1;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _fcs_pats_is_king_only($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0&1;
 $2 = $4;
 $3 = $1;
 $5 = $2;
 $6 = $5&1;
 if ($6) {
  $11 = 1;
 } else {
  $7 = $3;
  $8 = $7&255;
  $9 = (2)?($8 >> 2):($8);
  $10 = ($9|0)==(13);
  $11 = $10;
 }
 STACKTOP = sp;return ($11|0);
}
function _fc_solve_pats__sort_piles($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $1 = $0;
 $7 = $1;
 $8 = HEAP32[$7>>2]|0;
 ;HEAP8[$2>>0]=HEAP8[$8>>0]|0;HEAP8[$2+1>>0]=HEAP8[$8+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$8+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$8+3>>0]|0;
 $3 = 0;
 while(1) {
  $9 = $3;
  $10 = ((($2)) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($9|0)<($12|0);
  $14 = $1;
  $15 = ((($14)) + 820|0);
  if (!($13)) {
   break;
  }
  $16 = ((($15)) + 1416|0);
  $17 = $3;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)<(0);
  if ($20) {
   $21 = $1;
   $22 = $3;
   $23 = (_get_pilenum($21,$22)|0);
   $24 = $1;
   $25 = ((($24)) + 820|0);
   $26 = ((($25)) + 1416|0);
   $27 = $3;
   $28 = (($26) + ($27<<2)|0);
   HEAP32[$28>>2] = $23;
   $29 = ($23|0)<(0);
   if ($29) {
    label = 17;
    break;
   }
  }
  $30 = $3;
  $31 = (($30) + 1)|0;
  $3 = $31;
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return;
 }
 $32 = ((($15)) + 1336|0);
 HEAP32[$32>>2] = 0;
 $4 = 1;
 while(1) {
  $33 = $4;
  $34 = ((($2)) + 1|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($33|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $4;
  $39 = (($38) - 1)|0;
  $5 = $39;
  $40 = $1;
  $41 = $1;
  $42 = ((($41)) + 820|0);
  $43 = ((($42)) + 1336|0);
  $44 = $5;
  $45 = (($43) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $4;
  $48 = (_wcmp($40,$46,$47)|0);
  $49 = ($48|0)<(0);
  L13: do {
   if ($49) {
    $50 = $4;
    $51 = $1;
    $52 = ((($51)) + 820|0);
    $53 = ((($52)) + 1336|0);
    $54 = $4;
    $55 = (($53) + ($54<<2)|0);
    HEAP32[$55>>2] = $50;
   } else {
    $56 = $5;
    $6 = $56;
    while(1) {
     $57 = $6;
     $58 = ($57|0)>=(0);
     if (!($58)) {
      break L13;
     }
     $59 = $1;
     $60 = ((($59)) + 820|0);
     $61 = ((($60)) + 1336|0);
     $62 = $6;
     $63 = (($61) + ($62<<2)|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $1;
     $66 = ((($65)) + 820|0);
     $67 = ((($66)) + 1336|0);
     $68 = $6;
     $69 = (($68) + 1)|0;
     $70 = (($67) + ($69<<2)|0);
     HEAP32[$70>>2] = $64;
     $71 = $6;
     $72 = ($71|0)==(0);
     if ($72) {
      break;
     }
     $73 = $1;
     $74 = $1;
     $75 = ((($74)) + 820|0);
     $76 = ((($75)) + 1336|0);
     $77 = $6;
     $78 = (($77) - 1)|0;
     $79 = (($76) + ($78<<2)|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $4;
     $82 = (_wcmp($73,$80,$81)|0);
     $83 = ($82|0)<(0);
     if ($83) {
      break;
     }
     $90 = $6;
     $91 = (($90) + -1)|0;
     $6 = $91;
    }
    $84 = $4;
    $85 = $1;
    $86 = ((($85)) + 820|0);
    $87 = ((($86)) + 1336|0);
    $88 = $6;
    $89 = (($87) + ($88<<2)|0);
    HEAP32[$89>>2] = $84;
   }
  } while(0);
  $92 = $4;
  $93 = (($92) + 1)|0;
  $4 = $93;
 }
 STACKTOP = sp;return;
}
function _get_pilenum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = ((($11)) + 820|0);
 $13 = ((($12)) + 1376|0);
 $14 = $4;
 $15 = (($13) + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16>>>0) % 4093)&-1;
 $5 = $17;
 $18 = $3;
 $19 = ((($18)) + 2876|0);
 $20 = $5;
 $21 = (($19) + ($20<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $6 = $22;
 $7 = 0;
 $23 = $3;
 $24 = ((($23)) + 820|0);
 $25 = $4;
 $26 = (($24) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $8 = $27;
 $28 = $8;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $9 = $30;
 $31 = $8;
 $32 = ((($31)) + 1|0);
 $10 = $32;
 while(1) {
  $33 = $6;
  $34 = ($33|0)!=(0|0);
  if (!($34)) {
   break;
  }
  $35 = $6;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $3;
  $39 = ((($38)) + 820|0);
  $40 = ((($39)) + 1376|0);
  $41 = $4;
  $42 = (($40) + ($41<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($37|0)==($43|0);
  if ($44) {
   $45 = $6;
   $46 = HEAP32[$45>>2]|0;
   $47 = $10;
   $48 = $9;
   $49 = (_memcmp($46,$47,$48)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    break;
   }
  }
  $51 = $6;
  $7 = $51;
  $52 = $6;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $6 = $54;
 }
 $55 = $6;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  $57 = $3;
  $58 = ((($57)) + 19248|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(4096);
  if ($60) {
   $2 = -1;
   $113 = $2;
   STACKTOP = sp;return ($113|0);
  }
  $61 = $3;
  $62 = (_fc_solve_pats__malloc($61,16)|0);
  $6 = $62;
  $63 = $6;
  $64 = ($63|0)==(0|0);
  if ($64) {
   $2 = -1;
   $113 = $2;
   STACKTOP = sp;return ($113|0);
  }
  $65 = $3;
  $66 = $9;
  $67 = (($66) + 1)|0;
  $68 = $67;
  $69 = (_fc_solve_pats__malloc($65,$68)|0);
  $70 = $6;
  HEAP32[$70>>2] = $69;
  $71 = $6;
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)==(0|0);
  if ($73) {
   $74 = $3;
   $75 = $6;
   _fc_solve_pats__release_375($74,$75,16);
   $2 = -1;
   $113 = $2;
   STACKTOP = sp;return ($113|0);
  }
  $76 = $6;
  $77 = HEAP32[$76>>2]|0;
  $78 = $10;
  $79 = $9;
  $80 = (($79) + 1)|0;
  _memcpy(($77|0),($78|0),($80|0))|0;
  $81 = $3;
  $82 = ((($81)) + 820|0);
  $83 = ((($82)) + 1376|0);
  $84 = $4;
  $85 = (($83) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $6;
  $88 = ((($87)) + 4|0);
  HEAP32[$88>>2] = $86;
  $89 = $6;
  $90 = ((($89)) + 12|0);
  HEAP32[$90>>2] = 0;
  $91 = $7;
  $92 = ($91|0)!=(0|0);
  $93 = $6;
  if ($92) {
   $94 = $7;
   $95 = ((($94)) + 12|0);
   HEAP32[$95>>2] = $93;
  } else {
   $96 = $3;
   $97 = ((($96)) + 2876|0);
   $98 = $5;
   $99 = (($97) + ($98<<2)|0);
   HEAP32[$99>>2] = $93;
  }
  $100 = $6;
  $101 = $3;
  $102 = ((($101)) + 19252|0);
  $103 = $3;
  $104 = ((($103)) + 19248|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 1)|0;
  HEAP32[$104>>2] = $106;
  $107 = $6;
  $108 = ((($107)) + 8|0);
  HEAP32[$108>>2] = $105;
  $109 = (($102) + ($105<<2)|0);
  HEAP32[$109>>2] = $100;
 }
 $110 = $6;
 $111 = ((($110)) + 8|0);
 $112 = HEAP32[$111>>2]|0;
 $2 = $112;
 $113 = $2;
 STACKTOP = sp;return ($113|0);
}
function _wcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ((($7)) + 2800|0);
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(0);
 $12 = $4;
 $13 = ((($12)) + 820|0);
 $14 = ((($13)) + 1416|0);
 if ($11) {
  $15 = $6;
  $16 = (($14) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $4;
  $19 = ((($18)) + 820|0);
  $20 = ((($19)) + 1416|0);
  $21 = $5;
  $22 = (($20) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($17) - ($23))|0;
  $3 = $24;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 } else {
  $25 = $5;
  $26 = (($14) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $4;
  $29 = ((($28)) + 820|0);
  $30 = ((($29)) + 1416|0);
  $31 = $6;
  $32 = (($30) + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($27) - ($33))|0;
  $3 = $34;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _fc_solve_pats__release_375($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 _free($6);
 $7 = $5;
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($7))|0;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _fc_solve_pats__do_it($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $1 = $0;
 while(1) {
  $4 = $1;
  $5 = ((($4)) + 37688|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   $8 = $1;
   $9 = (_dequeue_position($8)|0);
   $2 = $9;
   $10 = $2;
   $11 = ($10|0)!=(0|0);
   if (!($11)) {
    label = 12;
    break;
   }
   $12 = $2;
   $13 = $1;
   $14 = ((($13)) + 37688|0);
   HEAP32[$14>>2] = $12;
   $15 = $1;
   $16 = ((($15)) + 37684|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$17>>2] = $12;
   $18 = $1;
   $19 = ((($18)) + 37684|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 8|0);
   HEAP32[$21>>2] = 0;
   $22 = $1;
   $23 = ((($22)) + 37676|0);
   HEAP32[$23>>2] = 0;
   $24 = $1;
   $25 = ((($24)) + 37692|0);
   HEAP32[$25>>2] = 0;
  }
  $26 = $1;
  $27 = (_solve_379($26,$3)|0);
  $28 = ($27|0)!=(0);
  if (!($28)) {
   $29 = $1;
   $30 = $1;
   $31 = ((($30)) + 37688|0);
   $32 = HEAP32[$31>>2]|0;
   _free_position_recursive($29,$32);
  }
  $33 = HEAP8[$3>>0]|0;
  $34 = $33&1;
  if ($34) {
   $35 = $1;
   $36 = ((($35)) + 37688|0);
   HEAP32[$36>>2] = 0;
  }
  $37 = $1;
  $38 = (_check_for_exceeded($37)|0);
  if ($38) {
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return;
 }
 $39 = $1;
 $40 = ((($39)) + 35656|0);
 HEAP32[$40>>2] = -1;
 STACKTOP = sp;return;
}
function _dequeue_position($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $5 = $2;
  $6 = ((($5)) + 37664|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + -1)|0;
  HEAP32[$6>>2] = $8;
  $9 = $2;
  $10 = ((($9)) + 37660|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)<($11|0);
  if ($12) {
   $13 = $3;
   $14 = $13&1;
   if ($14) {
    label = 4;
    break;
   }
   $15 = $2;
   $16 = ((($15)) + 812|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $2;
   $19 = ((($18)) + 37664|0);
   HEAP32[$19>>2] = $17;
   $20 = $2;
   $21 = ((($20)) + 37660|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + -1)|0;
   HEAP32[$21>>2] = $23;
   $24 = ($23|0)<(0);
   if ($24) {
    $25 = $2;
    $26 = ((($25)) + 812|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $2;
    $29 = ((($28)) + 37660|0);
    HEAP32[$29>>2] = $27;
   }
   $30 = $2;
   $31 = ((($30)) + 37660|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if ($33) {
    $3 = 1;
   }
  }
  $34 = $2;
  $35 = ((($34)) + 12|0);
  $36 = $2;
  $37 = ((($36)) + 37664|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($35) + ($38<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if (!($41)) {
   break;
  }
 }
 if ((label|0) == 4) {
  $1 = 0;
  $95 = $1;
  STACKTOP = sp;return ($95|0);
 }
 $42 = $2;
 $43 = ((($42)) + 12|0);
 $44 = $2;
 $45 = ((($44)) + 37664|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($43) + ($46<<2)|0);
 $48 = HEAP32[$47>>2]|0;
 $4 = $48;
 $49 = $4;
 $50 = HEAP32[$49>>2]|0;
 $51 = $2;
 $52 = ((($51)) + 12|0);
 $53 = $2;
 $54 = ((($53)) + 37664|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($52) + ($55<<2)|0);
 HEAP32[$56>>2] = $50;
 while(1) {
  $57 = $2;
  $58 = ((($57)) + 12|0);
  $59 = $2;
  $60 = ((($59)) + 37664|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($58) + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(0|0);
  if ($64) {
   $65 = $2;
   $66 = ((($65)) + 37664|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $2;
   $69 = ((($68)) + 812|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($67|0)==($70|0);
   if ($71) {
    $72 = $2;
    $73 = ((($72)) + 812|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)>(0);
    $96 = $75;
   } else {
    $96 = 0;
   }
  } else {
   $96 = 0;
  }
  $76 = $2;
  if (!($96)) {
   break;
  }
  $77 = ((($76)) + 812|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + -1)|0;
  HEAP32[$77>>2] = $79;
  $80 = $2;
  $81 = ((($80)) + 37664|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + -1)|0;
  HEAP32[$81>>2] = $83;
  $84 = $2;
  $85 = ((($84)) + 37660|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($83|0)<($86|0);
  if ($87) {
   $88 = $2;
   $89 = ((($88)) + 37664|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $2;
   $92 = ((($91)) + 37660|0);
   HEAP32[$92>>2] = $90;
  }
 }
 $93 = $4;
 _unpack_position($76,$93);
 $94 = $4;
 $1 = $94;
 $95 = $1;
 STACKTOP = sp;return ($95|0);
}
function _solve_379($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ((($8)) + 37692|0);
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 $11 = $4;
 HEAP8[$11>>0] = 0;
 L1: while(1) {
  $12 = $3;
  $13 = ((($12)) + 37676|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)>=(0);
  if (!($15)) {
   label = 29;
   break;
  }
  $16 = $3;
  $17 = (_check_for_exceeded($16)|0);
  $18 = $3;
  if ($17) {
   label = 4;
   break;
  }
  $20 = ((($18)) + 37684|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $3;
  $23 = ((($22)) + 37676|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($21) + (($24*28)|0)|0);
  $26 = HEAP32[$25>>2]|0;
  $6 = $26;
  $27 = $3;
  $28 = ((($27)) + 35656|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(1);
  if (!($30)) {
   $31 = $6;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($33)) + 8|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = $6;
   $38 = ((($37)) + 22|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39 << 16 >> 16;
   $41 = ($36|0)<($40|0);
   if (!($41)) {
    $54 = $3;
    $55 = ((($54)) + 37684|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $3;
    $58 = ((($57)) + 37676|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($56) + (($59*28)|0)|0);
    $61 = ((($60)) + 8|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)!=(0|0);
    $64 = $3;
    do {
     if ($63) {
      $138 = ((($64)) + 37684|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = $3;
      $141 = ((($140)) + 37676|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($139) + (($142*28)|0)|0);
      $144 = ((($143)) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $3;
      $147 = ((($146)) + 37684|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = $3;
      $150 = ((($149)) + 37676|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (($148) + (($151*28)|0)|0);
      $153 = ((($152)) + 8|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = $145;
      $156 = $154;
      $157 = (($155) - ($156))|0;
      $158 = (($157|0) / 8)&-1;
      HEAP32[$7>>2] = $158;
     } else {
      $65 = $6;
      $66 = (_fc_solve_pats__get_moves($64,$65,$7)|0);
      $67 = $3;
      $68 = ((($67)) + 37684|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = $3;
      $71 = ((($70)) + 37676|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($69) + (($72*28)|0)|0);
      $74 = ((($73)) + 8|0);
      HEAP32[$74>>2] = $66;
      $75 = $3;
      $76 = ((($75)) + 37684|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = $3;
      $79 = ((($78)) + 37676|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($77) + (($80*28)|0)|0);
      $82 = ((($81)) + 8|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)!=(0|0);
      $85 = $3;
      $86 = ((($85)) + 37684|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = $3;
      $89 = ((($88)) + 37676|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($87) + (($90*28)|0)|0);
      if ($84) {
       $97 = ((($91)) + 8|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = HEAP32[$7>>2]|0;
       $100 = $99&255;
       $101 = $6;
       $102 = ((($101)) + 25|0);
       HEAP8[$102>>0] = $100;
       $103 = $100&255;
       $104 = (($98) + ($103<<3)|0);
       $105 = $3;
       $106 = ((($105)) + 37684|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = $3;
       $109 = ((($108)) + 37676|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($107) + (($110*28)|0)|0);
       $112 = ((($111)) + 12|0);
       HEAP32[$112>>2] = $104;
       $113 = $3;
       $114 = ((($113)) + 37684|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = $3;
       $117 = ((($116)) + 37676|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (($115) + (($118*28)|0)|0);
       $120 = ((($119)) + 8|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = $3;
       $123 = ((($122)) + 37684|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = $3;
       $126 = ((($125)) + 37676|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = (($124) + (($127*28)|0)|0);
       $129 = ((($128)) + 16|0);
       HEAP32[$129>>2] = $121;
       $130 = $3;
       $131 = ((($130)) + 37684|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = $3;
       $134 = ((($133)) + 37676|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = (($132) + (($135*28)|0)|0);
       $137 = ((($136)) + 20|0);
       HEAP8[$137>>0] = 0;
       break;
      } else {
       $92 = ((($91)) + 20|0);
       HEAP8[$92>>0] = 0;
       $93 = $3;
       $94 = ((($93)) + 37676|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($95) + -1)|0;
       HEAP32[$94>>2] = $96;
       $5 = 1;
       continue L1;
      }
     }
    } while(0);
    $159 = $5;
    $160 = ($159|0)==(1);
    if ($160) {
     $161 = $3;
     $162 = ((($161)) + 37684|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $3;
     $165 = ((($164)) + 37676|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 1)|0;
     $168 = (($163) + (($167*28)|0)|0);
     $169 = ((($168)) + 20|0);
     $170 = HEAP8[$169>>0]|0;
     $171 = $170&1;
     $172 = $3;
     if ($171) {
      $173 = ((($172)) + 37684|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = $3;
      $176 = ((($175)) + 37676|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = (($174) + (($177*28)|0)|0);
      $179 = ((($178)) + 20|0);
      HEAP8[$179>>0] = 1;
     } else {
      $180 = $3;
      $181 = ((($180)) + 37684|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = $3;
      $184 = ((($183)) + 37676|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = (($182) + (($185*28)|0)|0);
      $187 = ((($186)) + 24|0);
      $188 = HEAP32[$187>>2]|0;
      _free_position_non_recursive($172,$188);
     }
     $189 = $3;
     $190 = $3;
     $191 = ((($190)) + 37684|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = $3;
     $194 = ((($193)) + 37676|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (($192) + (($195*28)|0)|0);
     $197 = ((($196)) + 16|0);
     $198 = HEAP32[$197>>2]|0;
     _fc_solve_pats__undo_move($189,$198);
     $199 = $3;
     $200 = ((($199)) + 37684|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $3;
     $203 = ((($202)) + 37676|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = (($201) + (($204*28)|0)|0);
     $206 = ((($205)) + 16|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ((($207)) + 8|0);
     HEAP32[$206>>2] = $208;
    }
    $209 = $3;
    $210 = ((($209)) + 37684|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = $3;
    $213 = ((($212)) + 37676|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = (($211) + (($214*28)|0)|0);
    $216 = ((($215)) + 16|0);
    $217 = HEAP32[$216>>2]|0;
    $218 = $3;
    $219 = ((($218)) + 37684|0);
    $220 = HEAP32[$219>>2]|0;
    $221 = $3;
    $222 = ((($221)) + 37676|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = (($220) + (($223*28)|0)|0);
    $225 = ((($224)) + 12|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = ($217|0)==($226|0);
    $228 = $3;
    $229 = $3;
    $230 = ((($229)) + 37684|0);
    $231 = HEAP32[$230>>2]|0;
    $232 = $3;
    $233 = ((($232)) + 37676|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($231) + (($234*28)|0)|0);
    if ($227) {
     $236 = ((($235)) + 8|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = HEAP32[$7>>2]|0;
     $239 = $238<<3;
     _fc_solve_pats__release_380($228,$237,$239);
     $240 = $3;
     $241 = ((($240)) + 37684|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = $3;
     $244 = ((($243)) + 37676|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = (($242) + (($245*28)|0)|0);
     $247 = ((($246)) + 8|0);
     HEAP32[$247>>2] = 0;
     $248 = $3;
     $249 = ((($248)) + 37676|0);
     $250 = HEAP32[$249>>2]|0;
     $251 = (($250) + -1)|0;
     HEAP32[$249>>2] = $251;
     $5 = 1;
     continue;
    }
    $252 = ((($235)) + 16|0);
    $253 = HEAP32[$252>>2]|0;
    _freecell_solver_pats__make_move($228,$253);
    $254 = $3;
    _fc_solve_pats__sort_piles($254);
    $255 = $3;
    $256 = $6;
    $257 = $3;
    $258 = ((($257)) + 37684|0);
    $259 = HEAP32[$258>>2]|0;
    $260 = $3;
    $261 = ((($260)) + 37676|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = (($259) + (($262*28)|0)|0);
    $264 = ((($263)) + 16|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = (_fc_solve_pats__new_position($255,$256,$265)|0);
    $267 = $3;
    $268 = ((($267)) + 37684|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = $3;
    $271 = ((($270)) + 37676|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = (($269) + (($272*28)|0)|0);
    $274 = ((($273)) + 24|0);
    HEAP32[$274>>2] = $266;
    $275 = $3;
    $276 = ((($275)) + 37684|0);
    $277 = HEAP32[$276>>2]|0;
    $278 = $3;
    $279 = ((($278)) + 37676|0);
    $280 = HEAP32[$279>>2]|0;
    $281 = (($277) + (($280*28)|0)|0);
    $282 = ((($281)) + 24|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ($283|0)!=(0|0);
    do {
     if ($284) {
      $309 = $3;
      $310 = ((($309)) + 37684|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = $3;
      $313 = ((($312)) + 37676|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = (($311) + (($314*28)|0)|0);
      $316 = ((($315)) + 24|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = ((($317)) + 20|0);
      $319 = HEAP16[$318>>1]|0;
      $320 = $319&65535;
      $321 = $6;
      $322 = ((($321)) + 20|0);
      $323 = HEAP16[$322>>1]|0;
      $324 = $323&65535;
      $325 = ($320|0)!=($324|0);
      if (!($325)) {
       $326 = HEAP32[$7>>2]|0;
       $327 = $3;
       $328 = ((($327)) + 35652|0);
       $329 = HEAP32[$328>>2]|0;
       $330 = ($326|0)<($329|0);
       if (!($330)) {
        $383 = $3;
        $384 = $3;
        $385 = ((($384)) + 37684|0);
        $386 = HEAP32[$385>>2]|0;
        $387 = $3;
        $388 = ((($387)) + 37676|0);
        $389 = HEAP32[$388>>2]|0;
        $390 = (($386) + (($389*28)|0)|0);
        $391 = ((($390)) + 24|0);
        $392 = HEAP32[$391>>2]|0;
        $393 = $3;
        $394 = ((($393)) + 37684|0);
        $395 = HEAP32[$394>>2]|0;
        $396 = $3;
        $397 = ((($396)) + 37676|0);
        $398 = HEAP32[$397>>2]|0;
        $399 = (($395) + (($398*28)|0)|0);
        $400 = ((($399)) + 16|0);
        $401 = HEAP32[$400>>2]|0;
        $402 = ((($401)) + 7|0);
        $403 = HEAP8[$402>>0]|0;
        $404 = $403 << 24 >> 24;
        _fc_solve_pats__queue_position($383,$392,$404);
        $405 = $3;
        $406 = $3;
        $407 = ((($406)) + 37684|0);
        $408 = HEAP32[$407>>2]|0;
        $409 = $3;
        $410 = ((($409)) + 37676|0);
        $411 = HEAP32[$410>>2]|0;
        $412 = (($408) + (($411*28)|0)|0);
        $413 = ((($412)) + 16|0);
        $414 = HEAP32[$413>>2]|0;
        _fc_solve_pats__undo_move($405,$414);
        $415 = $3;
        $416 = ((($415)) + 37684|0);
        $417 = HEAP32[$416>>2]|0;
        $418 = $3;
        $419 = ((($418)) + 37676|0);
        $420 = HEAP32[$419>>2]|0;
        $421 = (($417) + (($420*28)|0)|0);
        $422 = ((($421)) + 20|0);
        HEAP8[$422>>0] = 1;
        $423 = $3;
        $424 = ((($423)) + 37684|0);
        $425 = HEAP32[$424>>2]|0;
        $426 = $3;
        $427 = ((($426)) + 37676|0);
        $428 = HEAP32[$427>>2]|0;
        $429 = (($425) + (($428*28)|0)|0);
        $430 = ((($429)) + 16|0);
        $431 = HEAP32[$430>>2]|0;
        $432 = ((($431)) + 8|0);
        HEAP32[$430>>2] = $432;
        $5 = 0;
        break;
       }
      }
      $331 = $3;
      $332 = ((($331)) + 37676|0);
      $333 = HEAP32[$332>>2]|0;
      $334 = (($333) + 1)|0;
      $335 = $3;
      $336 = ((($335)) + 37680|0);
      $337 = HEAP32[$336>>2]|0;
      $338 = ($334|0)>=($337|0);
      if ($338) {
       $339 = $3;
       $340 = ((($339)) + 37680|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = (($341) + 16)|0;
       HEAP32[$340>>2] = $342;
       $343 = $3;
       $344 = ((($343)) + 37684|0);
       $345 = HEAP32[$344>>2]|0;
       $346 = $3;
       $347 = ((($346)) + 37680|0);
       $348 = HEAP32[$347>>2]|0;
       $349 = ($348*28)|0;
       $350 = (_realloc($345,$349)|0);
       $351 = $3;
       $352 = ((($351)) + 37684|0);
       HEAP32[$352>>2] = $350;
      }
      $353 = $3;
      $354 = ((($353)) + 37684|0);
      $355 = HEAP32[$354>>2]|0;
      $356 = $3;
      $357 = ((($356)) + 37676|0);
      $358 = HEAP32[$357>>2]|0;
      $359 = (($355) + (($358*28)|0)|0);
      $360 = ((($359)) + 24|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = $3;
      $363 = ((($362)) + 37684|0);
      $364 = HEAP32[$363>>2]|0;
      $365 = $3;
      $366 = ((($365)) + 37676|0);
      $367 = HEAP32[$366>>2]|0;
      $368 = (($367) + 1)|0;
      $369 = (($364) + (($368*28)|0)|0);
      HEAP32[$369>>2] = $361;
      $370 = $3;
      $371 = ((($370)) + 37684|0);
      $372 = HEAP32[$371>>2]|0;
      $373 = $3;
      $374 = ((($373)) + 37676|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = (($375) + 1)|0;
      $377 = (($372) + (($376*28)|0)|0);
      $378 = ((($377)) + 8|0);
      HEAP32[$378>>2] = 0;
      $379 = $3;
      $380 = ((($379)) + 37676|0);
      $381 = HEAP32[$380>>2]|0;
      $382 = (($381) + 1)|0;
      HEAP32[$380>>2] = $382;
      $5 = 0;
     } else {
      $285 = $6;
      $286 = ((($285)) + 25|0);
      $287 = HEAP8[$286>>0]|0;
      $288 = (($287) + -1)<<24>>24;
      HEAP8[$286>>0] = $288;
      $289 = $3;
      $290 = $3;
      $291 = ((($290)) + 37684|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = $3;
      $294 = ((($293)) + 37676|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = (($292) + (($295*28)|0)|0);
      $297 = ((($296)) + 16|0);
      $298 = HEAP32[$297>>2]|0;
      _fc_solve_pats__undo_move($289,$298);
      $299 = $3;
      $300 = ((($299)) + 37684|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = $3;
      $303 = ((($302)) + 37676|0);
      $304 = HEAP32[$303>>2]|0;
      $305 = (($301) + (($304*28)|0)|0);
      $306 = ((($305)) + 16|0);
      $307 = HEAP32[$306>>2]|0;
      $308 = ((($307)) + 8|0);
      HEAP32[$306>>2] = $308;
      $5 = 0;
     }
    } while(0);
    continue;
   }
  }
  $42 = $3;
  $43 = ((($42)) + 37684|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $3;
  $46 = ((($45)) + 37676|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($44) + (($47*28)|0)|0);
  $49 = ((($48)) + 20|0);
  HEAP8[$49>>0] = 0;
  $50 = $3;
  $51 = ((($50)) + 37676|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -1)|0;
  HEAP32[$51>>2] = $53;
  $5 = 1;
 }
 if ((label|0) == 4) {
  $19 = $5;
  _wrap_up_solve($18,$19);
  $2 = 1;
  $448 = $2;
  STACKTOP = sp;return ($448|0);
 }
 else if ((label|0) == 29) {
  $433 = $4;
  HEAP8[$433>>0] = 1;
  $434 = $3;
  $435 = $5;
  _wrap_up_solve($434,$435);
  $436 = $3;
  $437 = ((($436)) + 37684|0);
  $438 = HEAP32[$437>>2]|0;
  $439 = $3;
  $440 = ((($439)) + 37676|0);
  $441 = HEAP32[$440>>2]|0;
  $442 = (($441) + 1)|0;
  $443 = (($438) + (($442*28)|0)|0);
  $444 = ((($443)) + 20|0);
  $445 = HEAP8[$444>>0]|0;
  $446 = $445&1;
  $447 = $446&1;
  $2 = $447;
  $448 = $2;
  STACKTOP = sp;return ($448|0);
 }
 return (0)|0;
}
function _free_position_recursive($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $4 = $2;
  $5 = ((($4)) + 816|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $3;
  HEAP32[$7>>2] = $6;
  $8 = $3;
  $9 = $2;
  $10 = ((($9)) + 816|0);
  HEAP32[$10>>2] = $8;
  $11 = $3;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $3 = $13;
  $14 = $3;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   label = 4;
   break;
  }
  $16 = $3;
  $17 = ((($16)) + 25|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = (($18) + -1)<<24>>24;
  HEAP8[$17>>0] = $19;
  $20 = $3;
  $21 = ((($20)) + 25|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($23|0)==(0);
  if (!($24)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
}
function _check_for_exceeded($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 35656|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if (!($5)) {
  $17 = 0;
  STACKTOP = sp;return ($17|0);
 }
 $6 = $1;
 $7 = ((($6)) + 2792|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>=(0);
 if (!($9)) {
  $17 = 0;
  STACKTOP = sp;return ($17|0);
 }
 $10 = $1;
 $11 = ((($10)) + 2788|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = ((($13)) + 2792|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)>=($15|0);
 $17 = $16;
 STACKTOP = sp;return ($17|0);
}
function _wrap_up_solve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 37692|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _free_position_non_recursive($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 816|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 HEAP32[$7>>2] = $6;
 $8 = $3;
 $9 = $2;
 $10 = ((($9)) + 816|0);
 HEAP32[$10>>2] = $8;
 $11 = $3;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 25|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = (($15) + -1)<<24>>24;
 HEAP8[$14>>0] = $16;
 STACKTOP = sp;return;
}
function _fc_solve_pats__undo_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ((($7)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $4 = $9;
 $10 = $3;
 $11 = ((($10)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $5 = $12;
 $13 = $3;
 $14 = ((($13)) + 4|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 switch ($16|0) {
 case 2:  {
  $17 = $2;
  $18 = ((($17)) + 820|0);
  $19 = ((($18)) + 40|0);
  $20 = $5;
  $21 = $20&255;
  $22 = (($19) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $6 = $23;
  $24 = $2;
  $25 = ((($24)) + 820|0);
  $26 = ((($25)) + 40|0);
  $27 = $5;
  $28 = $27&255;
  $29 = (($26) + ($28)|0);
  HEAP8[$29>>0] = 0;
  break;
 }
 case 3:  {
  $30 = $2;
  $31 = ((($30)) + 820|0);
  $32 = $5;
  $33 = $32&255;
  $34 = (_fcs_state_pop_col_card_389($31,$33)|0);
  $6 = $34;
  $35 = $2;
  $36 = $5;
  $37 = $36&255;
  _fc_solve_pats__hashpile_385($35,$37);
  break;
 }
 default: {
  $38 = $2;
  $39 = ((($38)) + 820|0);
  $40 = ((($39)) + 48|0);
  $41 = $5;
  $42 = $41&255;
  $43 = (($40) + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $5;
  $47 = $46&255;
  $48 = (_fcs_make_card_390($45,$47)|0);
  $6 = $48;
  $49 = $2;
  $50 = ((($49)) + 820|0);
  $51 = ((($50)) + 48|0);
  $52 = $5;
  $53 = $52&255;
  $54 = (($51) + ($53)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = (($55) + -1)<<24>>24;
  HEAP8[$54>>0] = $56;
 }
 }
 $57 = $3;
 $58 = ((($57)) + 3|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = ($60|0)==(2);
 if ($61) {
  $62 = $6;
  $63 = $2;
  $64 = ((($63)) + 820|0);
  $65 = ((($64)) + 40|0);
  $66 = $4;
  $67 = $66&255;
  $68 = (($65) + ($67)|0);
  HEAP8[$68>>0] = $62;
  STACKTOP = sp;return;
 } else {
  $69 = $2;
  $70 = ((($69)) + 820|0);
  $71 = $4;
  $72 = $71&255;
  $73 = $6;
  _fcs_state_push_386($70,$72,$73);
  $74 = $2;
  $75 = $4;
  $76 = $75&255;
  _fc_solve_pats__hashpile_385($74,$76);
  STACKTOP = sp;return;
 }
}
function _fc_solve_pats__release_380($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 _free($6);
 $7 = $5;
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($7))|0;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _freecell_solver_pats__make_move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = ((($8)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $5 = $10;
 $11 = $3;
 $12 = ((($11)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $6 = $13;
 $14 = $3;
 $15 = ((($14)) + 3|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17|0)==(2);
 $19 = $2;
 $20 = ((($19)) + 820|0);
 if ($18) {
  $21 = ((($20)) + 40|0);
  $22 = $5;
  $23 = $22&255;
  $24 = (($21) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $4 = $25;
  $26 = $2;
  $27 = ((($26)) + 820|0);
  $28 = ((($27)) + 40|0);
  $29 = $5;
  $30 = $29&255;
  $31 = (($28) + ($30)|0);
  HEAP8[$31>>0] = 0;
 } else {
  $32 = $5;
  $33 = $32&255;
  $34 = (($20) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $7 = $35;
  $36 = $7;
  $37 = $7;
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($39) - 1)|0;
  $41 = (($40) + 1)|0;
  $42 = (($36) + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $4 = $43;
  $44 = $7;
  $45 = $7;
  $46 = HEAP8[$45>>0]|0;
  $47 = (($46) + -1)<<24>>24;
  HEAP8[$45>>0] = $47;
  $48 = $47&255;
  $49 = (($48) + 1)|0;
  $50 = (($44) + ($49)|0);
  HEAP8[$50>>0] = 0;
  $51 = $2;
  $52 = $5;
  $53 = $52&255;
  _fc_solve_pats__hashpile_385($51,$53);
 }
 $54 = $3;
 $55 = ((($54)) + 4|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 switch ($57|0) {
 case 2:  {
  $58 = $4;
  $59 = $2;
  $60 = ((($59)) + 820|0);
  $61 = ((($60)) + 40|0);
  $62 = $6;
  $63 = $62&255;
  $64 = (($61) + ($63)|0);
  HEAP8[$64>>0] = $58;
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $65 = $2;
  $66 = ((($65)) + 820|0);
  $67 = $6;
  $68 = $67&255;
  $69 = $4;
  _fcs_state_push_386($66,$68,$69);
  $70 = $2;
  $71 = $6;
  $72 = $71&255;
  _fc_solve_pats__hashpile_385($70,$72);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $73 = $2;
  $74 = ((($73)) + 820|0);
  $75 = ((($74)) + 48|0);
  $76 = $6;
  $77 = $76&255;
  $78 = (($75) + ($77)|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = (($79) + 1)<<24>>24;
  HEAP8[$78>>0] = $80;
  STACKTOP = sp;return;
 }
 }
}
function _fc_solve_pats__new_position($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp + 48|0;
 $8 = sp + 28|0;
 $11 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 ;HEAP8[$7>>0]=HEAP8[$17>>0]|0;HEAP8[$7+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[$17+3>>0]|0;
 $18 = $5;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $5;
  $21 = ((($20)) + 22|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = (($23) + 1)|0;
  $25 = $24;
 } else {
  $25 = 0;
 }
 $10 = $25;
 $26 = $4;
 $27 = $10;
 $28 = (_fc_solve_pats__insert($26,$8,$27,$11)|0);
 $12 = $28;
 $29 = $12;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = $4;
  $32 = ((($31)) + 2788|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
 } else {
  $35 = $12;
  $36 = ($35|0)!=(2);
  if ($36) {
   $3 = 0;
   $108 = $3;
   STACKTOP = sp;return ($108|0);
  }
 }
 $37 = $4;
 $38 = ((($37)) + 816|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 $41 = $4;
 if ($40) {
  $42 = ((($41)) + 816|0);
  $43 = HEAP32[$42>>2]|0;
  $9 = $43;
  $44 = $4;
  $45 = ((($44)) + 816|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = $4;
  $49 = ((($48)) + 816|0);
  HEAP32[$49>>2] = $47;
 } else {
  $50 = $4;
  $51 = ((($50)) + 2872|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (_fc_solve_pats__new_from_block($41,$52)|0);
  $9 = $53;
  $54 = $9;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $3 = 0;
   $108 = $3;
   STACKTOP = sp;return ($108|0);
  }
 }
 $56 = $9;
 $13 = $56;
 $57 = $13;
 HEAP32[$57>>2] = 0;
 $58 = $5;
 $59 = $13;
 $60 = ((($59)) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$11>>2]|0;
 $62 = $13;
 $63 = ((($62)) + 8|0);
 HEAP32[$63>>2] = $61;
 $64 = $13;
 $65 = ((($64)) + 12|0);
 $66 = $6;
 ;HEAP8[$65>>0]=HEAP8[$66>>0]|0;HEAP8[$65+1>>0]=HEAP8[$66+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$66+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$66+3>>0]|0;HEAP8[$65+4>>0]=HEAP8[$66+4>>0]|0;HEAP8[$65+5>>0]=HEAP8[$66+5>>0]|0;HEAP8[$65+6>>0]=HEAP8[$66+6>>0]|0;HEAP8[$65+7>>0]=HEAP8[$66+7>>0]|0;
 $67 = HEAP32[$8>>2]|0;
 $68 = $67&65535;
 $69 = $13;
 $70 = ((($69)) + 20|0);
 HEAP16[$70>>1] = $68;
 $71 = $10;
 $72 = $71&65535;
 $73 = $13;
 $74 = ((($73)) + 22|0);
 HEAP16[$74>>1] = $72;
 $75 = $13;
 $76 = ((($75)) + 25|0);
 HEAP8[$76>>0] = 0;
 $77 = $9;
 $78 = ((($77)) + 28|0);
 $9 = $78;
 $14 = 0;
 $15 = 0;
 while(1) {
  $79 = $15;
  $80 = HEAP8[$7>>0]|0;
  $81 = $80&255;
  $82 = ($79|0)<($81|0);
  if (!($82)) {
   break;
  }
  $83 = $4;
  $84 = ((($83)) + 820|0);
  $85 = ((($84)) + 40|0);
  $86 = $15;
  $87 = (($85) + ($86)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $9;
  $90 = ((($89)) + 1|0);
  $9 = $90;
  HEAP8[$89>>0] = $88;
  $91 = $4;
  $92 = ((($91)) + 820|0);
  $93 = ((($92)) + 40|0);
  $94 = $15;
  $95 = (($93) + ($94)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = ($97|0)==(0);
  if (!($98)) {
   $99 = $14;
   $100 = (($99) + 1)|0;
   $14 = $100;
  }
  $101 = $15;
  $102 = (($101) + 1)|0;
  $15 = $102;
 }
 $103 = $14;
 $104 = $103&255;
 $105 = $13;
 $106 = ((($105)) + 24|0);
 HEAP8[$106>>0] = $104;
 $107 = $13;
 $3 = $107;
 $108 = $3;
 STACKTOP = sp;return ($108|0);
}
function _fc_solve_pats__queue_position($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = ((($10)) + 820|0);
 $12 = ((($11)) + 48|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $3;
 $16 = ((($15)) + 820|0);
 $17 = ((($16)) + 48|0);
 $18 = ((($17)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = (($14) + ($20))|0;
 $22 = $3;
 $23 = ((($22)) + 820|0);
 $24 = ((($23)) + 48|0);
 $25 = ((($24)) + 2|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = (($21) + ($27))|0;
 $29 = $3;
 $30 = ((($29)) + 820|0);
 $31 = ((($30)) + 48|0);
 $32 = ((($31)) + 3|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = (($28) + ($34))|0;
 $6 = $35;
 $36 = $3;
 $37 = ((($36)) + 2800|0);
 $38 = ((($37)) + 48|0);
 $7 = $38;
 $39 = $7;
 $40 = +HEAPF64[$39>>3];
 $41 = $6;
 $42 = (+($41|0));
 $43 = $40 * $42;
 $44 = $7;
 $45 = ((($44)) + 8|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $43 + $46;
 $48 = $6;
 $49 = (+($48|0));
 $50 = $47 * $49;
 $51 = $7;
 $52 = ((($51)) + 16|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $50 + $53;
 $8 = $54;
 $55 = $8;
 $56 = $55 + 0.5;
 $57 = (+Math_floor((+$56)));
 $9 = $57;
 $58 = $9;
 $59 = (~~(($58)));
 $60 = $5;
 $61 = (($60) + ($59))|0;
 $5 = $61;
 $62 = $5;
 $63 = ($62|0)<(0);
 if ($63) {
  $5 = 0;
 } else {
  $64 = $5;
  $65 = ($64|0)>=(100);
  if ($65) {
   $5 = 99;
  }
 }
 $66 = $5;
 $67 = $3;
 $68 = ((($67)) + 812|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($66|0)>($69|0);
 if ($70) {
  $71 = $5;
  $72 = $3;
  $73 = ((($72)) + 812|0);
  HEAP32[$73>>2] = $71;
 }
 $74 = $4;
 HEAP32[$74>>2] = 0;
 $75 = $3;
 $76 = ((($75)) + 12|0);
 $77 = $5;
 $78 = (($76) + ($77<<2)|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)==(0|0);
 if ($80) {
  $81 = $4;
  $82 = $3;
  $83 = ((($82)) + 12|0);
  $84 = $5;
  $85 = (($83) + ($84<<2)|0);
  HEAP32[$85>>2] = $81;
  $86 = $4;
  $87 = $3;
  $88 = ((($87)) + 412|0);
  $89 = $5;
  $90 = (($88) + ($89<<2)|0);
  HEAP32[$90>>2] = $86;
  STACKTOP = sp;return;
 }
 $91 = $3;
 $92 = ((($91)) + 35648|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&1;
 if ($94) {
  $95 = $3;
  $96 = ((($95)) + 12|0);
  $97 = $5;
  $98 = (($96) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $4;
  HEAP32[$100>>2] = $99;
  $101 = $4;
  $102 = $3;
  $103 = ((($102)) + 12|0);
  $104 = $5;
  $105 = (($103) + ($104<<2)|0);
  HEAP32[$105>>2] = $101;
  STACKTOP = sp;return;
 } else {
  $106 = $4;
  $107 = $3;
  $108 = ((($107)) + 412|0);
  $109 = $5;
  $110 = (($108) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  HEAP32[$111>>2] = $106;
  $112 = $4;
  $113 = $3;
  $114 = ((($113)) + 412|0);
  $115 = $5;
  $116 = (($114) + ($115<<2)|0);
  HEAP32[$116>>2] = $112;
  STACKTOP = sp;return;
 }
}
function _fc_solve_pats__hashpile_385($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 820|0);
 $7 = $3;
 $8 = (($6) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $4;
 $11 = $4;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (($13) + 1)|0;
 $15 = (($10) + ($14)|0);
 HEAP8[$15>>0] = 0;
 $16 = $4;
 $17 = ((($16)) + 1|0);
 $18 = (_fnv_hash_str_387($17)|0);
 $19 = $2;
 $20 = ((($19)) + 820|0);
 $21 = ((($20)) + 1376|0);
 $22 = $3;
 $23 = (($21) + ($22<<2)|0);
 HEAP32[$23>>2] = $18;
 $24 = $2;
 $25 = ((($24)) + 820|0);
 $26 = ((($25)) + 1416|0);
 $27 = $3;
 $28 = (($26) + ($27<<2)|0);
 HEAP32[$28>>2] = -1;
 STACKTOP = sp;return;
}
function _fcs_state_push_386($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = (($7) + ($8<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $5;
 $12 = $6;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = (($14) + 1)<<24>>24;
 HEAP8[$13>>0] = $15;
 $16 = $14&255;
 $17 = (($16) + 1)|0;
 $18 = (($12) + ($17)|0);
 HEAP8[$18>>0] = $11;
 STACKTOP = sp;return;
}
function _fnv_hash_str_387($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = -2128831035;
 while(1) {
  $4 = $1;
  $5 = ((($4)) + 1|0);
  $1 = $5;
  $6 = HEAP8[$4>>0]|0;
  $3 = $6;
  $7 = ($6<<24>>24)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $3;
  $9 = $2;
  $10 = (_fnv_hash_388($8,$9)|0);
  $2 = $10;
 }
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function _fnv_hash_388($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = Math_imul($4, 16777619)|0;
 $6 = $2;
 $7 = $6&255;
 $8 = $5 ^ $7;
 STACKTOP = sp;return ($8|0);
}
function _fcs_state_pop_col_card_389($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 $8 = (($6) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $4;
 $11 = $4;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (($13) - 1)|0;
 $15 = (($14) + 1)|0;
 $16 = (($10) + ($15)|0);
 $17 = HEAP8[$16>>0]|0;
 $5 = $17;
 $18 = $4;
 $19 = $4;
 $20 = HEAP8[$19>>0]|0;
 $21 = (($20) + -1)<<24>>24;
 HEAP8[$19>>0] = $21;
 $22 = $21&255;
 $23 = (($22) + 1)|0;
 $24 = (($18) + ($23)|0);
 HEAP8[$24>>0] = 0;
 $25 = $5;
 STACKTOP = sp;return ($25|0);
}
function _fcs_make_card_390($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $4&255;
 $6 = $5&255;
 $7 = $6 << 2;
 $8 = $3;
 $9 = $8&255;
 $10 = $9&255;
 $11 = $7 | $10;
 $12 = $11&255;
 STACKTOP = sp;return ($12|0);
}
function _unpack_position($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 48|0;
 $2 = $0;
 $3 = $1;
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 ;HEAP8[$4>>0]=HEAP8[$17>>0]|0;HEAP8[$4+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$17+3>>0]|0;
 $18 = $3;
 $19 = ((($18)) + 20|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $5 = $21;
 $22 = $2;
 $23 = ((($22)) + 820|0);
 $6 = $23;
 $24 = $5;
 $25 = $24 & 15;
 $26 = $25&255;
 $27 = $6;
 $28 = ((($27)) + 48|0);
 HEAP8[$28>>0] = $26;
 $29 = $5;
 $30 = (4)?($29 >> 4):($29);
 $5 = $30;
 $31 = $5;
 $32 = $31 & 15;
 $33 = $32&255;
 $34 = $6;
 $35 = ((($34)) + 48|0);
 $36 = ((($35)) + 1|0);
 HEAP8[$36>>0] = $33;
 $37 = $5;
 $38 = (4)?($37 >> 4):($37);
 $5 = $38;
 $39 = $5;
 $40 = $39 & 15;
 $41 = $40&255;
 $42 = $6;
 $43 = ((($42)) + 48|0);
 $44 = ((($43)) + 2|0);
 HEAP8[$44>>0] = $41;
 $45 = $5;
 $46 = (4)?($45 >> 4):($45);
 $5 = $46;
 $47 = $5;
 $48 = $47 & 15;
 $49 = $48&255;
 $50 = $6;
 $51 = ((($50)) + 48|0);
 $52 = ((($51)) + 3|0);
 HEAP8[$52>>0] = $49;
 $7 = 0;
 $53 = $3;
 $54 = ((($53)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($55)) + 12|0);
 $8 = $56;
 $9 = 0;
 $10 = 0;
 while(1) {
  $57 = $10;
  $58 = ((($4)) + 1|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = ($57|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = $9;
  $63 = $62&1;
  if ($63) {
   $64 = $7;
   $65 = $64&255;
   $66 = $65 & 15;
   $67 = $66 << 8;
   $11 = $67;
   $68 = $8;
   $69 = ((($68)) + 1|0);
   $8 = $69;
   $70 = HEAP8[$68>>0]|0;
   $71 = $70&255;
   $72 = $11;
   $73 = $72 | $71;
   $11 = $73;
  } else {
   $74 = $8;
   $75 = ((($74)) + 1|0);
   $8 = $75;
   $76 = HEAP8[$74>>0]|0;
   $77 = $76&255;
   $78 = $77 << 4;
   $11 = $78;
   $79 = $8;
   $80 = ((($79)) + 1|0);
   $8 = $80;
   $81 = HEAP8[$79>>0]|0;
   $7 = $81;
   $82 = $7;
   $83 = $82&255;
   $84 = (4)?($83 >> 4):($83);
   $85 = $84 & 15;
   $86 = $11;
   $87 = $86 | $85;
   $11 = $87;
  }
  $88 = $9;
  $89 = $88&1;
  $90 = $89 ^ 1;
  $91 = $90&1;
  $9 = $91;
  $92 = $11;
  $93 = $2;
  $94 = ((($93)) + 820|0);
  $95 = ((($94)) + 1416|0);
  $96 = $10;
  $97 = (($95) + ($96<<2)|0);
  HEAP32[$97>>2] = $92;
  $98 = $2;
  $99 = ((($98)) + 19252|0);
  $100 = $11;
  $101 = (($99) + ($100<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $12 = $102;
  $103 = $2;
  $104 = ((($103)) + 820|0);
  $105 = $10;
  $106 = (($104) + ($105<<2)|0);
  $107 = HEAP32[$106>>2]|0;
  $13 = $107;
  $108 = $13;
  $109 = ((($108)) + 1|0);
  $110 = $12;
  $111 = HEAP32[$110>>2]|0;
  $112 = (_strecpy($109,$111)|0);
  $11 = $112;
  $113 = $11;
  $114 = $113&255;
  $115 = $13;
  HEAP8[$115>>0] = $114;
  $116 = $12;
  $117 = ((($116)) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $2;
  $120 = ((($119)) + 820|0);
  $121 = ((($120)) + 1376|0);
  $122 = $10;
  $123 = (($121) + ($122<<2)|0);
  HEAP32[$123>>2] = $118;
  $124 = $10;
  $125 = (($124) + 1)|0;
  $10 = $125;
 }
 $126 = $3;
 $127 = ((($126)) + 28|0);
 $14 = $127;
 $15 = 0;
 while(1) {
  $128 = $15;
  $129 = HEAP8[$4>>0]|0;
  $130 = $129&255;
  $131 = ($128|0)<($130|0);
  if (!($131)) {
   break;
  }
  $132 = $14;
  $133 = ((($132)) + 1|0);
  $14 = $133;
  $134 = HEAP8[$132>>0]|0;
  $135 = $2;
  $136 = ((($135)) + 820|0);
  $137 = ((($136)) + 40|0);
  $138 = $15;
  $139 = (($137) + ($138)|0);
  HEAP8[$139>>0] = $134;
  $140 = $15;
  $141 = (($140) + 1)|0;
  $15 = $141;
 }
 STACKTOP = sp;return;
}
function _strecpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $5 = $3;
  $6 = ((($5)) + 1|0);
  $3 = $6;
  $7 = HEAP8[$5>>0]|0;
  $8 = $2;
  $9 = ((($8)) + 1|0);
  $2 = $9;
  HEAP8[$8>>0] = $7;
  $10 = $7&255;
  $11 = ($10|0)!=(0);
  $12 = $4;
  if (!($11)) {
   break;
  }
  $13 = (($12) + 1)|0;
  $4 = $13;
 }
 STACKTOP = sp;return ($12|0);
}
function _fc_solve_pats__insert($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = $5;
 $14 = ((($13)) + 820|0);
 $15 = ((($14)) + 48|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $5;
 $19 = ((($18)) + 820|0);
 $20 = ((($19)) + 48|0);
 $21 = ((($20)) + 1|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 << 4;
 $25 = (($17) + ($24))|0;
 $26 = $5;
 $27 = ((($26)) + 820|0);
 $28 = ((($27)) + 48|0);
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $5;
 $33 = ((($32)) + 820|0);
 $34 = ((($33)) + 48|0);
 $35 = ((($34)) + 3|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 << 4;
 $39 = (($31) + ($38))|0;
 $40 = $39 << 8;
 $41 = $25 | $40;
 $42 = $6;
 HEAP32[$42>>2] = $41;
 $43 = (_cluster_tree($12,$41)|0);
 $9 = $43;
 $44 = $9;
 $45 = ($44|0)==(0|0);
 if ($45) {
  $4 = 3;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 $46 = $5;
 $47 = (_pack_position($46)|0);
 $10 = $47;
 $48 = $10;
 $49 = ($48|0)!=(0|0);
 if (!($49)) {
  $4 = 3;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 $50 = $5;
 $51 = ((($50)) + 2796|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$51>>2] = $53;
 $54 = $5;
 $55 = $10;
 $56 = $7;
 $57 = $9;
 $58 = $8;
 $59 = (_insert_node($54,$55,$56,$57,$58)|0);
 $11 = $59;
 $60 = $11;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $5;
  $63 = $10;
  _give_back_block($62,$63);
 }
 $64 = $11;
 $4 = $64;
 $65 = $4;
 STACKTOP = sp;return ($65|0);
}
function _cluster_tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = (($8|0) % 499)&-1;
 $5 = $9;
 $6 = 0;
 $10 = $3;
 $11 = ((($10)) + 35660|0);
 $12 = $5;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $7 = $14;
 while(1) {
  $15 = $7;
  $16 = ($15|0)!=(0|0);
  if (!($16)) {
   break;
  }
  $17 = $7;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $4;
  $21 = ($19|0)==($20|0);
  if ($21) {
   break;
  }
  $22 = $7;
  $6 = $22;
  $23 = $7;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $7 = $25;
 }
 $26 = $7;
 $27 = ($26|0)!=(0|0);
 do {
  if (!($27)) {
   $28 = $3;
   $29 = (_fc_solve_pats__malloc_397($28,12)|0);
   $7 = $29;
   $30 = ($29|0)!=(0|0);
   if (!($30)) {
    $2 = 0;
    $47 = $2;
    STACKTOP = sp;return ($47|0);
   }
   $31 = $7;
   HEAP32[$31>>2] = 0;
   $32 = $4;
   $33 = $7;
   $34 = ((($33)) + 4|0);
   HEAP32[$34>>2] = $32;
   $35 = $7;
   $36 = ((($35)) + 8|0);
   HEAP32[$36>>2] = 0;
   $37 = $6;
   $38 = ($37|0)!=(0|0);
   $39 = $7;
   if ($38) {
    $40 = $6;
    $41 = ((($40)) + 8|0);
    HEAP32[$41>>2] = $39;
    break;
   } else {
    $42 = $3;
    $43 = ((($42)) + 35660|0);
    $44 = $5;
    $45 = (($43) + ($44<<2)|0);
    HEAP32[$45>>2] = $39;
    break;
   }
  }
 } while(0);
 $46 = $7;
 $2 = $46;
 $47 = $2;
 STACKTOP = sp;return ($47|0);
}
function _pack_position($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 24|0;
 $2 = $0;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 ;HEAP8[$3>>0]=HEAP8[$9>>0]|0;HEAP8[$3+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$9+3>>0]|0;
 $10 = $2;
 $11 = $2;
 $12 = ((($11)) + 35636|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_fc_solve_pats__new_from_block($10,$13)|0);
 $4 = $14;
 $15 = $4;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $1 = 0;
  $64 = $1;
  STACKTOP = sp;return ($64|0);
 }
 $17 = $4;
 $5 = $17;
 $18 = $4;
 $19 = ((($18)) + 12|0);
 $4 = $19;
 $6 = 0;
 while(1) {
  $20 = $6;
  $21 = ((($3)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = ($20|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $2;
  $26 = ((($25)) + 820|0);
  $27 = ((($26)) + 1416|0);
  $28 = $2;
  $29 = ((($28)) + 820|0);
  $30 = ((($29)) + 1336|0);
  $31 = $6;
  $32 = (($30) + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($27) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $7 = $35;
  $36 = $6;
  $37 = $36 & 1;
  $38 = ($37|0)!=(0);
  $39 = $7;
  if ($38) {
   $40 = (8)?($39 >> 8):($39);
   $41 = $4;
   $42 = ((($41)) + 1|0);
   $4 = $42;
   $43 = HEAP8[$41>>0]|0;
   $44 = $43&255;
   $45 = $44 | $40;
   $46 = $45&255;
   HEAP8[$41>>0] = $46;
   $47 = $7;
   $48 = $47 & 255;
   $49 = $48&255;
   $50 = $4;
   $51 = ((($50)) + 1|0);
   $4 = $51;
   HEAP8[$50>>0] = $49;
  } else {
   $52 = (4)?($39 >> 4):($39);
   $53 = $52&255;
   $54 = $4;
   $55 = ((($54)) + 1|0);
   $4 = $55;
   HEAP8[$54>>0] = $53;
   $56 = $7;
   $57 = $56 & 15;
   $58 = $57 << 4;
   $59 = $58&255;
   $60 = $4;
   HEAP8[$60>>0] = $59;
  }
  $61 = $6;
  $62 = (($61) + 1)|0;
  $6 = $62;
 }
 $63 = $5;
 $1 = $63;
 $64 = $1;
 STACKTOP = sp;return ($64|0);
}
function _insert_node($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $7;
 $16 = ((($15)) + 12|0);
 $11 = $16;
 $17 = $8;
 $18 = $17&65535;
 $19 = $7;
 $20 = ((($19)) + 8|0);
 HEAP16[$20>>1] = $18;
 $21 = $7;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = 0;
 $23 = $7;
 HEAP32[$23>>2] = 0;
 $24 = $7;
 $25 = $10;
 HEAP32[$25>>2] = $24;
 $26 = $9;
 $27 = HEAP32[$26>>2]|0;
 $12 = $27;
 $28 = $12;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $30 = $7;
  $31 = $9;
  HEAP32[$31>>2] = $30;
  $5 = 0;
  $76 = $5;
  STACKTOP = sp;return ($76|0);
 }
 $32 = $6;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $13 = $34;
 while(1) {
  $35 = $13;
  $36 = $11;
  $37 = $12;
  $38 = ((($37)) + 12|0);
  $39 = (_compare_piles($35,$36,$38)|0);
  $14 = $39;
  $40 = $14;
  $41 = ($40|0)==(0);
  if ($41) {
   label = 13;
   break;
  }
  $42 = $14;
  $43 = ($42|0)<(0);
  $44 = $12;
  if ($43) {
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(0|0);
   if ($46) {
    label = 7;
    break;
   }
   $49 = $12;
   $50 = HEAP32[$49>>2]|0;
   $12 = $50;
  } else {
   $51 = ((($44)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0|0);
   if ($53) {
    label = 10;
    break;
   }
   $57 = $12;
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $12 = $59;
  }
 }
 if ((label|0) == 7) {
  $47 = $7;
  $48 = $12;
  HEAP32[$48>>2] = $47;
  $5 = 0;
  $76 = $5;
  STACKTOP = sp;return ($76|0);
 }
 else if ((label|0) == 10) {
  $54 = $7;
  $55 = $12;
  $56 = ((($55)) + 4|0);
  HEAP32[$56>>2] = $54;
  $5 = 0;
  $76 = $5;
  STACKTOP = sp;return ($76|0);
 }
 else if ((label|0) == 13) {
  $60 = $8;
  $61 = $12;
  $62 = ((($61)) + 8|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = ($60|0)<($64|0);
  if ($65) {
   $66 = $6;
   $67 = ((($66)) + 35648|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&1;
   if (!($69)) {
    $70 = $8;
    $71 = $70&65535;
    $72 = $12;
    $73 = ((($72)) + 8|0);
    HEAP16[$73>>1] = $71;
    $74 = $12;
    $75 = $10;
    HEAP32[$75>>2] = $74;
    $5 = 2;
    $76 = $5;
    STACKTOP = sp;return ($76|0);
   }
  }
  $5 = 1;
  $76 = $5;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _give_back_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ((($6)) + 37656|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = $11;
 $14 = $12;
 $15 = (($13) - ($14))|0;
 $5 = $15;
 $16 = $5;
 $17 = $4;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (0 - ($16))|0;
 $21 = (($19) + ($20)|0);
 HEAP32[$18>>2] = $21;
 $22 = $5;
 $23 = $4;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($22))|0;
 HEAP32[$24>>2] = $26;
 STACKTOP = sp;return;
}
function _compare_piles($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = $3;
 $9 = (_memcmp($6,$7,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _fc_solve_pats__new_from_block($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 37656|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $4;
 $11 = $5;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10>>>0)>($13>>>0);
 do {
  if ($14) {
   $15 = $3;
   $16 = (_fc_solve_pats__new_block($15)|0);
   $5 = $16;
   $17 = $5;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    $19 = $3;
    $20 = ((($19)) + 37656|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $5;
    $23 = ((($22)) + 12|0);
    HEAP32[$23>>2] = $21;
    $24 = $5;
    $25 = $3;
    $26 = ((($25)) + 37656|0);
    HEAP32[$26>>2] = $24;
    break;
   }
   $2 = 0;
   $41 = $2;
   STACKTOP = sp;return ($41|0);
  }
 } while(0);
 $27 = $5;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $6 = $29;
 $30 = $4;
 $31 = $5;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) - ($30))|0;
 HEAP32[$32>>2] = $34;
 $35 = $4;
 $36 = $5;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($35)|0);
 HEAP32[$37>>2] = $39;
 $40 = $6;
 $2 = $40;
 $41 = $2;
 STACKTOP = sp;return ($41|0);
}
function _fc_solve_pats__new_block($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = (_fc_solve_pats__malloc_397($5,16)|0);
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $1 = 0;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 $9 = $2;
 $10 = (_fc_solve_pats__malloc_397($9,131072)|0);
 $4 = $10;
 $11 = $4;
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = ($11|0)==(0|0);
 if ($13) {
  $14 = $2;
  $15 = $3;
  _fc_solve_pats__release_398($14,$15,16);
  $1 = 0;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 } else {
  $16 = $4;
  $17 = $3;
  $18 = ((($17)) + 4|0);
  HEAP32[$18>>2] = $16;
  $19 = $3;
  $20 = ((($19)) + 8|0);
  HEAP32[$20>>2] = 131072;
  $21 = $3;
  $22 = ((($21)) + 12|0);
  HEAP32[$22>>2] = 0;
  $23 = $3;
  $1 = $23;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _fc_solve_pats__malloc_397($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6>>>0)>($9>>>0);
 if ($10) {
  $11 = $3;
  $12 = ((($11)) + 35656|0);
  HEAP32[$12>>2] = -1;
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 $13 = $4;
 $14 = (_malloc($13)|0);
 $5 = $14;
 $15 = $5;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $17 = $3;
  $18 = ((($17)) + 35656|0);
  HEAP32[$18>>2] = -1;
  $2 = 0;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 } else {
  $19 = $4;
  $20 = $3;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) - ($19))|0;
  HEAP32[$21>>2] = $23;
  $24 = $5;
  $2 = $24;
  $25 = $2;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _fc_solve_pats__release_398($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 _free($6);
 $7 = $5;
 $8 = $3;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($7))|0;
 HEAP32[$9>>2] = $11;
 STACKTOP = sp;return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0;
 var $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0;
 var $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i17$i = 0, $$pre$i208 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre16$i$i = 0, $$sink = 0, $$sink325 = 0, $$sink326 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i207 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i213 = 0, $or$cond1$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond2$i214 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0;
 var $spec$select$i = 0, $spec$select$i205 = 0, $spec$select1$i = 0, $spec$select3$i = 0, $spec$select49$i = 0, $spec$select7$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = (3)?($6 >>> 3):($6);
   $8 = HEAP32[3662]|0;
   $9 = ($7)?($8 >>> $7):($8);
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (14688 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[3662] = $24;
     } else {
      $25 = HEAP32[(14664)>>2]|0;
      $26 = ($25>>>0)>($20>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(14656)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = (12)?($47 >>> 12):($47);
     $49 = $48 & 16;
     $50 = ($49)?($47 >>> $49):($47);
     $51 = (5)?($50 >>> 5):($50);
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = ($52)?($50 >>> $52):($50);
     $55 = (2)?($54 >>> 2):($54);
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = ($56)?($54 >>> $56):($54);
     $59 = (1)?($58 >>> 1):($58);
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = ($60)?($58 >>> $60):($58);
     $63 = (1)?($62 >>> 1):($62);
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = ($64)?($62 >>> $64):($62);
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (14688 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==($69|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[3662] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(14664)>>2]|0;
       $79 = ($78>>>0)>($73>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($71) + ($83)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(14668)>>2]|0;
      $93 = (3)?($37 >>> 3):($37);
      $94 = $93 << 1;
      $95 = (14688 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[3662] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(14664)>>2]|0;
       $104 = ($103>>>0)>($102>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(14656)>>2] = $84;
     HEAP32[(14668)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(14652)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = (12)?($112 >>> 12):($112);
     $114 = $113 & 16;
     $115 = ($114)?($112 >>> $114):($112);
     $116 = (5)?($115 >>> 5):($115);
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = ($117)?($115 >>> $117):($115);
     $120 = (2)?($119 >>> 2):($119);
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = ($121)?($119 >>> $121):($119);
     $124 = (1)?($123 >>> 1):($123);
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = ($125)?($123 >>> $125):($123);
     $128 = (1)?($127 >>> 1):($127);
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = ($129)?($127 >>> $129):($127);
     $132 = (($130) + ($131))|0;
     $133 = (14952 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $spec$select$i = $150 ? $149 : $$0191$i;
      $spec$select1$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $spec$select1$i;$$0191$i = $spec$select$i;
     }
     $151 = HEAP32[(14664)>>2]|0;
     $152 = ($151>>>0)>($$0190$i>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($153>>>0)>($$0190$i>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i$ph = $173;$$1196$i$ph = $172;
        }
       } else {
        $$1194$i$ph = $170;$$1196$i$ph = $169;
       }
       $$1194$i = $$1194$i$ph;$$1196$i = $$1196$i$ph;
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if ($177) {
         $178 = ((($$1194$i)) + 16|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = ($179|0)==(0|0);
         if ($180) {
          break;
         } else {
          $$1194$i$be = $179;$$1196$i$be = $178;
         }
        } else {
         $$1194$i$be = $176;$$1196$i$be = $175;
        }
        $$1194$i = $$1194$i$be;$$1196$i = $$1196$i$be;
       }
       $181 = ($151>>>0)>($$1196$i>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($151>>>0)>($161>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     L78: do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (14952 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       do {
        if ($187) {
         HEAP32[$185>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $188 = 1 << $184;
          $189 = $188 ^ -1;
          $190 = $108 & $189;
          HEAP32[(14652)>>2] = $190;
          break L78;
         }
        } else {
         $191 = HEAP32[(14664)>>2]|0;
         $192 = ($191>>>0)>($156>>>0);
         if ($192) {
          _abort();
          // unreachable;
         } else {
          $193 = ((($156)) + 16|0);
          $194 = HEAP32[$193>>2]|0;
          $195 = ($194|0)==($$0190$i|0);
          $196 = ((($156)) + 20|0);
          $$sink = $195 ? $193 : $196;
          HEAP32[$$sink>>2] = $$3$i;
          $197 = ($$3$i|0)==(0|0);
          if ($197) {
           break L78;
          } else {
           break;
          }
         }
        }
       } while(0);
       $198 = HEAP32[(14664)>>2]|0;
       $199 = ($198>>>0)>($$3$i>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($198>>>0)>($202>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(14664)>>2]|0;
        $211 = ($210>>>0)>($208>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(14668)>>2]|0;
       $229 = (3)?($37 >>> 3):($37);
       $230 = $229 << 1;
       $231 = (14688 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $232 & $8;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $232 | $8;
        HEAP32[3662] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(14664)>>2]|0;
        $239 = ($238>>>0)>($237>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(14656)>>2] = $$0191$i;
      HEAP32[(14668)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(14652)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = (8)?($245 >>> 8):($245);
     $251 = ($250|0)==(0);
     if ($251) {
      $$0357$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0357$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = (16)?($253 >>> 16):($253);
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = (16)?($257 >>> 16):($257);
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = (16)?($262 >>> 16):($262);
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = (15)?($267 >>> 15):($267);
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = ($271)?($246 >>> $271):($246);
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0357$i = $274;
      }
     }
     $275 = (14952 + ($$0357$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L122: do {
      if ($277) {
       $$2353$i = 0;$$3$i203 = 0;$$3348$i = $249;
       label = 85;
      } else {
       $278 = ($$0357$i|0)==(31);
       $279 = (1)?($$0357$i >>> 1):($$0357$i);
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0358$i = $282;$$0361$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$420$i$ph = $$0351$i;$$434919$i$ph = 0;$$535618$i$ph = $$0351$i;
          label = 89;
          break L122;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = (31)?($$0358$i >>> 31):($$0358$i);
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond2$i = $294 | $295;
        $$1362$i = $or$cond2$i ? $$0361$i : $290;
        $296 = ($293|0)==(0|0);
        $spec$select7$i = $$0358$i << 1;
        if ($296) {
         $$2353$i = $$1362$i;$$3$i203 = $$1341$i;$$3348$i = $$1346$i;
         label = 85;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0358$i = $spec$select7$i;$$0361$i = $$1362$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 85) {
      $297 = ($$2353$i|0)==(0|0);
      $298 = ($$3$i203|0)==(0|0);
      $or$cond$i = $297 & $298;
      if ($or$cond$i) {
       $299 = 2 << $$0357$i;
       $300 = (0 - ($299))|0;
       $301 = $299 | $300;
       $302 = $301 & $247;
       $303 = ($302|0)==(0);
       if ($303) {
        $$0197 = $246;
        break;
       }
       $304 = (0 - ($302))|0;
       $305 = $302 & $304;
       $306 = (($305) + -1)|0;
       $307 = (12)?($306 >>> 12):($306);
       $308 = $307 & 16;
       $309 = ($308)?($306 >>> $308):($306);
       $310 = (5)?($309 >>> 5):($309);
       $311 = $310 & 8;
       $312 = $311 | $308;
       $313 = ($311)?($309 >>> $311):($309);
       $314 = (2)?($313 >>> 2):($313);
       $315 = $314 & 4;
       $316 = $312 | $315;
       $317 = ($315)?($313 >>> $315):($313);
       $318 = (1)?($317 >>> 1):($317);
       $319 = $318 & 2;
       $320 = $316 | $319;
       $321 = ($319)?($317 >>> $319):($317);
       $322 = (1)?($321 >>> 1):($321);
       $323 = $322 & 1;
       $324 = $320 | $323;
       $325 = ($323)?($321 >>> $323):($321);
       $326 = (($324) + ($325))|0;
       $327 = (14952 + ($326<<2)|0);
       $328 = HEAP32[$327>>2]|0;
       $$3$i203218 = 0;$$4355$i = $328;
      } else {
       $$3$i203218 = $$3$i203;$$4355$i = $$2353$i;
      }
      $329 = ($$4355$i|0)==(0|0);
      if ($329) {
       $$4$lcssa$i = $$3$i203218;$$4349$lcssa$i = $$3348$i;
      } else {
       $$420$i$ph = $$3$i203218;$$434919$i$ph = $$3348$i;$$535618$i$ph = $$4355$i;
       label = 89;
      }
     }
     if ((label|0) == 89) {
      $$420$i = $$420$i$ph;$$434919$i = $$434919$i$ph;$$535618$i = $$535618$i$ph;
      while(1) {
       $330 = ((($$535618$i)) + 4|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = $331 & -8;
       $333 = (($332) - ($246))|0;
       $334 = ($333>>>0)<($$434919$i>>>0);
       $spec$select$i205 = $334 ? $333 : $$434919$i;
       $spec$select3$i = $334 ? $$535618$i : $$420$i;
       $335 = ((($$535618$i)) + 16|0);
       $336 = HEAP32[$335>>2]|0;
       $337 = ($336|0)==(0|0);
       if ($337) {
        $338 = ((($$535618$i)) + 20|0);
        $339 = HEAP32[$338>>2]|0;
        $340 = $339;
       } else {
        $340 = $336;
       }
       $341 = ($340|0)==(0|0);
       if ($341) {
        $$4$lcssa$i = $spec$select3$i;$$4349$lcssa$i = $spec$select$i205;
        break;
       } else {
        $$420$i = $spec$select3$i;$$434919$i = $spec$select$i205;$$535618$i = $340;
       }
      }
     }
     $342 = ($$4$lcssa$i|0)==(0|0);
     if ($342) {
      $$0197 = $246;
     } else {
      $343 = HEAP32[(14656)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($$4349$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(14664)>>2]|0;
       $347 = ($346>>>0)>($$4$lcssa$i>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($$4$lcssa$i) + ($246)|0);
       $349 = ($348>>>0)>($$4$lcssa$i>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($$4$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($$4$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($$4$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($$4$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($$4$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $$3371$i = 0;
           break;
          } else {
           $$1369$i$ph = $368;$$1373$i$ph = $367;
          }
         } else {
          $$1369$i$ph = $365;$$1373$i$ph = $364;
         }
         $$1369$i = $$1369$i$ph;$$1373$i = $$1373$i$ph;
         while(1) {
          $370 = ((($$1369$i)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = ((($$1369$i)) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            break;
           } else {
            $$1369$i$be = $374;$$1373$i$be = $373;
           }
          } else {
           $$1369$i$be = $371;$$1373$i$be = $370;
          }
          $$1369$i = $$1369$i$be;$$1373$i = $$1373$i$be;
         }
         $376 = ($346>>>0)>($$1373$i>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1373$i>>2] = 0;
          $$3371$i = $$1369$i;
          break;
         }
        } else {
         $355 = ((($$4$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($346>>>0)>($356>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($$4$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($$4$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $$3371$i = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       L176: do {
        if ($377) {
         $469 = $247;
        } else {
         $378 = ((($$4$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (14952 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($$4$lcssa$i|0)==($381|0);
         do {
          if ($382) {
           HEAP32[$380>>2] = $$3371$i;
           $cond$i207 = ($$3371$i|0)==(0|0);
           if ($cond$i207) {
            $383 = 1 << $379;
            $384 = $383 ^ -1;
            $385 = $247 & $384;
            HEAP32[(14652)>>2] = $385;
            $469 = $385;
            break L176;
           }
          } else {
           $386 = HEAP32[(14664)>>2]|0;
           $387 = ($386>>>0)>($351>>>0);
           if ($387) {
            _abort();
            // unreachable;
           } else {
            $388 = ((($351)) + 16|0);
            $389 = HEAP32[$388>>2]|0;
            $390 = ($389|0)==($$4$lcssa$i|0);
            $391 = ((($351)) + 20|0);
            $$sink325 = $390 ? $388 : $391;
            HEAP32[$$sink325>>2] = $$3371$i;
            $392 = ($$3371$i|0)==(0|0);
            if ($392) {
             $469 = $247;
             break L176;
            } else {
             break;
            }
           }
          }
         } while(0);
         $393 = HEAP32[(14664)>>2]|0;
         $394 = ($393>>>0)>($$3371$i>>>0);
         if ($394) {
          _abort();
          // unreachable;
         }
         $395 = ((($$3371$i)) + 24|0);
         HEAP32[$395>>2] = $351;
         $396 = ((($$4$lcssa$i)) + 16|0);
         $397 = HEAP32[$396>>2]|0;
         $398 = ($397|0)==(0|0);
         do {
          if (!($398)) {
           $399 = ($393>>>0)>($397>>>0);
           if ($399) {
            _abort();
            // unreachable;
           } else {
            $400 = ((($$3371$i)) + 16|0);
            HEAP32[$400>>2] = $397;
            $401 = ((($397)) + 24|0);
            HEAP32[$401>>2] = $$3371$i;
            break;
           }
          }
         } while(0);
         $402 = ((($$4$lcssa$i)) + 20|0);
         $403 = HEAP32[$402>>2]|0;
         $404 = ($403|0)==(0|0);
         if ($404) {
          $469 = $247;
         } else {
          $405 = HEAP32[(14664)>>2]|0;
          $406 = ($405>>>0)>($403>>>0);
          if ($406) {
           _abort();
           // unreachable;
          } else {
           $407 = ((($$3371$i)) + 20|0);
           HEAP32[$407>>2] = $403;
           $408 = ((($403)) + 24|0);
           HEAP32[$408>>2] = $$3371$i;
           $469 = $247;
           break;
          }
         }
        }
       } while(0);
       $409 = ($$4349$lcssa$i>>>0)<(16);
       L200: do {
        if ($409) {
         $410 = (($$4349$lcssa$i) + ($246))|0;
         $411 = $410 | 3;
         $412 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$412>>2] = $411;
         $413 = (($$4$lcssa$i) + ($410)|0);
         $414 = ((($413)) + 4|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $$4349$lcssa$i | 1;
         $420 = ((($348)) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = (($348) + ($$4349$lcssa$i)|0);
         HEAP32[$421>>2] = $$4349$lcssa$i;
         $422 = (3)?($$4349$lcssa$i >>> 3):($$4349$lcssa$i);
         $423 = ($$4349$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (14688 + ($424<<2)|0);
          $426 = HEAP32[3662]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[3662] = $430;
           $$pre$i208 = ((($425)) + 8|0);
           $$0367$i = $425;$$pre$phi$i209Z2D = $$pre$i208;
          } else {
           $431 = ((($425)) + 8|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(14664)>>2]|0;
           $434 = ($433>>>0)>($432>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$0367$i = $432;$$pre$phi$i209Z2D = $431;
           }
          }
          HEAP32[$$pre$phi$i209Z2D>>2] = $348;
          $435 = ((($$0367$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $436 = ((($348)) + 8|0);
          HEAP32[$436>>2] = $$0367$i;
          $437 = ((($348)) + 12|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = (8)?($$4349$lcssa$i >>> 8):($$4349$lcssa$i);
         $439 = ($438|0)==(0);
         if ($439) {
          $$0360$i = 0;
         } else {
          $440 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($440) {
           $$0360$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = (16)?($441 >>> 16):($441);
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = (16)?($445 >>> 16):($445);
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = (16)?($450 >>> 16):($450);
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = (15)?($455 >>> 15):($455);
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = ($459)?($$4349$lcssa$i >>> $459):($$4349$lcssa$i);
           $461 = $460 & 1;
           $462 = $461 | $458;
           $$0360$i = $462;
          }
         }
         $463 = (14952 + ($$0360$i<<2)|0);
         $464 = ((($348)) + 28|0);
         HEAP32[$464>>2] = $$0360$i;
         $465 = ((($348)) + 16|0);
         $466 = ((($465)) + 4|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = 1 << $$0360$i;
         $468 = $469 & $467;
         $470 = ($468|0)==(0);
         if ($470) {
          $471 = $469 | $467;
          HEAP32[(14652)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $472 = ((($348)) + 24|0);
          HEAP32[$472>>2] = $463;
          $473 = ((($348)) + 12|0);
          HEAP32[$473>>2] = $348;
          $474 = ((($348)) + 8|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($$4349$lcssa$i|0);
         L218: do {
          if ($479) {
           $$0343$lcssa$i = $475;
          } else {
           $480 = ($$0360$i|0)==(31);
           $481 = (1)?($$0360$i >>> 1):($$0360$i);
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $$4349$lcssa$i << $483;
           $$034217$i = $484;$$034316$i = $475;
           while(1) {
            $491 = (31)?($$034217$i >>> 31):($$034217$i);
            $492 = (((($$034316$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $$034217$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($$4349$lcssa$i|0);
            if ($490) {
             $$0343$lcssa$i = $487;
             break L218;
            } else {
             $$034217$i = $485;$$034316$i = $487;
            }
           }
           $494 = HEAP32[(14664)>>2]|0;
           $495 = ($494>>>0)>($492>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $496 = ((($348)) + 24|0);
            HEAP32[$496>>2] = $$034316$i;
            $497 = ((($348)) + 12|0);
            HEAP32[$497>>2] = $348;
            $498 = ((($348)) + 8|0);
            HEAP32[$498>>2] = $348;
            break L200;
           }
          }
         } while(0);
         $499 = ((($$0343$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(14664)>>2]|0;
         $502 = ($501>>>0)<=($$0343$lcssa$i>>>0);
         $503 = ($501>>>0)<=($500>>>0);
         $504 = $503 & $502;
         if ($504) {
          $505 = ((($500)) + 12|0);
          HEAP32[$505>>2] = $348;
          HEAP32[$499>>2] = $348;
          $506 = ((($348)) + 8|0);
          HEAP32[$506>>2] = $500;
          $507 = ((($348)) + 12|0);
          HEAP32[$507>>2] = $$0343$lcssa$i;
          $508 = ((($348)) + 24|0);
          HEAP32[$508>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $509 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $509;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $510 = HEAP32[(14656)>>2]|0;
 $511 = ($510>>>0)<($$0197>>>0);
 if (!($511)) {
  $512 = (($510) - ($$0197))|0;
  $513 = HEAP32[(14668)>>2]|0;
  $514 = ($512>>>0)>(15);
  if ($514) {
   $515 = (($513) + ($$0197)|0);
   HEAP32[(14668)>>2] = $515;
   HEAP32[(14656)>>2] = $512;
   $516 = $512 | 1;
   $517 = ((($515)) + 4|0);
   HEAP32[$517>>2] = $516;
   $518 = (($513) + ($510)|0);
   HEAP32[$518>>2] = $512;
   $519 = $$0197 | 3;
   $520 = ((($513)) + 4|0);
   HEAP32[$520>>2] = $519;
  } else {
   HEAP32[(14656)>>2] = 0;
   HEAP32[(14668)>>2] = 0;
   $521 = $510 | 3;
   $522 = ((($513)) + 4|0);
   HEAP32[$522>>2] = $521;
   $523 = (($513) + ($510)|0);
   $524 = ((($523)) + 4|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = ((($513)) + 8|0);
  $$0 = $527;
  STACKTOP = sp;return ($$0|0);
 }
 $528 = HEAP32[(14660)>>2]|0;
 $529 = ($528>>>0)>($$0197>>>0);
 if ($529) {
  $530 = (($528) - ($$0197))|0;
  HEAP32[(14660)>>2] = $530;
  $531 = HEAP32[(14672)>>2]|0;
  $532 = (($531) + ($$0197)|0);
  HEAP32[(14672)>>2] = $532;
  $533 = $530 | 1;
  $534 = ((($532)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = $$0197 | 3;
  $536 = ((($531)) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = ((($531)) + 8|0);
  $$0 = $537;
  STACKTOP = sp;return ($$0|0);
 }
 $538 = HEAP32[3780]|0;
 $539 = ($538|0)==(0);
 if ($539) {
  HEAP32[(15128)>>2] = 4096;
  HEAP32[(15124)>>2] = 4096;
  HEAP32[(15132)>>2] = -1;
  HEAP32[(15136)>>2] = -1;
  HEAP32[(15140)>>2] = 0;
  HEAP32[(15092)>>2] = 0;
  $540 = $1;
  $541 = $540 & -16;
  $542 = $541 ^ 1431655768;
  HEAP32[3780] = $542;
  $546 = 4096;
 } else {
  $$pre$i210 = HEAP32[(15128)>>2]|0;
  $546 = $$pre$i210;
 }
 $543 = (($$0197) + 48)|0;
 $544 = (($$0197) + 47)|0;
 $545 = (($546) + ($544))|0;
 $547 = (0 - ($546))|0;
 $548 = $545 & $547;
 $549 = ($548>>>0)>($$0197>>>0);
 if (!($549)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $550 = HEAP32[(15088)>>2]|0;
 $551 = ($550|0)==(0);
 if (!($551)) {
  $552 = HEAP32[(15080)>>2]|0;
  $553 = (($552) + ($548))|0;
  $554 = ($553>>>0)<=($552>>>0);
  $555 = ($553>>>0)>($550>>>0);
  $or$cond1$i = $554 | $555;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $556 = HEAP32[(15092)>>2]|0;
 $557 = $556 & 4;
 $558 = ($557|0)==(0);
 L257: do {
  if ($558) {
   $559 = HEAP32[(14672)>>2]|0;
   $560 = ($559|0)==(0|0);
   L259: do {
    if ($560) {
     label = 173;
    } else {
     $$0$i$i = (15096);
     while(1) {
      $561 = HEAP32[$$0$i$i>>2]|0;
      $562 = ($561>>>0)>($559>>>0);
      if (!($562)) {
       $563 = ((($$0$i$i)) + 4|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = (($561) + ($564)|0);
       $566 = ($565>>>0)>($559>>>0);
       if ($566) {
        break;
       }
      }
      $567 = ((($$0$i$i)) + 8|0);
      $568 = HEAP32[$567>>2]|0;
      $569 = ($568|0)==(0|0);
      if ($569) {
       label = 173;
       break L259;
      } else {
       $$0$i$i = $568;
      }
     }
     $592 = (($545) - ($528))|0;
     $593 = $592 & $547;
     $594 = ($593>>>0)<(2147483647);
     if ($594) {
      $595 = ((($$0$i$i)) + 4|0);
      $596 = (_sbrk(($593|0))|0);
      $597 = HEAP32[$$0$i$i>>2]|0;
      $598 = HEAP32[$595>>2]|0;
      $599 = (($597) + ($598)|0);
      $600 = ($596|0)==($599|0);
      if ($600) {
       $601 = ($596|0)==((-1)|0);
       if ($601) {
        $$2234243136$i = $593;
       } else {
        $$723947$i = $593;$$748$i = $596;
        label = 190;
        break L257;
       }
      } else {
       $$2247$ph$i = $596;$$2253$ph$i = $593;
       label = 181;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $570 = (_sbrk(0)|0);
     $571 = ($570|0)==((-1)|0);
     if ($571) {
      $$2234243136$i = 0;
     } else {
      $572 = $570;
      $573 = HEAP32[(15124)>>2]|0;
      $574 = (($573) + -1)|0;
      $575 = $574 & $572;
      $576 = ($575|0)==(0);
      $577 = (($574) + ($572))|0;
      $578 = (0 - ($573))|0;
      $579 = $577 & $578;
      $580 = (($579) - ($572))|0;
      $581 = $576 ? 0 : $580;
      $spec$select49$i = (($581) + ($548))|0;
      $582 = HEAP32[(15080)>>2]|0;
      $583 = (($spec$select49$i) + ($582))|0;
      $584 = ($spec$select49$i>>>0)>($$0197>>>0);
      $585 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i213 = $584 & $585;
      if ($or$cond$i213) {
       $586 = HEAP32[(15088)>>2]|0;
       $587 = ($586|0)==(0);
       if (!($587)) {
        $588 = ($583>>>0)<=($582>>>0);
        $589 = ($583>>>0)>($586>>>0);
        $or$cond2$i214 = $588 | $589;
        if ($or$cond2$i214) {
         $$2234243136$i = 0;
         break;
        }
       }
       $590 = (_sbrk(($spec$select49$i|0))|0);
       $591 = ($590|0)==($570|0);
       if ($591) {
        $$723947$i = $spec$select49$i;$$748$i = $570;
        label = 190;
        break L257;
       } else {
        $$2247$ph$i = $590;$$2253$ph$i = $spec$select49$i;
        label = 181;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $602 = (0 - ($$2253$ph$i))|0;
     $603 = ($$2247$ph$i|0)!=((-1)|0);
     $604 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $604 & $603;
     $605 = ($543>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $605 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $615 = ($$2247$ph$i|0)==((-1)|0);
      if ($615) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 190;
       break L257;
      }
     }
     $606 = HEAP32[(15128)>>2]|0;
     $607 = (($544) - ($$2253$ph$i))|0;
     $608 = (($607) + ($606))|0;
     $609 = (0 - ($606))|0;
     $610 = $608 & $609;
     $611 = ($610>>>0)<(2147483647);
     if (!($611)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L257;
     }
     $612 = (_sbrk(($610|0))|0);
     $613 = ($612|0)==((-1)|0);
     if ($613) {
      (_sbrk(($602|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $614 = (($610) + ($$2253$ph$i))|0;
      $$723947$i = $614;$$748$i = $$2247$ph$i;
      label = 190;
      break L257;
     }
    }
   } while(0);
   $616 = HEAP32[(15092)>>2]|0;
   $617 = $616 | 4;
   HEAP32[(15092)>>2] = $617;
   $$4236$i = $$2234243136$i;
   label = 188;
  } else {
   $$4236$i = 0;
   label = 188;
  }
 } while(0);
 if ((label|0) == 188) {
  $618 = ($548>>>0)<(2147483647);
  if ($618) {
   $619 = (_sbrk(($548|0))|0);
   $620 = (_sbrk(0)|0);
   $621 = ($619|0)!=((-1)|0);
   $622 = ($620|0)!=((-1)|0);
   $or$cond5$i = $621 & $622;
   $623 = ($619>>>0)<($620>>>0);
   $or$cond8$i = $623 & $or$cond5$i;
   $624 = $620;
   $625 = $619;
   $626 = (($624) - ($625))|0;
   $627 = (($$0197) + 40)|0;
   $628 = ($626>>>0)>($627>>>0);
   $spec$select9$i = $628 ? $626 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $629 = ($619|0)==((-1)|0);
   $not$$i = $628 ^ 1;
   $630 = $629 | $not$$i;
   $or$cond50$i = $630 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $619;
    label = 190;
   }
  }
 }
 if ((label|0) == 190) {
  $631 = HEAP32[(15080)>>2]|0;
  $632 = (($631) + ($$723947$i))|0;
  HEAP32[(15080)>>2] = $632;
  $633 = HEAP32[(15084)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(15084)>>2] = $632;
  }
  $635 = HEAP32[(14672)>>2]|0;
  $636 = ($635|0)==(0|0);
  L294: do {
   if ($636) {
    $637 = HEAP32[(14664)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($$748$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(14664)>>2] = $$748$i;
    }
    HEAP32[(15096)>>2] = $$748$i;
    HEAP32[(15100)>>2] = $$723947$i;
    HEAP32[(15108)>>2] = 0;
    $640 = HEAP32[3780]|0;
    HEAP32[(14684)>>2] = $640;
    HEAP32[(14680)>>2] = -1;
    HEAP32[(14700)>>2] = (14688);
    HEAP32[(14696)>>2] = (14688);
    HEAP32[(14708)>>2] = (14696);
    HEAP32[(14704)>>2] = (14696);
    HEAP32[(14716)>>2] = (14704);
    HEAP32[(14712)>>2] = (14704);
    HEAP32[(14724)>>2] = (14712);
    HEAP32[(14720)>>2] = (14712);
    HEAP32[(14732)>>2] = (14720);
    HEAP32[(14728)>>2] = (14720);
    HEAP32[(14740)>>2] = (14728);
    HEAP32[(14736)>>2] = (14728);
    HEAP32[(14748)>>2] = (14736);
    HEAP32[(14744)>>2] = (14736);
    HEAP32[(14756)>>2] = (14744);
    HEAP32[(14752)>>2] = (14744);
    HEAP32[(14764)>>2] = (14752);
    HEAP32[(14760)>>2] = (14752);
    HEAP32[(14772)>>2] = (14760);
    HEAP32[(14768)>>2] = (14760);
    HEAP32[(14780)>>2] = (14768);
    HEAP32[(14776)>>2] = (14768);
    HEAP32[(14788)>>2] = (14776);
    HEAP32[(14784)>>2] = (14776);
    HEAP32[(14796)>>2] = (14784);
    HEAP32[(14792)>>2] = (14784);
    HEAP32[(14804)>>2] = (14792);
    HEAP32[(14800)>>2] = (14792);
    HEAP32[(14812)>>2] = (14800);
    HEAP32[(14808)>>2] = (14800);
    HEAP32[(14820)>>2] = (14808);
    HEAP32[(14816)>>2] = (14808);
    HEAP32[(14828)>>2] = (14816);
    HEAP32[(14824)>>2] = (14816);
    HEAP32[(14836)>>2] = (14824);
    HEAP32[(14832)>>2] = (14824);
    HEAP32[(14844)>>2] = (14832);
    HEAP32[(14840)>>2] = (14832);
    HEAP32[(14852)>>2] = (14840);
    HEAP32[(14848)>>2] = (14840);
    HEAP32[(14860)>>2] = (14848);
    HEAP32[(14856)>>2] = (14848);
    HEAP32[(14868)>>2] = (14856);
    HEAP32[(14864)>>2] = (14856);
    HEAP32[(14876)>>2] = (14864);
    HEAP32[(14872)>>2] = (14864);
    HEAP32[(14884)>>2] = (14872);
    HEAP32[(14880)>>2] = (14872);
    HEAP32[(14892)>>2] = (14880);
    HEAP32[(14888)>>2] = (14880);
    HEAP32[(14900)>>2] = (14888);
    HEAP32[(14896)>>2] = (14888);
    HEAP32[(14908)>>2] = (14896);
    HEAP32[(14904)>>2] = (14896);
    HEAP32[(14916)>>2] = (14904);
    HEAP32[(14912)>>2] = (14904);
    HEAP32[(14924)>>2] = (14912);
    HEAP32[(14920)>>2] = (14912);
    HEAP32[(14932)>>2] = (14920);
    HEAP32[(14928)>>2] = (14920);
    HEAP32[(14940)>>2] = (14928);
    HEAP32[(14936)>>2] = (14928);
    HEAP32[(14948)>>2] = (14936);
    HEAP32[(14944)>>2] = (14936);
    $641 = (($$723947$i) + -40)|0;
    $642 = ((($$748$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$748$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(14672)>>2] = $649;
    HEAP32[(14660)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($$748$i) + ($641)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(15136)>>2]|0;
    HEAP32[(14676)>>2] = $655;
   } else {
    $$024372$i = (15096);
    while(1) {
     $656 = HEAP32[$$024372$i>>2]|0;
     $657 = ((($$024372$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$748$i|0)==($659|0);
     if ($660) {
      label = 199;
      break;
     }
     $661 = ((($$024372$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024372$i = $662;
     }
    }
    if ((label|0) == 199) {
     $664 = ((($$024372$i)) + 4|0);
     $665 = ((($$024372$i)) + 12|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = $666 & 8;
     $668 = ($667|0)==(0);
     if ($668) {
      $669 = ($656>>>0)<=($635>>>0);
      $670 = ($$748$i>>>0)>($635>>>0);
      $or$cond51$i = $670 & $669;
      if ($or$cond51$i) {
       $671 = (($658) + ($$723947$i))|0;
       HEAP32[$664>>2] = $671;
       $672 = HEAP32[(14660)>>2]|0;
       $673 = (($672) + ($$723947$i))|0;
       $674 = ((($635)) + 8|0);
       $675 = $674;
       $676 = $675 & 7;
       $677 = ($676|0)==(0);
       $678 = (0 - ($675))|0;
       $679 = $678 & 7;
       $680 = $677 ? 0 : $679;
       $681 = (($635) + ($680)|0);
       $682 = (($673) - ($680))|0;
       HEAP32[(14672)>>2] = $681;
       HEAP32[(14660)>>2] = $682;
       $683 = $682 | 1;
       $684 = ((($681)) + 4|0);
       HEAP32[$684>>2] = $683;
       $685 = (($635) + ($673)|0);
       $686 = ((($685)) + 4|0);
       HEAP32[$686>>2] = 40;
       $687 = HEAP32[(15136)>>2]|0;
       HEAP32[(14676)>>2] = $687;
       break;
      }
     }
    }
    $688 = HEAP32[(14664)>>2]|0;
    $689 = ($$748$i>>>0)<($688>>>0);
    if ($689) {
     HEAP32[(14664)>>2] = $$748$i;
     $752 = $$748$i;
    } else {
     $752 = $688;
    }
    $690 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (15096);
    while(1) {
     $691 = HEAP32[$$124471$i>>2]|0;
     $692 = ($691|0)==($690|0);
     if ($692) {
      label = 207;
      break;
     }
     $693 = ((($$124471$i)) + 8|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = ($694|0)==(0|0);
     if ($695) {
      break;
     } else {
      $$124471$i = $694;
     }
    }
    if ((label|0) == 207) {
     $696 = ((($$124471$i)) + 12|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = $697 & 8;
     $699 = ($698|0)==(0);
     if ($699) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $700 = ((($$124471$i)) + 4|0);
      $701 = HEAP32[$700>>2]|0;
      $702 = (($701) + ($$723947$i))|0;
      HEAP32[$700>>2] = $702;
      $703 = ((($$748$i)) + 8|0);
      $704 = $703;
      $705 = $704 & 7;
      $706 = ($705|0)==(0);
      $707 = (0 - ($704))|0;
      $708 = $707 & 7;
      $709 = $706 ? 0 : $708;
      $710 = (($$748$i) + ($709)|0);
      $711 = ((($690)) + 8|0);
      $712 = $711;
      $713 = $712 & 7;
      $714 = ($713|0)==(0);
      $715 = (0 - ($712))|0;
      $716 = $715 & 7;
      $717 = $714 ? 0 : $716;
      $718 = (($690) + ($717)|0);
      $719 = $718;
      $720 = $710;
      $721 = (($719) - ($720))|0;
      $722 = (($710) + ($$0197)|0);
      $723 = (($721) - ($$0197))|0;
      $724 = $$0197 | 3;
      $725 = ((($710)) + 4|0);
      HEAP32[$725>>2] = $724;
      $726 = ($635|0)==($718|0);
      L317: do {
       if ($726) {
        $727 = HEAP32[(14660)>>2]|0;
        $728 = (($727) + ($723))|0;
        HEAP32[(14660)>>2] = $728;
        HEAP32[(14672)>>2] = $722;
        $729 = $728 | 1;
        $730 = ((($722)) + 4|0);
        HEAP32[$730>>2] = $729;
       } else {
        $731 = HEAP32[(14668)>>2]|0;
        $732 = ($731|0)==($718|0);
        if ($732) {
         $733 = HEAP32[(14656)>>2]|0;
         $734 = (($733) + ($723))|0;
         HEAP32[(14656)>>2] = $734;
         HEAP32[(14668)>>2] = $722;
         $735 = $734 | 1;
         $736 = ((($722)) + 4|0);
         HEAP32[$736>>2] = $735;
         $737 = (($722) + ($734)|0);
         HEAP32[$737>>2] = $734;
         break;
        }
        $738 = ((($718)) + 4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = $739 & 3;
        $741 = ($740|0)==(1);
        if ($741) {
         $742 = $739 & -8;
         $743 = (3)?($739 >>> 3):($739);
         $744 = ($739>>>0)<(256);
         L325: do {
          if ($744) {
           $745 = ((($718)) + 8|0);
           $746 = HEAP32[$745>>2]|0;
           $747 = ((($718)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = $743 << 1;
           $750 = (14688 + ($749<<2)|0);
           $751 = ($746|0)==($750|0);
           do {
            if (!($751)) {
             $753 = ($752>>>0)>($746>>>0);
             if ($753) {
              _abort();
              // unreachable;
             }
             $754 = ((($746)) + 12|0);
             $755 = HEAP32[$754>>2]|0;
             $756 = ($755|0)==($718|0);
             if ($756) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $757 = ($748|0)==($746|0);
           if ($757) {
            $758 = 1 << $743;
            $759 = $758 ^ -1;
            $760 = HEAP32[3662]|0;
            $761 = $760 & $759;
            HEAP32[3662] = $761;
            break;
           }
           $762 = ($748|0)==($750|0);
           do {
            if ($762) {
             $$pre16$i$i = ((($748)) + 8|0);
             $$pre$phi17$i$iZ2D = $$pre16$i$i;
            } else {
             $763 = ($752>>>0)>($748>>>0);
             if ($763) {
              _abort();
              // unreachable;
             }
             $764 = ((($748)) + 8|0);
             $765 = HEAP32[$764>>2]|0;
             $766 = ($765|0)==($718|0);
             if ($766) {
              $$pre$phi17$i$iZ2D = $764;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $767 = ((($746)) + 12|0);
           HEAP32[$767>>2] = $748;
           HEAP32[$$pre$phi17$i$iZ2D>>2] = $746;
          } else {
           $768 = ((($718)) + 24|0);
           $769 = HEAP32[$768>>2]|0;
           $770 = ((($718)) + 12|0);
           $771 = HEAP32[$770>>2]|0;
           $772 = ($771|0)==($718|0);
           do {
            if ($772) {
             $782 = ((($718)) + 16|0);
             $783 = ((($782)) + 4|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==(0|0);
             if ($785) {
              $786 = HEAP32[$782>>2]|0;
              $787 = ($786|0)==(0|0);
              if ($787) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i$ph = $786;$$1292$i$i$ph = $782;
              }
             } else {
              $$1290$i$i$ph = $784;$$1292$i$i$ph = $783;
             }
             $$1290$i$i = $$1290$i$i$ph;$$1292$i$i = $$1292$i$i$ph;
             while(1) {
              $788 = ((($$1290$i$i)) + 20|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $791 = ((($$1290$i$i)) + 16|0);
               $792 = HEAP32[$791>>2]|0;
               $793 = ($792|0)==(0|0);
               if ($793) {
                break;
               } else {
                $$1290$i$i$be = $792;$$1292$i$i$be = $791;
               }
              } else {
               $$1290$i$i$be = $789;$$1292$i$i$be = $788;
              }
              $$1290$i$i = $$1290$i$i$be;$$1292$i$i = $$1292$i$i$be;
             }
             $794 = ($752>>>0)>($$1292$i$i>>>0);
             if ($794) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $773 = ((($718)) + 8|0);
             $774 = HEAP32[$773>>2]|0;
             $775 = ($752>>>0)>($774>>>0);
             if ($775) {
              _abort();
              // unreachable;
             }
             $776 = ((($774)) + 12|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777|0)==($718|0);
             if (!($778)) {
              _abort();
              // unreachable;
             }
             $779 = ((($771)) + 8|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($718|0);
             if ($781) {
              HEAP32[$776>>2] = $771;
              HEAP32[$779>>2] = $774;
              $$3$i$i = $771;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $795 = ($769|0)==(0|0);
           if ($795) {
            break;
           }
           $796 = ((($718)) + 28|0);
           $797 = HEAP32[$796>>2]|0;
           $798 = (14952 + ($797<<2)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = ($799|0)==($718|0);
           do {
            if ($800) {
             HEAP32[$798>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $801 = 1 << $797;
             $802 = $801 ^ -1;
             $803 = HEAP32[(14652)>>2]|0;
             $804 = $803 & $802;
             HEAP32[(14652)>>2] = $804;
             break L325;
            } else {
             $805 = HEAP32[(14664)>>2]|0;
             $806 = ($805>>>0)>($769>>>0);
             if ($806) {
              _abort();
              // unreachable;
             } else {
              $807 = ((($769)) + 16|0);
              $808 = HEAP32[$807>>2]|0;
              $809 = ($808|0)==($718|0);
              $810 = ((($769)) + 20|0);
              $$sink326 = $809 ? $807 : $810;
              HEAP32[$$sink326>>2] = $$3$i$i;
              $811 = ($$3$i$i|0)==(0|0);
              if ($811) {
               break L325;
              } else {
               break;
              }
             }
            }
           } while(0);
           $812 = HEAP32[(14664)>>2]|0;
           $813 = ($812>>>0)>($$3$i$i>>>0);
           if ($813) {
            _abort();
            // unreachable;
           }
           $814 = ((($$3$i$i)) + 24|0);
           HEAP32[$814>>2] = $769;
           $815 = ((($718)) + 16|0);
           $816 = HEAP32[$815>>2]|0;
           $817 = ($816|0)==(0|0);
           do {
            if (!($817)) {
             $818 = ($812>>>0)>($816>>>0);
             if ($818) {
              _abort();
              // unreachable;
             } else {
              $819 = ((($$3$i$i)) + 16|0);
              HEAP32[$819>>2] = $816;
              $820 = ((($816)) + 24|0);
              HEAP32[$820>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $821 = ((($815)) + 4|0);
           $822 = HEAP32[$821>>2]|0;
           $823 = ($822|0)==(0|0);
           if ($823) {
            break;
           }
           $824 = HEAP32[(14664)>>2]|0;
           $825 = ($824>>>0)>($822>>>0);
           if ($825) {
            _abort();
            // unreachable;
           } else {
            $826 = ((($$3$i$i)) + 20|0);
            HEAP32[$826>>2] = $822;
            $827 = ((($822)) + 24|0);
            HEAP32[$827>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $828 = (($718) + ($742)|0);
         $829 = (($742) + ($723))|0;
         $$0$i16$i = $828;$$0286$i$i = $829;
        } else {
         $$0$i16$i = $718;$$0286$i$i = $723;
        }
        $830 = ((($$0$i16$i)) + 4|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = $831 & -2;
        HEAP32[$830>>2] = $832;
        $833 = $$0286$i$i | 1;
        $834 = ((($722)) + 4|0);
        HEAP32[$834>>2] = $833;
        $835 = (($722) + ($$0286$i$i)|0);
        HEAP32[$835>>2] = $$0286$i$i;
        $836 = (3)?($$0286$i$i >>> 3):($$0286$i$i);
        $837 = ($$0286$i$i>>>0)<(256);
        if ($837) {
         $838 = $836 << 1;
         $839 = (14688 + ($838<<2)|0);
         $840 = HEAP32[3662]|0;
         $841 = 1 << $836;
         $842 = $840 & $841;
         $843 = ($842|0)==(0);
         do {
          if ($843) {
           $844 = $840 | $841;
           HEAP32[3662] = $844;
           $$pre$i17$i = ((($839)) + 8|0);
           $$0294$i$i = $839;$$pre$phi$i18$iZ2D = $$pre$i17$i;
          } else {
           $845 = ((($839)) + 8|0);
           $846 = HEAP32[$845>>2]|0;
           $847 = HEAP32[(14664)>>2]|0;
           $848 = ($847>>>0)>($846>>>0);
           if (!($848)) {
            $$0294$i$i = $846;$$pre$phi$i18$iZ2D = $845;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $722;
         $849 = ((($$0294$i$i)) + 12|0);
         HEAP32[$849>>2] = $722;
         $850 = ((($722)) + 8|0);
         HEAP32[$850>>2] = $$0294$i$i;
         $851 = ((($722)) + 12|0);
         HEAP32[$851>>2] = $839;
         break;
        }
        $852 = (8)?($$0286$i$i >>> 8):($$0286$i$i);
        $853 = ($852|0)==(0);
        do {
         if ($853) {
          $$0295$i$i = 0;
         } else {
          $854 = ($$0286$i$i>>>0)>(16777215);
          if ($854) {
           $$0295$i$i = 31;
           break;
          }
          $855 = (($852) + 1048320)|0;
          $856 = (16)?($855 >>> 16):($855);
          $857 = $856 & 8;
          $858 = $852 << $857;
          $859 = (($858) + 520192)|0;
          $860 = (16)?($859 >>> 16):($859);
          $861 = $860 & 4;
          $862 = $861 | $857;
          $863 = $858 << $861;
          $864 = (($863) + 245760)|0;
          $865 = (16)?($864 >>> 16):($864);
          $866 = $865 & 2;
          $867 = $862 | $866;
          $868 = (14 - ($867))|0;
          $869 = $863 << $866;
          $870 = (15)?($869 >>> 15):($869);
          $871 = (($868) + ($870))|0;
          $872 = $871 << 1;
          $873 = (($871) + 7)|0;
          $874 = ($873)?($$0286$i$i >>> $873):($$0286$i$i);
          $875 = $874 & 1;
          $876 = $875 | $872;
          $$0295$i$i = $876;
         }
        } while(0);
        $877 = (14952 + ($$0295$i$i<<2)|0);
        $878 = ((($722)) + 28|0);
        HEAP32[$878>>2] = $$0295$i$i;
        $879 = ((($722)) + 16|0);
        $880 = ((($879)) + 4|0);
        HEAP32[$880>>2] = 0;
        HEAP32[$879>>2] = 0;
        $881 = HEAP32[(14652)>>2]|0;
        $882 = 1 << $$0295$i$i;
        $883 = $881 & $882;
        $884 = ($883|0)==(0);
        if ($884) {
         $885 = $881 | $882;
         HEAP32[(14652)>>2] = $885;
         HEAP32[$877>>2] = $722;
         $886 = ((($722)) + 24|0);
         HEAP32[$886>>2] = $877;
         $887 = ((($722)) + 12|0);
         HEAP32[$887>>2] = $722;
         $888 = ((($722)) + 8|0);
         HEAP32[$888>>2] = $722;
         break;
        }
        $889 = HEAP32[$877>>2]|0;
        $890 = ((($889)) + 4|0);
        $891 = HEAP32[$890>>2]|0;
        $892 = $891 & -8;
        $893 = ($892|0)==($$0286$i$i|0);
        L410: do {
         if ($893) {
          $$0288$lcssa$i$i = $889;
         } else {
          $894 = ($$0295$i$i|0)==(31);
          $895 = (1)?($$0295$i$i >>> 1):($$0295$i$i);
          $896 = (25 - ($895))|0;
          $897 = $894 ? 0 : $896;
          $898 = $$0286$i$i << $897;
          $$028711$i$i = $898;$$028810$i$i = $889;
          while(1) {
           $905 = (31)?($$028711$i$i >>> 31):($$028711$i$i);
           $906 = (((($$028810$i$i)) + 16|0) + ($905<<2)|0);
           $901 = HEAP32[$906>>2]|0;
           $907 = ($901|0)==(0|0);
           if ($907) {
            break;
           }
           $899 = $$028711$i$i << 1;
           $900 = ((($901)) + 4|0);
           $902 = HEAP32[$900>>2]|0;
           $903 = $902 & -8;
           $904 = ($903|0)==($$0286$i$i|0);
           if ($904) {
            $$0288$lcssa$i$i = $901;
            break L410;
           } else {
            $$028711$i$i = $899;$$028810$i$i = $901;
           }
          }
          $908 = HEAP32[(14664)>>2]|0;
          $909 = ($908>>>0)>($906>>>0);
          if ($909) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$906>>2] = $722;
           $910 = ((($722)) + 24|0);
           HEAP32[$910>>2] = $$028810$i$i;
           $911 = ((($722)) + 12|0);
           HEAP32[$911>>2] = $722;
           $912 = ((($722)) + 8|0);
           HEAP32[$912>>2] = $722;
           break L317;
          }
         }
        } while(0);
        $913 = ((($$0288$lcssa$i$i)) + 8|0);
        $914 = HEAP32[$913>>2]|0;
        $915 = HEAP32[(14664)>>2]|0;
        $916 = ($915>>>0)<=($$0288$lcssa$i$i>>>0);
        $917 = ($915>>>0)<=($914>>>0);
        $918 = $917 & $916;
        if ($918) {
         $919 = ((($914)) + 12|0);
         HEAP32[$919>>2] = $722;
         HEAP32[$913>>2] = $722;
         $920 = ((($722)) + 8|0);
         HEAP32[$920>>2] = $914;
         $921 = ((($722)) + 12|0);
         HEAP32[$921>>2] = $$0288$lcssa$i$i;
         $922 = ((($722)) + 24|0);
         HEAP32[$922>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $1059 = ((($710)) + 8|0);
      $$0 = $1059;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (15096);
    while(1) {
     $923 = HEAP32[$$0$i$i$i>>2]|0;
     $924 = ($923>>>0)>($635>>>0);
     if (!($924)) {
      $925 = ((($$0$i$i$i)) + 4|0);
      $926 = HEAP32[$925>>2]|0;
      $927 = (($923) + ($926)|0);
      $928 = ($927>>>0)>($635>>>0);
      if ($928) {
       break;
      }
     }
     $929 = ((($$0$i$i$i)) + 8|0);
     $930 = HEAP32[$929>>2]|0;
     $$0$i$i$i = $930;
    }
    $931 = ((($927)) + -47|0);
    $932 = ((($931)) + 8|0);
    $933 = $932;
    $934 = $933 & 7;
    $935 = ($934|0)==(0);
    $936 = (0 - ($933))|0;
    $937 = $936 & 7;
    $938 = $935 ? 0 : $937;
    $939 = (($931) + ($938)|0);
    $940 = ((($635)) + 16|0);
    $941 = ($939>>>0)<($940>>>0);
    $942 = $941 ? $635 : $939;
    $943 = ((($942)) + 8|0);
    $944 = ((($942)) + 24|0);
    $945 = (($$723947$i) + -40)|0;
    $946 = ((($$748$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($$748$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(14672)>>2] = $953;
    HEAP32[(14660)>>2] = $954;
    $955 = $954 | 1;
    $956 = ((($953)) + 4|0);
    HEAP32[$956>>2] = $955;
    $957 = (($$748$i) + ($945)|0);
    $958 = ((($957)) + 4|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[(15136)>>2]|0;
    HEAP32[(14676)>>2] = $959;
    $960 = ((($942)) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$943>>2]=HEAP32[(15096)>>2]|0;HEAP32[$943+4>>2]=HEAP32[(15096)+4>>2]|0;HEAP32[$943+8>>2]=HEAP32[(15096)+8>>2]|0;HEAP32[$943+12>>2]=HEAP32[(15096)+12>>2]|0;
    HEAP32[(15096)>>2] = $$748$i;
    HEAP32[(15100)>>2] = $$723947$i;
    HEAP32[(15108)>>2] = 0;
    HEAP32[(15104)>>2] = $943;
    $962 = $944;
    while(1) {
     $961 = ((($962)) + 4|0);
     HEAP32[$961>>2] = 7;
     $963 = ((($962)) + 8|0);
     $964 = ($963>>>0)<($927>>>0);
     if ($964) {
      $962 = $961;
     } else {
      break;
     }
    }
    $965 = ($942|0)==($635|0);
    if (!($965)) {
     $966 = $942;
     $967 = $635;
     $968 = (($966) - ($967))|0;
     $969 = HEAP32[$960>>2]|0;
     $970 = $969 & -2;
     HEAP32[$960>>2] = $970;
     $971 = $968 | 1;
     $972 = ((($635)) + 4|0);
     HEAP32[$972>>2] = $971;
     HEAP32[$942>>2] = $968;
     $973 = (3)?($968 >>> 3):($968);
     $974 = ($968>>>0)<(256);
     if ($974) {
      $975 = $973 << 1;
      $976 = (14688 + ($975<<2)|0);
      $977 = HEAP32[3662]|0;
      $978 = 1 << $973;
      $979 = $977 & $978;
      $980 = ($979|0)==(0);
      if ($980) {
       $981 = $977 | $978;
       HEAP32[3662] = $981;
       $$pre$i$i = ((($976)) + 8|0);
       $$0211$i$i = $976;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $982 = ((($976)) + 8|0);
       $983 = HEAP32[$982>>2]|0;
       $984 = HEAP32[(14664)>>2]|0;
       $985 = ($984>>>0)>($983>>>0);
       if ($985) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $983;$$pre$phi$i$iZ2D = $982;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $986 = ((($$0211$i$i)) + 12|0);
      HEAP32[$986>>2] = $635;
      $987 = ((($635)) + 8|0);
      HEAP32[$987>>2] = $$0211$i$i;
      $988 = ((($635)) + 12|0);
      HEAP32[$988>>2] = $976;
      break;
     }
     $989 = (8)?($968 >>> 8):($968);
     $990 = ($989|0)==(0);
     if ($990) {
      $$0212$i$i = 0;
     } else {
      $991 = ($968>>>0)>(16777215);
      if ($991) {
       $$0212$i$i = 31;
      } else {
       $992 = (($989) + 1048320)|0;
       $993 = (16)?($992 >>> 16):($992);
       $994 = $993 & 8;
       $995 = $989 << $994;
       $996 = (($995) + 520192)|0;
       $997 = (16)?($996 >>> 16):($996);
       $998 = $997 & 4;
       $999 = $998 | $994;
       $1000 = $995 << $998;
       $1001 = (($1000) + 245760)|0;
       $1002 = (16)?($1001 >>> 16):($1001);
       $1003 = $1002 & 2;
       $1004 = $999 | $1003;
       $1005 = (14 - ($1004))|0;
       $1006 = $1000 << $1003;
       $1007 = (15)?($1006 >>> 15):($1006);
       $1008 = (($1005) + ($1007))|0;
       $1009 = $1008 << 1;
       $1010 = (($1008) + 7)|0;
       $1011 = ($1010)?($968 >>> $1010):($968);
       $1012 = $1011 & 1;
       $1013 = $1012 | $1009;
       $$0212$i$i = $1013;
      }
     }
     $1014 = (14952 + ($$0212$i$i<<2)|0);
     $1015 = ((($635)) + 28|0);
     HEAP32[$1015>>2] = $$0212$i$i;
     $1016 = ((($635)) + 20|0);
     HEAP32[$1016>>2] = 0;
     HEAP32[$940>>2] = 0;
     $1017 = HEAP32[(14652)>>2]|0;
     $1018 = 1 << $$0212$i$i;
     $1019 = $1017 & $1018;
     $1020 = ($1019|0)==(0);
     if ($1020) {
      $1021 = $1017 | $1018;
      HEAP32[(14652)>>2] = $1021;
      HEAP32[$1014>>2] = $635;
      $1022 = ((($635)) + 24|0);
      HEAP32[$1022>>2] = $1014;
      $1023 = ((($635)) + 12|0);
      HEAP32[$1023>>2] = $635;
      $1024 = ((($635)) + 8|0);
      HEAP32[$1024>>2] = $635;
      break;
     }
     $1025 = HEAP32[$1014>>2]|0;
     $1026 = ((($1025)) + 4|0);
     $1027 = HEAP32[$1026>>2]|0;
     $1028 = $1027 & -8;
     $1029 = ($1028|0)==($968|0);
     L451: do {
      if ($1029) {
       $$0207$lcssa$i$i = $1025;
      } else {
       $1030 = ($$0212$i$i|0)==(31);
       $1031 = (1)?($$0212$i$i >>> 1):($$0212$i$i);
       $1032 = (25 - ($1031))|0;
       $1033 = $1030 ? 0 : $1032;
       $1034 = $968 << $1033;
       $$02065$i$i = $1034;$$02074$i$i = $1025;
       while(1) {
        $1041 = (31)?($$02065$i$i >>> 31):($$02065$i$i);
        $1042 = (((($$02074$i$i)) + 16|0) + ($1041<<2)|0);
        $1037 = HEAP32[$1042>>2]|0;
        $1043 = ($1037|0)==(0|0);
        if ($1043) {
         break;
        }
        $1035 = $$02065$i$i << 1;
        $1036 = ((($1037)) + 4|0);
        $1038 = HEAP32[$1036>>2]|0;
        $1039 = $1038 & -8;
        $1040 = ($1039|0)==($968|0);
        if ($1040) {
         $$0207$lcssa$i$i = $1037;
         break L451;
        } else {
         $$02065$i$i = $1035;$$02074$i$i = $1037;
        }
       }
       $1044 = HEAP32[(14664)>>2]|0;
       $1045 = ($1044>>>0)>($1042>>>0);
       if ($1045) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1042>>2] = $635;
        $1046 = ((($635)) + 24|0);
        HEAP32[$1046>>2] = $$02074$i$i;
        $1047 = ((($635)) + 12|0);
        HEAP32[$1047>>2] = $635;
        $1048 = ((($635)) + 8|0);
        HEAP32[$1048>>2] = $635;
        break L294;
       }
      }
     } while(0);
     $1049 = ((($$0207$lcssa$i$i)) + 8|0);
     $1050 = HEAP32[$1049>>2]|0;
     $1051 = HEAP32[(14664)>>2]|0;
     $1052 = ($1051>>>0)<=($$0207$lcssa$i$i>>>0);
     $1053 = ($1051>>>0)<=($1050>>>0);
     $1054 = $1053 & $1052;
     if ($1054) {
      $1055 = ((($1050)) + 12|0);
      HEAP32[$1055>>2] = $635;
      HEAP32[$1049>>2] = $635;
      $1056 = ((($635)) + 8|0);
      HEAP32[$1056>>2] = $1050;
      $1057 = ((($635)) + 12|0);
      HEAP32[$1057>>2] = $$0207$lcssa$i$i;
      $1058 = ((($635)) + 24|0);
      HEAP32[$1058>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(14660)>>2]|0;
  $1061 = ($1060>>>0)>($$0197>>>0);
  if ($1061) {
   $1062 = (($1060) - ($$0197))|0;
   HEAP32[(14660)>>2] = $1062;
   $1063 = HEAP32[(14672)>>2]|0;
   $1064 = (($1063) + ($$0197)|0);
   HEAP32[(14672)>>2] = $1064;
   $1065 = $1062 | 1;
   $1066 = ((($1064)) + 4|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $$0197 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $$0 = $1069;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0;
 var $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $$pre443 = 0, $$pre445 = 0, $$sink = 0, $$sink456 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond419 = 0, $cond420 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(14664)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(14668)>>2]|0;
   $20 = ($19|0)==($16|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;$113 = $16;
     break;
    }
    $109 = (($16) + ($17)|0);
    $110 = ((($16)) + 4|0);
    $111 = $17 | 1;
    $112 = $106 & -2;
    HEAP32[(14656)>>2] = $17;
    HEAP32[$105>>2] = $112;
    HEAP32[$110>>2] = $111;
    HEAP32[$109>>2] = $17;
    return;
   }
   $21 = (3)?($13 >>> 3):($13);
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (14688 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($3>>>0)>($24>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[3662]|0;
     $38 = $37 & $36;
     HEAP32[3662] = $38;
     $$1 = $16;$$1380 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre445 = ((($26)) + 8|0);
     $$pre$phi446Z2D = $$pre445;
    } else {
     $40 = ($3>>>0)>($26>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi446Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi446Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385$ph = $63;$$1388$ph = $59;
      }
     } else {
      $$1385$ph = $61;$$1388$ph = $60;
     }
     $$1385 = $$1385$ph;$$1388 = $$1388$ph;
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if ($67) {
       $68 = ((($$1385)) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($69|0)==(0|0);
       if ($70) {
        break;
       } else {
        $$1385$be = $69;$$1388$be = $68;
       }
      } else {
       $$1385$be = $66;$$1388$be = $65;
      }
      $$1385 = $$1385$be;$$1388 = $$1388$be;
     }
     $71 = ($3>>>0)>($$1388>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($3>>>0)>($51>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (14952 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==($16|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond419 = ($$3|0)==(0|0);
      if ($cond419) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(14652)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(14652)>>2] = $81;
       $$1 = $16;$$1380 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(14664)>>2]|0;
      $83 = ($82>>>0)>($46>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ($85|0)==($16|0);
       $87 = ((($46)) + 20|0);
       $$sink = $86 ? $84 : $87;
       HEAP32[$$sink>>2] = $$3;
       $88 = ($$3|0)==(0|0);
       if ($88) {
        $$1 = $16;$$1380 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $89 = HEAP32[(14664)>>2]|0;
    $90 = ($89>>>0)>($$3>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($89>>>0)>($93>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;$113 = $16;
    } else {
     $101 = HEAP32[(14664)>>2]|0;
     $102 = ($101>>>0)>($99>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;$113 = $2;
  }
 } while(0);
 $114 = ($113>>>0)<($10>>>0);
 if (!($114)) {
  _abort();
  // unreachable;
 }
 $115 = ((($10)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 & 1;
 $118 = ($117|0)==(0);
 if ($118) {
  _abort();
  // unreachable;
 }
 $119 = $116 & 2;
 $120 = ($119|0)==(0);
 if ($120) {
  $121 = HEAP32[(14672)>>2]|0;
  $122 = ($121|0)==($10|0);
  if ($122) {
   $123 = HEAP32[(14660)>>2]|0;
   $124 = (($123) + ($$1380))|0;
   HEAP32[(14660)>>2] = $124;
   HEAP32[(14672)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = HEAP32[(14668)>>2]|0;
   $128 = ($$1|0)==($127|0);
   if (!($128)) {
    return;
   }
   HEAP32[(14668)>>2] = 0;
   HEAP32[(14656)>>2] = 0;
   return;
  }
  $129 = HEAP32[(14668)>>2]|0;
  $130 = ($129|0)==($10|0);
  if ($130) {
   $131 = HEAP32[(14656)>>2]|0;
   $132 = (($131) + ($$1380))|0;
   HEAP32[(14656)>>2] = $132;
   HEAP32[(14668)>>2] = $113;
   $133 = $132 | 1;
   $134 = ((($$1)) + 4|0);
   HEAP32[$134>>2] = $133;
   $135 = (($113) + ($132)|0);
   HEAP32[$135>>2] = $132;
   return;
  }
  $136 = $116 & -8;
  $137 = (($136) + ($$1380))|0;
  $138 = (3)?($116 >>> 3):($116);
  $139 = ($116>>>0)<(256);
  L111: do {
   if ($139) {
    $140 = ((($10)) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ((($10)) + 12|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = $138 << 1;
    $145 = (14688 + ($144<<2)|0);
    $146 = ($141|0)==($145|0);
    if (!($146)) {
     $147 = HEAP32[(14664)>>2]|0;
     $148 = ($147>>>0)>($141>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($141)) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($10|0);
     if (!($151)) {
      _abort();
      // unreachable;
     }
    }
    $152 = ($143|0)==($141|0);
    if ($152) {
     $153 = 1 << $138;
     $154 = $153 ^ -1;
     $155 = HEAP32[3662]|0;
     $156 = $155 & $154;
     HEAP32[3662] = $156;
     break;
    }
    $157 = ($143|0)==($145|0);
    if ($157) {
     $$pre443 = ((($143)) + 8|0);
     $$pre$phi444Z2D = $$pre443;
    } else {
     $158 = HEAP32[(14664)>>2]|0;
     $159 = ($158>>>0)>($143>>>0);
     if ($159) {
      _abort();
      // unreachable;
     }
     $160 = ((($143)) + 8|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($161|0)==($10|0);
     if ($162) {
      $$pre$phi444Z2D = $160;
     } else {
      _abort();
      // unreachable;
     }
    }
    $163 = ((($141)) + 12|0);
    HEAP32[$163>>2] = $143;
    HEAP32[$$pre$phi444Z2D>>2] = $141;
   } else {
    $164 = ((($10)) + 24|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ((($10)) + 12|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)==($10|0);
    do {
     if ($168) {
      $179 = ((($10)) + 16|0);
      $180 = ((($179)) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = ($181|0)==(0|0);
      if ($182) {
       $183 = HEAP32[$179>>2]|0;
       $184 = ($183|0)==(0|0);
       if ($184) {
        $$3398 = 0;
        break;
       } else {
        $$1396$ph = $183;$$1400$ph = $179;
       }
      } else {
       $$1396$ph = $181;$$1400$ph = $180;
      }
      $$1396 = $$1396$ph;$$1400 = $$1400$ph;
      while(1) {
       $185 = ((($$1396)) + 20|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($186|0)==(0|0);
       if ($187) {
        $188 = ((($$1396)) + 16|0);
        $189 = HEAP32[$188>>2]|0;
        $190 = ($189|0)==(0|0);
        if ($190) {
         break;
        } else {
         $$1396$be = $189;$$1400$be = $188;
        }
       } else {
        $$1396$be = $186;$$1400$be = $185;
       }
       $$1396 = $$1396$be;$$1400 = $$1400$be;
      }
      $191 = HEAP32[(14664)>>2]|0;
      $192 = ($191>>>0)>($$1400>>>0);
      if ($192) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $169 = ((($10)) + 8|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = HEAP32[(14664)>>2]|0;
      $172 = ($171>>>0)>($170>>>0);
      if ($172) {
       _abort();
       // unreachable;
      }
      $173 = ((($170)) + 12|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ($174|0)==($10|0);
      if (!($175)) {
       _abort();
       // unreachable;
      }
      $176 = ((($167)) + 8|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==($10|0);
      if ($178) {
       HEAP32[$173>>2] = $167;
       HEAP32[$176>>2] = $170;
       $$3398 = $167;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $193 = ($165|0)==(0|0);
    if (!($193)) {
     $194 = ((($10)) + 28|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = (14952 + ($195<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = ($197|0)==($10|0);
     do {
      if ($198) {
       HEAP32[$196>>2] = $$3398;
       $cond420 = ($$3398|0)==(0|0);
       if ($cond420) {
        $199 = 1 << $195;
        $200 = $199 ^ -1;
        $201 = HEAP32[(14652)>>2]|0;
        $202 = $201 & $200;
        HEAP32[(14652)>>2] = $202;
        break L111;
       }
      } else {
       $203 = HEAP32[(14664)>>2]|0;
       $204 = ($203>>>0)>($165>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($165)) + 16|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = ($206|0)==($10|0);
        $208 = ((($165)) + 20|0);
        $$sink456 = $207 ? $205 : $208;
        HEAP32[$$sink456>>2] = $$3398;
        $209 = ($$3398|0)==(0|0);
        if ($209) {
         break L111;
        } else {
         break;
        }
       }
      }
     } while(0);
     $210 = HEAP32[(14664)>>2]|0;
     $211 = ($210>>>0)>($$3398>>>0);
     if ($211) {
      _abort();
      // unreachable;
     }
     $212 = ((($$3398)) + 24|0);
     HEAP32[$212>>2] = $165;
     $213 = ((($10)) + 16|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($214|0)==(0|0);
     do {
      if (!($215)) {
       $216 = ($210>>>0)>($214>>>0);
       if ($216) {
        _abort();
        // unreachable;
       } else {
        $217 = ((($$3398)) + 16|0);
        HEAP32[$217>>2] = $214;
        $218 = ((($214)) + 24|0);
        HEAP32[$218>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $219 = ((($213)) + 4|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($220|0)==(0|0);
     if (!($221)) {
      $222 = HEAP32[(14664)>>2]|0;
      $223 = ($222>>>0)>($220>>>0);
      if ($223) {
       _abort();
       // unreachable;
      } else {
       $224 = ((($$3398)) + 20|0);
       HEAP32[$224>>2] = $220;
       $225 = ((($220)) + 24|0);
       HEAP32[$225>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $226 = $137 | 1;
  $227 = ((($$1)) + 4|0);
  HEAP32[$227>>2] = $226;
  $228 = (($113) + ($137)|0);
  HEAP32[$228>>2] = $137;
  $229 = HEAP32[(14668)>>2]|0;
  $230 = ($$1|0)==($229|0);
  if ($230) {
   HEAP32[(14656)>>2] = $137;
   return;
  } else {
   $$2 = $137;
  }
 } else {
  $231 = $116 & -2;
  HEAP32[$115>>2] = $231;
  $232 = $$1380 | 1;
  $233 = ((($$1)) + 4|0);
  HEAP32[$233>>2] = $232;
  $234 = (($113) + ($$1380)|0);
  HEAP32[$234>>2] = $$1380;
  $$2 = $$1380;
 }
 $235 = (3)?($$2 >>> 3):($$2);
 $236 = ($$2>>>0)<(256);
 if ($236) {
  $237 = $235 << 1;
  $238 = (14688 + ($237<<2)|0);
  $239 = HEAP32[3662]|0;
  $240 = 1 << $235;
  $241 = $239 & $240;
  $242 = ($241|0)==(0);
  if ($242) {
   $243 = $239 | $240;
   HEAP32[3662] = $243;
   $$pre = ((($238)) + 8|0);
   $$0401 = $238;$$pre$phiZ2D = $$pre;
  } else {
   $244 = ((($238)) + 8|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = HEAP32[(14664)>>2]|0;
   $247 = ($246>>>0)>($245>>>0);
   if ($247) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $245;$$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $248 = ((($$0401)) + 12|0);
  HEAP32[$248>>2] = $$1;
  $249 = ((($$1)) + 8|0);
  HEAP32[$249>>2] = $$0401;
  $250 = ((($$1)) + 12|0);
  HEAP32[$250>>2] = $238;
  return;
 }
 $251 = (8)?($$2 >>> 8):($$2);
 $252 = ($251|0)==(0);
 if ($252) {
  $$0394 = 0;
 } else {
  $253 = ($$2>>>0)>(16777215);
  if ($253) {
   $$0394 = 31;
  } else {
   $254 = (($251) + 1048320)|0;
   $255 = (16)?($254 >>> 16):($254);
   $256 = $255 & 8;
   $257 = $251 << $256;
   $258 = (($257) + 520192)|0;
   $259 = (16)?($258 >>> 16):($258);
   $260 = $259 & 4;
   $261 = $260 | $256;
   $262 = $257 << $260;
   $263 = (($262) + 245760)|0;
   $264 = (16)?($263 >>> 16):($263);
   $265 = $264 & 2;
   $266 = $261 | $265;
   $267 = (14 - ($266))|0;
   $268 = $262 << $265;
   $269 = (15)?($268 >>> 15):($268);
   $270 = (($267) + ($269))|0;
   $271 = $270 << 1;
   $272 = (($270) + 7)|0;
   $273 = ($272)?($$2 >>> $272):($$2);
   $274 = $273 & 1;
   $275 = $274 | $271;
   $$0394 = $275;
  }
 }
 $276 = (14952 + ($$0394<<2)|0);
 $277 = ((($$1)) + 28|0);
 HEAP32[$277>>2] = $$0394;
 $278 = ((($$1)) + 16|0);
 $279 = ((($$1)) + 20|0);
 HEAP32[$279>>2] = 0;
 HEAP32[$278>>2] = 0;
 $280 = HEAP32[(14652)>>2]|0;
 $281 = 1 << $$0394;
 $282 = $280 & $281;
 $283 = ($282|0)==(0);
 L197: do {
  if ($283) {
   $284 = $280 | $281;
   HEAP32[(14652)>>2] = $284;
   HEAP32[$276>>2] = $$1;
   $285 = ((($$1)) + 24|0);
   HEAP32[$285>>2] = $276;
   $286 = ((($$1)) + 12|0);
   HEAP32[$286>>2] = $$1;
   $287 = ((($$1)) + 8|0);
   HEAP32[$287>>2] = $$1;
  } else {
   $288 = HEAP32[$276>>2]|0;
   $289 = ((($288)) + 4|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = $290 & -8;
   $292 = ($291|0)==($$2|0);
   L200: do {
    if ($292) {
     $$0382$lcssa = $288;
    } else {
     $293 = ($$0394|0)==(31);
     $294 = (1)?($$0394 >>> 1):($$0394);
     $295 = (25 - ($294))|0;
     $296 = $293 ? 0 : $295;
     $297 = $$2 << $296;
     $$0381438 = $297;$$0382437 = $288;
     while(1) {
      $304 = (31)?($$0381438 >>> 31):($$0381438);
      $305 = (((($$0382437)) + 16|0) + ($304<<2)|0);
      $300 = HEAP32[$305>>2]|0;
      $306 = ($300|0)==(0|0);
      if ($306) {
       break;
      }
      $298 = $$0381438 << 1;
      $299 = ((($300)) + 4|0);
      $301 = HEAP32[$299>>2]|0;
      $302 = $301 & -8;
      $303 = ($302|0)==($$2|0);
      if ($303) {
       $$0382$lcssa = $300;
       break L200;
      } else {
       $$0381438 = $298;$$0382437 = $300;
      }
     }
     $307 = HEAP32[(14664)>>2]|0;
     $308 = ($307>>>0)>($305>>>0);
     if ($308) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$305>>2] = $$1;
      $309 = ((($$1)) + 24|0);
      HEAP32[$309>>2] = $$0382437;
      $310 = ((($$1)) + 12|0);
      HEAP32[$310>>2] = $$1;
      $311 = ((($$1)) + 8|0);
      HEAP32[$311>>2] = $$1;
      break L197;
     }
    }
   } while(0);
   $312 = ((($$0382$lcssa)) + 8|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = HEAP32[(14664)>>2]|0;
   $315 = ($314>>>0)<=($$0382$lcssa>>>0);
   $316 = ($314>>>0)<=($313>>>0);
   $317 = $316 & $315;
   if ($317) {
    $318 = ((($313)) + 12|0);
    HEAP32[$318>>2] = $$1;
    HEAP32[$312>>2] = $$1;
    $319 = ((($$1)) + 8|0);
    HEAP32[$319>>2] = $313;
    $320 = ((($$1)) + 12|0);
    HEAP32[$320>>2] = $$0382$lcssa;
    $321 = ((($$1)) + 24|0);
    HEAP32[$321>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $322 = HEAP32[(14680)>>2]|0;
 $323 = (($322) + -1)|0;
 HEAP32[(14680)>>2] = $323;
 $324 = ($323|0)==(0);
 if (!($324)) {
  return;
 }
 $$0211$in$i = (15104);
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $325 = ($$0211$i|0)==(0|0);
  $326 = ((($$0211$i)) + 8|0);
  if ($325) {
   break;
  } else {
   $$0211$in$i = $326;
  }
 }
 HEAP32[(14680)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $spec$select = $7 ? $3 : -1;
   $$0 = $spec$select;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 (_memset(($8|0),0,($$0|0))|0);
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1271$be = 0, $$1271$ph = 0, $$1274 = 0, $$1274$be = 0, $$1274$ph = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $or$cond$not = 0, $or$cond5 = 0, $storemerge = 0, $storemerge3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(14664)>>2]|0;
 $7 = ($6>>>0)<=($0>>>0);
 $8 = $3 & 3;
 $9 = ($8|0)!=(1);
 $or$cond$not = $9 & $7;
 $10 = ($5>>>0)>($0>>>0);
 $or$cond5 = $or$cond$not & $10;
 if (!($or$cond5)) {
  _abort();
  // unreachable;
 }
 $11 = ((($5)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 1;
 $14 = ($13|0)==(0);
 if ($14) {
  _abort();
  // unreachable;
 }
 $15 = ($8|0)==(0);
 if ($15) {
  $16 = ($1>>>0)<(256);
  if ($16) {
   $$2 = 0;
   return ($$2|0);
  }
  $17 = (($1) + 4)|0;
  $18 = ($4>>>0)<($17>>>0);
  if (!($18)) {
   $19 = (($4) - ($1))|0;
   $20 = HEAP32[(15128)>>2]|0;
   $21 = $20 << 1;
   $22 = ($19>>>0)>($21>>>0);
   if (!($22)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $23 = ($4>>>0)<($1>>>0);
 if (!($23)) {
  $24 = (($4) - ($1))|0;
  $25 = ($24>>>0)>(15);
  if (!($25)) {
   $$2 = $0;
   return ($$2|0);
  }
  $26 = (($0) + ($1)|0);
  $27 = $3 & 1;
  $28 = $27 | $1;
  $29 = $28 | 2;
  HEAP32[$2>>2] = $29;
  $30 = ((($26)) + 4|0);
  $31 = $24 | 3;
  HEAP32[$30>>2] = $31;
  $32 = HEAP32[$11>>2]|0;
  $33 = $32 | 1;
  HEAP32[$11>>2] = $33;
  _dispose_chunk($26,$24);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(14672)>>2]|0;
 $35 = ($34|0)==($5|0);
 if ($35) {
  $36 = HEAP32[(14660)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(14672)>>2] = $40;
  HEAP32[(14660)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(14668)>>2]|0;
 $47 = ($46|0)==($5|0);
 if ($47) {
  $48 = HEAP32[(14656)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($0) + ($49)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge3 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge3 = 0;
  }
  HEAP32[(14656)>>2] = $storemerge3;
  HEAP32[(14668)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $12 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $12 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = (3)?($12 >>> 3):($12);
 $77 = ($12>>>0)<(256);
 L49: do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (14688 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($6>>>0)>($79>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[3662]|0;
    $93 = $92 & $91;
    HEAP32[3662] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($6>>>0)>($81>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271$ph = $118;$$1274$ph = $114;
      }
     } else {
      $$1271$ph = $116;$$1274$ph = $115;
     }
     $$1271 = $$1271$ph;$$1274 = $$1274$ph;
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       $123 = ((($$1271)) + 16|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ($124|0)==(0|0);
       if ($125) {
        break;
       } else {
        $$1271$be = $124;$$1274$be = $123;
       }
      } else {
       $$1271$be = $121;$$1274$be = $120;
      }
      $$1271 = $$1271$be;$$1274 = $$1274$be;
     }
     $126 = ($6>>>0)>($$1274>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($6>>>0)>($106>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (14952 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)==($5|0);
    do {
     if ($132) {
      HEAP32[$130>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $133 = 1 << $129;
       $134 = $133 ^ -1;
       $135 = HEAP32[(14652)>>2]|0;
       $136 = $135 & $134;
       HEAP32[(14652)>>2] = $136;
       break L49;
      }
     } else {
      $137 = HEAP32[(14664)>>2]|0;
      $138 = ($137>>>0)>($101>>>0);
      if ($138) {
       _abort();
       // unreachable;
      } else {
       $139 = ((($101)) + 16|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = ($140|0)==($5|0);
       $142 = ((($101)) + 20|0);
       $$sink = $141 ? $139 : $142;
       HEAP32[$$sink>>2] = $$3;
       $143 = ($$3|0)==(0|0);
       if ($143) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $144 = HEAP32[(14664)>>2]|0;
    $145 = ($144>>>0)>($$3>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($144>>>0)>($148>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(14664)>>2]|0;
     $157 = ($156>>>0)>($154>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $161 | $73;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($0) + ($73)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0;
 var $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $$pre27 = 0, $$pre29 = 0, $$sink = 0, $$sink41 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0;
 var $cond17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(14664)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(14668)>>2]|0;
   $16 = ($15|0)==($11|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $102 & -2;
    HEAP32[(14656)>>2] = $12;
    HEAP32[$101>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$2>>2] = $12;
    return;
   }
   $17 = (3)?($7 >>> 3):($7);
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (14688 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($13>>>0)>($20>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[3662]|0;
     $34 = $33 & $32;
     HEAP32[3662] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre29 = ((($22)) + 8|0);
     $$pre$phi30Z2D = $$pre29;
    } else {
     $36 = ($13>>>0)>($22>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi30Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi30Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424$ph = $59;$$1427$ph = $55;
      }
     } else {
      $$1424$ph = $57;$$1427$ph = $56;
     }
     $$1424 = $$1424$ph;$$1427 = $$1427$ph;
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $64 = ((($$1424)) + 16|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = ($65|0)==(0|0);
       if ($66) {
        break;
       } else {
        $$1424$be = $65;$$1427$be = $64;
       }
      } else {
       $$1424$be = $62;$$1427$be = $61;
      }
      $$1424 = $$1424$be;$$1427 = $$1427$be;
     }
     $67 = ($13>>>0)>($$1427>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($13>>>0)>($47>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (14952 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==($11|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(14652)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(14652)>>2] = $77;
       $$1 = $11;$$1416 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(14664)>>2]|0;
      $79 = ($78>>>0)>($42>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($11|0);
       $83 = ((($42)) + 20|0);
       $$sink = $82 ? $80 : $83;
       HEAP32[$$sink>>2] = $$3;
       $84 = ($$3|0)==(0|0);
       if ($84) {
        $$1 = $11;$$1416 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $85 = HEAP32[(14664)>>2]|0;
    $86 = ($85>>>0)>($$3>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($85>>>0)>($89>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(14664)>>2]|0;
     $98 = ($97>>>0)>($95>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $108 = HEAP32[(14664)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(14672)>>2]|0;
  $115 = ($114|0)==($2|0);
  if ($115) {
   $116 = HEAP32[(14660)>>2]|0;
   $117 = (($116) + ($$1416))|0;
   HEAP32[(14660)>>2] = $117;
   HEAP32[(14672)>>2] = $$1;
   $118 = $117 | 1;
   $119 = ((($$1)) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[(14668)>>2]|0;
   $121 = ($$1|0)==($120|0);
   if (!($121)) {
    return;
   }
   HEAP32[(14668)>>2] = 0;
   HEAP32[(14656)>>2] = 0;
   return;
  }
  $122 = HEAP32[(14668)>>2]|0;
  $123 = ($122|0)==($2|0);
  if ($123) {
   $124 = HEAP32[(14656)>>2]|0;
   $125 = (($124) + ($$1416))|0;
   HEAP32[(14656)>>2] = $125;
   HEAP32[(14668)>>2] = $$1;
   $126 = $125 | 1;
   $127 = ((($$1)) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$1) + ($125)|0);
   HEAP32[$128>>2] = $125;
   return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$1416))|0;
  $131 = (3)?($111 >>> 3):($111);
  $132 = ($111>>>0)<(256);
  L99: do {
   if ($132) {
    $133 = ((($2)) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ((($2)) + 12|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = (14688 + ($137<<2)|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($108>>>0)>($134>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = ((($134)) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($2|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[3662]|0;
     $148 = $147 & $146;
     HEAP32[3662] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre27 = ((($136)) + 8|0);
     $$pre$phi28Z2D = $$pre27;
    } else {
     $150 = ($108>>>0)>($136>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = ((($136)) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($2|0);
     if ($153) {
      $$pre$phi28Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = ((($134)) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi28Z2D>>2] = $134;
   } else {
    $155 = ((($2)) + 24|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ((($2)) + 12|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($2|0);
    do {
     if ($159) {
      $169 = ((($2)) + 16|0);
      $170 = ((($169)) + 4|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ($171|0)==(0|0);
      if ($172) {
       $173 = HEAP32[$169>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $$3433 = 0;
        break;
       } else {
        $$1431$ph = $173;$$1435$ph = $169;
       }
      } else {
       $$1431$ph = $171;$$1435$ph = $170;
      }
      $$1431 = $$1431$ph;$$1435 = $$1435$ph;
      while(1) {
       $175 = ((($$1431)) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if ($177) {
        $178 = ((($$1431)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1431$be = $179;$$1435$be = $178;
        }
       } else {
        $$1431$be = $176;$$1435$be = $175;
       }
       $$1431 = $$1431$be;$$1435 = $$1435$be;
      }
      $181 = ($108>>>0)>($$1435>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $160 = ((($2)) + 8|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($108>>>0)>($161>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = ((($161)) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($2|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = ((($158)) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($2|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $$3433 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $183 = ((($2)) + 28|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = (14952 + ($184<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)==($2|0);
     do {
      if ($187) {
       HEAP32[$185>>2] = $$3433;
       $cond17 = ($$3433|0)==(0|0);
       if ($cond17) {
        $188 = 1 << $184;
        $189 = $188 ^ -1;
        $190 = HEAP32[(14652)>>2]|0;
        $191 = $190 & $189;
        HEAP32[(14652)>>2] = $191;
        break L99;
       }
      } else {
       $192 = HEAP32[(14664)>>2]|0;
       $193 = ($192>>>0)>($156>>>0);
       if ($193) {
        _abort();
        // unreachable;
       } else {
        $194 = ((($156)) + 16|0);
        $195 = HEAP32[$194>>2]|0;
        $196 = ($195|0)==($2|0);
        $197 = ((($156)) + 20|0);
        $$sink41 = $196 ? $194 : $197;
        HEAP32[$$sink41>>2] = $$3433;
        $198 = ($$3433|0)==(0|0);
        if ($198) {
         break L99;
        } else {
         break;
        }
       }
      }
     } while(0);
     $199 = HEAP32[(14664)>>2]|0;
     $200 = ($199>>>0)>($$3433>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = ((($$3433)) + 24|0);
     HEAP32[$201>>2] = $156;
     $202 = ((($2)) + 16|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = ($199>>>0)>($203>>>0);
       if ($205) {
        _abort();
        // unreachable;
       } else {
        $206 = ((($$3433)) + 16|0);
        HEAP32[$206>>2] = $203;
        $207 = ((($203)) + 24|0);
        HEAP32[$207>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $208 = ((($202)) + 4|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($209|0)==(0|0);
     if (!($210)) {
      $211 = HEAP32[(14664)>>2]|0;
      $212 = ($211>>>0)>($209>>>0);
      if ($212) {
       _abort();
       // unreachable;
      } else {
       $213 = ((($$3433)) + 20|0);
       HEAP32[$213>>2] = $209;
       $214 = ((($209)) + 24|0);
       HEAP32[$214>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $215 = $130 | 1;
  $216 = ((($$1)) + 4|0);
  HEAP32[$216>>2] = $215;
  $217 = (($$1) + ($130)|0);
  HEAP32[$217>>2] = $130;
  $218 = HEAP32[(14668)>>2]|0;
  $219 = ($$1|0)==($218|0);
  if ($219) {
   HEAP32[(14656)>>2] = $130;
   return;
  } else {
   $$2 = $130;
  }
 } else {
  $220 = $111 & -2;
  HEAP32[$110>>2] = $220;
  $221 = $$1416 | 1;
  $222 = ((($$1)) + 4|0);
  HEAP32[$222>>2] = $221;
  $223 = (($$1) + ($$1416)|0);
  HEAP32[$223>>2] = $$1416;
  $$2 = $$1416;
 }
 $224 = (3)?($$2 >>> 3):($$2);
 $225 = ($$2>>>0)<(256);
 if ($225) {
  $226 = $224 << 1;
  $227 = (14688 + ($226<<2)|0);
  $228 = HEAP32[3662]|0;
  $229 = 1 << $224;
  $230 = $228 & $229;
  $231 = ($230|0)==(0);
  if ($231) {
   $232 = $228 | $229;
   HEAP32[3662] = $232;
   $$pre = ((($227)) + 8|0);
   $$0436 = $227;$$pre$phiZ2D = $$pre;
  } else {
   $233 = ((($227)) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = HEAP32[(14664)>>2]|0;
   $236 = ($235>>>0)>($234>>>0);
   if ($236) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $234;$$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $237 = ((($$0436)) + 12|0);
  HEAP32[$237>>2] = $$1;
  $238 = ((($$1)) + 8|0);
  HEAP32[$238>>2] = $$0436;
  $239 = ((($$1)) + 12|0);
  HEAP32[$239>>2] = $227;
  return;
 }
 $240 = (8)?($$2 >>> 8):($$2);
 $241 = ($240|0)==(0);
 if ($241) {
  $$0429 = 0;
 } else {
  $242 = ($$2>>>0)>(16777215);
  if ($242) {
   $$0429 = 31;
  } else {
   $243 = (($240) + 1048320)|0;
   $244 = (16)?($243 >>> 16):($243);
   $245 = $244 & 8;
   $246 = $240 << $245;
   $247 = (($246) + 520192)|0;
   $248 = (16)?($247 >>> 16):($247);
   $249 = $248 & 4;
   $250 = $249 | $245;
   $251 = $246 << $249;
   $252 = (($251) + 245760)|0;
   $253 = (16)?($252 >>> 16):($252);
   $254 = $253 & 2;
   $255 = $250 | $254;
   $256 = (14 - ($255))|0;
   $257 = $251 << $254;
   $258 = (15)?($257 >>> 15):($257);
   $259 = (($256) + ($258))|0;
   $260 = $259 << 1;
   $261 = (($259) + 7)|0;
   $262 = ($261)?($$2 >>> $261):($$2);
   $263 = $262 & 1;
   $264 = $263 | $260;
   $$0429 = $264;
  }
 }
 $265 = (14952 + ($$0429<<2)|0);
 $266 = ((($$1)) + 28|0);
 HEAP32[$266>>2] = $$0429;
 $267 = ((($$1)) + 16|0);
 $268 = ((($$1)) + 20|0);
 HEAP32[$268>>2] = 0;
 HEAP32[$267>>2] = 0;
 $269 = HEAP32[(14652)>>2]|0;
 $270 = 1 << $$0429;
 $271 = $269 & $270;
 $272 = ($271|0)==(0);
 if ($272) {
  $273 = $269 | $270;
  HEAP32[(14652)>>2] = $273;
  HEAP32[$265>>2] = $$1;
  $274 = ((($$1)) + 24|0);
  HEAP32[$274>>2] = $265;
  $275 = ((($$1)) + 12|0);
  HEAP32[$275>>2] = $$1;
  $276 = ((($$1)) + 8|0);
  HEAP32[$276>>2] = $$1;
  return;
 }
 $277 = HEAP32[$265>>2]|0;
 $278 = ((($277)) + 4|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = $279 & -8;
 $281 = ($280|0)==($$2|0);
 L189: do {
  if ($281) {
   $$0418$lcssa = $277;
  } else {
   $282 = ($$0429|0)==(31);
   $283 = (1)?($$0429 >>> 1):($$0429);
   $284 = (25 - ($283))|0;
   $285 = $282 ? 0 : $284;
   $286 = $$2 << $285;
   $$041722 = $286;$$041821 = $277;
   while(1) {
    $293 = (31)?($$041722 >>> 31):($$041722);
    $294 = (((($$041821)) + 16|0) + ($293<<2)|0);
    $289 = HEAP32[$294>>2]|0;
    $295 = ($289|0)==(0|0);
    if ($295) {
     break;
    }
    $287 = $$041722 << 1;
    $288 = ((($289)) + 4|0);
    $290 = HEAP32[$288>>2]|0;
    $291 = $290 & -8;
    $292 = ($291|0)==($$2|0);
    if ($292) {
     $$0418$lcssa = $289;
     break L189;
    } else {
     $$041722 = $287;$$041821 = $289;
    }
   }
   $296 = HEAP32[(14664)>>2]|0;
   $297 = ($296>>>0)>($294>>>0);
   if ($297) {
    _abort();
    // unreachable;
   }
   HEAP32[$294>>2] = $$1;
   $298 = ((($$1)) + 24|0);
   HEAP32[$298>>2] = $$041821;
   $299 = ((($$1)) + 12|0);
   HEAP32[$299>>2] = $$1;
   $300 = ((($$1)) + 8|0);
   HEAP32[$300>>2] = $$1;
   return;
  }
 } while(0);
 $301 = ((($$0418$lcssa)) + 8|0);
 $302 = HEAP32[$301>>2]|0;
 $303 = HEAP32[(14664)>>2]|0;
 $304 = ($303>>>0)<=($$0418$lcssa>>>0);
 $305 = ($303>>>0)<=($302>>>0);
 $306 = $305 & $304;
 if (!($306)) {
  _abort();
  // unreachable;
 }
 $307 = ((($302)) + 12|0);
 HEAP32[$307>>2] = $$1;
 HEAP32[$301>>2] = $$1;
 $308 = ((($$1)) + 8|0);
 HEAP32[$308>>2] = $302;
 $309 = ((($$1)) + 12|0);
 HEAP32[$309>>2] = $$0418$lcssa;
 $310 = ((($$1)) + 24|0);
 HEAP32[$310>>2] = 0;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15208|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 32;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$030 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$030 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1 = $$0$lcssa;$$128 = $$025$lcssa;
   label = 10;
  } else {
   $$1 = $1;$$128 = $0;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $31 = HEAP8[$$1>>0]|0;
  HEAP8[$$128>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$030 = $$128;
  } else {
   $$22934 = $$128;$$235 = $$1;
   while(1) {
    $33 = ((($$235)) + 1|0);
    $34 = ((($$22934)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$030 = $34;
     break;
    } else {
     $$22934 = $34;$$235 = $33;
    }
   }
  }
 }
 return ($$030|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9084|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=9328; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 63]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((6192 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 13521;$$2256 = $spec$select295;$$4266 = $spec$select;$276 = $240;$278 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = (getTempRet0() | 0);
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 13521;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 13521 : (13523);
       $spec$select296 = $266 ? $$ : (13522);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 13521;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 13521;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 13531 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_700($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 13521;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = (4)?($$1236 >>> 4):($$1236);
      $237 = (13521 + ($236)|0);
      $spec$select293 = $or$cond278 ? 13521 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$276 = $225;$278 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$276 = $271;$278 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 13521;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_700($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $277 = ($276|0)!=(0);
     $279 = ($278|0)!=(0);
     $280 = $277 | $279;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_700($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_700($0,32,$$2261,$341,$$6268);
    _out($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_700($0,48,$$2261,$341,$343);
    _pad_700($0,48,$spec$select284,$339,0);
    _out($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_700($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $353 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $354 = ($353>>>0)<(10);
      if ($354) {
       $$3317 = $353;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (6656 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_535()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad_700($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_701($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_701($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 13538;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (13539) : (13544);
  $spec$select565 = $19 ? $$ : (13541);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 13557 : 13561;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 13584 : 13565;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_700($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_700($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = (31)?($63 >> 31):($63);
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (6656 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_700($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_700($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_700($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_700($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$134 = $$pr;
    while(1) {
     $135 = ($134|0)<(29);
     $136 = $135 ? $134 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $153 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$153>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $154 = ($153>>>0)>($$2483>>>0);
        if ($154) {
         $$3501676 = $153;
        } else {
         $$3501$lcssa = $153;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$134 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = ($168)?(1000000000 >>> $168):(1000000000);
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = ($168)?($176 >>> $168):($176);
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = (2)?($191 >> 2):($191);
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = (2)?($200 >> 2):($200);
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = (2)?($216 >> 2):($216);
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = (1)?($$1533$lcssa >>> 1):($$1533$lcssa);
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = (2)?($260 >> 2):($260);
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $272 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$272>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $273 = ($272>>>0)>($$9>>>0);
      if ($273) {
       $$9507625 = $272;
      } else {
       $$9507$lcssa = $272;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = (2)?($297 >> 2):($297);
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = (3)?($4 >>> 3):($4);
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = (31)?($$5521 >> 31):($$5521);
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_700($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_700($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,13569,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_700($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,13569,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_700($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_700($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS_701($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_298()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = (6)?($1 >>> 6):($1);
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = (12)?($1 >>> 12):($1);
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = (6)?($1 >>> 6):($1);
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = (18)?($1 >>> 18):($1);
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = (12)?($1 >>> 12):($1);
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = (6)?($1 >>> 6):($1);
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_298() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_535() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (6672 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 6768;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 6768;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = (2)?($1 >>> 2):($1);
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = (2)?($10 >>> 2):($10);
     $24 = (2)?($13 >>> 2):($13);
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = (1)?($$094 >>> 1):($$094);
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 63]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $22 = (($$03846) + -1)|0;
      $24 = (($0) + ($22)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $23 = ($22|0)==(0);
      if ($23) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $22;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 63]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$$lcssa = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$$lcssa = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$$lcssa = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $$lcssa&255;
  $16 = HEAP8[$$0$lcssa>>0]|0;
  $17 = $16&255;
  $18 = (($15) - ($17))|0;
  $$020 = $18;
 }
 return ($$020|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_744()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_744() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(13571,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(13571,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 33;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 32;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 28;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 26;
   $40 = HEAP32[(15148)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((15212|0));
 return (15220|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((15212|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 31]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2270]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[2270]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 63]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 63]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$05963 = 0, $$06065 = 0, $$06164 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond72 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $15 = $6;
 } else {
  $15 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $16 = ($15|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $18 = ($7|0)==(0);
  L11: do {
   if ($18) {
    $$1 = $0;
    label = 17;
   } else {
    $19 = ((($2)) + 4|0);
    $20 = ((($2)) + 8|0);
    $$06065 = $7;$$06164 = $0;
    while(1) {
     $21 = HEAP32[$19>>2]|0;
     $22 = HEAP32[$20>>2]|0;
     $23 = $21;
     $24 = (($22) - ($23))|0;
     $25 = (_memchr($21,10,$24)|0);
     $26 = ($25|0)==(0|0);
     $27 = $25;
     $28 = (1 - ($23))|0;
     $29 = (($28) + ($27))|0;
     $30 = $26 ? $24 : $29;
     $31 = ($30>>>0)<($$06065>>>0);
     $32 = $31 ? $30 : $$06065;
     (_memcpy(($$06164|0),($21|0),($32|0))|0);
     $33 = HEAP32[$19>>2]|0;
     $34 = (($33) + ($32)|0);
     HEAP32[$19>>2] = $34;
     $35 = (($$06164) + ($32)|0);
     $36 = (($$06065) - ($32))|0;
     $37 = ($36|0)!=(0);
     $or$cond = $26 & $37;
     if (!($or$cond)) {
      $$1 = $35;
      label = 17;
      break L11;
     }
     $38 = HEAP32[$20>>2]|0;
     $39 = ($34>>>0)<($38>>>0);
     if ($39) {
      $40 = ((($34)) + 1|0);
      HEAP32[$19>>2] = $40;
      $41 = HEAP8[$34>>0]|0;
      $42 = $41&255;
      $50 = $42;
     } else {
      $43 = (___uflow($2)|0);
      $44 = ($43|0)<(0);
      if ($44) {
       break;
      } else {
       $50 = $43;
      }
     }
     $49 = $50&255;
     $51 = ((($35)) + 1|0);
     HEAP8[$35>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)==(10);
     $53 = (($36) + -1)|0;
     $54 = ($53|0)==(0);
     $or$cond72 = $52 | $54;
     if ($or$cond72) {
      $$1 = $51;
      label = 17;
      break L11;
     } else {
      $$06065 = $53;$$06164 = $51;
     }
    }
    $45 = ($35|0)==($0|0);
    if ($45) {
     $$05963 = 0;
    } else {
     $46 = HEAP32[$2>>2]|0;
     $47 = $46 & 16;
     $48 = ($47|0)==(0);
     if ($48) {
      $$05963 = 0;
     } else {
      $$1 = $35;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $55 = ($0|0)==(0|0);
   if ($55) {
    $$05963 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$05963 = $0;
   }
  }
  $56 = ($15|0)==(0);
  if ($56) {
   $$0 = $$05963;
  } else {
   ___unlockfile($2);
   $$0 = $$05963;
  }
 }
 return ($$0|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 34;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read_779($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0266$lcssa = 0, $$0266409 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph$ph = 0, $$0280$ph = 0, $$0280$ph$ph = 0, $$0285419 = 0, $$0288411 = 0, $$0290416 = 0, $$0294 = 0, $$0295 = 0, $$0308414 = 0, $$10 = 0, $$10318 = 0, $$11 = 0, $$12 = 0, $$1267 = 0;
 var $$1271 = 0, $$1274 = 0, $$1281 = 0, $$1286 = 0, $$1291 = 0, $$1309 = 0, $$2 = 0, $$2275 = 0, $$2278$ph = 0, $$2282 = 0, $$2282$ph = 0, $$2287 = 0, $$2292 = 0, $$2310$ph = 0, $$3$lcssa = 0, $$3283 = 0, $$3293 = 0, $$3408 = 0, $$4 = 0, $$4284 = 0;
 var $$5 = 0, $$5313 = 0, $$6 = 0, $$6302 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$8 = 0, $$8316 = 0, $$9 = 0, $$9317 = 0, $$not = 0, $$old4 = 0, $$ph$ph = 0, $$pr = 0, $$pr332 = 0, $$pre = 0, $$pre$phi493Z2D = 0, $$pre$phiZ2D = 0, $$pre485 = 0;
 var $$pre487 = 0, $$pre488 = 0, $$pre490 = 0, $$pre492 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor335 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond321 = 0, $or$cond5 = 0, $spec$select = 0, $spec$select319 = 0, $spec$select320 = 0, $spec$select322 = 0, $spec$select323 = 0, $spec$select324 = 0, $spec$select325 = 0, $spec$select326 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 264|0;
 $4 = sp;
 $5 = sp + 260|0;
 $6 = sp + 272|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $319 = $10;
 } else {
  $319 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3293 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $$0273420 = $1;$$0285419 = 0;$$0290416 = 0;$$0308414 = 0;$22 = $11;$321 = 0;
   L6: while(1) {
    $21 = $22&255;
    $23 = (_isspace($21)|0);
    $24 = ($23|0)==(0);
    L8: do {
     if ($24) {
      $51 = HEAP8[$$0273420>>0]|0;
      $52 = ($51<<24>>24)==(37);
      L10: do {
       if ($52) {
        $53 = ((($$0273420)) + 1|0);
        $54 = HEAP8[$53>>0]|0;
        L12: do {
         switch ($54<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $75 = ((($$0273420)) + 2|0);
          $$0295 = 0;$$2275 = $75;
          break;
         }
         default: {
          $76 = $54&255;
          $77 = (_isdigit($76)|0);
          $78 = ($77|0)==(0);
          if (!($78)) {
           $79 = ((($$0273420)) + 2|0);
           $80 = HEAP8[$79>>0]|0;
           $81 = ($80<<24>>24)==(36);
           if ($81) {
            $82 = HEAP8[$53>>0]|0;
            $83 = $82&255;
            $84 = (($83) + -48)|0;
            $85 = (_arg_n_736($2,$84)|0);
            $86 = ((($$0273420)) + 3|0);
            $$0295 = $85;$$2275 = $86;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $87 = $arglist_current;
          $88 = ((0) + 4|0);
          $expanded1 = $88;
          $expanded = (($expanded1) - 1)|0;
          $89 = (($87) + ($expanded))|0;
          $90 = ((0) + 4|0);
          $expanded5 = $90;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $91 = $89 & $expanded3;
          $92 = $91;
          $93 = HEAP32[$92>>2]|0;
          $arglist_next = ((($92)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0295 = $93;$$2275 = $53;
         }
         }
        } while(0);
        $94 = HEAP8[$$2275>>0]|0;
        $95 = $94&255;
        $96 = (_isdigit($95)|0);
        $97 = ($96|0)==(0);
        if ($97) {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;
        } else {
         $$0266409 = 0;$$3408 = $$2275;
         while(1) {
          $98 = ($$0266409*10)|0;
          $99 = HEAP8[$$3408>>0]|0;
          $100 = $99&255;
          $101 = (($98) + -48)|0;
          $102 = (($101) + ($100))|0;
          $103 = ((($$3408)) + 1|0);
          $104 = HEAP8[$103>>0]|0;
          $105 = $104&255;
          $106 = (_isdigit($105)|0);
          $107 = ($106|0)==(0);
          if ($107) {
           $$0266$lcssa = $102;$$3$lcssa = $103;
           break;
          } else {
           $$0266409 = $102;$$3408 = $103;
          }
         }
        }
        $108 = HEAP8[$$3$lcssa>>0]|0;
        $109 = ($108<<24>>24)==(109);
        $110 = ((($$3$lcssa)) + 1|0);
        if ($109) {
         $111 = ($$0295|0)!=(0|0);
         $112 = $111&1;
         $$pr = HEAP8[$110>>0]|0;
         $$pre488 = ((($$3$lcssa)) + 2|0);
         $$0270 = $112;$$1309 = 0;$$4 = $110;$$pre$phiZ2D = $$pre488;$113 = $$pr;$324 = 0;
        } else {
         $$0270 = 0;$$1309 = $$0308414;$$4 = $$3$lcssa;$$pre$phiZ2D = $110;$113 = $108;$324 = $321;
        }
        switch ($113<<24>>24) {
        case 104:  {
         $114 = HEAP8[$$pre$phiZ2D>>0]|0;
         $115 = ($114<<24>>24)==(104);
         $116 = ((($$4)) + 2|0);
         $spec$select323 = $115 ? $116 : $$pre$phiZ2D;
         $spec$select324 = $115 ? -2 : -1;
         $$0268 = $spec$select324;$$5 = $spec$select323;
         break;
        }
        case 108:  {
         $117 = HEAP8[$$pre$phiZ2D>>0]|0;
         $118 = ($117<<24>>24)==(108);
         $119 = ((($$4)) + 2|0);
         $spec$select325 = $118 ? $119 : $$pre$phiZ2D;
         $spec$select326 = $118 ? 3 : 1;
         $$0268 = $spec$select326;$$5 = $spec$select325;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $$pre$phiZ2D;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $$pre$phiZ2D;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $$pre$phiZ2D;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$8316 = $$1309;$325 = $324;
         label = 143;
         break L6;
        }
        }
        $120 = HEAP8[$$5>>0]|0;
        $121 = $120&255;
        $122 = $121 & 47;
        $123 = ($122|0)==(3);
        $124 = $121 | 32;
        $spec$select = $123 ? $124 : $121;
        $spec$select319 = $123 ? 1 : $$0268;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $125 = ($$0266$lcssa|0)>(1);
         $spec$select320 = $125 ? $$0266$lcssa : 1;
         $$1267 = $spec$select320;$$1286 = $$0285419;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1286 = $$0285419;
         break;
        }
        case 110:  {
         $126 = ($$0285419|0)<(0);
         $127 = $126 << 31 >> 31;
         _store_int_737($$0295,$spec$select319,$$0285419,$127);
         $$12 = $$5;$$1291 = $$0290416;$$2287 = $$0285419;$$7315 = $$1309;$322 = $324;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $128 = HEAP32[$13>>2]|0;
          $129 = HEAP32[$14>>2]|0;
          $130 = ($128>>>0)<($129>>>0);
          if ($130) {
           $131 = ((($128)) + 1|0);
           HEAP32[$13>>2] = $131;
           $132 = HEAP8[$128>>0]|0;
           $133 = $132&255;
           $135 = $133;
          } else {
           $134 = (___shgetc($0)|0);
           $135 = $134;
          }
          $136 = (_isspace($135)|0);
          $137 = ($136|0)==(0);
          if ($137) {
           break;
          }
         }
         $138 = HEAP32[$14>>2]|0;
         $139 = ($138|0)==(0|0);
         if ($139) {
          $$pre485 = HEAP32[$13>>2]|0;
          $147 = $$pre485;
         } else {
          $140 = HEAP32[$13>>2]|0;
          $141 = ((($140)) + -1|0);
          HEAP32[$13>>2] = $141;
          $142 = $141;
          $147 = $142;
         }
         $143 = HEAP32[$15>>2]|0;
         $144 = HEAP32[$16>>2]|0;
         $145 = (($143) + ($$0285419))|0;
         $146 = (($145) + ($147))|0;
         $148 = (($146) - ($144))|0;
         $$1267 = $$0266$lcssa;$$1286 = $148;
        }
        }
        ___shlim($0,$$1267);
        $149 = HEAP32[$13>>2]|0;
        $150 = HEAP32[$14>>2]|0;
        $151 = ($149>>>0)<($150>>>0);
        if ($151) {
         $152 = ((($149)) + 1|0);
         HEAP32[$13>>2] = $152;
         $155 = $150;
        } else {
         $153 = (___shgetc($0)|0);
         $154 = ($153|0)<(0);
         if ($154) {
          $$8316 = $$1309;$325 = $324;
          label = 143;
          break L6;
         }
         $$pr332 = HEAP32[$14>>2]|0;
         $155 = $$pr332;
        }
        $156 = ($155|0)==(0|0);
        if (!($156)) {
         $157 = HEAP32[$13>>2]|0;
         $158 = ((($157)) + -1|0);
         HEAP32[$13>>2] = $158;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $159 = ($spec$select|0)==(99);
          $160 = $spec$select | 16;
          $161 = ($160|0)==(115);
          L61: do {
           if ($161) {
            $162 = ($spec$select|0)==(115);
            (_memset(($4|0),-1,257)|0);
            HEAP8[$4>>0] = 0;
            if ($162) {
             HEAP8[$18>>0] = 0;
             ;HEAP16[$17>>1]=0|0;HEAP16[$17+2>>1]=0|0;HEAP8[$17+4>>0]=0|0;
             $$10 = $$5;
            } else {
             $$10 = $$5;
            }
           } else {
            $163 = ((($$5)) + 1|0);
            $164 = HEAP8[$163>>0]|0;
            $165 = ($164<<24>>24)==(94);
            $166 = ((($$5)) + 2|0);
            $$0294 = $165&1;
            $$6 = $165 ? $166 : $163;
            (_memset(($4|0),($$0294|0),257)|0);
            HEAP8[$4>>0] = 0;
            $167 = HEAP8[$$6>>0]|0;
            switch ($167<<24>>24) {
            case 45:  {
             $168 = ((($$6)) + 1|0);
             $169 = $$0294 ^ 1;
             $170 = $169&255;
             HEAP8[$19>>0] = $170;
             $$7 = $168;$$pre$phi493Z2D = $170;
             break;
            }
            case 93:  {
             $171 = ((($$6)) + 1|0);
             $172 = $$0294 ^ 1;
             $173 = $172&255;
             HEAP8[$20>>0] = $173;
             $$7 = $171;$$pre$phi493Z2D = $173;
             break;
            }
            default: {
             $$pre490 = $$0294 ^ 1;
             $$pre492 = $$pre490&255;
             $$7 = $$6;$$pre$phi493Z2D = $$pre492;
            }
            }
            $$8 = $$7;
            while(1) {
             $174 = HEAP8[$$8>>0]|0;
             L72: do {
              switch ($174<<24>>24) {
              case 0:  {
               $$8316 = $$1309;$325 = $324;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $$10 = $$8;
               break L61;
               break;
              }
              case 45:  {
               $175 = ((($$8)) + 1|0);
               $176 = HEAP8[$175>>0]|0;
               switch ($176<<24>>24) {
               case 93: case 0:  {
                $$9 = $$8;$187 = 45;
                break L72;
                break;
               }
               default: {
               }
               }
               $177 = ((($$8)) + -1|0);
               $178 = HEAP8[$177>>0]|0;
               $179 = ($178&255)<($176&255);
               if ($179) {
                $180 = $178&255;
                $$0288411 = $180;
                while(1) {
                 $181 = (($$0288411) + 1)|0;
                 $182 = (($4) + ($181)|0);
                 HEAP8[$182>>0] = $$pre$phi493Z2D;
                 $183 = HEAP8[$175>>0]|0;
                 $184 = $183&255;
                 $185 = ($181>>>0)<($184>>>0);
                 if ($185) {
                  $$0288411 = $181;
                 } else {
                  $$9 = $175;$187 = $183;
                  break;
                 }
                }
               } else {
                $$9 = $175;$187 = $176;
               }
               break;
              }
              default: {
               $$9 = $$8;$187 = $174;
              }
              }
             } while(0);
             $186 = $187&255;
             $188 = (($186) + 1)|0;
             $189 = (($4) + ($188)|0);
             HEAP8[$189>>0] = $$pre$phi493Z2D;
             $190 = ((($$9)) + 1|0);
             $$8 = $190;
            }
           }
          } while(0);
          $191 = (($$1267) + 1)|0;
          $192 = $159 ? $191 : 31;
          $193 = ($spec$select319|0)==(1);
          $194 = ($$0270|0)!=(0);
          L80: do {
           if ($193) {
            if ($194) {
             $195 = $192 << 2;
             $196 = (_malloc($195)|0);
             $197 = ($196|0)==(0|0);
             if ($197) {
              $$8316 = 0;$325 = 0;
              label = 143;
              break L6;
             } else {
              $327 = $196;
             }
            } else {
             $327 = $$0295;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph$ph = $192;$$0280$ph$ph = 0;$$ph$ph = $327;
            L85: while(1) {
             $198 = ($$ph$ph|0)==(0|0);
             $$0280$ph = $$0280$ph$ph;
             while(1) {
              L89: while(1) {
               $199 = HEAP32[$13>>2]|0;
               $200 = HEAP32[$14>>2]|0;
               $201 = ($199>>>0)<($200>>>0);
               if ($201) {
                $202 = ((($199)) + 1|0);
                HEAP32[$13>>2] = $202;
                $203 = HEAP8[$199>>0]|0;
                $204 = $203&255;
                $207 = $204;
               } else {
                $205 = (___shgetc($0)|0);
                $207 = $205;
               }
               $206 = (($207) + 1)|0;
               $208 = (($4) + ($206)|0);
               $209 = HEAP8[$208>>0]|0;
               $210 = ($209<<24>>24)==(0);
               if ($210) {
                break L85;
               }
               $211 = $207&255;
               HEAP8[$6>>0] = $211;
               $212 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($212|0) {
               case -1:  {
                $$8316 = 0;$325 = $$ph$ph;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($198) {
               $$1281 = $$0280$ph;
              } else {
               $213 = (($$ph$ph) + ($$0280$ph<<2)|0);
               $214 = (($$0280$ph) + 1)|0;
               $215 = HEAP32[$5>>2]|0;
               HEAP32[$213>>2] = $215;
               $$1281 = $214;
              }
              $216 = ($$1281|0)==($$0276$ph$ph|0);
              $or$cond = $194 & $216;
              if ($or$cond) {
               break;
              } else {
               $$0280$ph = $$1281;
              }
             }
             $factor335 = $$0276$ph$ph << 1;
             $217 = $factor335 | 1;
             $218 = $217 << 2;
             $219 = (_realloc($$ph$ph,$218)|0);
             $220 = ($219|0)==(0|0);
             if ($220) {
              $$8316 = 0;$325 = $$ph$ph;
              label = 143;
              break L6;
             } else {
              $$0276$ph$ph = $217;$$0280$ph$ph = $$1281;$$ph$ph = $219;
             }
            }
            $221 = (_mbsinit($3)|0);
            $222 = ($221|0)==(0);
            if ($222) {
             $$8316 = 0;$325 = $$ph$ph;
             label = 143;
             break L6;
            } else {
             $$4284 = $$0280$ph;$$5313 = 0;$$6302 = $$ph$ph;$328 = $$ph$ph;
            }
           } else {
            if ($194) {
             $223 = (_malloc($192)|0);
             $224 = ($223|0)==(0|0);
             if ($224) {
              $$8316 = 0;$325 = 0;
              label = 143;
              break L6;
             }
             $$2278$ph = $192;$$2282$ph = 0;$$2310$ph = $223;
             while(1) {
              $$2282 = $$2282$ph;
              while(1) {
               $225 = HEAP32[$13>>2]|0;
               $226 = HEAP32[$14>>2]|0;
               $227 = ($225>>>0)<($226>>>0);
               if ($227) {
                $228 = ((($225)) + 1|0);
                HEAP32[$13>>2] = $228;
                $229 = HEAP8[$225>>0]|0;
                $230 = $229&255;
                $233 = $230;
               } else {
                $231 = (___shgetc($0)|0);
                $233 = $231;
               }
               $232 = (($233) + 1)|0;
               $234 = (($4) + ($232)|0);
               $235 = HEAP8[$234>>0]|0;
               $236 = ($235<<24>>24)==(0);
               if ($236) {
                $$4284 = $$2282;$$5313 = $$2310$ph;$$6302 = 0;$328 = 0;
                break L80;
               }
               $237 = $233&255;
               $238 = (($$2282) + 1)|0;
               $239 = (($$2310$ph) + ($$2282)|0);
               HEAP8[$239>>0] = $237;
               $240 = ($238|0)==($$2278$ph|0);
               if ($240) {
                break;
               } else {
                $$2282 = $238;
               }
              }
              $factor = $$2278$ph << 1;
              $241 = $factor | 1;
              $242 = (_realloc($$2310$ph,$241)|0);
              $243 = ($242|0)==(0|0);
              if ($243) {
               $$8316 = $$2310$ph;$325 = 0;
               label = 143;
               break L6;
              } else {
               $$2278$ph = $241;$$2282$ph = $238;$$2310$ph = $242;
              }
             }
            }
            $244 = ($$0295|0)==(0|0);
            if ($244) {
             while(1) {
              $260 = HEAP32[$13>>2]|0;
              $261 = HEAP32[$14>>2]|0;
              $262 = ($260>>>0)<($261>>>0);
              if ($262) {
               $263 = ((($260)) + 1|0);
               HEAP32[$13>>2] = $263;
               $264 = HEAP8[$260>>0]|0;
               $265 = $264&255;
               $268 = $265;
              } else {
               $266 = (___shgetc($0)|0);
               $268 = $266;
              }
              $267 = (($268) + 1)|0;
              $269 = (($4) + ($267)|0);
              $270 = HEAP8[$269>>0]|0;
              $271 = ($270<<24>>24)==(0);
              if ($271) {
               $$4284 = 0;$$5313 = 0;$$6302 = 0;$328 = 0;
               break L80;
              }
             }
            }
            $$3283 = 0;
            while(1) {
             $245 = HEAP32[$13>>2]|0;
             $246 = HEAP32[$14>>2]|0;
             $247 = ($245>>>0)<($246>>>0);
             if ($247) {
              $248 = ((($245)) + 1|0);
              HEAP32[$13>>2] = $248;
              $249 = HEAP8[$245>>0]|0;
              $250 = $249&255;
              $253 = $250;
             } else {
              $251 = (___shgetc($0)|0);
              $253 = $251;
             }
             $252 = (($253) + 1)|0;
             $254 = (($4) + ($252)|0);
             $255 = HEAP8[$254>>0]|0;
             $256 = ($255<<24>>24)==(0);
             if ($256) {
              $$4284 = $$3283;$$5313 = $$0295;$$6302 = 0;$328 = 0;
              break L80;
             }
             $257 = $253&255;
             $258 = (($$3283) + 1)|0;
             $259 = (($$0295) + ($$3283)|0);
             HEAP8[$259>>0] = $257;
             $$3283 = $258;
            }
           }
          } while(0);
          $272 = HEAP32[$14>>2]|0;
          $273 = ($272|0)==(0|0);
          if ($273) {
           $$pre487 = HEAP32[$13>>2]|0;
           $280 = $$pre487;
          } else {
           $274 = HEAP32[$13>>2]|0;
           $275 = ((($274)) + -1|0);
           HEAP32[$13>>2] = $275;
           $276 = $275;
           $280 = $276;
          }
          $277 = HEAP32[$15>>2]|0;
          $278 = HEAP32[$16>>2]|0;
          $279 = (($280) - ($278))|0;
          $281 = (($279) + ($277))|0;
          $282 = ($281|0)==(0);
          if ($282) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290416;$318 = $328;
           break L6;
          }
          $$not = $159 ^ 1;
          $283 = ($281|0)==($$1267|0);
          $or$cond321 = $283 | $$not;
          if (!($or$cond321)) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290416;$318 = $328;
           break L6;
          }
          do {
           if ($194) {
            if ($193) {
             HEAP32[$$0295>>2] = $$6302;
             break;
            } else {
             HEAP32[$$0295>>2] = $$5313;
             break;
            }
           }
          } while(0);
          if ($159) {
           $$11 = $$10;$$6314 = $$5313;$326 = $328;
          } else {
           $284 = ($$6302|0)==(0|0);
           if (!($284)) {
            $285 = (($$6302) + ($$4284<<2)|0);
            HEAP32[$285>>2] = 0;
           }
           $286 = ($$5313|0)==(0|0);
           if ($286) {
            $$11 = $$10;$$6314 = 0;$326 = $328;
            break L59;
           }
           $287 = (($$5313) + ($$4284)|0);
           HEAP8[$287>>0] = 0;
           $$11 = $$10;$$6314 = $$5313;$326 = $328;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $298 = (+___floatscan($0,$spec$select319,0));
          $299 = HEAP32[$15>>2]|0;
          $300 = HEAP32[$13>>2]|0;
          $301 = HEAP32[$16>>2]|0;
          $302 = (($301) - ($300))|0;
          $303 = ($299|0)==($302|0);
          if ($303) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290416;$318 = $324;
           break L6;
          }
          $304 = ($$0295|0)==(0|0);
          if ($304) {
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
          } else {
           switch ($spec$select319|0) {
           case 0:  {
            $305 = $298;
            HEAPF32[$$0295>>2] = $305;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$$0295>>3] = $298;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$$0295>>3] = $298;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           default: {
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $$11 = $$5;$$6314 = $$1309;$326 = $324;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $288 = (___intscan($0,$$0272,0,-1,-1)|0);
          $289 = (getTempRet0() | 0);
          $290 = HEAP32[$15>>2]|0;
          $291 = HEAP32[$13>>2]|0;
          $292 = HEAP32[$16>>2]|0;
          $293 = (($292) - ($291))|0;
          $294 = ($290|0)==($293|0);
          if ($294) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290416;$318 = $324;
           break L6;
          }
          $295 = ($spec$select|0)==(112);
          $296 = ($$0295|0)!=(0|0);
          $or$cond3 = $296 & $295;
          if ($or$cond3) {
           $297 = $288;
           HEAP32[$$0295>>2] = $297;
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
           break;
          } else {
           _store_int_737($$0295,$spec$select319,$288,$289);
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
           break;
          }
         }
        } while(0);
        $306 = HEAP32[$15>>2]|0;
        $307 = HEAP32[$13>>2]|0;
        $308 = HEAP32[$16>>2]|0;
        $309 = (($306) + ($$1286))|0;
        $310 = (($309) + ($307))|0;
        $311 = (($310) - ($308))|0;
        $312 = ($$0295|0)!=(0|0);
        $313 = $312&1;
        $spec$select322 = (($$0290416) + ($313))|0;
        $$12 = $$11;$$1291 = $spec$select322;$$2287 = $311;$$7315 = $$6314;$322 = $326;
        break L8;
       }
      } while(0);
      $55 = $52&1;
      $56 = (($$0273420) + ($55)|0);
      ___shlim($0,0);
      $57 = HEAP32[$13>>2]|0;
      $58 = HEAP32[$14>>2]|0;
      $59 = ($57>>>0)<($58>>>0);
      if ($59) {
       $60 = ((($57)) + 1|0);
       HEAP32[$13>>2] = $60;
       $61 = HEAP8[$57>>0]|0;
       $62 = $61&255;
       $66 = $62;
      } else {
       $63 = (___shgetc($0)|0);
       $66 = $63;
      }
      $64 = HEAP8[$56>>0]|0;
      $65 = $64&255;
      $67 = ($66|0)==($65|0);
      if (!($67)) {
       label = 23;
       break L6;
      }
      $74 = (($$0285419) + 1)|0;
      $$12 = $56;$$1291 = $$0290416;$$2287 = $74;$$7315 = $$0308414;$322 = $321;
     } else {
      $$1274 = $$0273420;
      while(1) {
       $25 = ((($$1274)) + 1|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = $26&255;
       $28 = (_isspace($27)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        break;
       } else {
        $$1274 = $25;
       }
      }
      ___shlim($0,0);
      while(1) {
       $30 = HEAP32[$13>>2]|0;
       $31 = HEAP32[$14>>2]|0;
       $32 = ($30>>>0)<($31>>>0);
       if ($32) {
        $33 = ((($30)) + 1|0);
        HEAP32[$13>>2] = $33;
        $34 = HEAP8[$30>>0]|0;
        $35 = $34&255;
        $37 = $35;
       } else {
        $36 = (___shgetc($0)|0);
        $37 = $36;
       }
       $38 = (_isspace($37)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        break;
       }
      }
      $40 = HEAP32[$14>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $$pre = HEAP32[$13>>2]|0;
       $49 = $$pre;
      } else {
       $42 = HEAP32[$13>>2]|0;
       $43 = ((($42)) + -1|0);
       HEAP32[$13>>2] = $43;
       $44 = $43;
       $49 = $44;
      }
      $45 = HEAP32[$15>>2]|0;
      $46 = HEAP32[$16>>2]|0;
      $47 = (($45) + ($$0285419))|0;
      $48 = (($47) + ($49))|0;
      $50 = (($48) - ($46))|0;
      $$12 = $$1274;$$1291 = $$0290416;$$2287 = $50;$$7315 = $$0308414;$322 = $321;
     }
    } while(0);
    $314 = ((($$12)) + 1|0);
    $315 = HEAP8[$314>>0]|0;
    $316 = ($315<<24>>24)==(0);
    if ($316) {
     $$3293 = $$1291;
     break L4;
    } else {
     $$0273420 = $314;$$0285419 = $$2287;$$0290416 = $$1291;$$0308414 = $$7315;$22 = $315;$321 = $322;
    }
   }
   if ((label|0) == 23) {
    $68 = HEAP32[$14>>2]|0;
    $69 = ($68|0)==(0|0);
    if (!($69)) {
     $70 = HEAP32[$13>>2]|0;
     $71 = ((($70)) + -1|0);
     HEAP32[$13>>2] = $71;
    }
    $72 = ($66|0)>(-1);
    $73 = ($$0290416|0)!=(0);
    $or$cond5 = $73 | $72;
    if ($or$cond5) {
     $$3293 = $$0290416;
     break;
    } else {
     $$1271 = 0;$$9317 = $$0308414;$323 = $321;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $$old4 = ($$0290416|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$9317 = $$8316;$323 = $325;
     label = 144;
    } else {
     $$10318 = $$8316;$$2 = $$0270;$$2292 = $$0290416;$318 = $325;
    }
   }
   if ((label|0) == 144) {
    $$10318 = $$9317;$$2 = $$1271;$$2292 = -1;$318 = $323;
   }
   $317 = ($$2|0)==(0);
   if ($317) {
    $$3293 = $$2292;
   } else {
    _free($$10318);
    _free($318);
    $$3293 = $$2292;
   }
  }
 } while(0);
 $320 = ($319|0)==(0);
 if (!($320)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3293|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($7|0)==($39|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _arg_n_736($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int_737($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $spec$select = $5 ? 15224 : $3;
 $6 = HEAP32[$spec$select>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $spec$select47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$spec$select47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_311()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$spec$select47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 19;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (5984 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = (3)?($34 >>> 3):($34);
      $36 = (($35) + -16)|0;
      $37 = (26)?($$04051 >> 26):($$04051);
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 19;
       break L1;
      }
      $41 = $$04051 << 6;
      $42 = (($34) + -128)|0;
      $43 = $42 | $41;
      $44 = (($$04350) + -1)|0;
      $45 = ($43|0)<(0);
      if ($45) {
       $$03952$pn = $$03952;$47 = $43;$53 = $44;
       while(1) {
        $56 = ((($$03952$pn)) + 1|0);
        $57 = ($53|0)==(0);
        if ($57) {
         $$2 = $47;
         break L14;
        }
        $49 = HEAP8[$56>>0]|0;
        $58 = $49 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         label = 19;
         break L1;
        }
        $46 = $47 << 6;
        $48 = $49&255;
        $50 = (($48) + -128)|0;
        $51 = $50 | $46;
        $52 = (($53) + -1)|0;
        $54 = ($51|0)<(0);
        if ($54) {
         $$03952$pn = $56;$47 = $51;$53 = $52;
        } else {
         $$lcssa = $52;$$lcssa56 = $51;
         break;
        }
       }
      } else {
       $$lcssa = $44;$$lcssa56 = $43;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select47>>2] = $$lcssa56;
      $55 = (($2) - ($$lcssa))|0;
      $$0 = $55;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $60 = (___errno_location()|0);
  HEAP32[$60>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 22;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((8609) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((8609) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$92 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = (getTempRet0() | 0);
         $93 = ($92|0)<(0);
         $94 = $93 << 31 >> 31;
         $95 = $92 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
         $103 = (getTempRet0() | 0);
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$92 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$264 = $103;$266 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$264 = 0;$266 = $73;
       }
      } else {
       $$1158 = $$0157;$264 = 0;$266 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = (5)?($123 >>> 5):($123);
      $125 = $124 & 7;
      $126 = (13588 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((8609) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((8609) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = (getTempRet0() | 0);
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = (getTempRet0() | 0);
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((8609) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((8609) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((8609) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = (getTempRet0() | 0);
      $$7190 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $296;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = (getTempRet0() | 0);
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = (getTempRet0() | 0);
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((8609) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$208 = $226;$210 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((8609) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((8609) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 34;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$264 = $4;$266 = $3;
    } else {
     $$1158 = $$0157;$264 = $294;$266 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $265 = ($264>>>0)<($4>>>0);
   $267 = ($266>>>0)<($3>>>0);
   $268 = ($264|0)==($4|0);
   $269 = $268 & $267;
   $270 = $265 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 34;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = (getTempRet0() | 0);
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($264>>>0)>($4>>>0);
    $280 = ($266>>>0)>($3>>>0);
    $281 = ($264|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 34;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $266 ^ $$1158;
   $288 = $264 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = (getTempRet0() | 0);
   $291 = $290;$292 = $289;
  }
 } while(0);
 setTempRet0(($291) | 0);
 return ($292|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond124 = 0, $or$cond5 = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0102 = -149;$$0103 = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 default: {
  $$0111 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0110 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0110 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0110 = 1;
    }
    }
   } while(0);
   $$0104122 = 0;$$1123 = $$0;
   while(1) {
    $26 = $$1123 | 32;
    $27 = (13575 + ($$0104122)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$1$lcssa = $$1123;$trunc = $$0104122;
     break;
    }
    $31 = ($$0104122>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1123;
     }
    } while(0);
    $39 = (($$0104122) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0104122 = $39;$$1123 = $$2;
    } else {
     $$1$lcssa = $$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($trunc>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($trunc|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($trunc|0)==(0);
     L34: do {
      if ($57) {
       $$2106120 = 0;$$3121 = $$1$lcssa;
       while(1) {
        $58 = $$3121 | 32;
        $59 = (13584 + ($$2106120)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3107 = $$2106120;$$5 = $$3121;
         break L34;
        }
        $63 = ($$2106120>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$3>>2]|0;
          $65 = HEAP32[$4>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$3>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3121;
         }
        } while(0);
        $71 = (($$2106120) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2106120 = $71;$$3121 = $$4;
        } else {
         $$3107 = 3;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3107 = $trunc;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3107|0) {
     case 3:  {
      $73 = HEAP32[$3>>2]|0;
      $74 = HEAP32[$4>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$3>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if (!($81)) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0111 = nan;
        break L4;
       }
       $84 = HEAP32[$3>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$3>>2] = $85;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while(1) {
       $86 = HEAP32[$3>>2]|0;
       $87 = HEAP32[$4>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$3>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4108) + 1)|0;
       $$4108 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0111 = nan;
       break L4;
      }
      $102 = HEAP32[$4>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$3>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$3>>2] = $105;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0111 = 0.0;
       break L4;
      }
      $107 = ($$4108|0)==(0);
      if ($107) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$3>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$3>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0111 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      if ($118) {
       $119 = HEAP32[$3>>2]|0;
       $120 = HEAP32[$4>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$3>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $127 = $124;
       } else {
        $125 = (___shgetc($0)|0);
        $127 = $125;
       }
       $126 = $127 | 32;
       $128 = ($126|0)==(120);
       if ($128) {
        $129 = (+_hexfloat($0,$$0103,$$0102,$$0110,$2));
        $$0111 = $129;
        break L4;
       }
       $130 = HEAP32[$4>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        $$6 = 48;
       } else {
        $132 = HEAP32[$3>>2]|0;
        $133 = ((($132)) + -1|0);
        HEAP32[$3>>2] = $133;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $134 = (+_decfloat($0,$$6,$$0103,$$0102,$$0110,$2));
      $$0111 = $134;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$4>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$3>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$3>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0111 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($trunc>>>0)>(3);
    $or$cond124 = $48 & $49;
    if ($or$cond124) {
     $$1105118 = $trunc;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1105118) + -1)|0;
      $53 = ($52>>>0)>(3);
      if ($53) {
       $$1105118 = $52;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0110|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0111 = $56;
  }
 } while(0);
 return (+$$0111);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $not$ = 0, $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0$ph = $12;
 } else {
  $13 = (___shgetc($0)|0);
  $$0$ph = $13;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$212 = 0;$213 = 0;
   break L5;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0$be = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $$0$be = $20;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $28 = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $28 = $27;
  }
  $29 = ($28|0)==(48);
  if ($29) {
   $37 = 0;$38 = 0;
   while(1) {
    $30 = HEAP32[$5>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$5>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $41 = $35;
    } else {
     $36 = (___shgetc($0)|0);
     $41 = $36;
    }
    $39 = (_i64Add(($37|0),($38|0),-1,-1)|0);
    $40 = (getTempRet0() | 0);
    $42 = ($41|0)==(48);
    if ($42) {
     $37 = $39;$38 = $40;
    } else {
     $$1149$ph = 1;$$3$ph = $41;$$3146$ph = 1;$212 = $39;$213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $28;$$3146$ph = $$0143;$212 = 0;$213 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$51 = 0;$53 = 0;$96 = $212;$98 = $213;
 while(1) {
  $43 = (($$3) + -48)|0;
  $44 = ($43>>>0)<(10);
  $$pre = $$3 | 32;
  if ($44) {
   label = 24;
  } else {
   $45 = (($$pre) + -97)|0;
   $46 = ($45>>>0)<(6);
   $47 = ($$3|0)==(46);
   $or$cond6 = $47 | $46;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) {
    $48 = ($$1149|0)==(0);
    if ($48) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$214 = $53;$215 = $51;$216 = $53;$217 = $51;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $49 = ($$3|0)>(57);
   $50 = (($$pre) + -87)|0;
   $$0133 = $49 ? $50 : $43;
   $52 = ($51|0)<(0);
   $54 = ($53>>>0)<(8);
   $55 = ($51|0)==(0);
   $56 = $55 & $54;
   $57 = $52 | $56;
   do {
    if ($57) {
     $58 = $$0163 << 4;
     $59 = (($$0133) + ($58))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $59;
    } else {
     $60 = ($51|0)<(0);
     $61 = ($53>>>0)<(14);
     $62 = ($51|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if ($64) {
      $65 = (+($$0133|0));
      $66 = $$0155 * 0.0625;
      $67 = $66 * $65;
      $68 = $$0158 + $67;
      $$1152 = $$0151;$$1156 = $66;$$1159 = $68;$$1164 = $$0163;
      break;
     } else {
      $69 = ($$0133|0)==(0);
      $70 = ($$0151|0)!=(0);
      $or$cond = $70 | $69;
      $71 = $$0155 * 0.5;
      $72 = $$0158 + $71;
      $spec$select175 = $or$cond ? $$0158 : $72;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $73 = (_i64Add(($53|0),($51|0),1,0)|0);
   $74 = (getTempRet0() | 0);
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$214 = $96;$215 = $98;$216 = $73;$217 = $74;
  }
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$7>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   $78 = ((($75)) + 1|0);
   HEAP32[$5>>2] = $78;
   $79 = HEAP8[$75>>0]|0;
   $80 = $79&255;
   $$3$be = $80;
  } else {
   $81 = (___shgetc($0)|0);
   $$3$be = $81;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$51 = $217;$53 = $216;$96 = $214;$98 = $215;
 }
 $82 = ($$3146|0)==(0);
 do {
  if ($82) {
   $83 = HEAP32[$7>>2]|0;
   $84 = ($83|0)==(0|0);
   if (!($84)) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + -1|0);
    HEAP32[$5>>2] = $86;
   }
   $87 = ($4|0)==(0);
   if ($87) {
    ___shlim($0,0);
   } else {
    if (!($84)) {
     $88 = HEAP32[$5>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$5>>2] = $89;
     $90 = ($$1149|0)==(0);
     $brmerge = $90 | $84;
     if (!($brmerge)) {
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + -1|0);
      HEAP32[$5>>2] = $92;
     }
    }
   }
   $93 = (+($3|0));
   $94 = $93 * 0.0;
   $$0169 = $94;
  } else {
   $95 = ($$1149|0)==(0);
   $97 = $95 ? $53 : $96;
   $99 = $95 ? $51 : $98;
   $100 = ($51|0)<(0);
   $101 = ($53>>>0)<(8);
   $102 = ($51|0)==(0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $$3166185 = $$0163;$106 = $53;$107 = $51;
    while(1) {
     $105 = $$3166185 << 4;
     $108 = (_i64Add(($106|0),($107|0),1,0)|0);
     $109 = (getTempRet0() | 0);
     $110 = ($107|0)<(0);
     $111 = ($106>>>0)<(7);
     $112 = ($107|0)==(0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $$3166185 = $105;$106 = $108;$107 = $109;
     } else {
      $$3166$lcssa = $105;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $115 = $$3$lcssa | 32;
   $116 = ($115|0)==(112);
   if ($116) {
    $117 = (_scanexp($0,$4)|0);
    $118 = (getTempRet0() | 0);
    $119 = ($117|0)==(0);
    $120 = ($118|0)==(-2147483648);
    $121 = $119 & $120;
    if ($121) {
     $122 = ($4|0)==(0);
     if ($122) {
      ___shlim($0,0);
      $$0169 = 0.0;
      break;
     }
     $123 = HEAP32[$7>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $135 = 0;$136 = 0;
     } else {
      $125 = HEAP32[$5>>2]|0;
      $126 = ((($125)) + -1|0);
      HEAP32[$5>>2] = $126;
      $135 = 0;$136 = 0;
     }
    } else {
     $135 = $117;$136 = $118;
    }
   } else {
    $127 = HEAP32[$7>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $135 = 0;$136 = 0;
    } else {
     $129 = HEAP32[$5>>2]|0;
     $130 = ((($129)) + -1|0);
     HEAP32[$5>>2] = $130;
     $135 = 0;$136 = 0;
    }
   }
   $131 = (_bitshift64Shl(($97|0),($99|0),2)|0);
   $132 = (getTempRet0() | 0);
   $133 = (_i64Add(($131|0),($132|0),-32,-1)|0);
   $134 = (getTempRet0() | 0);
   $137 = (_i64Add(($133|0),($134|0),($135|0),($136|0))|0);
   $138 = (getTempRet0() | 0);
   $139 = ($$3166$lcssa|0)==(0);
   if ($139) {
    $140 = (+($3|0));
    $141 = $140 * 0.0;
    $$0169 = $141;
    break;
   }
   $142 = (0 - ($2))|0;
   $143 = ($142|0)<(0);
   $144 = $143 << 31 >> 31;
   $145 = ($138|0)>($144|0);
   $146 = ($137>>>0)>($142>>>0);
   $147 = ($138|0)==($144|0);
   $148 = $147 & $146;
   $149 = $145 | $148;
   if ($149) {
    $150 = (___errno_location()|0);
    HEAP32[$150>>2] = 34;
    $151 = (+($3|0));
    $152 = $151 * 1.7976931348623157E+308;
    $153 = $152 * 1.7976931348623157E+308;
    $$0169 = $153;
    break;
   }
   $154 = (($2) + -106)|0;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = ($138|0)<($156|0);
   $158 = ($137>>>0)<($154>>>0);
   $159 = ($138|0)==($156|0);
   $160 = $159 & $158;
   $161 = $157 | $160;
   if ($161) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0169 = $165;
    break;
   }
   $166 = ($$3166$lcssa|0)>(-1);
   if ($166) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$171 = $137;$172 = $138;
    while(1) {
     $167 = !($$3161181 >= 0.5);
     $168 = $$4167180 << 1;
     $169 = $$3161181 + -1.0;
     $not$ = $167 ^ 1;
     $170 = $not$&1;
     $$5168 = $168 | $170;
     $$pn = $167 ? $$3161181 : $169;
     $$4162 = $$3161181 + $$pn;
     $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
     $174 = (getTempRet0() | 0);
     $175 = ($$5168|0)>(-1);
     if ($175) {
      $$3161181 = $$4162;$$4167180 = $$5168;$171 = $173;$172 = $174;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$182 = $173;$183 = $174;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$182 = $137;$183 = $138;
   }
   $176 = ($1|0)<(0);
   $177 = $176 << 31 >> 31;
   $178 = ($2|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = (_i64Subtract(32,0,($2|0),($179|0))|0);
   $181 = (getTempRet0() | 0);
   $184 = (_i64Add(($180|0),($181|0),($182|0),($183|0))|0);
   $185 = (getTempRet0() | 0);
   $186 = ($185|0)<($177|0);
   $187 = ($184>>>0)<($1>>>0);
   $188 = ($185|0)==($177|0);
   $189 = $188 & $187;
   $190 = $186 | $189;
   if ($190) {
    $191 = ($184|0)>(0);
    if ($191) {
     $$0170 = $184;
     label = 65;
    } else {
     $$0170174 = 0;$195 = 84;
     label = 67;
    }
   } else {
    $$0170 = $1;
    label = 65;
   }
   if ((label|0) == 65) {
    $192 = ($$0170|0)<(53);
    $193 = (84 - ($$0170))|0;
    if ($192) {
     $$0170174 = $$0170;$195 = $193;
     label = 67;
    } else {
     $$pre203 = (+($3|0));
     $$0154 = 0.0;$$0170173 = $$0170;$$pre$phi204Z2D = $$pre203;
    }
   }
   if ((label|0) == 67) {
    $194 = (+($3|0));
    $196 = (+_scalbn(1.0,$195));
    $197 = (+_copysignl($196,$194));
    $$0154 = $197;$$0170173 = $$0170174;$$pre$phi204Z2D = $194;
   }
   $198 = ($$0170173|0)<(32);
   $199 = $$3161$lcssa != 0.0;
   $or$cond4 = $199 & $198;
   $200 = $$4167$lcssa & 1;
   $201 = ($200|0)==(0);
   $or$cond172 = $201 & $or$cond4;
   $202 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($202))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $203 = (+($$6>>>0));
   $204 = $$pre$phi204Z2D * $203;
   $205 = $$0154 + $204;
   $206 = $$5 * $$pre$phi204Z2D;
   $207 = $206 + $205;
   $208 = $207 - $$0154;
   $209 = $208 != 0.0;
   if (!($209)) {
    $210 = (___errno_location()|0);
    HEAP32[$210>>2] = 34;
   }
   $211 = (+_scalbnl($208,$182));
   $$0169 = $211;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$neg448 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond416 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $7 = (($3) + ($2))|0;
 $8 = (0 - ($7))|0;
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 100|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$375 = 0;$376 = 0;
   break L1;
  }
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$9>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0324$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0324$be = $17;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$9>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $25 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $25 = $24;
  }
  $26 = ($25|0)==(48);
  if ($26) {
   $27 = 0;$28 = 0;
   while(1) {
    $29 = (_i64Add(($27|0),($28|0),-1,-1)|0);
    $30 = (getTempRet0() | 0);
    $31 = HEAP32[$9>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = ((($31)) + 1|0);
     HEAP32[$9>>2] = $34;
     $35 = HEAP8[$31>>0]|0;
     $36 = $35&255;
     $38 = $36;
    } else {
     $37 = (___shgetc($0)|0);
     $38 = $37;
    }
    $39 = ($38|0)==(48);
    if ($39) {
     $27 = $29;$28 = $30;
    } else {
     $$0390 = 1;$$2 = $38;$$2395 = 1;$375 = $29;$376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $25;$$2395 = $$0393;$375 = 0;$376 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $40 = (($$2) + -48)|0;
 $41 = ($40>>>0)<(10);
 $42 = ($$2|0)==(46);
 $43 = $42 | $41;
 L22: do {
  if ($43) {
   $44 = ((($6)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$377 = $42;$378 = $40;$379 = $375;$380 = $376;$47 = 0;$48 = 0;
   L24: while(1) {
    do {
     if ($377) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $47;$382 = $48;$383 = $47;$384 = $48;
      } else {
       break L24;
      }
     } else {
      $46 = ($$0340502|0)<(125);
      $49 = (_i64Add(($47|0),($48|0),1,0)|0);
      $50 = (getTempRet0() | 0);
      $51 = ($$3504|0)!=(48);
      if (!($46)) {
       if (!($51)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
        break;
       }
       $61 = HEAP32[$44>>2]|0;
       $62 = $61 | 1;
       HEAP32[$44>>2] = $62;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
       break;
      }
      $spec$select = $51 ? $49 : $$0398499;
      $52 = ($$0336503|0)==(0);
      $53 = (($6) + ($$0340502<<2)|0);
      if ($52) {
       $storemerge446 = $378;
      } else {
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54*10)|0;
       $56 = (($$3504) + -48)|0;
       $57 = (($56) + ($55))|0;
       $storemerge446 = $57;
      }
      HEAP32[$53>>2] = $storemerge446;
      $58 = (($$0336503) + 1)|0;
      $59 = ($58|0)==(9);
      $60 = $59&1;
      $spec$select410 = (($$0340502) + ($60))|0;
      $spec$select411 = $59 ? 0 : $58;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
     }
    } while(0);
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$10>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$9>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $71 = $68;
    } else {
     $69 = (___shgetc($0)|0);
     $71 = $69;
    }
    $70 = (($71) + -48)|0;
    $72 = ($70>>>0)<(10);
    $73 = ($71|0)==(46);
    $74 = $73 | $72;
    if ($74) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $71;$377 = $73;$378 = $70;$379 = $381;$380 = $382;$47 = $383;$48 = $384;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $71;$$3396$lcssa = $$4397;$76 = $381;$77 = $383;$79 = $382;$80 = $384;
     label = 31;
     break L22;
    }
   }
   $45 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$385 = $47;$386 = $48;$387 = $379;$388 = $380;$389 = $45;
   label = 39;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$76 = $375;$77 = 0;$79 = $376;$80 = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $75 = ($$1391$lcssa|0)==(0);
   $78 = $75 ? $77 : $76;
   $81 = $75 ? $80 : $79;
   $82 = ($$3396$lcssa|0)!=(0);
   $83 = $$3$lcssa | 32;
   $84 = ($83|0)==(101);
   $or$cond414 = $82 & $84;
   if (!($or$cond414)) {
    $99 = ($$3$lcssa|0)>(-1);
    if ($99) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$385 = $77;$386 = $80;$387 = $78;$388 = $81;$389 = $82;
     label = 39;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$390 = $77;$391 = $80;$392 = $82;$393 = $78;$394 = $81;
     label = 41;
     break;
    }
   }
   $85 = (_scanexp($0,$5)|0);
   $86 = (getTempRet0() | 0);
   $87 = ($85|0)==(0);
   $88 = ($86|0)==(-2147483648);
   $89 = $87 & $88;
   if ($89) {
    $90 = ($5|0)==(0);
    if ($90) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $91 = HEAP32[$10>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $95 = 0;$96 = 0;
    } else {
     $93 = HEAP32[$9>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$9>>2] = $94;
     $95 = 0;$96 = 0;
    }
   } else {
    $95 = $85;$96 = $86;
   }
   $97 = (_i64Add(($95|0),($96|0),($78|0),($81|0))|0);
   $98 = (getTempRet0() | 0);
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$109 = $97;$111 = $77;$112 = $98;$114 = $80;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $100 = HEAP32[$10>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$390 = $385;$391 = $386;$392 = $389;$393 = $387;$394 = $388;
   label = 41;
  } else {
   $102 = HEAP32[$9>>2]|0;
   $103 = ((($102)) + -1|0);
   HEAP32[$9>>2] = $103;
   if ($389) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$109 = $387;$111 = $385;$112 = $388;$114 = $386;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($392) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$109 = $393;$111 = $390;$112 = $394;$114 = $391;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $104 = (___errno_location()|0);
   HEAP32[$104>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $105 = HEAP32[$6>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (+($4|0));
    $108 = $107 * 0.0;
    $$1 = $108;
    break;
   }
   $110 = ($109|0)==($111|0);
   $113 = ($112|0)==($114|0);
   $115 = $110 & $113;
   $116 = ($114|0)<(0);
   $117 = ($111>>>0)<(10);
   $118 = ($114|0)==(0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   $or$cond = $120 & $115;
   if ($or$cond) {
    $121 = ($2|0)>(30);
    $122 = ($2)?($105 >>> $2):($105);
    $123 = ($122|0)==(0);
    $or$cond416 = $121 | $123;
    if ($or$cond416) {
     $124 = (+($4|0));
     $125 = (+($105>>>0));
     $126 = $124 * $125;
     $$1 = $126;
     break;
    }
   }
   $127 = (($3|0) / -2)&-1;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = ($112|0)>($129|0);
   $131 = ($109>>>0)>($127>>>0);
   $132 = ($112|0)==($129|0);
   $133 = $132 & $131;
   $134 = $130 | $133;
   if ($134) {
    $135 = (___errno_location()|0);
    HEAP32[$135>>2] = 34;
    $136 = (+($4|0));
    $137 = $136 * 1.7976931348623157E+308;
    $138 = $137 * 1.7976931348623157E+308;
    $$1 = $138;
    break;
   }
   $139 = (($3) + -106)|0;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = ($112|0)<($141|0);
   $143 = ($109>>>0)<($139>>>0);
   $144 = ($112|0)==($141|0);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    $147 = (___errno_location()|0);
    HEAP32[$147>>2] = 34;
    $148 = (+($4|0));
    $149 = $148 * 2.2250738585072014E-308;
    $150 = $149 * 2.2250738585072014E-308;
    $$1 = $150;
    break;
   }
   $151 = ($$0336453|0)==(0);
   if ($151) {
    $$3343 = $$0340457;
   } else {
    $152 = ($$0336453|0)<(9);
    if ($152) {
     $153 = (($6) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$153>>2]|0;
     $$3339493 = $$0336453;$155 = $$promoted;
     while(1) {
      $154 = ($155*10)|0;
      $156 = (($$3339493) + 1)|0;
      $157 = ($$3339493|0)<(8);
      if ($157) {
       $$3339493 = $156;$155 = $154;
      } else {
       break;
      }
     }
     HEAP32[$153>>2] = $154;
    }
    $158 = (($$0340457) + 1)|0;
    $$3343 = $158;
   }
   $159 = ($$0398463|0)<(9);
   if ($159) {
    $160 = ($$0398463|0)<=($109|0);
    $161 = ($109|0)<(18);
    $or$cond3 = $160 & $161;
    if ($or$cond3) {
     $162 = ($109|0)==(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $$1 = $166;
      break;
     }
     $167 = ($109|0)<(9);
     if ($167) {
      $168 = (+($4|0));
      $169 = HEAP32[$6>>2]|0;
      $170 = (+($169>>>0));
      $171 = $168 * $170;
      $172 = (8 - ($109))|0;
      $173 = (8576 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (+($174|0));
      $176 = $171 / $175;
      $$1 = $176;
      break;
     }
     $$neg447 = Math_imul($109, -3)|0;
     $$neg448 = (($2) + 27)|0;
     $177 = (($$neg448) + ($$neg447))|0;
     $178 = ($177|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $179 = ($177)?($$pre >>> $177):($$pre);
     $180 = ($179|0)==(0);
     $or$cond559 = $178 | $180;
     if ($or$cond559) {
      $181 = (+($4|0));
      $182 = (+($$pre>>>0));
      $183 = $181 * $182;
      $184 = (($109) + -10)|0;
      $185 = (8576 + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (+($186|0));
      $188 = $183 * $187;
      $$1 = $188;
      break;
     }
    }
   }
   $189 = (($109|0) % 9)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $109;
   } else {
    $191 = ($109|0)>(-1);
    $192 = (($189) + 9)|0;
    $193 = $191 ? $189 : $192;
    $194 = (8 - ($193))|0;
    $195 = (8576 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($$3343|0)==(0);
    if ($197) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $109;
    } else {
     $198 = (1000000000 / ($196|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $109;$$4344485 = 0;
     while(1) {
      $199 = (($6) + ($$4344485<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200>>>0) / ($196>>>0))&-1;
      $202 = Math_imul($201, $196)|0;
      $203 = (($200) - ($202))|0;
      $204 = (($201) + ($$0335486))|0;
      HEAP32[$199>>2] = $204;
      $205 = Math_imul($198, $203)|0;
      $206 = ($$4344485|0)==($$0345484|0);
      $207 = ($204|0)==(0);
      $or$cond417 = $206 & $207;
      $208 = (($$0345484) + 1)|0;
      $209 = $208 & 127;
      $210 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $210 : $$0381483;
      $spec$select440 = $or$cond417 ? $209 : $$0345484;
      $211 = (($$4344485) + 1)|0;
      $212 = ($211|0)==($$3343|0);
      if ($212) {
       break;
      } else {
       $$0335486 = $205;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $211;
      }
     }
     $213 = ($205|0)==(0);
     if ($213) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $214 = (($6) + ($$3343<<2)|0);
      $215 = (($$3343) + 1)|0;
      HEAP32[$214>>2] = $205;
      $$0345$lcssa540 = $spec$select440;$$0367 = $215;$$0381$lcssa539 = $spec$select439;
     }
    }
    $216 = (9 - ($193))|0;
    $217 = (($216) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $217;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L104: while(1) {
    $218 = ($$3384$ph578|0)<(18);
    $219 = ($$3384$ph578|0)==(18);
    $220 = (($6) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($218)) {
      if (!($219)) {
       $$5386$ph = $$3384$ph578;
       break L104;
      }
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221>>>0)<(9007199);
      if (!($222)) {
       $$5386$ph = 18;
       break L104;
      }
     }
     $223 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $223;
     while(1) {
      $$5 = $$5$in & 127;
      $224 = (($6) + ($$5<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (_bitshift64Shl(($225|0),0,29)|0);
      $227 = (getTempRet0() | 0);
      $228 = (_i64Add(($226|0),($227|0),($$0329|0),0)|0);
      $229 = (getTempRet0() | 0);
      $230 = ($229>>>0)>(0);
      $231 = ($228>>>0)>(1000000000);
      $232 = ($229|0)==(0);
      $233 = $232 & $231;
      $234 = $230 | $233;
      if ($234) {
       $235 = (___udivdi3(($228|0),($229|0),1000000000,0)|0);
       $236 = (getTempRet0() | 0);
       $237 = (___muldi3(($235|0),($236|0),1000000000,0)|0);
       $238 = (getTempRet0() | 0);
       $239 = (_i64Subtract(($228|0),($229|0),($237|0),($238|0))|0);
       $240 = (getTempRet0() | 0);
       $$1330 = $235;$$sink$off0 = $239;
      } else {
       $$1330 = 0;$$sink$off0 = $228;
      }
      HEAP32[$224>>2] = $$sink$off0;
      $241 = (($$3370) + 127)|0;
      $242 = $241 & 127;
      $243 = ($$5|0)!=($242|0);
      $244 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $243 | $244;
      $245 = ($$sink$off0|0)==(0);
      $spec$select419 = $245 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $246 = (($$5) + -1)|0;
      if ($244) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $246;
      }
     }
     $247 = (($$0376) + -29)|0;
     $248 = ($$1330|0)==(0);
     if ($248) {
      $$0376 = $247;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $249 = (($$3384$ph578) + 9)|0;
    $250 = (($$3348$ph580) + 127)|0;
    $251 = $250 & 127;
    $252 = ($251|0)==($spec$select441|0);
    $253 = (($spec$select441) + 127)|0;
    $254 = $253 & 127;
    $255 = (($spec$select441) + 126)|0;
    $256 = $255 & 127;
    $257 = (($6) + ($256<<2)|0);
    if ($252) {
     $258 = (($6) + ($254<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$257>>2]|0;
     $261 = $260 | $259;
     HEAP32[$257>>2] = $261;
     $$5372 = $254;
    } else {
     $$5372 = $$3370;
    }
    $262 = (($6) + ($251<<2)|0);
    HEAP32[$262>>2] = $$1330;
    $$0376$ph = $247;$$2369$ph579 = $$5372;$$3348$ph580 = $251;$$3384$ph578 = $249;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L123: while(1) {
    $299 = (($$7374$ph$ph) + 1)|0;
    $296 = $299 & 127;
    $300 = (($$7374$ph$ph) + 127)|0;
    $301 = $300 & 127;
    $302 = (($6) + ($301<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $294 = ($$5386$ph576|0)==(18);
     $295 = ($$5386$ph576|0)>(27);
     $spec$select420 = $295 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $263 = (($$0331476) + ($$5350))|0;
       $264 = $263 & 127;
       $265 = ($264|0)==($$7374$ph$ph|0);
       if ($265) {
        label = 92;
        break;
       }
       $266 = (($6) + ($264<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (9452 + ($$0331476<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267>>>0)<($269>>>0);
       if ($270) {
        label = 92;
        break;
       }
       $271 = ($267>>>0)>($269>>>0);
       if ($271) {
        break;
       }
       $272 = (($$0331476) + 1)|0;
       $273 = ($272>>>0)<(2);
       if ($273) {
        $$0331476 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($294) {
        break L123;
       }
      }
      $274 = (($spec$select420) + ($$1377))|0;
      $275 = ($$5350|0)==($$7374$ph$ph|0);
      if ($275) {
       $$1377 = $274;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $276 = 1 << $spec$select420;
     $277 = (($276) + -1)|0;
     $278 = ($spec$select420)?(1000000000 >>> $spec$select420):(1000000000);
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $279 = (($6) + ($$6479<<2)|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280 & $277;
      $282 = ($spec$select420)?($280 >>> $spec$select420):($280);
      $283 = (($282) + ($$0327480))|0;
      HEAP32[$279>>2] = $283;
      $284 = Math_imul($281, $278)|0;
      $285 = ($$6479|0)==($$6351478|0);
      $286 = ($283|0)==(0);
      $or$cond421 = $285 & $286;
      $287 = (($$6351478) + 1)|0;
      $288 = $287 & 127;
      $289 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $289 : $$6387477;
      $spec$select443 = $or$cond421 ? $288 : $$6351478;
      $290 = (($$6479) + 1)|0;
      $291 = $290 & 127;
      $292 = ($291|0)==($$7374$ph$ph|0);
      if ($292) {
       break;
      } else {
       $$0327480 = $284;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $291;
      }
     }
     $293 = ($284|0)==(0);
     if (!($293)) {
      $297 = ($296|0)==($spec$select443|0);
      if (!($297)) {
       break;
      }
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 | 1;
      HEAP32[$302>>2] = $304;
     }
     $$1377$ph = $274;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $298 = (($6) + ($$7374$ph$ph<<2)|0);
    HEAP32[$298>>2] = $284;
    $$1377$ph$ph = $274;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $296;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $305 = (($$4475) + ($$5350))|0;
    $306 = $305 & 127;
    $307 = ($306|0)==($$10473|0);
    $308 = (($$10473) + 1)|0;
    $309 = $308 & 127;
    if ($307) {
     $310 = (($309) + -1)|0;
     $311 = (($6) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $$11 = $309;
    } else {
     $$11 = $$10473;
    }
    $312 = $$0360474 * 1.0E+9;
    $313 = (($6) + ($306<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (+($314>>>0));
    $316 = $312 + $315;
    $317 = (($$4475) + 1)|0;
    $exitcond = ($317|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $316;$$10473 = $$11;$$4475 = $317;
    }
   }
   $318 = (+($4|0));
   $319 = $316 * $318;
   $320 = (($$1377) + 53)|0;
   $321 = (($320) - ($3))|0;
   $322 = ($321|0)<($2|0);
   $323 = ($321|0)>(0);
   $spec$store$select = $323 ? $321 : 0;
   $$0328 = $322 ? $spec$store$select : $2;
   $324 = ($$0328|0)<(53);
   if ($324) {
    $325 = (105 - ($$0328))|0;
    $326 = (+_scalbn(1.0,$325));
    $327 = (+_copysignl($326,$319));
    $328 = (53 - ($$0328))|0;
    $329 = (+_scalbn(1.0,$328));
    $330 = (+_fmodl($319,$329));
    $331 = $319 - $330;
    $332 = $327 + $331;
    $$0355 = $327;$$0356 = $330;$$1361 = $332;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $319;
   }
   $333 = (($$5350) + 2)|0;
   $334 = $333 & 127;
   $335 = ($334|0)==($$11|0);
   if ($335) {
    $$3359 = $$0356;
   } else {
    $336 = (($6) + ($334<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337>>>0)<(500000000);
    do {
     if ($338) {
      $339 = ($337|0)==(0);
      if ($339) {
       $340 = (($$5350) + 3)|0;
       $341 = $340 & 127;
       $342 = ($341|0)==($$11|0);
       if ($342) {
        $$1357 = $$0356;
        break;
       }
      }
      $343 = $318 * 0.25;
      $344 = $343 + $$0356;
      $$1357 = $344;
     } else {
      $345 = ($337|0)==(500000000);
      if (!($345)) {
       $346 = $318 * 0.75;
       $347 = $346 + $$0356;
       $$1357 = $347;
       break;
      }
      $348 = (($$5350) + 3)|0;
      $349 = $348 & 127;
      $350 = ($349|0)==($$11|0);
      if ($350) {
       $351 = $318 * 0.5;
       $352 = $351 + $$0356;
       $$1357 = $352;
       break;
      } else {
       $353 = $318 * 0.75;
       $354 = $353 + $$0356;
       $$1357 = $354;
       break;
      }
     }
    } while(0);
    $355 = (53 - ($$0328))|0;
    $356 = ($355|0)>(1);
    if ($356) {
     $357 = (+_fmodl($$1357,1.0));
     $358 = $357 != 0.0;
     if ($358) {
      $$3359 = $$1357;
     } else {
      $359 = $$1357 + 1.0;
      $$3359 = $359;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $360 = $$1361 + $$3359;
   $361 = $360 - $$0355;
   $362 = $320 & 2147483647;
   $363 = (-2 - ($7))|0;
   $364 = ($362|0)>($363|0);
   do {
    if ($364) {
     $365 = (+Math_abs((+$361)));
     $366 = !($365 >= 9007199254740992.0);
     $367 = $361 * 0.5;
     $not$ = $366 ^ 1;
     $368 = $not$&1;
     $$3379 = (($$1377) + ($368))|0;
     $$2362 = $366 ? $361 : $367;
     $369 = (($$3379) + 50)|0;
     $370 = ($369|0)>($8|0);
     if (!($370)) {
      $371 = ($$0328|0)!=($321|0);
      $narrow = $371 | $366;
      $$2366$v = $322 & $narrow;
      $372 = $$3359 != 0.0;
      $or$cond9 = $372 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     $373 = (___errno_location()|0);
     HEAP32[$373>>2] = 34;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $361;$$4380 = $$1377;
    }
   } while(0);
   $374 = (+_scalbnl($$3363,$$4380));
   $$1 = $374;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pr = 0, $$pre = 0, $$pre$phi69Z2D = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $100 = 0;$99 = -2147483648;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    label = 14;
   }
  } else {
   $$0 = $13;$$049 = $22;$$pre$phi69Z2D = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($11) + -48)|0;
  $$0 = 0;$$049 = $11;$$pre$phi69Z2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $29 = ($$pre$phi69Z2D>>>0)>(9);
  if ($29) {
   label = 14;
  } else {
   $$04858 = 0;$$157 = $$049;
   while(1) {
    $33 = ($$04858*10)|0;
    $34 = (($$157) + -48)|0;
    $35 = (($34) + ($33))|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = HEAP32[$4>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $39 = ((($36)) + 1|0);
     HEAP32[$2>>2] = $39;
     $40 = HEAP8[$36>>0]|0;
     $41 = $40&255;
     $44 = $41;
    } else {
     $42 = (___shgetc($0)|0);
     $44 = $42;
    }
    $43 = (($44) + -48)|0;
    $45 = ($43>>>0)<(10);
    $46 = ($35|0)<(214748364);
    $47 = $45 & $46;
    if ($47) {
     $$04858 = $35;$$157 = $44;
    } else {
     break;
    }
   }
   $48 = ($35|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = ($43>>>0)<(10);
   if ($50) {
    $$251 = $44;$51 = $35;$52 = $49;
    while(1) {
     $53 = (___muldi3(($51|0),($52|0),10,0)|0);
     $54 = (getTempRet0() | 0);
     $55 = ($$251|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = (_i64Add(($$251|0),($56|0),-48,-1)|0);
     $58 = (getTempRet0() | 0);
     $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
     $60 = (getTempRet0() | 0);
     $61 = HEAP32[$2>>2]|0;
     $62 = HEAP32[$4>>2]|0;
     $63 = ($61>>>0)<($62>>>0);
     if ($63) {
      $64 = ((($61)) + 1|0);
      HEAP32[$2>>2] = $64;
      $65 = HEAP8[$61>>0]|0;
      $66 = $65&255;
      $69 = $66;
     } else {
      $67 = (___shgetc($0)|0);
      $69 = $67;
     }
     $68 = (($69) + -48)|0;
     $70 = ($68>>>0)<(10);
     $71 = ($60|0)<(21474836);
     $72 = ($59>>>0)<(2061584302);
     $73 = ($60|0)==(21474836);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = $70 & $75;
     if ($76) {
      $$251 = $69;$51 = $59;$52 = $60;
     } else {
      break;
     }
    }
    $77 = ($68>>>0)<(10);
    if ($77) {
     while(1) {
      $78 = HEAP32[$2>>2]|0;
      $79 = HEAP32[$4>>2]|0;
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $81 = ((($78)) + 1|0);
       HEAP32[$2>>2] = $81;
       $82 = HEAP8[$78>>0]|0;
       $83 = $82&255;
       $86 = $83;
      } else {
       $84 = (___shgetc($0)|0);
       $86 = $84;
      }
      $85 = (($86) + -48)|0;
      $87 = ($85>>>0)<(10);
      if (!($87)) {
       $93 = $59;$94 = $60;
       break;
      }
     }
    } else {
     $93 = $59;$94 = $60;
    }
   } else {
    $93 = $35;$94 = $49;
   }
   $88 = HEAP32[$4>>2]|0;
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    $90 = HEAP32[$2>>2]|0;
    $91 = ((($90)) + -1|0);
    HEAP32[$2>>2] = $91;
   }
   $92 = ($$0|0)==(0);
   $95 = (_i64Subtract(0,0,($93|0),($94|0))|0);
   $96 = (getTempRet0() | 0);
   $97 = $92 ? $93 : $95;
   $98 = $92 ? $94 : $96;
   $100 = $97;$99 = $98;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$4>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if ($30) {
   $100 = 0;$99 = -2147483648;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$2>>2] = $32;
   $100 = 0;$99 = -2147483648;
  }
 }
 setTempRet0(($99) | 0);
 return ($100|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = (getTempRet0() | 0);
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = (getTempRet0() | 0);
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_512($1)|0);
   $19 = (getTempRet0() | 0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = (getTempRet0() | 0);
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = (getTempRet0() | 0);
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = (getTempRet0() | 0);
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = (getTempRet0() | 0);
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = (getTempRet0() | 0);
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = (getTempRet0() | 0);
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = (getTempRet0() | 0);
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = (getTempRet0() | 0);
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$100 = $92;$158 = $97;$159 = $87;$160 = $88;$98 = $91;
      while(1) {
       if ($158) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = (getTempRet0() | 0);
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = (getTempRet0() | 0);
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$100 = $111;$158 = $116;$159 = $106;$160 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $123 = $119;$125 = $117;
     }
    } else {
     $123 = $157;$125 = $156;
    }
    $124 = ($123>>>0)<(1048576);
    $126 = ($125>>>0)<(0);
    $127 = ($123|0)==(1048576);
    $128 = $127 & $126;
    $129 = $124 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = (getTempRet0() | 0);
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = (getTempRet0() | 0);
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = (getTempRet0() | 0);
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = (getTempRet0() | 0);
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_512($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function ___pthread_self_311() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = (31)?($26 >> 31):($26);
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $spec$select = $11 ? $$027 : $2;
 (_memcpy(($1|0),($4|0),($spec$select|0))|0);
 $12 = (($4) + ($spec$select)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($spec$select|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 63]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 63]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)==(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $0 : $17;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$214 = 0, $$neg13 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1 = 0;$$112 = $$011;$$pre$phiZ2D = $7;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$pre16 = $$pre << 24 >> 24;
  $$1 = $$0;$$112 = $5;$$pre$phiZ2D = $$pre16;
 }
 $8 = (_isdigit($$pre$phiZ2D)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$214 = $$112;
  while(1) {
   $10 = ($$01015*10)|0;
   $11 = ((($$214)) + 1|0);
   $12 = HEAP8[$$214>>0]|0;
   $13 = $12 << 24 >> 24;
   $$neg13 = (($10) + 48)|0;
   $14 = (($$neg13) - ($13))|0;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = (_isdigit($16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$010$lcssa = $14;
    break;
   } else {
    $$01015 = $14;$$214 = $11;
   }
  }
 }
 $19 = ($$1|0)==(0);
 $20 = (0 - ($$010$lcssa))|0;
 $21 = $19 ? $20 : $$010$lcssa;
 return ($21|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _atof($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_strtod($0,0));
 return (+$1);
}
function _atol($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$214 = 0, $$neg13 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1 = 0;$$112 = $$011;$$pre$phiZ2D = $7;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$pre16 = $$pre << 24 >> 24;
  $$1 = $$0;$$112 = $5;$$pre$phiZ2D = $$pre16;
 }
 $8 = (_isdigit($$pre$phiZ2D)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$214 = $$112;
  while(1) {
   $10 = ($$01015*10)|0;
   $11 = ((($$214)) + 1|0);
   $12 = HEAP8[$$214>>0]|0;
   $13 = $12 << 24 >> 24;
   $$neg13 = (($10) + 48)|0;
   $14 = (($$neg13) - ($13))|0;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = (_isdigit($16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$010$lcssa = $14;
    break;
   } else {
    $$01015 = $14;$$214 = $11;
   }
  }
 }
 $19 = ($$1|0)==(0);
 $20 = (0 - ($$010$lcssa))|0;
 $21 = $19 ? $20 : $$010$lcssa;
 return ($21|0);
}
function _atoll($0) {
 $0 = $0|0;
 var $$0 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$213 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre15 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1 = 0;$$112 = $$011;$$pre$phiZ2D = $7;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$pre15 = $$pre << 24 >> 24;
  $$1 = $$0;$$112 = $5;$$pre$phiZ2D = $$pre15;
 }
 $8 = (_isdigit($$pre$phiZ2D)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $27 = 0;$28 = 0;
 } else {
  $$213 = $$112;$10 = 0;$11 = 0;
  while(1) {
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = ((($$213)) + 1|0);
   $15 = HEAP8[$$213>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = (($16) + -48)|0;
   $18 = ($17|0)<(0);
   $19 = $18 << 31 >> 31;
   $20 = (_i64Subtract(($12|0),($13|0),($17|0),($19|0))|0);
   $21 = (getTempRet0() | 0);
   $22 = HEAP8[$14>>0]|0;
   $23 = $22 << 24 >> 24;
   $24 = (_isdigit($23)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $27 = $20;$28 = $21;
    break;
   } else {
    $$213 = $14;$10 = $20;$11 = $21;
   }
  }
 }
 $26 = ($$1|0)==(0);
 $29 = (_i64Subtract(0,0,($27|0),($28|0))|0);
 $30 = (getTempRet0() | 0);
 $31 = $26 ? $29 : $27;
 $32 = $26 ? $30 : $28;
 setTempRet0(($32) | 0);
 return ($31|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03754 = 0, $$038$lcssa = 0, $$03867 = 0, $$039$lcssa = 0, $$03966 = 0, $$042$lcssa = 0, $$04265 = 0, $$055 = 0, $$1$lcssa = 0, $$140 = 0, $$143 = 0, $$153 = 0, $$2 = 0, $$24147 = 0, $$24446 = 0, $$345 = 0, $$348 = 0, $$4 = 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond64 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond64 = $10 & $9;
   if ($or$cond64) {
    $$03867 = $2;$$03966 = $1;$$04265 = $0;
    while(1) {
     $11 = HEAP8[$$03966>>0]|0;
     HEAP8[$$04265>>0] = $11;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$345 = $$04265;$$4 = $$03867;
      break L1;
     }
     $13 = (($$03867) + -1)|0;
     $14 = ((($$03966)) + 1|0);
     $15 = ((($$04265)) + 1|0);
     $16 = $14;
     $17 = $16 & 3;
     $18 = ($17|0)!=(0);
     $19 = ($13|0)!=(0);
     $or$cond = $19 & $18;
     if ($or$cond) {
      $$03867 = $13;$$03966 = $14;$$04265 = $15;
     } else {
      $$038$lcssa = $13;$$039$lcssa = $14;$$042$lcssa = $15;$$lcssa = $19;
      break;
     }
    }
   } else {
    $$038$lcssa = $2;$$039$lcssa = $1;$$042$lcssa = $0;$$lcssa = $10;
   }
   if ($$lcssa) {
    $$pr = HEAP8[$$039$lcssa>>0]|0;
    $20 = ($$pr<<24>>24)==(0);
    if ($20) {
     $$345 = $$042$lcssa;$$4 = $$038$lcssa;
    } else {
     $21 = ($$038$lcssa>>>0)>(3);
     L11: do {
      if ($21) {
       $$03754 = $$042$lcssa;$$055 = $$039$lcssa;$$153 = $$038$lcssa;
       while(1) {
        $22 = HEAP32[$$055>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$0$lcssa = $$055;$$037$lcssa = $$03754;$$1$lcssa = $$153;
         break L11;
        }
        HEAP32[$$03754>>2] = $22;
        $28 = (($$153) + -4)|0;
        $29 = ((($$055)) + 4|0);
        $30 = ((($$03754)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$03754 = $30;$$055 = $29;$$153 = $28;
        } else {
         $$0$lcssa = $29;$$037$lcssa = $30;$$1$lcssa = $28;
         break;
        }
       }
      } else {
       $$0$lcssa = $$039$lcssa;$$037$lcssa = $$042$lcssa;$$1$lcssa = $$038$lcssa;
      }
     } while(0);
     $$140 = $$0$lcssa;$$143 = $$037$lcssa;$$2 = $$1$lcssa;
     label = 13;
    }
   } else {
    $$345 = $$042$lcssa;$$4 = 0;
   }
  } else {
   $$140 = $1;$$143 = $0;$$2 = $2;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $32 = ($$2|0)==(0);
   if ($32) {
    $$345 = $$143;$$4 = 0;
   } else {
    $$24147 = $$140;$$24446 = $$143;$$348 = $$2;
    while(1) {
     $33 = HEAP8[$$24147>>0]|0;
     HEAP8[$$24446>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$345 = $$24446;$$4 = $$348;
      break L17;
     }
     $35 = (($$348) + -1)|0;
     $36 = ((($$24147)) + 1|0);
     $37 = ((($$24446)) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$345 = $37;$$4 = 0;
      break;
     } else {
      $$24147 = $36;$$24446 = $37;$$348 = $35;
     }
    }
   }
  }
 } while(0);
 (_memset(($$345|0),0,($$4|0))|0);
 return ($$345|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strncasecmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$02125 = 0, $$02227 = 0, $$02227$in = 0, $$023 = 0, $$026 = 0, $$pre$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$023 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$24 = 0;
   } else {
    $6 = $4&255;
    $$02125 = $0;$$02227$in = $2;$$026 = $1;$10 = $4;$12 = $6;
    while(1) {
     $$02227 = (($$02227$in) + -1)|0;
     $7 = HEAP8[$$026>>0]|0;
     $8 = ($7<<24>>24)!=(0);
     $9 = ($$02227|0)!=(0);
     $or$cond = $9 & $8;
     if (!($or$cond)) {
      $$0$lcssa = $$026;$24 = $10;
      break L3;
     }
     $11 = ($10<<24>>24)==($7<<24>>24);
     if (!($11)) {
      $13 = (_tolower($12)|0);
      $14 = HEAP8[$$026>>0]|0;
      $15 = $14&255;
      $16 = (_tolower($15)|0);
      $17 = ($13|0)==($16|0);
      if (!($17)) {
       break;
      }
     }
     $18 = ((($$02125)) + 1|0);
     $19 = ((($$026)) + 1|0);
     $20 = HEAP8[$18>>0]|0;
     $21 = $20&255;
     $22 = ($20<<24>>24)==(0);
     if ($22) {
      $$0$lcssa = $19;$24 = 0;
      break L3;
     } else {
      $$02125 = $18;$$02227$in = $$02227;$$026 = $19;$10 = $20;$12 = $21;
     }
    }
    $$pre$pre = HEAP8[$$02125>>0]|0;
    $$0$lcssa = $$026;$24 = $$pre$pre;
   }
  } while(0);
  $23 = $24&255;
  $25 = (_tolower($23)|0);
  $26 = HEAP8[$$0$lcssa>>0]|0;
  $27 = $26&255;
  $28 = (_tolower($27)|0);
  $29 = (($25) - ($28))|0;
  $$023 = $29;
 }
 return ($$023|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _toupper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_islower($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 95;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 63]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $37 = ($36|0)==(0);
   if (!($37)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($36|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 63]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _vasprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $4 = (_vsnprintf(0,0,$1,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = (($4) + 1)|0;
  $7 = (_malloc($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   $9 = (_vsnprintf($7,$6,$1,$2)|0);
   $$0 = $9;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function ___emscripten_environ_constructor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___buildEnvironment((15228|0));
 return;
}
function __get_environ() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15228|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0(((high|0) < 0 ? -1 : 0) | 0);
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&31](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&0](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(1);return 0;
}
function b2(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(2);return 0;
}
function b3(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(3);return 0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(4);
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(5);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_close,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_iii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,_free_states_should_delete];
var FUNCTION_TABLE_iiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,___stdout_write,___stdio_seek
,_sn_write,b2,b2,___stdio_write,___stdio_read,_do_read_779,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiiiiiii = [b3];
var FUNCTION_TABLE_viii = [b4,_fc_solve_sfs_move_top_stack_cards_to_founds,_fc_solve_sfs_move_freecell_cards_to_founds,_fc_solve_sfs_move_freecell_cards_on_top_of_stacks,_fc_solve_sfs_move_non_top_stack_cards_to_founds,_fc_solve_sfs_move_stack_cards_to_different_stacks,_fc_solve_sfs_move_stack_cards_to_a_parent_on_the_same_stack,_fc_solve_sfs_move_sequences_to_free_stacks,_fc_solve_sfs_move_freecell_cards_to_empty_stack,_fc_solve_sfs_move_cards_to_a_different_parent,_fc_solve_sfs_empty_stack_into_freecells,_fc_solve_sfs_atomic_move_card_to_empty_stack,_fc_solve_sfs_atomic_move_card_to_parent,_fc_solve_sfs_atomic_move_card_to_freecell,_fc_solve_sfs_atomic_move_freecell_card_to_parent,_fc_solve_sfs_atomic_move_freecell_card_to_empty_stack,_fc_solve_sfs_simple_simon_move_sequence_to_founds,_fc_solve_sfs_simple_simon_move_sequence_to_true_parent,_fc_solve_sfs_simple_simon_move_whole_stack_sequence_to_false_parent,_fc_solve_sfs_simple_simon_move_sequence_to_true_parent_with_some_cards_above,_fc_solve_sfs_simple_simon_move_sequence_with_some_cards_above_to_true_parent,_fc_solve_sfs_simple_simon_move_sequence_with_junk_seq_above_to_true_parent_with_some_cards_above,_fc_solve_sfs_simple_simon_move_whole_stack_sequence_to_false_parent_with_some_cards_above,_fc_solve_sfs_simple_simon_move_sequence_to_parent_on_the_same_stack,_fc_solve_sfs_simple_simon_move_sequence_to_false_parent,_fc_solve_sfs_move_fc_to_empty_and_put_on_top,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_viiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,_iter_handler_wrapper,b5];

  return { ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_environ: __get_environ, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fc_solve__hll_ms_rand__get_singleton: _fc_solve__hll_ms_rand__get_singleton, _fc_solve__hll_ms_rand__init: _fc_solve__hll_ms_rand__init, _fc_solve__hll_ms_rand__mod_rand: _fc_solve__hll_ms_rand__mod_rand, _fc_solve_find_deal_in_range: _fc_solve_find_deal_in_range, _fc_solve_moves_processed_gen: _fc_solve_moves_processed_gen, _fc_solve_pats__do_it: _fc_solve_pats__do_it, _fc_solve_user__find_deal__alloc: _fc_solve_user__find_deal__alloc, _fc_solve_user__find_deal__fill: _fc_solve_user__find_deal__fill, _fc_solve_user__find_deal__free: _fc_solve_user__find_deal__free, _fc_solve_user__find_deal__run: _fc_solve_user__find_deal__run, _fflush: _fflush, _free: _free, _freecell_solver_set_stored_states_trimming_limit: _freecell_solver_set_stored_states_trimming_limit, _freecell_solver_user_alloc: _freecell_solver_user_alloc, _freecell_solver_user_apply_preset: _freecell_solver_user_apply_preset, _freecell_solver_user_cmd_line_parse_args: _freecell_solver_user_cmd_line_parse_args, _freecell_solver_user_cmd_line_parse_args_with_file_nesting_count: _freecell_solver_user_cmd_line_parse_args_with_file_nesting_count, _freecell_solver_user_cmd_line_read_cmd_line_preset: _freecell_solver_user_cmd_line_read_cmd_line_preset, _freecell_solver_user_current_state_as_string: _freecell_solver_user_current_state_as_string, _freecell_solver_user_current_state_stringify: _freecell_solver_user_current_state_stringify, _freecell_solver_user_free: _freecell_solver_user_free, _freecell_solver_user_get_current_depth: _freecell_solver_user_get_current_depth, _freecell_solver_user_get_current_soft_thread_name: _freecell_solver_user_get_current_soft_thread_name, _freecell_solver_user_get_invalid_state_error_into_string: _freecell_solver_user_get_invalid_state_error_into_string, _freecell_solver_user_get_invalid_state_error_string: _freecell_solver_user_get_invalid_state_error_string, _freecell_solver_user_get_last_error_string: _freecell_solver_user_get_last_error_string, _freecell_solver_user_get_lib_version: _freecell_solver_user_get_lib_version, _freecell_solver_user_get_limit_iterations: _freecell_solver_user_get_limit_iterations, _freecell_solver_user_get_max_num_decks: _freecell_solver_user_get_max_num_decks, _freecell_solver_user_get_max_num_freecells: _freecell_solver_user_get_max_num_freecells, _freecell_solver_user_get_max_num_stacks: _freecell_solver_user_get_max_num_stacks, _freecell_solver_user_get_moves_left: _freecell_solver_user_get_moves_left, _freecell_solver_user_get_moves_sequence: _freecell_solver_user_get_moves_sequence, _freecell_solver_user_get_next_move: _freecell_solver_user_get_next_move, _freecell_solver_user_get_num_freecells: _freecell_solver_user_get_num_freecells, _freecell_solver_user_get_num_soft_threads_in_instance: _freecell_solver_user_get_num_soft_threads_in_instance, _freecell_solver_user_get_num_stacks: _freecell_solver_user_get_num_stacks, _freecell_solver_user_get_num_states_in_collection: _freecell_solver_user_get_num_states_in_collection, _freecell_solver_user_get_num_states_in_collection_long: _freecell_solver_user_get_num_states_in_collection_long, _freecell_solver_user_get_num_times: _freecell_solver_user_get_num_times, _freecell_solver_user_get_num_times_long: _freecell_solver_user_get_num_times_long, _freecell_solver_user_iter_state_as_string: _freecell_solver_user_iter_state_as_string, _freecell_solver_user_iter_state_stringify: _freecell_solver_user_iter_state_stringify, _freecell_solver_user_limit_current_instance_iterations: _freecell_solver_user_limit_current_instance_iterations, _freecell_solver_user_limit_depth: _freecell_solver_user_limit_depth, _freecell_solver_user_limit_iterations: _freecell_solver_user_limit_iterations, _freecell_solver_user_limit_iterations_long: _freecell_solver_user_limit_iterations_long, _freecell_solver_user_limit_num_states_in_collection: _freecell_solver_user_limit_num_states_in_collection, _freecell_solver_user_limit_num_states_in_collection_long: _freecell_solver_user_limit_num_states_in_collection_long, _freecell_solver_user_move_to_string: _freecell_solver_user_move_to_string, _freecell_solver_user_move_to_string_w_state: _freecell_solver_user_move_to_string_w_state, _freecell_solver_user_next_flare: _freecell_solver_user_next_flare, _freecell_solver_user_next_hard_thread: _freecell_solver_user_next_hard_thread, _freecell_solver_user_next_instance: _freecell_solver_user_next_instance, _freecell_solver_user_next_soft_thread: _freecell_solver_user_next_soft_thread, _freecell_solver_user_recycle: _freecell_solver_user_recycle, _freecell_solver_user_reset: _freecell_solver_user_reset, _freecell_solver_user_resume_solution: _freecell_solver_user_resume_solution, _freecell_solver_user_set_a_star_weight: _freecell_solver_user_set_a_star_weight, _freecell_solver_user_set_calc_real_depth: _freecell_solver_user_set_calc_real_depth, _freecell_solver_user_set_depth_tests_order: _freecell_solver_user_set_depth_tests_order, _freecell_solver_user_set_empty_stacks_filled_by: _freecell_solver_user_set_empty_stacks_filled_by, _freecell_solver_user_set_flare_name: _freecell_solver_user_set_flare_name, _freecell_solver_user_set_flares_choice: _freecell_solver_user_set_flares_choice, _freecell_solver_user_set_flares_iters_factor: _freecell_solver_user_set_flares_iters_factor, _freecell_solver_user_set_flares_plan: _freecell_solver_user_set_flares_plan, _freecell_solver_user_set_game: _freecell_solver_user_set_game, _freecell_solver_user_set_hard_thread_prelude: _freecell_solver_user_set_hard_thread_prelude, _freecell_solver_user_set_iter_handler: _freecell_solver_user_set_iter_handler, _freecell_solver_user_set_iter_handler_long: _freecell_solver_user_set_iter_handler_long, _freecell_solver_user_set_num_decks: _freecell_solver_user_set_num_decks, _freecell_solver_user_set_num_freecells: _freecell_solver_user_set_num_freecells, _freecell_solver_user_set_num_stacks: _freecell_solver_user_set_num_stacks, _freecell_solver_user_set_optimization_scan_tests_order: _freecell_solver_user_set_optimization_scan_tests_order, _freecell_solver_user_set_patsolve_x_param: _freecell_solver_user_set_patsolve_x_param, _freecell_solver_user_set_patsolve_y_param: _freecell_solver_user_set_patsolve_y_param, _freecell_solver_user_set_pruning: _freecell_solver_user_set_pruning, _freecell_solver_user_set_random_seed: _freecell_solver_user_set_random_seed, _freecell_solver_user_set_reparent_states: _freecell_solver_user_set_reparent_states, _freecell_solver_user_set_scans_synergy: _freecell_solver_user_set_scans_synergy, _freecell_solver_user_set_sequence_move: _freecell_solver_user_set_sequence_move, _freecell_solver_user_set_sequences_are_built_by_type: _freecell_solver_user_set_sequences_are_built_by_type, _freecell_solver_user_set_soft_thread_name: _freecell_solver_user_set_soft_thread_name, _freecell_solver_user_set_soft_thread_step: _freecell_solver_user_set_soft_thread_step, _freecell_solver_user_set_solution_optimization: _freecell_solver_user_set_solution_optimization, _freecell_solver_user_set_solving_method: _freecell_solver_user_set_solving_method, _freecell_solver_user_set_tests_order: _freecell_solver_user_set_tests_order, _freecell_solver_user_solve_board: _freecell_solver_user_solve_board, _freecell_solver_user_stringify_move_ptr: _freecell_solver_user_stringify_move_ptr, _freecell_solver_user_stringify_move_w_state: _freecell_solver_user_stringify_move_w_state, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viii: dynCall_viii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____emscripten_environ_constructor = asm["___emscripten_environ_constructor"]; asm["___emscripten_environ_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____emscripten_environ_constructor.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___get_environ = asm["__get_environ"]; asm["__get_environ"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_environ.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fc_solve__hll_ms_rand__get_singleton = asm["_fc_solve__hll_ms_rand__get_singleton"]; asm["_fc_solve__hll_ms_rand__get_singleton"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve__hll_ms_rand__get_singleton.apply(null, arguments);
};

var real__fc_solve__hll_ms_rand__init = asm["_fc_solve__hll_ms_rand__init"]; asm["_fc_solve__hll_ms_rand__init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve__hll_ms_rand__init.apply(null, arguments);
};

var real__fc_solve__hll_ms_rand__mod_rand = asm["_fc_solve__hll_ms_rand__mod_rand"]; asm["_fc_solve__hll_ms_rand__mod_rand"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve__hll_ms_rand__mod_rand.apply(null, arguments);
};

var real__fc_solve_find_deal_in_range = asm["_fc_solve_find_deal_in_range"]; asm["_fc_solve_find_deal_in_range"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_find_deal_in_range.apply(null, arguments);
};

var real__fc_solve_moves_processed_gen = asm["_fc_solve_moves_processed_gen"]; asm["_fc_solve_moves_processed_gen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_moves_processed_gen.apply(null, arguments);
};

var real__fc_solve_pats__do_it = asm["_fc_solve_pats__do_it"]; asm["_fc_solve_pats__do_it"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_pats__do_it.apply(null, arguments);
};

var real__fc_solve_user__find_deal__alloc = asm["_fc_solve_user__find_deal__alloc"]; asm["_fc_solve_user__find_deal__alloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_user__find_deal__alloc.apply(null, arguments);
};

var real__fc_solve_user__find_deal__fill = asm["_fc_solve_user__find_deal__fill"]; asm["_fc_solve_user__find_deal__fill"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_user__find_deal__fill.apply(null, arguments);
};

var real__fc_solve_user__find_deal__free = asm["_fc_solve_user__find_deal__free"]; asm["_fc_solve_user__find_deal__free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_user__find_deal__free.apply(null, arguments);
};

var real__fc_solve_user__find_deal__run = asm["_fc_solve_user__find_deal__run"]; asm["_fc_solve_user__find_deal__run"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fc_solve_user__find_deal__run.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__freecell_solver_set_stored_states_trimming_limit = asm["_freecell_solver_set_stored_states_trimming_limit"]; asm["_freecell_solver_set_stored_states_trimming_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_set_stored_states_trimming_limit.apply(null, arguments);
};

var real__freecell_solver_user_alloc = asm["_freecell_solver_user_alloc"]; asm["_freecell_solver_user_alloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_alloc.apply(null, arguments);
};

var real__freecell_solver_user_apply_preset = asm["_freecell_solver_user_apply_preset"]; asm["_freecell_solver_user_apply_preset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_apply_preset.apply(null, arguments);
};

var real__freecell_solver_user_cmd_line_parse_args = asm["_freecell_solver_user_cmd_line_parse_args"]; asm["_freecell_solver_user_cmd_line_parse_args"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_cmd_line_parse_args.apply(null, arguments);
};

var real__freecell_solver_user_cmd_line_parse_args_with_file_nesting_count = asm["_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count"]; asm["_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_cmd_line_parse_args_with_file_nesting_count.apply(null, arguments);
};

var real__freecell_solver_user_cmd_line_read_cmd_line_preset = asm["_freecell_solver_user_cmd_line_read_cmd_line_preset"]; asm["_freecell_solver_user_cmd_line_read_cmd_line_preset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_cmd_line_read_cmd_line_preset.apply(null, arguments);
};

var real__freecell_solver_user_current_state_as_string = asm["_freecell_solver_user_current_state_as_string"]; asm["_freecell_solver_user_current_state_as_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_current_state_as_string.apply(null, arguments);
};

var real__freecell_solver_user_current_state_stringify = asm["_freecell_solver_user_current_state_stringify"]; asm["_freecell_solver_user_current_state_stringify"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_current_state_stringify.apply(null, arguments);
};

var real__freecell_solver_user_free = asm["_freecell_solver_user_free"]; asm["_freecell_solver_user_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_free.apply(null, arguments);
};

var real__freecell_solver_user_get_current_depth = asm["_freecell_solver_user_get_current_depth"]; asm["_freecell_solver_user_get_current_depth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_current_depth.apply(null, arguments);
};

var real__freecell_solver_user_get_current_soft_thread_name = asm["_freecell_solver_user_get_current_soft_thread_name"]; asm["_freecell_solver_user_get_current_soft_thread_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_current_soft_thread_name.apply(null, arguments);
};

var real__freecell_solver_user_get_invalid_state_error_into_string = asm["_freecell_solver_user_get_invalid_state_error_into_string"]; asm["_freecell_solver_user_get_invalid_state_error_into_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_invalid_state_error_into_string.apply(null, arguments);
};

var real__freecell_solver_user_get_invalid_state_error_string = asm["_freecell_solver_user_get_invalid_state_error_string"]; asm["_freecell_solver_user_get_invalid_state_error_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_invalid_state_error_string.apply(null, arguments);
};

var real__freecell_solver_user_get_last_error_string = asm["_freecell_solver_user_get_last_error_string"]; asm["_freecell_solver_user_get_last_error_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_last_error_string.apply(null, arguments);
};

var real__freecell_solver_user_get_lib_version = asm["_freecell_solver_user_get_lib_version"]; asm["_freecell_solver_user_get_lib_version"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_lib_version.apply(null, arguments);
};

var real__freecell_solver_user_get_limit_iterations = asm["_freecell_solver_user_get_limit_iterations"]; asm["_freecell_solver_user_get_limit_iterations"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_limit_iterations.apply(null, arguments);
};

var real__freecell_solver_user_get_max_num_decks = asm["_freecell_solver_user_get_max_num_decks"]; asm["_freecell_solver_user_get_max_num_decks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_max_num_decks.apply(null, arguments);
};

var real__freecell_solver_user_get_max_num_freecells = asm["_freecell_solver_user_get_max_num_freecells"]; asm["_freecell_solver_user_get_max_num_freecells"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_max_num_freecells.apply(null, arguments);
};

var real__freecell_solver_user_get_max_num_stacks = asm["_freecell_solver_user_get_max_num_stacks"]; asm["_freecell_solver_user_get_max_num_stacks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_max_num_stacks.apply(null, arguments);
};

var real__freecell_solver_user_get_moves_left = asm["_freecell_solver_user_get_moves_left"]; asm["_freecell_solver_user_get_moves_left"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_moves_left.apply(null, arguments);
};

var real__freecell_solver_user_get_moves_sequence = asm["_freecell_solver_user_get_moves_sequence"]; asm["_freecell_solver_user_get_moves_sequence"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_moves_sequence.apply(null, arguments);
};

var real__freecell_solver_user_get_next_move = asm["_freecell_solver_user_get_next_move"]; asm["_freecell_solver_user_get_next_move"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_next_move.apply(null, arguments);
};

var real__freecell_solver_user_get_num_freecells = asm["_freecell_solver_user_get_num_freecells"]; asm["_freecell_solver_user_get_num_freecells"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_freecells.apply(null, arguments);
};

var real__freecell_solver_user_get_num_soft_threads_in_instance = asm["_freecell_solver_user_get_num_soft_threads_in_instance"]; asm["_freecell_solver_user_get_num_soft_threads_in_instance"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_soft_threads_in_instance.apply(null, arguments);
};

var real__freecell_solver_user_get_num_stacks = asm["_freecell_solver_user_get_num_stacks"]; asm["_freecell_solver_user_get_num_stacks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_stacks.apply(null, arguments);
};

var real__freecell_solver_user_get_num_states_in_collection = asm["_freecell_solver_user_get_num_states_in_collection"]; asm["_freecell_solver_user_get_num_states_in_collection"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_states_in_collection.apply(null, arguments);
};

var real__freecell_solver_user_get_num_states_in_collection_long = asm["_freecell_solver_user_get_num_states_in_collection_long"]; asm["_freecell_solver_user_get_num_states_in_collection_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_states_in_collection_long.apply(null, arguments);
};

var real__freecell_solver_user_get_num_times = asm["_freecell_solver_user_get_num_times"]; asm["_freecell_solver_user_get_num_times"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_times.apply(null, arguments);
};

var real__freecell_solver_user_get_num_times_long = asm["_freecell_solver_user_get_num_times_long"]; asm["_freecell_solver_user_get_num_times_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_get_num_times_long.apply(null, arguments);
};

var real__freecell_solver_user_iter_state_as_string = asm["_freecell_solver_user_iter_state_as_string"]; asm["_freecell_solver_user_iter_state_as_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_iter_state_as_string.apply(null, arguments);
};

var real__freecell_solver_user_iter_state_stringify = asm["_freecell_solver_user_iter_state_stringify"]; asm["_freecell_solver_user_iter_state_stringify"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_iter_state_stringify.apply(null, arguments);
};

var real__freecell_solver_user_limit_current_instance_iterations = asm["_freecell_solver_user_limit_current_instance_iterations"]; asm["_freecell_solver_user_limit_current_instance_iterations"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_current_instance_iterations.apply(null, arguments);
};

var real__freecell_solver_user_limit_depth = asm["_freecell_solver_user_limit_depth"]; asm["_freecell_solver_user_limit_depth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_depth.apply(null, arguments);
};

var real__freecell_solver_user_limit_iterations = asm["_freecell_solver_user_limit_iterations"]; asm["_freecell_solver_user_limit_iterations"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_iterations.apply(null, arguments);
};

var real__freecell_solver_user_limit_iterations_long = asm["_freecell_solver_user_limit_iterations_long"]; asm["_freecell_solver_user_limit_iterations_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_iterations_long.apply(null, arguments);
};

var real__freecell_solver_user_limit_num_states_in_collection = asm["_freecell_solver_user_limit_num_states_in_collection"]; asm["_freecell_solver_user_limit_num_states_in_collection"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_num_states_in_collection.apply(null, arguments);
};

var real__freecell_solver_user_limit_num_states_in_collection_long = asm["_freecell_solver_user_limit_num_states_in_collection_long"]; asm["_freecell_solver_user_limit_num_states_in_collection_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_limit_num_states_in_collection_long.apply(null, arguments);
};

var real__freecell_solver_user_move_to_string = asm["_freecell_solver_user_move_to_string"]; asm["_freecell_solver_user_move_to_string"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_move_to_string.apply(null, arguments);
};

var real__freecell_solver_user_move_to_string_w_state = asm["_freecell_solver_user_move_to_string_w_state"]; asm["_freecell_solver_user_move_to_string_w_state"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_move_to_string_w_state.apply(null, arguments);
};

var real__freecell_solver_user_next_flare = asm["_freecell_solver_user_next_flare"]; asm["_freecell_solver_user_next_flare"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_next_flare.apply(null, arguments);
};

var real__freecell_solver_user_next_hard_thread = asm["_freecell_solver_user_next_hard_thread"]; asm["_freecell_solver_user_next_hard_thread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_next_hard_thread.apply(null, arguments);
};

var real__freecell_solver_user_next_instance = asm["_freecell_solver_user_next_instance"]; asm["_freecell_solver_user_next_instance"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_next_instance.apply(null, arguments);
};

var real__freecell_solver_user_next_soft_thread = asm["_freecell_solver_user_next_soft_thread"]; asm["_freecell_solver_user_next_soft_thread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_next_soft_thread.apply(null, arguments);
};

var real__freecell_solver_user_recycle = asm["_freecell_solver_user_recycle"]; asm["_freecell_solver_user_recycle"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_recycle.apply(null, arguments);
};

var real__freecell_solver_user_reset = asm["_freecell_solver_user_reset"]; asm["_freecell_solver_user_reset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_reset.apply(null, arguments);
};

var real__freecell_solver_user_resume_solution = asm["_freecell_solver_user_resume_solution"]; asm["_freecell_solver_user_resume_solution"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_resume_solution.apply(null, arguments);
};

var real__freecell_solver_user_set_a_star_weight = asm["_freecell_solver_user_set_a_star_weight"]; asm["_freecell_solver_user_set_a_star_weight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_a_star_weight.apply(null, arguments);
};

var real__freecell_solver_user_set_calc_real_depth = asm["_freecell_solver_user_set_calc_real_depth"]; asm["_freecell_solver_user_set_calc_real_depth"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_calc_real_depth.apply(null, arguments);
};

var real__freecell_solver_user_set_depth_tests_order = asm["_freecell_solver_user_set_depth_tests_order"]; asm["_freecell_solver_user_set_depth_tests_order"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_depth_tests_order.apply(null, arguments);
};

var real__freecell_solver_user_set_empty_stacks_filled_by = asm["_freecell_solver_user_set_empty_stacks_filled_by"]; asm["_freecell_solver_user_set_empty_stacks_filled_by"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_empty_stacks_filled_by.apply(null, arguments);
};

var real__freecell_solver_user_set_flare_name = asm["_freecell_solver_user_set_flare_name"]; asm["_freecell_solver_user_set_flare_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_flare_name.apply(null, arguments);
};

var real__freecell_solver_user_set_flares_choice = asm["_freecell_solver_user_set_flares_choice"]; asm["_freecell_solver_user_set_flares_choice"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_flares_choice.apply(null, arguments);
};

var real__freecell_solver_user_set_flares_iters_factor = asm["_freecell_solver_user_set_flares_iters_factor"]; asm["_freecell_solver_user_set_flares_iters_factor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_flares_iters_factor.apply(null, arguments);
};

var real__freecell_solver_user_set_flares_plan = asm["_freecell_solver_user_set_flares_plan"]; asm["_freecell_solver_user_set_flares_plan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_flares_plan.apply(null, arguments);
};

var real__freecell_solver_user_set_game = asm["_freecell_solver_user_set_game"]; asm["_freecell_solver_user_set_game"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_game.apply(null, arguments);
};

var real__freecell_solver_user_set_hard_thread_prelude = asm["_freecell_solver_user_set_hard_thread_prelude"]; asm["_freecell_solver_user_set_hard_thread_prelude"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_hard_thread_prelude.apply(null, arguments);
};

var real__freecell_solver_user_set_iter_handler = asm["_freecell_solver_user_set_iter_handler"]; asm["_freecell_solver_user_set_iter_handler"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_iter_handler.apply(null, arguments);
};

var real__freecell_solver_user_set_iter_handler_long = asm["_freecell_solver_user_set_iter_handler_long"]; asm["_freecell_solver_user_set_iter_handler_long"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_iter_handler_long.apply(null, arguments);
};

var real__freecell_solver_user_set_num_decks = asm["_freecell_solver_user_set_num_decks"]; asm["_freecell_solver_user_set_num_decks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_num_decks.apply(null, arguments);
};

var real__freecell_solver_user_set_num_freecells = asm["_freecell_solver_user_set_num_freecells"]; asm["_freecell_solver_user_set_num_freecells"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_num_freecells.apply(null, arguments);
};

var real__freecell_solver_user_set_num_stacks = asm["_freecell_solver_user_set_num_stacks"]; asm["_freecell_solver_user_set_num_stacks"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_num_stacks.apply(null, arguments);
};

var real__freecell_solver_user_set_optimization_scan_tests_order = asm["_freecell_solver_user_set_optimization_scan_tests_order"]; asm["_freecell_solver_user_set_optimization_scan_tests_order"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_optimization_scan_tests_order.apply(null, arguments);
};

var real__freecell_solver_user_set_patsolve_x_param = asm["_freecell_solver_user_set_patsolve_x_param"]; asm["_freecell_solver_user_set_patsolve_x_param"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_patsolve_x_param.apply(null, arguments);
};

var real__freecell_solver_user_set_patsolve_y_param = asm["_freecell_solver_user_set_patsolve_y_param"]; asm["_freecell_solver_user_set_patsolve_y_param"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_patsolve_y_param.apply(null, arguments);
};

var real__freecell_solver_user_set_pruning = asm["_freecell_solver_user_set_pruning"]; asm["_freecell_solver_user_set_pruning"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_pruning.apply(null, arguments);
};

var real__freecell_solver_user_set_random_seed = asm["_freecell_solver_user_set_random_seed"]; asm["_freecell_solver_user_set_random_seed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_random_seed.apply(null, arguments);
};

var real__freecell_solver_user_set_reparent_states = asm["_freecell_solver_user_set_reparent_states"]; asm["_freecell_solver_user_set_reparent_states"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_reparent_states.apply(null, arguments);
};

var real__freecell_solver_user_set_scans_synergy = asm["_freecell_solver_user_set_scans_synergy"]; asm["_freecell_solver_user_set_scans_synergy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_scans_synergy.apply(null, arguments);
};

var real__freecell_solver_user_set_sequence_move = asm["_freecell_solver_user_set_sequence_move"]; asm["_freecell_solver_user_set_sequence_move"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_sequence_move.apply(null, arguments);
};

var real__freecell_solver_user_set_sequences_are_built_by_type = asm["_freecell_solver_user_set_sequences_are_built_by_type"]; asm["_freecell_solver_user_set_sequences_are_built_by_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_sequences_are_built_by_type.apply(null, arguments);
};

var real__freecell_solver_user_set_soft_thread_name = asm["_freecell_solver_user_set_soft_thread_name"]; asm["_freecell_solver_user_set_soft_thread_name"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_soft_thread_name.apply(null, arguments);
};

var real__freecell_solver_user_set_soft_thread_step = asm["_freecell_solver_user_set_soft_thread_step"]; asm["_freecell_solver_user_set_soft_thread_step"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_soft_thread_step.apply(null, arguments);
};

var real__freecell_solver_user_set_solution_optimization = asm["_freecell_solver_user_set_solution_optimization"]; asm["_freecell_solver_user_set_solution_optimization"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_solution_optimization.apply(null, arguments);
};

var real__freecell_solver_user_set_solving_method = asm["_freecell_solver_user_set_solving_method"]; asm["_freecell_solver_user_set_solving_method"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_solving_method.apply(null, arguments);
};

var real__freecell_solver_user_set_tests_order = asm["_freecell_solver_user_set_tests_order"]; asm["_freecell_solver_user_set_tests_order"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_set_tests_order.apply(null, arguments);
};

var real__freecell_solver_user_solve_board = asm["_freecell_solver_user_solve_board"]; asm["_freecell_solver_user_solve_board"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_solve_board.apply(null, arguments);
};

var real__freecell_solver_user_stringify_move_ptr = asm["_freecell_solver_user_stringify_move_ptr"]; asm["_freecell_solver_user_stringify_move_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_stringify_move_ptr.apply(null, arguments);
};

var real__freecell_solver_user_stringify_move_w_state = asm["_freecell_solver_user_stringify_move_w_state"]; asm["_freecell_solver_user_stringify_move_w_state"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freecell_solver_user_stringify_move_w_state.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = asm["___emscripten_environ_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_environ = Module["__get_environ"] = asm["__get_environ"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fc_solve__hll_ms_rand__get_singleton = Module["_fc_solve__hll_ms_rand__get_singleton"] = asm["_fc_solve__hll_ms_rand__get_singleton"];
var _fc_solve__hll_ms_rand__init = Module["_fc_solve__hll_ms_rand__init"] = asm["_fc_solve__hll_ms_rand__init"];
var _fc_solve__hll_ms_rand__mod_rand = Module["_fc_solve__hll_ms_rand__mod_rand"] = asm["_fc_solve__hll_ms_rand__mod_rand"];
var _fc_solve_find_deal_in_range = Module["_fc_solve_find_deal_in_range"] = asm["_fc_solve_find_deal_in_range"];
var _fc_solve_moves_processed_gen = Module["_fc_solve_moves_processed_gen"] = asm["_fc_solve_moves_processed_gen"];
var _fc_solve_pats__do_it = Module["_fc_solve_pats__do_it"] = asm["_fc_solve_pats__do_it"];
var _fc_solve_user__find_deal__alloc = Module["_fc_solve_user__find_deal__alloc"] = asm["_fc_solve_user__find_deal__alloc"];
var _fc_solve_user__find_deal__fill = Module["_fc_solve_user__find_deal__fill"] = asm["_fc_solve_user__find_deal__fill"];
var _fc_solve_user__find_deal__free = Module["_fc_solve_user__find_deal__free"] = asm["_fc_solve_user__find_deal__free"];
var _fc_solve_user__find_deal__run = Module["_fc_solve_user__find_deal__run"] = asm["_fc_solve_user__find_deal__run"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _freecell_solver_set_stored_states_trimming_limit = Module["_freecell_solver_set_stored_states_trimming_limit"] = asm["_freecell_solver_set_stored_states_trimming_limit"];
var _freecell_solver_user_alloc = Module["_freecell_solver_user_alloc"] = asm["_freecell_solver_user_alloc"];
var _freecell_solver_user_apply_preset = Module["_freecell_solver_user_apply_preset"] = asm["_freecell_solver_user_apply_preset"];
var _freecell_solver_user_cmd_line_parse_args = Module["_freecell_solver_user_cmd_line_parse_args"] = asm["_freecell_solver_user_cmd_line_parse_args"];
var _freecell_solver_user_cmd_line_parse_args_with_file_nesting_count = Module["_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count"] = asm["_freecell_solver_user_cmd_line_parse_args_with_file_nesting_count"];
var _freecell_solver_user_cmd_line_read_cmd_line_preset = Module["_freecell_solver_user_cmd_line_read_cmd_line_preset"] = asm["_freecell_solver_user_cmd_line_read_cmd_line_preset"];
var _freecell_solver_user_current_state_as_string = Module["_freecell_solver_user_current_state_as_string"] = asm["_freecell_solver_user_current_state_as_string"];
var _freecell_solver_user_current_state_stringify = Module["_freecell_solver_user_current_state_stringify"] = asm["_freecell_solver_user_current_state_stringify"];
var _freecell_solver_user_free = Module["_freecell_solver_user_free"] = asm["_freecell_solver_user_free"];
var _freecell_solver_user_get_current_depth = Module["_freecell_solver_user_get_current_depth"] = asm["_freecell_solver_user_get_current_depth"];
var _freecell_solver_user_get_current_soft_thread_name = Module["_freecell_solver_user_get_current_soft_thread_name"] = asm["_freecell_solver_user_get_current_soft_thread_name"];
var _freecell_solver_user_get_invalid_state_error_into_string = Module["_freecell_solver_user_get_invalid_state_error_into_string"] = asm["_freecell_solver_user_get_invalid_state_error_into_string"];
var _freecell_solver_user_get_invalid_state_error_string = Module["_freecell_solver_user_get_invalid_state_error_string"] = asm["_freecell_solver_user_get_invalid_state_error_string"];
var _freecell_solver_user_get_last_error_string = Module["_freecell_solver_user_get_last_error_string"] = asm["_freecell_solver_user_get_last_error_string"];
var _freecell_solver_user_get_lib_version = Module["_freecell_solver_user_get_lib_version"] = asm["_freecell_solver_user_get_lib_version"];
var _freecell_solver_user_get_limit_iterations = Module["_freecell_solver_user_get_limit_iterations"] = asm["_freecell_solver_user_get_limit_iterations"];
var _freecell_solver_user_get_max_num_decks = Module["_freecell_solver_user_get_max_num_decks"] = asm["_freecell_solver_user_get_max_num_decks"];
var _freecell_solver_user_get_max_num_freecells = Module["_freecell_solver_user_get_max_num_freecells"] = asm["_freecell_solver_user_get_max_num_freecells"];
var _freecell_solver_user_get_max_num_stacks = Module["_freecell_solver_user_get_max_num_stacks"] = asm["_freecell_solver_user_get_max_num_stacks"];
var _freecell_solver_user_get_moves_left = Module["_freecell_solver_user_get_moves_left"] = asm["_freecell_solver_user_get_moves_left"];
var _freecell_solver_user_get_moves_sequence = Module["_freecell_solver_user_get_moves_sequence"] = asm["_freecell_solver_user_get_moves_sequence"];
var _freecell_solver_user_get_next_move = Module["_freecell_solver_user_get_next_move"] = asm["_freecell_solver_user_get_next_move"];
var _freecell_solver_user_get_num_freecells = Module["_freecell_solver_user_get_num_freecells"] = asm["_freecell_solver_user_get_num_freecells"];
var _freecell_solver_user_get_num_soft_threads_in_instance = Module["_freecell_solver_user_get_num_soft_threads_in_instance"] = asm["_freecell_solver_user_get_num_soft_threads_in_instance"];
var _freecell_solver_user_get_num_stacks = Module["_freecell_solver_user_get_num_stacks"] = asm["_freecell_solver_user_get_num_stacks"];
var _freecell_solver_user_get_num_states_in_collection = Module["_freecell_solver_user_get_num_states_in_collection"] = asm["_freecell_solver_user_get_num_states_in_collection"];
var _freecell_solver_user_get_num_states_in_collection_long = Module["_freecell_solver_user_get_num_states_in_collection_long"] = asm["_freecell_solver_user_get_num_states_in_collection_long"];
var _freecell_solver_user_get_num_times = Module["_freecell_solver_user_get_num_times"] = asm["_freecell_solver_user_get_num_times"];
var _freecell_solver_user_get_num_times_long = Module["_freecell_solver_user_get_num_times_long"] = asm["_freecell_solver_user_get_num_times_long"];
var _freecell_solver_user_iter_state_as_string = Module["_freecell_solver_user_iter_state_as_string"] = asm["_freecell_solver_user_iter_state_as_string"];
var _freecell_solver_user_iter_state_stringify = Module["_freecell_solver_user_iter_state_stringify"] = asm["_freecell_solver_user_iter_state_stringify"];
var _freecell_solver_user_limit_current_instance_iterations = Module["_freecell_solver_user_limit_current_instance_iterations"] = asm["_freecell_solver_user_limit_current_instance_iterations"];
var _freecell_solver_user_limit_depth = Module["_freecell_solver_user_limit_depth"] = asm["_freecell_solver_user_limit_depth"];
var _freecell_solver_user_limit_iterations = Module["_freecell_solver_user_limit_iterations"] = asm["_freecell_solver_user_limit_iterations"];
var _freecell_solver_user_limit_iterations_long = Module["_freecell_solver_user_limit_iterations_long"] = asm["_freecell_solver_user_limit_iterations_long"];
var _freecell_solver_user_limit_num_states_in_collection = Module["_freecell_solver_user_limit_num_states_in_collection"] = asm["_freecell_solver_user_limit_num_states_in_collection"];
var _freecell_solver_user_limit_num_states_in_collection_long = Module["_freecell_solver_user_limit_num_states_in_collection_long"] = asm["_freecell_solver_user_limit_num_states_in_collection_long"];
var _freecell_solver_user_move_to_string = Module["_freecell_solver_user_move_to_string"] = asm["_freecell_solver_user_move_to_string"];
var _freecell_solver_user_move_to_string_w_state = Module["_freecell_solver_user_move_to_string_w_state"] = asm["_freecell_solver_user_move_to_string_w_state"];
var _freecell_solver_user_next_flare = Module["_freecell_solver_user_next_flare"] = asm["_freecell_solver_user_next_flare"];
var _freecell_solver_user_next_hard_thread = Module["_freecell_solver_user_next_hard_thread"] = asm["_freecell_solver_user_next_hard_thread"];
var _freecell_solver_user_next_instance = Module["_freecell_solver_user_next_instance"] = asm["_freecell_solver_user_next_instance"];
var _freecell_solver_user_next_soft_thread = Module["_freecell_solver_user_next_soft_thread"] = asm["_freecell_solver_user_next_soft_thread"];
var _freecell_solver_user_recycle = Module["_freecell_solver_user_recycle"] = asm["_freecell_solver_user_recycle"];
var _freecell_solver_user_reset = Module["_freecell_solver_user_reset"] = asm["_freecell_solver_user_reset"];
var _freecell_solver_user_resume_solution = Module["_freecell_solver_user_resume_solution"] = asm["_freecell_solver_user_resume_solution"];
var _freecell_solver_user_set_a_star_weight = Module["_freecell_solver_user_set_a_star_weight"] = asm["_freecell_solver_user_set_a_star_weight"];
var _freecell_solver_user_set_calc_real_depth = Module["_freecell_solver_user_set_calc_real_depth"] = asm["_freecell_solver_user_set_calc_real_depth"];
var _freecell_solver_user_set_depth_tests_order = Module["_freecell_solver_user_set_depth_tests_order"] = asm["_freecell_solver_user_set_depth_tests_order"];
var _freecell_solver_user_set_empty_stacks_filled_by = Module["_freecell_solver_user_set_empty_stacks_filled_by"] = asm["_freecell_solver_user_set_empty_stacks_filled_by"];
var _freecell_solver_user_set_flare_name = Module["_freecell_solver_user_set_flare_name"] = asm["_freecell_solver_user_set_flare_name"];
var _freecell_solver_user_set_flares_choice = Module["_freecell_solver_user_set_flares_choice"] = asm["_freecell_solver_user_set_flares_choice"];
var _freecell_solver_user_set_flares_iters_factor = Module["_freecell_solver_user_set_flares_iters_factor"] = asm["_freecell_solver_user_set_flares_iters_factor"];
var _freecell_solver_user_set_flares_plan = Module["_freecell_solver_user_set_flares_plan"] = asm["_freecell_solver_user_set_flares_plan"];
var _freecell_solver_user_set_game = Module["_freecell_solver_user_set_game"] = asm["_freecell_solver_user_set_game"];
var _freecell_solver_user_set_hard_thread_prelude = Module["_freecell_solver_user_set_hard_thread_prelude"] = asm["_freecell_solver_user_set_hard_thread_prelude"];
var _freecell_solver_user_set_iter_handler = Module["_freecell_solver_user_set_iter_handler"] = asm["_freecell_solver_user_set_iter_handler"];
var _freecell_solver_user_set_iter_handler_long = Module["_freecell_solver_user_set_iter_handler_long"] = asm["_freecell_solver_user_set_iter_handler_long"];
var _freecell_solver_user_set_num_decks = Module["_freecell_solver_user_set_num_decks"] = asm["_freecell_solver_user_set_num_decks"];
var _freecell_solver_user_set_num_freecells = Module["_freecell_solver_user_set_num_freecells"] = asm["_freecell_solver_user_set_num_freecells"];
var _freecell_solver_user_set_num_stacks = Module["_freecell_solver_user_set_num_stacks"] = asm["_freecell_solver_user_set_num_stacks"];
var _freecell_solver_user_set_optimization_scan_tests_order = Module["_freecell_solver_user_set_optimization_scan_tests_order"] = asm["_freecell_solver_user_set_optimization_scan_tests_order"];
var _freecell_solver_user_set_patsolve_x_param = Module["_freecell_solver_user_set_patsolve_x_param"] = asm["_freecell_solver_user_set_patsolve_x_param"];
var _freecell_solver_user_set_patsolve_y_param = Module["_freecell_solver_user_set_patsolve_y_param"] = asm["_freecell_solver_user_set_patsolve_y_param"];
var _freecell_solver_user_set_pruning = Module["_freecell_solver_user_set_pruning"] = asm["_freecell_solver_user_set_pruning"];
var _freecell_solver_user_set_random_seed = Module["_freecell_solver_user_set_random_seed"] = asm["_freecell_solver_user_set_random_seed"];
var _freecell_solver_user_set_reparent_states = Module["_freecell_solver_user_set_reparent_states"] = asm["_freecell_solver_user_set_reparent_states"];
var _freecell_solver_user_set_scans_synergy = Module["_freecell_solver_user_set_scans_synergy"] = asm["_freecell_solver_user_set_scans_synergy"];
var _freecell_solver_user_set_sequence_move = Module["_freecell_solver_user_set_sequence_move"] = asm["_freecell_solver_user_set_sequence_move"];
var _freecell_solver_user_set_sequences_are_built_by_type = Module["_freecell_solver_user_set_sequences_are_built_by_type"] = asm["_freecell_solver_user_set_sequences_are_built_by_type"];
var _freecell_solver_user_set_soft_thread_name = Module["_freecell_solver_user_set_soft_thread_name"] = asm["_freecell_solver_user_set_soft_thread_name"];
var _freecell_solver_user_set_soft_thread_step = Module["_freecell_solver_user_set_soft_thread_step"] = asm["_freecell_solver_user_set_soft_thread_step"];
var _freecell_solver_user_set_solution_optimization = Module["_freecell_solver_user_set_solution_optimization"] = asm["_freecell_solver_user_set_solution_optimization"];
var _freecell_solver_user_set_solving_method = Module["_freecell_solver_user_set_solving_method"] = asm["_freecell_solver_user_set_solving_method"];
var _freecell_solver_user_set_tests_order = Module["_freecell_solver_user_set_tests_order"] = asm["_freecell_solver_user_set_tests_order"];
var _freecell_solver_user_solve_board = Module["_freecell_solver_user_solve_board"] = asm["_freecell_solver_user_solve_board"];
var _freecell_solver_user_stringify_move_ptr = Module["_freecell_solver_user_stringify_move_ptr"] = asm["_freecell_solver_user_stringify_move_ptr"];
var _freecell_solver_user_stringify_move_w_state = Module["_freecell_solver_user_stringify_move_w_state"] = asm["_freecell_solver_user_stringify_move_w_state"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

Module["intArrayFromString"] = intArrayFromString;
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["cwrap"] = cwrap;
Module["setValue"] = setValue;
Module["getValue"] = getValue;
Module["allocate"] = allocate;
Module["getMemory"] = getMemory;
Module["Pointer_stringify"] = Pointer_stringify;
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS"] = FS;
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
Module["ALLOC_STACK"] = ALLOC_STACK;
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (Module['calledRun']) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}





  return Module;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = Module;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return Module; });
    else if (typeof exports === 'object')
      exports["Module"] = Module;
            return Module;
    };
});
